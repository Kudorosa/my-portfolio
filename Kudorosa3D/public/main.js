/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,r={"./app/animations/Highlight.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Animation.js");class i extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Label.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Animation.js");class i extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Paragraph.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Animation.js");class i extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Title.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Animation.js");class i extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/classes/Animation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Component.js");class n extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.createObserver(),this.animateOut()}createObserver(){this.observer=new window.IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?this.animateIn():this.animateOut()}))})),this.observer.observe(this.element)}animateIn(){}animateOut(){}onResize(){}}},"./app/classes/AsyncLoad.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Component.js");class n extends s.default{constructor({element:e}){super({element:e}),this.createObserver()}createObserver(){this.observer=new window.IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=e=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Button.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Component.js");class i extends n.default{constructor({element:e}){super({element:e}),this.path=e.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.timeline=s.default.timeline({paused:!0}),this.timeline.fromTo(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`},{strokeDashoffset:0,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.timeline.play()}onMouseLeave(){this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/classes/Colors.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ColorsManager:()=>n});var s=r("./node_modules/gsap/index.js");const n=new class{change({backgroundColor:e,color:t}){s.default.to(document.documentElement,{background:e,color:t,duration:1.5})}}},"./app/classes/Component.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var s=r("./node_modules/events/events.js"),n=r.n(s),i=r("./node_modules/lodash/each.js"),o=r.n(i);class a extends(n()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},o()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Detection.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=new class{isPhone(){return this.isPhoneChecked&&(this.isPhoneChecked=!0,this.PhoneCheck=document.documentElement.classList.contains("phone")),this.PhoneCheck}isDesktop(){return this.isDesktopChecked&&(this.isDesktopChecked=!0,this.DesktopCheck=document.documentElement.classList.contains("desktop")),this.DesktopCheck}isTablet(){return this.isTabletChecked&&(this.isTabletChecked=!0,this.TabletCheck=document.documentElement.classList.contains("tablet")),this.TabletCheck}}},"./app/classes/Page.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>g});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/prefix/index.js"),i=r.n(n),o=r("./node_modules/lodash/each.js"),a=r.n(o),l=r("./node_modules/lodash/map.js"),u=r.n(l),c=r("./app/animations/Title.js"),h=r("./app/animations/Paragraph.js"),d=r("./app/animations/Label.js"),p=r("./app/animations/Highlight.js"),m=r("./app/classes/AsyncLoad.js"),f=r("./app/classes/Colors.js");class g{constructor({element:e,elements:t,id:r}){this.selector=e,this.selectorChildren={...t,animationsHighlights:'[data-animation="highlight"]',animationsTitles:'[data-animation="title"]',animationsLabels:'[data-animation="label"]',animationsParagraphs:'[data-animation="paragraph"]',preloaders:"[data-src]"},this.id=r,this.transformPrefix=i()("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},a()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))})),this.createAnimations(),this.createPreloader()}createPreloader(){this.preloaders=u()(this.elements.preloaders,(e=>new m.default({element:e})))}createAnimations(){this.animations=[],this.animationsTitles=u()(this.elements.animationsTitles,(e=>new c.default({element:e}))),this.animations.push(...this.animationsTitles),this.animationsParagraphs=u()(this.elements.animationsParagraphs,(e=>new h.default({element:e}))),this.animations.push(...this.animationsParagraphs),this.animationsLabels=u()(this.elements.animationsLabels,(e=>new d.default({element:e}))),this.animations.push(...this.animationsLabels),this.animationsHighlights=u()(this.elements.animationsHighlights,(e=>new p.default({element:e}))),this.animations.push(...this.animationsHighlights)}show(e){return new Promise((t=>{f.ColorsManager.change({backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),e?this.animationIn=e:(this.animationIn=s.default.timeline(),this.animationIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1})),this.animationIn.call((e=>{this.addEventListeners(),t()}))}))}hide(){return new Promise((e=>{this.destroy(),this.animationOut=s.default.timeline(),this.animationOut.to(this.element,{autoAlpha:0,onComplete:e})}))}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight),a()(this.animations,(e=>e.onResize()))}onWheel({pixelY:e}){this.scroll.target+=e}onTouchStart(e){this.scroll.startY=e.touches?e.touches[0].clientY:e.clientY,this.scroll.touchDelta=0}onTouchMove(e){const t=e.touches?e.touches[0].clientY:e.clientY;this.scroll.touchDelta=this.scroll.startY-t,this.scroll.target+=this.scroll.touchDelta,this.scroll.startY=t}onTouchEnd(){this.scroll.touchDelta=0}update(){this.scroll.target=s.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=s.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){window.addEventListener("touchstart",this.onTouchStart.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchEnd.bind(this))}removeEventListeners(){window.removeEventListener("touchstart",this.onTouchStart.bind(this)),window.removeEventListener("touchmove",this.onTouchMove.bind(this)),window.removeEventListener("touchend",this.onTouchEnd.bind(this))}destroy(){this.removeEventListeners()}}},"./app/components/Canvas/About/Gallery.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/ogl/src/core/Transform.js"),i=r("./node_modules/lodash/map.js"),o=r.n(i),a=r("./app/components/Canvas/About/Media.js");class l{constructor({element:e,geometry:t,index:r,gl:s,scene:i,sizes:o}){this.element=e,this.element_wrapper=e.querySelector(".about_gallery_wrapper"),this.geometry=t,this.index=r,this.gl=s,this.scene=i,this.sizes=o,this.group=new n.Transform,this.scroll={start:0,current:0,target:0,lerp:.1,veloctiy:1},this.createMedias(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene)}createMedias(){this.mediasElements=this.element.querySelectorAll(".about_gallery_media"),this.medias=o()(this.mediasElements,((e,t)=>new a.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){o()(this.medias,(e=>e.show()))}hide(){o()(this.medias,(e=>e.hide()))}onResize(e){this.bounds=this.element_wrapper.getBoundingClientRect(),this.sizes=e.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,o()(this.medias,(t=>t.onResize(e,this.scroll.current)))}onTouchDown({x:e,y:t}){this.scroll.start=this.scroll.current}onTouchMove({x:e,y:t}){const r=e.start-e.end;this.scroll.target=this.scroll.start-r}onTouchUp({x:e,y:t}){}update(e){const t=.1*(e.current-e.target),r=e.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.veloctiy=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.veloctiy=1),this.scroll.target-=this.scroll.veloctiy,this.scroll.target+=t,this.scroll.current=s.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),o()(this.medias,((e,t)=>{const r=e.mesh.scale.x/2+.25;if("left"===this.direction){e.mesh.position.x+r<-this.sizes.width/2&&(e.extra+=this.width)}else if("right"===this.direction){e.mesh.position.x-r>this.sizes.width/2&&(e.extra-=this.width)}e.update(this.scroll.current)})),this.group.position.y=r*this.sizes.height}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var s=r("./node_modules/ogl/src/core/Program.js"),n=r("./node_modules/ogl/src/core/Mesh.js"),i=r("./node_modules/gsap/index.js"),o=r("./app/classes/Detection.js"),a=r("./app/shaders/plane-vertex.glsl"),l=r("./app/shaders/plane-fragment.glsl");class u{constructor({element:e,geometry:t,gl:r,index:s,scene:n,sizes:i}){this.element=e,this.gl=r,this.geometry=t,this.scene=n,this.index=s,this.sizes=i,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const e=this.element.querySelector("img");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new s.Program(this.gl,{fragment:l.default,vertex:a.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){i.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){i.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra=0,this.createBounds(e),this.updateX(t),this.updateY(0)}updateRotation(){this.mesh.rotation.z=i.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight;const t=o.default.isPhone()?10:40;this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.075)*t-t}update(e){this.updateRotation(),this.updateScale(),this.updateX(e),this.updateY(0)}}},"./app/components/Canvas/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/lodash/map.js"),o=r.n(i),a=r("./app/components/Canvas/About/Gallery.js");const l=class{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.sizes=r,this.group=new s.Transform,this.createGeometry(),this.createGalleries(),this.onResize({sizes:this.sizes}),this.group.setParent(t),this.show()}createGeometry(){this.geometry=new n.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about_gallery"),this.galleries=o()(this.galleriesElements,((e,t)=>new a.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){o()(this.galleries,(e=>e.show()))}hide(){o()(this.galleries,(e=>e.hide()))}onResize(e){o()(this.galleries,(t=>t.onResize(e)))}onTouchDown(e){o()(this.galleries,(t=>t.onTouchDown(e)))}onTouchMove(e){o()(this.galleries,(t=>t.onTouchMove(e)))}onTouchUp(e){o()(this.galleries,(t=>t.onTouchUp(e)))}onWheel({pixelX:e,pixelY:t}){}update(e){o()(this.galleries,(t=>t.update(e)))}destroy(){o()(this.galleries,(e=>e.destroy()))}}},"./app/components/Canvas/Collections/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./app/shaders/collections-fragment.glsl"),a=r("./app/shaders/collections-vertex.glsl");const l=class{constructor({element:e,geometry:t,gl:r,index:s,scene:n,sizes:i}){this.element=e,this.geometry=t,this.gl=r,this.index=s,this.scene=n,this.sizes=i,this.extra={x:0,y:0},this.opacity={current:0,target:0,lerp:.1,multiplier:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const e=this.element.querySelector(".collections_gallery_media_image");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{fragment:o.default,vertex:a.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX()}show(){s.default.fromTo(this.opacity,{multiplier:0},{multiplier:1})}hide(){s.default.to(this.opacity,{multiplier:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}update(e,t){this.updateX(e);this.mesh.rotation.z=-.02*Math.PI*Math.sin(this.index/1),this.mesh.position.y=.1*Math.sin(this.index/1),this.opacity.target=t===this.index?1:.4,this.opacity.current=s.default.utils.interpolate(this.opacity.current,this.opacity.target,this.opacity.lerp),this.program.uniforms.uAlpha.value=this.opacity.multiplier,this.program.uniforms.uAlpha.value=this.opacity.multiplier*this.opacity.current}}},"./app/components/Canvas/Collections/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>h});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/gsap/index.js"),o=r("./node_modules/prefix/index.js"),a=r.n(o),l=r("./node_modules/lodash/map.js"),u=r.n(l),c=r("./app/components/Canvas/Collections/Media.js");const h=class{constructor({gl:e,scene:t,sizes:r,transition:n}){this.id="collections",this.gl=e,this.scene=t,this.sizes=r,this.transition=n,this.transformPrefix=a()("transform"),this.group=new s.Transform,this.galleryElement=document.querySelector(".collections_gallery"),this.galleryElementWrapper=document.querySelector(".collections_gallery_wrapper"),this.titlesElement=document.querySelector(".collections_titles"),this.collectionsElements=document.querySelectorAll(".collections_article"),this.collectionsElementsActive="collections_article--active",this.mediasElements=document.querySelectorAll(".collections_gallery_media"),this.scroll={current:0,start:0,target:0,lerp:.1,veloctiy:1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(t),this.show()}createGeometry(){this.geometry=new n.Plane(this.gl)}createGallery(){this.medias=u()(this.mediasElements,((e,t)=>new c.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}async show(){if(this.transition){const{src:e}=this.transition.mesh.program.uniforms.tMap.value.image,t=window.TEXTURES[e],r=this.medias.find((e=>e.texture===t)),s=-r.bounds.left-r.bounds.width/2+window.innerWidth/2;this.update(),this.transition.animate({position:{x:0,y:r.mesh.position.y,z:0},rotation:r.mesh.rotation,scale:r.mesh.scale},(e=>{r.opacity.multiplier=1,u()(this.medias,(e=>{r!==e&&e.show()})),this.scroll.current=this.scroll.target=this.scroll.start=this.scroll.last=s}))}else u()(this.medias,(e=>e.show()))}hide(){u()(this.medias,(e=>e.hide()))}onResize(e){this.sizes=e.sizes,this.bounds=this.galleryElementWrapper.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,u()(this.medias,(t=>t.onResize(e,this.scroll))),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:e,y:t}){this.scroll.last=this.scroll.current}onTouchMove({x:e,y:t}){const r=e.start-e.end;this.scroll.target=this.scroll.last-r}onTouchUp({x:e,y:t}){}onWheel({pixelY:e}){this.scroll.target+=e}onChange(e){this.index=e;const t=parseInt(this.mediasElements[this.index].getAttribute("data-index"));u()(this.collectionsElements,((e,r)=>{r===t?e.classList.add(this.collectionsElementsActive):e.classList.remove(this.collectionsElementsActive)})),this.titlesElement.style[this.transformPrefix]=`translateY(-${25*t}%) translate(-50%, -50%) rotate(-90deg)`}update(){this.scroll.target=i.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=i.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transformPrefix]=`translateX(${this.scroll.current}px)`,this.scroll.last<this.scroll.current?this.scroll.direction="right":this.scroll.last>this.scroll.current&&(this.scroll.direction="left"),this.scroll.last=this.scroll.current;const e=Math.floor(Math.abs((this.scroll.current-this.medias[0].bounds.width/2)/this.scroll.limit)*(this.medias.length-1));this.index!==e&&this.onChange(e),u()(this.medias,((e,t)=>{e.update(this.scroll.current,this.index),e.mesh.rotation.z=Math.abs(i.default.utils.mapRange(0,1,-.2,.2,t/(this.medias.length-1)))-.1}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/ogl/src/core/Program.js"),o=r("./node_modules/ogl/src/core/Mesh.js"),a=r("./app/shaders/plane-fragment.glsl"),l=r("./app/shaders/plane-vertex.glsl");const u=class{constructor({gl:e,scene:t,sizes:r,transition:s}){this.id="detail",this.element=document.querySelector(".detail_media_image"),this.gl=e,this.scene=t,this.sizes=r,this.transition=s,this.geometry=new n.Plane(this.gl),this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes}),this.show()}createTexture(){const e=this.element.getAttribute("data-src");this.texture=window.TEXTURES[e]}createProgram(){this.program=new i.Program(this.gl,{fragment:a.default,vertex:l.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new o.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.rotation.z=.01*Math.PI,this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){this.transition?this.transition.animate(this.mesh,(e=>{this.program.uniforms.uAlpha.value=1})):s.default.to(this.program.uniforms.uAlpha,{value:1})}hide(){s.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.createBounds(e),this.updateX(),this.updateY()}onTouchUp(){}onTouchMove(){}onTouchDown(){}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(){this.x=this.bounds.left/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width}updateY(){this.y=this.bounds.top/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height}update(){this.updateX()}destroy(){this.scene.removeChild(this.mesh)}}},"./app/components/Canvas/Home/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./app/shaders/home-fragment.glsl"),a=r("./app/shaders/home-vertex.glsl");const l=class{constructor({element:e,geometry:t,gl:r,index:s,scene:n,sizes:i}){this.element=e,this.geometry=t,this.gl=r,this.index=s,this.scene=n,this.sizes=i,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const e=this.element;this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{fragment:o.default,vertex:a.default,uniforms:{uAlpha:{value:0},uSpeed:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=s.default.utils.random(.03*-Math.PI,.03*Math.PI)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){s.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:.4})}hide(){s.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x),this.updateY(t&&t.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e,t){this.updateX(e.x),this.updateY(e.y),this.program.uniforms.uSpeed.value=t}}},"./app/components/Canvas/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/gsap/index.js"),o=r("./node_modules/lodash/map.js"),a=r.n(o),l=r("./app/components/Canvas/Home/Media.js");const u=class{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.scene=t,this.sizes=r,this.group=new s.Transform,this.galleryElement=document.querySelector(".home_gallery"),this.mediasElements=document.querySelectorAll(".home_gallery_media_image"),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0},this.speed={current:0,target:0,lerp:.1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(t),this.show()}createGeometry(){this.geometry=new n.Plane(this.gl,{heightSegments:20,widthSegments:20})}createGallery(){this.medias=a()(this.mediasElements,((e,t)=>new l.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){a()(this.medias,(e=>e.show()))}hide(){a()(this.medias,(e=>e.hide()))}onResize(e){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=e.sizes,this.gallerySizes={width:this.galleryBounds.width/window.innerWidth*this.sizes.width,height:this.galleryBounds.height/window.innerHeight*this.sizes.height},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,a()(this.medias,(t=>t.onResize(e,this.scroll)))}onTouchDown({x:e,y:t}){this.speed.target=1,this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:e,y:t}){const r=e.start-e.end,s=t.start-t.end;this.x.target=this.scrollCurrent.x-r,this.y.target=this.scrollCurrent.y-s}onTouchUp({x:e,y:t}){this.speed.target=0}onWheel({pixelX:e,pixelY:t}){this.x.target+=e,this.y.target+=t}update(){this.speed.current=i.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.x.current=i.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=i.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,a()(this.medias,((e,t)=>{const r=.6*this.sizes.width,s=e.mesh.scale.x/2;if("left"===this.x.direction){e.mesh.position.x+s<-r&&(e.extra.x+=this.gallerySizes.width,e.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){e.mesh.position.x-s>r&&(e.extra.x-=this.gallerySizes.width,e.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}const n=.6*this.sizes.height,o=e.mesh.scale.y/2;if("top"===this.y.direction){e.mesh.position.y+o<-n&&(e.extra.y+=this.gallerySizes.height,e.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("bottom"===this.y.direction){e.mesh.position.y-o>n&&(e.extra.y-=this.gallerySizes.height,e.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}e.update(this.scroll,this.speed.current)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Transition.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var s=r("./node_modules/gsap/index.js"),n=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/ogl/src/core/Program.js"),o=r("./node_modules/ogl/src/core/Mesh.js"),a=r("./app/shaders/plane-fragment.glsl"),l=r("./app/shaders/plane-vertex.glsl");const u=class{constructor({collections:e,gl:t,scene:r,sizes:s,url:i}){this.collections=e,this.gl=t,this.scene=r,this.sizes=s,this.url=i,this.geometry=new n.Plane(this.gl)}createProgram(e){this.program=new i.Program(this.gl,{fragment:a.default,vertex:l.default,uniforms:{uAlpha:{value:1},tMap:{value:e}}})}createMesh(e){this.mesh=new o.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=e.scale.x,this.mesh.scale.y=e.scale.y,this.mesh.scale.z=e.scale.z,this.mesh.position.x=e.position.x,this.mesh.position.y=e.position.y,this.mesh.position.z=e.position.z+.01,this.mesh.rotation.x=e.rotation.x,this.mesh.rotation.y=e.rotation.y,this.mesh.rotation.z=e.rotation.z,this.mesh.setParent(this.scene)}setElement(e){if("collections"===e.id){const{index:t,medias:r}=e,s=r[t];this.createProgram(s.texture),this.createMesh(s.mesh),this.transition="detail"}else this.createProgram(e.texture),this.createMesh(e.mesh),this.transition="collections"}animate(e,t){const r=s.default.timeline({onComplete:t});r.to(this.mesh.scale,{duration:1.5,ease:"expo.inOut",x:e.scale.x,y:e.scale.y,z:e.scale.z},0),r.to(this.mesh.position,{duration:1.5,ease:"expo.inOut",x:e.position.x,y:e.position.y,z:e.position.z},0),r.to(this.mesh.rotation,{duration:1.5,ease:"expo.inOut",x:e.rotation.x,y:e.rotation.y,z:e.rotation.z},0),r.call((e=>{this.scene.removeChild(this.mesh)}),null,"+=.15"),r.call((e=>{t()}))}}},"./app/components/Canvas/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>h});var s=r("./node_modules/ogl/src/core/Renderer.js"),n=r("./node_modules/ogl/src/core/Camera.js"),i=r("./node_modules/ogl/src/core/Transform.js"),o=r("./app/components/Canvas/About/index.js"),a=r("./app/components/Canvas/Collections/index.js"),l=r("./app/components/Canvas/Detail/index.js"),u=r("./app/components/Canvas/Home/index.js"),c=r("./app/components/Canvas/Transition.js");class h{constructor({template:e}){this.template=e,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize()}createRenderer(){this.renderer=new s.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new n.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createHome(){this.home=new u.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createAbout(){this.about=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null)}createCollections(){this.collections=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyCollections(){this.collections&&(this.collections.destroy(),this.collections=null)}createDetail(){this.detail=new l.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onChangeEnd(this.template)}onChangeStart(e,t){this.home&&this.home.hide(),this.collections&&this.collections.hide(),this.detail&&this.detail.hide(),this.about&&this.about.hide(),this.isFromCollectionsToDetail="collections"===this.template&&t.indexOf("detail")>-1,this.isFromDetailToCollections="detail"===this.template&&t.indexOf("collections")>-1,(this.isFromCollectionsToDetail||this.isFromDetailToCollections)&&(this.transition=new c.default({gl:this.gl,scene:this.scene,sizes:this.sizes,url:t}),this.transition.setElement(this.collections||this.detail))}onChangeEnd(e){"home"===e?this.createHome():this.destroyHome(),"about"===e?this.createAbout():this.about&&this.destroyAbout(),"detail"===e?this.createDetail():this.detail&&this.destroyDetail(),"collections"===e?this.createCollections():this.collections&&this.destroyCollections(),this.template=e}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,r=t*this.camera.aspect;this.sizes={height:t,width:r};const s={sizes:this.sizes};this.about&&this.about.onResize(s),this.collections&&this.collections.onResize(s),this.detail&&this.detail.onResize(s),this.home&&this.home.onResize(s)}onTouchDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY;const t={x:this.x,y:this.y};this.about&&this.about.onTouchDown(t),this.collections&&this.collections.onTouchDown(t),this.detail&&this.detail.onTouchDown(t),this.home&&this.home.onTouchDown(t)}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,r=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=r;const s={x:this.x,y:this.y};this.about&&this.about.onTouchMove(s),this.collections&&this.collections.onTouchMove(s),this.detail&&this.detail.onTouchMove(s),this.home&&this.home.onTouchMove(s)}onTouchUp(e){this.isDown=!1;const t=e.changedTouches?e.changedTouches[0].clientX:e.clientX,r=e.changedTouches?e.changedTouches[0].clientY:e.clientY;this.x.end=t,this.y.end=r;const s={x:this.x,y:this.y};this.about&&this.about.onTouchUp(s),this.collections&&this.collections.onTouchUp(s),this.detail&&this.detail.onTouchUp(s),this.home&&this.home.onTouchUp(s)}onWheel(e){this.home&&this.home.onWheel(e),this.collections&&this.collections.onWheel(e)}update(e){this.about&&this.about.update(e),this.collections&&this.collections.update(),this.detail&&this.detail.update(),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Component.js"),i=r("./app/utils/colors.js");class o extends n.default{constructor({template:e}){super({element:".navigation",elements:{items:".navigation_list_item",links:".navigation_list_link"}}),this.onChange(e)}onChange(e){"about"===e?(s.default.to(this.element,{color:i.COLOR_BRIGHT_GRAY,duration:1.5}),s.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:0,duration:.75})):(s.default.to(this.element,{color:i.COLOR_QUARTER_SPANISH_WHITE,duration:1.5}),s.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75}))}}},"./app/components/Preloader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var s=r("./node_modules/ogl/src/core/Texture.js"),n=r("./node_modules/gsap/index.js"),i=r("./app/classes/Component.js"),o=r("./app/utils/text.js");class a extends i.default{constructor({canvas:e}){super({element:".preloader",elements:{title:".preloader_text",number:".preloader_number",numberText:".preloader_number_text"}}),this.canvas=e,window.TEXTURES={},(0,o.split)({element:this.elements.title,expression:"<br>"}),(0,o.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=this.elements.title.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){window.ASSETS.forEach((e=>{const t=new s.Texture(this.canvas.gl,{generateMipmaps:!1}),r=new window.Image;r.crossOrigin="anonymous",r.src=e,r.onload=e=>{t.image=r,this.onAssetLoaded()},window.TEXTURES[e]=t}))}onAssetLoaded(e){this.length+=1;const t=this.length/window.ASSETS.length;this.elements.numberText.innerHTML=`${Math.round(100*t)}%`,1===t&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.emit("completed"),this.animateOut=n.default.timeline({delay:1}),this.animateOut.to(this.elements.titleSpans,{duration:1.5,ease:"expo.out",stagger:.1,y:"150%"}),this.animateOut.to(this.elements.numberText,{duration:1.5,ease:"expo.out",stagger:.1,y:"100%"},"-=1.4"),this.animateOut.to(this.element,{autoAlpha:0,duration:1.5}),this.animateOut.call((e=>{this.destroy()}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/index.js":(e,t,r)=>{"use strict";r.r(t);var s=r("./node_modules/normalize-wheel/index.js"),n=r.n(s),i=r("./node_modules/lodash/each.js"),o=r.n(i),a=r("./app/components/Canvas/index.js"),l=r("./app/components/Navigation.js"),u=r("./app/components/Preloader.js"),c=r("./app/pages/About/index.js"),h=r("./app/pages/Collections/index.js"),d=r("./app/pages/Home/index.js"),p=r("./app/pages/Detail/index.js");new class{constructor(){this.createContent(),this.createCanvas(),this.createPreloader(),this.createNavigation(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.onResize(),this.update()}createNavigation(){this.navigation=new l.default({template:this.template})}createPreloader(){this.preloader=new u.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new a.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new c.default,collections:new h.default,home:new d.default,detail:new p.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.onResize(),this.canvas.onPreloaded(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!0})}async onChange({url:e,push:t=!0}){this.canvas.onChangeStart(this.template,e),await this.page.hide();const r=await window.fetch(e);if(200===r.status){const s=await r.text(),n=document.createElement("div");t&&window.history.pushState({},"",e),n.innerHTML=s;const i=n.querySelector(".content");this.template=i.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=i.innerHTML,this.canvas.onChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.error(`response status: ${r.status}`)}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((e=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onTouchDown(e){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(e)}onTouchMove(e){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(e)}onTouchUp(e){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(e)}onWheel(e){const t=n()(e);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(t),this.page&&this.page.onWheel&&this.page.onWheel(t)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");o()(e,(e=>{e.onclick=t=>{t.preventDefault();const{href:r}=e,s=window.location;e.getAttribute("disabled")||r==s||(e.setAttribute("disabled",!0),console.log(`HREF: ${r}   Current URL: ${s}`),this.onChange({url:r}).finally((()=>{setTimeout((()=>{e.removeAttribute("disabled")}),2e3)})))}}))}}},"./app/pages/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Page.js");class n extends s.default{constructor(){super({id:"about",element:".about",elements:{wrapper:".about_wrapper",navigation:document.querySelector(".navigation"),title:".about_title"}})}}},"./app/pages/Collections/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Page.js");class n extends s.default{constructor(){super({id:"collections",element:".collections"})}}},"./app/pages/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var s=r("./node_modules/gsap/index.js"),n=r("./app/classes/Button.js"),i=r("./app/classes/Page.js");class o extends i.default{constructor(){super({id:"detail",element:".detail",elements:{button:".detail_button"}})}create(){super.create(),this.link=new n.default({element:this.elements.button})}show(){const e=s.default.timeline({delay:1});e.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),super.show(e)}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/pages/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./app/classes/Button.js"),n=r("./app/classes/Page.js");class i extends n.default{constructor(){super({id:"home",element:".home",elements:{navigation:document.querySelector(".navigation"),link:".home_link"}})}create(){super.create(),this.link=new s.default({element:this.elements.link})}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/utils/colors.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{COLOR_BRIGHT_GRAY:()=>n,COLOR_QUARTER_SPANISH_WHITE:()=>s});const s="#F9F1E7",n=" #303143"},"./app/utils/text.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{calculate:()=>o,split:()=>i});var s=r("./node_modules/lodash/each.js"),n=r.n(s);function i({element:e,expression:t=" ",append:r=!0}){const s=function(e,t){const r=e.split("<br>");let s=[];return n()(r,((e,r)=>{r>0&&s.push("<br>"),s=s.concat(e.split(t));let i=!1,o="";const a=[];n()(s,(e=>{i||!e.includes("<a")&&!e.includes("<strong")||(o="",i=!0),i&&(o+=` ${e}`),i&&(e.includes("/a>")||e.includes("/strong>"))&&(a.push(o),o=""),i||""!==o||a.push(e),i&&(e.includes("/a>")||e.includes("/strong>"))&&(i=!1)})),s=a})),s}(e.innerHTML.toString().trim(),t);let i="";n()(s,(e=>{if(e.indexOf("<br>")>-1){const t=e.split("<br>");n()(t,((e,t)=>{i+=t>0?"<br>"+a(e):a(e)}))}else i+=a(e)})),e.innerHTML=i;const o=e.querySelectorAll("span");return r&&n()(o,(e=>{const t=1===e.textContent.length,r=""!==e.innerHTML.trim(),s="&"!==e.textContent,n="-"!==e.textContent;t&&r&&s&&n&&(e.innerHTML=`${e.textContent}&nbsp;`)})),o}function o(e){const t=[];let r=[],s=e[0].offsetTop;return n()(e,((n,i)=>{n.offsetTop===s&&r.push(n),n.offsetTop!==s&&(t.push(r),r=[],r.push(n),s=n.offsetTop),i+1===e.length&&t.push(r)})),t}function a(e){return""===(e=e.trim())||" "===e?e:"<br>"===e?"<br>":`<span>${e}</span>`+(e.length>1?" ":"")}},"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=o;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},s={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},n={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function o(e){if(!t.test(e))return e;var r=[],s=e.replace(/\033\[(\d+)m/g,(function(e,t){var s=n[t];if(s)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===s[0]?s:'<span style="'+s+';">');var o=i[t];return o?(r.pop(),o):""})),o=r.length;return o>0&&(s+=Array(o+1).join("</span>")),s}function a(e){for(var t in n[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],n[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],n[90]="color:#"+e.darkgrey,s){var r=e[s[t]]||"000";n[t]="color:#"+r,t=parseInt(t),n[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){i[e]="</span>"})),o.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var s in r){var n=e.hasOwnProperty(s)?e[s]:null;if(n){if("reset"===s){if("string"==typeof n&&(n=[n]),!Array.isArray(n)||0===n.length||n.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+s+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=r[s];n[0]||(n[0]=i[0]),1!==n.length&&n[1]||(n=[n[0]]).push(i[1]),n=n.slice(0,2)}else if("string"!=typeof n)throw new Error("The value of `"+s+"` property must be a hex string, e.g.: FF0000");t[s]=n}else t[s]=r[s]}a(t)},o.reset=function(){a(r)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return n}}),Object.defineProperty(o.tags,"close",{get:function(){return i}})):(o.tags.open=n,o.tags.close=i),o.reset()},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,s=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,s){function n(r){e.removeListener(t,i),s(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",n),r([].slice.call(arguments))}f(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&f(e,"error",t,r)}(e,n,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,r,s){var n,i,o,u;if(a(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),o=i[t]),void 0===o)o=i[t]=r,++e._eventsCount;else if("function"==typeof o?o=i[t]=s?[r,o]:[o,r]:s?o.unshift(r):o.push(r),(n=l(e))>0&&o.length>n&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,u=c,console&&console.warn&&console.warn(u)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,r){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},n=c.bind(s);return n.listener=r,s.wrapFn=n,n}function d(e,t,r){var s=e._events;if(void 0===s)return[];var n=s[t];return void 0===n?[]:"function"==typeof n?r?[n.listener||n]:[n]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(n):m(n,n.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function m(e,t){for(var r=new Array(t),s=0;s<t;++s)r[s]=e[s];return r}function f(e,t,r,s){if("function"==typeof e.on)s.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function n(i){s.once&&e.removeEventListener(t,n),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)s(l,this,t);else{var u=l.length,c=m(l,u);for(r=0;r<u;++r)s(c[r],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,h(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,h(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,s,n,i,o;if(a(t),void 0===(s=this._events))return this;if(void 0===(r=s[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(n=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){o=r[i].listener,n=i;break}if(n<0)return this;0===n?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,n),1===r.length&&(s[e]=r[0]),void 0!==s.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,s;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var n,i=Object.keys(r);for(s=0;s<i.length;++s)"removeListener"!==(n=i[s])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},i.prototype.listeners=function(e){return d(this,e,!0)},i.prototype.rawListeners=function(e){return d(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSPlugin:()=>Ee,_createElement:()=>F,_getBBox:()=>G,checkPrefix:()=>N,default:()=>Ee});var s,n,i,o,a,l,u,c,h=r("./node_modules/gsap/gsap-core.js"),d={},p=180/Math.PI,m=Math.PI/180,f=Math.atan2,g=/([A-Z])/g,v=/(left|right|width|margin|padding|x)/i,_=/[\s,\(]\S/,y={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},b=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},w=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},x=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},j=function(e,t){var r=t.s+t.c*e;t.set(t.t,t.p,~~(r+(r<0?-.5:.5))+t.u,t)},E=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},A=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},T=function(e,t,r){return e.style[t]=r},M=function(e,t,r){return e.style.setProperty(t,r)},S=function(e,t,r){return e._gsap[t]=r},C=function(e,t,r){return e._gsap.scaleX=e._gsap.scaleY=r},k=function(e,t,r,s,n){var i=e._gsap;i.scaleX=i.scaleY=r,i.renderTransform(n,i)},O=function(e,t,r,s,n){var i=e._gsap;i[t]=r,i.renderTransform(n,i)},D="transform",L=D+"Origin",q=function e(t,r){var s=this,n=this.target,i=n.style,o=n._gsap;if(t in d&&i){if(this.tfm=this.tfm||{},"transform"===t)return y.transform.split(",").forEach((function(t){return e.call(s,t,r)}));if(~(t=y[t]||t).indexOf(",")?t.split(",").forEach((function(e){return s.tfm[e]=K(n,e)})):this.tfm[t]=o.x?o[t]:K(n,t),t===L&&(this.tfm.zOrigin=o.zOrigin),this.props.indexOf(D)>=0)return;o.svg&&(this.svgo=n.getAttribute("data-svg-origin"),this.props.push(L,r,"")),t=D}(i||r)&&this.props.push(t,r,i[t])},P=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},R=function(){var e,t,r=this.props,s=this.target,n=s.style,i=s._gsap;for(e=0;e<r.length;e+=3)r[e+1]?s[r[e]]=r[e+2]:r[e+2]?n[r[e]]=r[e+2]:n.removeProperty("--"===r[e].substr(0,2)?r[e]:r[e].replace(g,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)i[t]=this.tfm[t];i.svg&&(i.renderTransform(),s.setAttribute("data-svg-origin",this.svgo||"")),(e=u())&&e.isStart||n[D]||(P(n),i.zOrigin&&n[L]&&(n[L]+=" "+i.zOrigin+"px",i.zOrigin=0,i.renderTransform()),i.uncache=1)}},z=function(e,t){var r={target:e,props:[],revert:R,save:q};return e._gsap||h.gsap.core.getCache(e),t&&t.split(",").forEach((function(e){return r.save(e)})),r},F=function(e,t){var r=n.createElementNS?n.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):n.createElement(e);return r&&r.style?r:n.createElement(e)},I=function e(t,r,s){var n=getComputedStyle(t);return n[r]||n.getPropertyValue(r.replace(g,"-$1").toLowerCase())||n.getPropertyValue(r)||!s&&e(t,N(r)||r,1)||""},U="O,Moz,ms,Ms,Webkit".split(","),N=function(e,t,r){var s=(t||a).style,n=5;if(e in s&&!r)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);n--&&!(U[n]+e in s););return n<0?null:(3===n?"ms":n>=0?U[n]:"")+e},B=function(){"undefined"!=typeof window&&window.document&&(s=window,n=s.document,i=n.documentElement,a=F("div")||{style:{}},F("div"),D=N(D),L=D+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",c=!!N("perspective"),u=h.gsap.core.reverting,o=1)},H=function e(t){var r,s=F("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(i.appendChild(s),s.appendChild(this),this.style.display="block",t)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(r=this._gsapBBox());return n&&(o?n.insertBefore(this,o):n.appendChild(this)),i.removeChild(s),this.style.cssText=a,r},V=function(e,t){for(var r=t.length;r--;)if(e.hasAttribute(t[r]))return e.getAttribute(t[r])},G=function(e){var t;try{t=e.getBBox()}catch(r){t=H.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===H||(t=H.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+V(e,["x","cx","x1"])||0,y:+V(e,["y","cy","y1"])||0,width:0,height:0}},Y=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!G(e))},X=function(e,t){if(t){var r,s=e.style;t in d&&t!==L&&(t=D),s.removeProperty?("ms"!==(r=t.substr(0,2))&&"webkit"!==t.substr(0,6)||(t="-"+t),s.removeProperty("--"===r?t:t.replace(g,"-$1").toLowerCase())):s.removeAttribute(t)}},W=function(e,t,r,s,n,i){var o=new h.PropTween(e._pt,t,r,0,1,i?A:E);return e._pt=o,o.b=s,o.e=n,e._props.push(r),o},Z={deg:1,rad:1,turn:1},$={grid:1,flex:1},Q=function e(t,r,s,i){var o,l,u,c,p=parseFloat(s)||0,m=(s+"").trim().substr((p+"").length)||"px",f=a.style,g=v.test(r),_="svg"===t.tagName.toLowerCase(),y=(_?"client":"offset")+(g?"Width":"Height"),b=100,w="px"===i,x="%"===i;if(i===m||!p||Z[i]||Z[m])return p;if("px"!==m&&!w&&(p=e(t,r,s,"px")),c=t.getCTM&&Y(t),(x||"%"===m)&&(d[r]||~r.indexOf("adius")))return o=c?t.getBBox()[g?"width":"height"]:t[y],(0,h._round)(x?p/o*b:p/100*o);if(f[g?"width":"height"]=b+(w?m:i),l=~r.indexOf("adius")||"em"===i&&t.appendChild&&!_?t:t.parentNode,c&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==n&&l.appendChild||(l=n.body),(u=l._gsap)&&x&&u.width&&g&&u.time===h._ticker.time&&!u.uncache)return(0,h._round)(p/u.width*b);if(!x||"height"!==r&&"width"!==r)(x||"%"===m)&&!$[I(l,"display")]&&(f.position=I(t,"position")),l===t&&(f.position="static"),l.appendChild(a),o=a[y],l.removeChild(a),f.position="absolute";else{var j=t.style[r];t.style[r]=b+i,o=t[y],j?t.style[r]=j:X(t,r)}return g&&x&&((u=(0,h._getCache)(l)).time=h._ticker.time,u.width=l[y]),(0,h._round)(w?o*p/b:o&&p?b/o*p:0)},K=function(e,t,r,s){var n;return o||B(),t in y&&"transform"!==t&&~(t=y[t]).indexOf(",")&&(t=t.split(",")[0]),d[t]&&"transform"!==t?(n=ue(e,s),n="transformOrigin"!==t?n[t]:n.svg?n.origin:ce(I(e,L))+" "+n.zOrigin+"px"):(!(n=e.style[t])||"auto"===n||s||~(n+"").indexOf("calc("))&&(n=re[t]&&re[t](e,t,r)||I(e,t)||(0,h._getProperty)(e,t)||("opacity"===t?1:0)),r&&!~(n+"").trim().indexOf(" ")?Q(e,t,n,r)+r:n},J=function(e,t,r,s){if(!r||"none"===r){var n=N(t,e,1),i=n&&I(e,n,1);i&&i!==r?(t=n,r=i):"borderColor"===t&&(r=I(e,"borderTopColor"))}var o,a,l,u,c,d,p,m,f,g,v,_=new h.PropTween(this._pt,e.style,t,0,1,h._renderComplexString),y=0,b=0;if(_.b=r,_.e=s,r+="","auto"===(s+="")&&(d=e.style[t],e.style[t]=s,s=I(e,t)||s,d?e.style[t]=d:X(e,t)),o=[r,s],(0,h._colorStringFilter)(o),s=o[1],l=(r=o[0]).match(h._numWithUnitExp)||[],(s.match(h._numWithUnitExp)||[]).length){for(;a=h._numWithUnitExp.exec(s);)p=a[0],f=s.substring(y,a.index),c?c=(c+1)%5:"rgba("!==f.substr(-5)&&"hsla("!==f.substr(-5)||(c=1),p!==(d=l[b++]||"")&&(u=parseFloat(d)||0,v=d.substr((u+"").length),"="===p.charAt(1)&&(p=(0,h._parseRelative)(u,p)+v),m=parseFloat(p),g=p.substr((m+"").length),y=h._numWithUnitExp.lastIndex-g.length,g||(g=g||h._config.units[t]||v,y===s.length&&(s+=g,_.e+=g)),v!==g&&(u=Q(e,t,d,g)||0),_._pt={_next:_._pt,p:f||1===b?f:",",s:u,c:m-u,m:c&&c<4||"zIndex"===t?Math.round:0});_.c=y<s.length?s.substring(y,s.length):""}else _.r="display"===t&&"none"===s?A:E;return h._relExp.test(s)&&(_.e=0),this._pt=_,_},ee={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},te=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var r,s,n,i=t.t,o=i.style,a=t.u,l=i._gsap;if("all"===a||!0===a)o.cssText="",s=1;else for(n=(a=a.split(",")).length;--n>-1;)r=a[n],d[r]&&(s=1,r="transformOrigin"===r?L:D),X(i,r);s&&(X(i,D),l&&(l.svg&&i.removeAttribute("transform"),ue(i,1),l.uncache=1,P(o)))}},re={clearProps:function(e,t,r,s,n){if("isFromStart"!==n.data){var i=e._pt=new h.PropTween(e._pt,t,r,0,0,te);return i.u=s,i.pr=-10,i.tween=n,e._props.push(r),1}}},se=[1,0,0,1,0,0],ne={},ie=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},oe=function(e){var t=I(e,D);return ie(t)?se:t.substr(7).match(h._numExp).map(h._round)},ae=function(e,t){var r,s,n,o,a=e._gsap||(0,h._getCache)(e),l=e.style,u=oe(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(n=e.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?se:u:(u!==se||e.offsetParent||e===i||a.svg||(n=l.display,l.display="block",(r=e.parentNode)&&e.offsetParent||(o=1,s=e.nextElementSibling,i.appendChild(e)),u=oe(e),n?l.display=n:X(e,"display"),o&&(s?r.insertBefore(e,s):r?r.appendChild(e):i.removeChild(e))),t&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},le=function(e,t,r,s,n,i){var o,a,l,u=e._gsap,c=n||ae(e,!0),h=u.xOrigin||0,d=u.yOrigin||0,p=u.xOffset||0,m=u.yOffset||0,f=c[0],g=c[1],v=c[2],_=c[3],y=c[4],b=c[5],w=t.split(" "),x=parseFloat(w[0])||0,j=parseFloat(w[1])||0;r?c!==se&&(a=f*_-g*v)&&(l=x*(-g/a)+j*(f/a)-(f*b-g*y)/a,x=x*(_/a)+j*(-v/a)+(v*b-_*y)/a,j=l):(x=(o=G(e)).x+(~w[0].indexOf("%")?x/100*o.width:x),j=o.y+(~(w[1]||w[0]).indexOf("%")?j/100*o.height:j)),s||!1!==s&&u.smooth?(y=x-h,b=j-d,u.xOffset=p+(y*f+b*v)-y,u.yOffset=m+(y*g+b*_)-b):u.xOffset=u.yOffset=0,u.xOrigin=x,u.yOrigin=j,u.smooth=!!s,u.origin=t,u.originIsAbsolute=!!r,e.style[L]="0px 0px",i&&(W(i,u,"xOrigin",h,x),W(i,u,"yOrigin",d,j),W(i,u,"xOffset",p,u.xOffset),W(i,u,"yOffset",m,u.yOffset)),e.setAttribute("data-svg-origin",x+" "+j)},ue=function(e,t){var r=e._gsap||new h.GSCache(e);if("x"in r&&!t&&!r.uncache)return r;var s,n,i,o,a,l,u,d,g,v,_,y,b,w,x,j,E,A,T,M,S,C,k,O,q,P,R,z,F,U,N,B,H=e.style,V=r.scaleX<0,G="px",X="deg",W=getComputedStyle(e),Z=I(e,L)||"0";return s=n=i=l=u=d=g=v=_=0,o=a=1,r.svg=!(!e.getCTM||!Y(e)),W.translate&&("none"===W.translate&&"none"===W.scale&&"none"===W.rotate||(H[D]=("none"!==W.translate?"translate3d("+(W.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==W.rotate?"rotate("+W.rotate+") ":"")+("none"!==W.scale?"scale("+W.scale.split(" ").join(",")+") ":"")+("none"!==W[D]?W[D]:"")),H.scale=H.rotate=H.translate="none"),w=ae(e,r.svg),r.svg&&(r.uncache?(q=e.getBBox(),Z=r.xOrigin-q.x+"px "+(r.yOrigin-q.y)+"px",O=""):O=!t&&e.getAttribute("data-svg-origin"),le(e,O||Z,!!O||r.originIsAbsolute,!1!==r.smooth,w)),y=r.xOrigin||0,b=r.yOrigin||0,w!==se&&(A=w[0],T=w[1],M=w[2],S=w[3],s=C=w[4],n=k=w[5],6===w.length?(o=Math.sqrt(A*A+T*T),a=Math.sqrt(S*S+M*M),l=A||T?f(T,A)*p:0,(g=M||S?f(M,S)*p+l:0)&&(a*=Math.abs(Math.cos(g*m))),r.svg&&(s-=y-(y*A+b*M),n-=b-(y*T+b*S))):(B=w[6],U=w[7],R=w[8],z=w[9],F=w[10],N=w[11],s=w[12],n=w[13],i=w[14],u=(x=f(B,F))*p,x&&(O=C*(j=Math.cos(-x))+R*(E=Math.sin(-x)),q=k*j+z*E,P=B*j+F*E,R=C*-E+R*j,z=k*-E+z*j,F=B*-E+F*j,N=U*-E+N*j,C=O,k=q,B=P),d=(x=f(-M,F))*p,x&&(j=Math.cos(-x),N=S*(E=Math.sin(-x))+N*j,A=O=A*j-R*E,T=q=T*j-z*E,M=P=M*j-F*E),l=(x=f(T,A))*p,x&&(O=A*(j=Math.cos(x))+T*(E=Math.sin(x)),q=C*j+k*E,T=T*j-A*E,k=k*j-C*E,A=O,C=q),u&&Math.abs(u)+Math.abs(l)>359.9&&(u=l=0,d=180-d),o=(0,h._round)(Math.sqrt(A*A+T*T+M*M)),a=(0,h._round)(Math.sqrt(k*k+B*B)),x=f(C,k),g=Math.abs(x)>2e-4?x*p:0,_=N?1/(N<0?-N:N):0),r.svg&&(O=e.getAttribute("transform"),r.forceCSS=e.setAttribute("transform","")||!ie(I(e,D)),O&&e.setAttribute("transform",O))),Math.abs(g)>90&&Math.abs(g)<270&&(V?(o*=-1,g+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,g+=g<=0?180:-180)),t=t||r.uncache,r.x=s-((r.xPercent=s&&(!t&&r.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-s)?-50:0)))?e.offsetWidth*r.xPercent/100:0)+G,r.y=n-((r.yPercent=n&&(!t&&r.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-n)?-50:0)))?e.offsetHeight*r.yPercent/100:0)+G,r.z=i+G,r.scaleX=(0,h._round)(o),r.scaleY=(0,h._round)(a),r.rotation=(0,h._round)(l)+X,r.rotationX=(0,h._round)(u)+X,r.rotationY=(0,h._round)(d)+X,r.skewX=g+X,r.skewY=v+X,r.transformPerspective=_+G,(r.zOrigin=parseFloat(Z.split(" ")[2])||!t&&r.zOrigin||0)&&(H[L]=ce(Z)),r.xOffset=r.yOffset=0,r.force3D=h._config.force3D,r.renderTransform=r.svg?ve:c?ge:de,r.uncache=0,r},ce=function(e){return(e=e.split(" "))[0]+" "+e[1]},he=function(e,t,r){var s=(0,h.getUnit)(t);return(0,h._round)(parseFloat(t)+parseFloat(Q(e,"x",r+"px",s)))+s},de=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,ge(e,t)},pe="0deg",me="0px",fe=") ",ge=function(e,t){var r=t||this,s=r.xPercent,n=r.yPercent,i=r.x,o=r.y,a=r.z,l=r.rotation,u=r.rotationY,c=r.rotationX,h=r.skewX,d=r.skewY,p=r.scaleX,f=r.scaleY,g=r.transformPerspective,v=r.force3D,_=r.target,y=r.zOrigin,b="",w="auto"===v&&e&&1!==e||!0===v;if(y&&(c!==pe||u!==pe)){var x,j=parseFloat(u)*m,E=Math.sin(j),A=Math.cos(j);j=parseFloat(c)*m,x=Math.cos(j),i=he(_,i,E*x*-y),o=he(_,o,-Math.sin(j)*-y),a=he(_,a,A*x*-y+y)}g!==me&&(b+="perspective("+g+fe),(s||n)&&(b+="translate("+s+"%, "+n+"%) "),(w||i!==me||o!==me||a!==me)&&(b+=a!==me||w?"translate3d("+i+", "+o+", "+a+") ":"translate("+i+", "+o+fe),l!==pe&&(b+="rotate("+l+fe),u!==pe&&(b+="rotateY("+u+fe),c!==pe&&(b+="rotateX("+c+fe),h===pe&&d===pe||(b+="skew("+h+", "+d+fe),1===p&&1===f||(b+="scale("+p+", "+f+fe),_.style[D]=b||"translate(0, 0)"},ve=function(e,t){var r,s,n,i,o,a=t||this,l=a.xPercent,u=a.yPercent,c=a.x,d=a.y,p=a.rotation,f=a.skewX,g=a.skewY,v=a.scaleX,_=a.scaleY,y=a.target,b=a.xOrigin,w=a.yOrigin,x=a.xOffset,j=a.yOffset,E=a.forceCSS,A=parseFloat(c),T=parseFloat(d);p=parseFloat(p),f=parseFloat(f),(g=parseFloat(g))&&(f+=g=parseFloat(g),p+=g),p||f?(p*=m,f*=m,r=Math.cos(p)*v,s=Math.sin(p)*v,n=Math.sin(p-f)*-_,i=Math.cos(p-f)*_,f&&(g*=m,o=Math.tan(f-g),n*=o=Math.sqrt(1+o*o),i*=o,g&&(o=Math.tan(g),r*=o=Math.sqrt(1+o*o),s*=o)),r=(0,h._round)(r),s=(0,h._round)(s),n=(0,h._round)(n),i=(0,h._round)(i)):(r=v,i=_,s=n=0),(A&&!~(c+"").indexOf("px")||T&&!~(d+"").indexOf("px"))&&(A=Q(y,"x",c,"px"),T=Q(y,"y",d,"px")),(b||w||x||j)&&(A=(0,h._round)(A+b-(b*r+w*n)+x),T=(0,h._round)(T+w-(b*s+w*i)+j)),(l||u)&&(o=y.getBBox(),A=(0,h._round)(A+l/100*o.width),T=(0,h._round)(T+u/100*o.height)),o="matrix("+r+","+s+","+n+","+i+","+A+","+T+")",y.setAttribute("transform",o),E&&(y.style[D]=o)},_e=function(e,t,r,s,n){var i,o,a=360,l=(0,h._isString)(n),u=parseFloat(n)*(l&&~n.indexOf("rad")?p:1)-s,c=s+u+"deg";return l&&("short"===(i=n.split("_")[1])&&(u%=a)!==u%180&&(u+=u<0?a:-360),"cw"===i&&u<0?u=(u+36e9)%a-~~(u/a)*a:"ccw"===i&&u>0&&(u=(u-36e9)%a-~~(u/a)*a)),e._pt=o=new h.PropTween(e._pt,t,r,s,u,w),o.e=c,o.u="deg",e._props.push(r),o},ye=function(e,t){for(var r in t)e[r]=t[r];return e},be=function(e,t,r){var s,n,i,o,a,l,u,c=ye({},r._gsap),p=r.style;for(n in c.svg?(i=r.getAttribute("transform"),r.setAttribute("transform",""),p[D]=t,s=ue(r,1),X(r,D),r.setAttribute("transform",i)):(i=getComputedStyle(r)[D],p[D]=t,s=ue(r,1),p[D]=i),d)(i=c[n])!==(o=s[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(a=(0,h.getUnit)(i)!==(u=(0,h.getUnit)(o))?Q(r,n,i,u):parseFloat(i),l=parseFloat(o),e._pt=new h.PropTween(e._pt,s,n,a,l-a,b),e._pt.u=u||0,e._props.push(n));ye(s,c)};(0,h._forEachName)("padding,margin,Width,Radius",(function(e,t){var r="Top",s="Right",n="Bottom",i="Left",o=(t<3?[r,s,n,i]:[r+i,r+s,n+s,n+i]).map((function(r){return t<2?e+r:"border"+r+e}));re[t>1?"border"+e:e]=function(e,t,r,s,n){var i,a;if(arguments.length<4)return i=o.map((function(t){return K(e,t,r)})),5===(a=i.join(" ")).split(i[0]).length?i[0]:a;i=(s+"").split(" "),a={},o.forEach((function(e,t){return a[e]=i[t]=i[t]||i[(t-1)/2|0]})),e.init(t,a,n)}}));var we,xe,je,Ee={name:"css",register:B,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,r,s,n){var i,a,l,u,c,p,m,f,g,v,w,E,A,T,M,S,C,k,O,q,P=this._props,R=e.style,F=r.vars.startAt;for(m in o||B(),this.styles=this.styles||z(e),S=this.styles.props,this.tween=r,t)if("autoRound"!==m&&(a=t[m],!h._plugins[m]||!(0,h._checkPlugin)(m,t,r,s,e,n)))if(c=typeof a,p=re[m],"function"===c&&(c=typeof(a=a.call(r,s,e,n))),"string"===c&&~a.indexOf("random(")&&(a=(0,h._replaceRandom)(a)),p)p(this,e,m,a,r)&&(M=1);else if("--"===m.substr(0,2))i=(getComputedStyle(e).getPropertyValue(m)+"").trim(),a+="",h._colorExp.lastIndex=0,h._colorExp.test(i)||(f=(0,h.getUnit)(i),g=(0,h.getUnit)(a)),g?f!==g&&(i=Q(e,m,i,g)+g):f&&(a+=f),this.add(R,"setProperty",i,a,s,n,0,0,m),P.push(m),S.push(m,0,R[m]);else if("undefined"!==c){if(F&&m in F?(i="function"==typeof F[m]?F[m].call(r,s,e,n):F[m],(0,h._isString)(i)&&~i.indexOf("random(")&&(i=(0,h._replaceRandom)(i)),(0,h.getUnit)(i+"")||"auto"===i||(i+=h._config.units[m]||(0,h.getUnit)(K(e,m))||""),"="===(i+"").charAt(1)&&(i=K(e,m))):i=K(e,m),u=parseFloat(i),(v="string"===c&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),l=parseFloat(a),m in y&&("autoAlpha"===m&&(1===u&&"hidden"===K(e,"visibility")&&l&&(u=0),S.push("visibility",0,R.visibility),W(this,R,"visibility",u?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==m&&"transform"!==m&&~(m=y[m]).indexOf(",")&&(m=m.split(",")[0])),w=m in d)if(this.styles.save(m),E||((A=e._gsap).renderTransform&&!t.parseTransform||ue(e,t.parseTransform),T=!1!==t.smoothOrigin&&A.smooth,(E=this._pt=new h.PropTween(this._pt,R,D,0,1,A.renderTransform,A,0,-1)).dep=1),"scale"===m)this._pt=new h.PropTween(this._pt,A,"scaleY",A.scaleY,(v?(0,h._parseRelative)(A.scaleY,v+l):l)-A.scaleY||0,b),this._pt.u=0,P.push("scaleY",m),m+="X";else{if("transformOrigin"===m){S.push(L,0,R[L]),k=void 0,O=void 0,q=void 0,k=(C=a).split(" "),O=k[0],q=k[1]||"50%","top"!==O&&"bottom"!==O&&"left"!==q&&"right"!==q||(C=O,O=q,q=C),k[0]=ee[O]||O,k[1]=ee[q]||q,a=k.join(" "),A.svg?le(e,a,0,T,0,this):((g=parseFloat(a.split(" ")[2])||0)!==A.zOrigin&&W(this,A,"zOrigin",A.zOrigin,g),W(this,R,m,ce(i),ce(a)));continue}if("svgOrigin"===m){le(e,a,1,T,0,this);continue}if(m in ne){_e(this,A,m,u,v?(0,h._parseRelative)(u,v+a):a);continue}if("smoothOrigin"===m){W(this,A,"smooth",A.smooth,a);continue}if("force3D"===m){A[m]=a;continue}if("transform"===m){be(this,a,e);continue}}else m in R||(m=N(m)||m);if(w||(l||0===l)&&(u||0===u)&&!_.test(a)&&m in R)l||(l=0),(f=(i+"").substr((u+"").length))!==(g=(0,h.getUnit)(a)||(m in h._config.units?h._config.units[m]:f))&&(u=Q(e,m,i,g)),this._pt=new h.PropTween(this._pt,w?A:R,m,u,(v?(0,h._parseRelative)(u,v+l):l)-u,w||"px"!==g&&"zIndex"!==m||!1===t.autoRound?b:j),this._pt.u=g||0,f!==g&&"%"!==g&&(this._pt.b=i,this._pt.r=x);else if(m in R)J.call(this,e,m,i,v?v+a:a);else if(m in e)this.add(e,m,i||e[m],v?v+a:a,s,n);else if("parseTransform"!==m){(0,h._missingPlugin)(m,a);continue}w||(m in R?S.push(m,0,R[m]):S.push(m,1,i||e[m])),P.push(m)}M&&(0,h._sortPropTweensByPriority)(this)},render:function(e,t){if(t.tween._time||!u())for(var r=t._pt;r;)r.r(e,r.d),r=r._next;else t.styles.revert()},get:K,aliases:y,getSetter:function(e,t,r){var s=y[t];return s&&s.indexOf(",")<0&&(t=s),t in d&&t!==L&&(e._gsap.x||K(e,"x"))?r&&l===r?"scale"===t?C:S:(l=r||{})&&("scale"===t?k:O):e.style&&!(0,h._isUndefined)(e.style[t])?T:~t.indexOf("-")?M:(0,h._getSetter)(e,t)},core:{_removeProperty:X,_getMatrix:ae}};h.gsap.utils.checkPrefix=N,h.gsap.core.getStyleSaver=z,we="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",xe="rotation,rotationX,rotationY,skewX,skewY",je=(0,h._forEachName)(we+","+xe+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){d[e]=1})),(0,h._forEachName)(xe,(function(e){h._config.units[e]="deg",ne[e]=1})),y[je[13]]=we+","+xe,(0,h._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");y[t[1]]=je[t[0]]})),(0,h._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){h._config.units[e]="px"})),h.gsap.registerPlugin(Ee)},"./node_modules/gsap/gsap-core.js":(e,t,r)=>{"use strict";function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function n(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.r(t),r.d(t,{Animation:()=>Zt,Back:()=>Xr,Bounce:()=>Zr,Circ:()=>Kr,Cubic:()=>Br,Elastic:()=>Yr,Expo:()=>Qr,GSCache:()=>Wt,Linear:()=>Ur,Power0:()=>Pr,Power1:()=>Rr,Power2:()=>zr,Power3:()=>Fr,Power4:()=>Ir,PropTween:()=>wr,Quad:()=>Nr,Quart:()=>Hr,Quint:()=>Vr,Sine:()=>$r,SteppedEase:()=>Wr,Strong:()=>Gr,Timeline:()=>$t,TimelineLite:()=>$t,TimelineMax:()=>$t,Tween:()=>ar,TweenLite:()=>ar,TweenMax:()=>ar,_checkPlugin:()=>tr,_colorExp:()=>Dt,_colorStringFilter:()=>qt,_config:()=>x,_forEachName:()=>ge,_getCache:()=>me,_getProperty:()=>fe,_getSetter:()=>dr,_isString:()=>D,_isUndefined:()=>P,_missingPlugin:()=>K,_numExp:()=>H,_numWithUnitExp:()=>V,_parseRelative:()=>ye,_plugins:()=>le,_relExp:()=>Y,_removeLinkedListItem:()=>Oe,_renderComplexString:()=>fr,_replaceRandom:()=>_t,_round:()=>ve,_roundModifier:()=>ut,_setDefaults:()=>Ae,_sortPropTweensByPriority:()=>br,_ticker:()=>Pt,clamp:()=>tt,default:()=>qr,distribute:()=>lt,getUnit:()=>et,gsap:()=>qr,interpolate:()=>bt,mapRange:()=>yt,normalize:()=>mt,pipe:()=>dt,random:()=>ht,selector:()=>ot,shuffle:()=>at,snap:()=>ct,splitColor:()=>Ct,toArray:()=>it,unitize:()=>pt,wrap:()=>gt,wrapYoyo:()=>vt});var i,o,a,l,u,c,h,d,p,m,f,g,v,_,y,b,w,x={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},j={duration:.5,overwrite:!1,delay:0},E=1e8,A=1e-8,T=2*Math.PI,M=T/4,S=0,C=Math.sqrt,k=Math.cos,O=Math.sin,D=function(e){return"string"==typeof e},L=function(e){return"function"==typeof e},q=function(e){return"number"==typeof e},P=function(e){return void 0===e},R=function(e){return"object"==typeof e},z=function(e){return!1!==e},F=function(){return"undefined"!=typeof window},I=function(e){return L(e)||D(e)},U="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},N=Array.isArray,B=/(?:-?\.?\d|\.)+/gi,H=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,V=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,G=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,Y=/[+-]=-?[.\d]+/,X=/[^,'"\[\]\s]+/gi,W=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,Z={},$={},Q=function(e){return($=Te(e,Z))&&qr},K=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},J=function(e,t){return!t&&console.warn(e)},ee=function(e,t){return e&&(Z[e]=t)&&$&&($[e]=t)||Z},te=function(){return 0},re={suppressEvents:!0,isStart:!0,kill:!1},se={suppressEvents:!0,kill:!1},ne={suppressEvents:!0},ie={},oe=[],ae={},le={},ue={},ce=30,he=[],de="",pe=function(e){var t,r,s=e[0];if(R(s)||L(s)||(e=[e]),!(t=(s._gsap||{}).harness)){for(r=he.length;r--&&!he[r].targetTest(s););t=he[r]}for(r=e.length;r--;)e[r]&&(e[r]._gsap||(e[r]._gsap=new Wt(e[r],t)))||e.splice(r,1);return e},me=function(e){return e._gsap||pe(it(e))[0]._gsap},fe=function(e,t,r){return(r=e[t])&&L(r)?e[t]():P(r)&&e.getAttribute&&e.getAttribute(t)||r},ge=function(e,t){return(e=e.split(",")).forEach(t)||e},ve=function(e){return Math.round(1e5*e)/1e5||0},_e=function(e){return Math.round(1e7*e)/1e7||0},ye=function(e,t){var r=t.charAt(0),s=parseFloat(t.substr(2));return e=parseFloat(e),"+"===r?e+s:"-"===r?e-s:"*"===r?e*s:e/s},be=function(e,t){for(var r=t.length,s=0;e.indexOf(t[s])<0&&++s<r;);return s<r},we=function(){var e,t,r=oe.length,s=oe.slice(0);for(ae={},oe.length=0,e=0;e<r;e++)(t=s[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},xe=function(e,t,r,s){oe.length&&!o&&we(),e.render(t,r,s||o&&t<0&&(e._initted||e._startAt)),oe.length&&!o&&we()},je=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(X).length<2?t:D(e)?e.trim():e},Ee=function(e){return e},Ae=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},Te=function(e,t){for(var r in t)e[r]=t[r];return e},Me=function e(t,r){for(var s in r)"__proto__"!==s&&"constructor"!==s&&"prototype"!==s&&(t[s]=R(r[s])?e(t[s]||(t[s]={}),r[s]):r[s]);return t},Se=function(e,t){var r,s={};for(r in e)r in t||(s[r]=e[r]);return s},Ce=function(e){var t,r=e.parent||l,s=e.keyframes?(t=N(e.keyframes),function(e,r){for(var s in r)s in e||"duration"===s&&t||"ease"===s||(e[s]=r[s])}):Ae;if(z(e.inherit))for(;r;)s(e,r.vars.defaults),r=r.parent||r._dp;return e},ke=function(e,t,r,s,n){void 0===r&&(r="_first"),void 0===s&&(s="_last");var i,o=e[s];if(n)for(i=t[n];o&&o[n]>i;)o=o._prev;return o?(t._next=o._next,o._next=t):(t._next=e[r],e[r]=t),t._next?t._next._prev=t:e[s]=t,t._prev=o,t.parent=t._dp=e,t},Oe=function(e,t,r,s){void 0===r&&(r="_first"),void 0===s&&(s="_last");var n=t._prev,i=t._next;n?n._next=i:e[r]===t&&(e[r]=i),i?i._prev=n:e[s]===t&&(e[s]=n),t._next=t._prev=t.parent=null},De=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove&&e.parent.remove(e),e._act=0},Le=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var r=e;r;)r._dirty=1,r=r.parent;return e},qe=function(e,t,r,s){return e._startAt&&(o?e._startAt.revert(se):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,s))},Pe=function e(t){return!t||t._ts&&e(t.parent)},Re=function(e){return e._repeat?ze(e._tTime,e=e.duration()+e._rDelay)*e:0},ze=function(e,t){var r=Math.floor(e/=t);return e&&r===e?r-1:r},Fe=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Ie=function(e){return e._end=_e(e._start+(e._tDur/Math.abs(e._ts||e._rts||A)||0))},Ue=function(e,t){var r=e._dp;return r&&r.smoothChildTiming&&e._ts&&(e._start=_e(r._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Ie(e),r._dirty||Le(r,e)),e},Ne=function(e,t){var r;if((t._time||!t._dur&&t._initted||t._start<e._time&&(t._dur||!t.add))&&(r=Fe(e.rawTime(),t),(!t._dur||Je(0,t.totalDuration(),r)-t._tTime>A)&&t.render(r,!0)),Le(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(r=e;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;e._zTime=-1e-8}},Be=function(e,t,r,s){return t.parent&&De(t),t._start=_e((q(r)?r:r||e!==l?$e(e,r,t):e._time)+t._delay),t._end=_e(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),ke(e,t,"_first","_last",e._sort?"_start":0),Ye(t)||(e._recent=t),s||Ne(e,t),e._ts<0&&Ue(e,e._tTime),e},He=function(e,t){return(Z.ScrollTrigger||K("scrollTrigger",t))&&Z.ScrollTrigger.create(t,e)},Ve=function(e,t,r,s,n){return rr(e,t,n),e._initted?!r&&e._pt&&!o&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&p!==Pt.frame?(oe.push(e),e._lazy=[n,s],1):void 0:1},Ge=function e(t){var r=t.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||e(r))},Ye=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Xe=function(e,t,r,s){var n=e._repeat,i=_e(t)||0,o=e._tTime/e._tDur;return o&&!s&&(e._time*=i/e._dur),e._dur=i,e._tDur=n?n<0?1e10:_e(i*(n+1)+e._rDelay*n):i,o>0&&!s&&Ue(e,e._tTime=e._tDur*o),e.parent&&Ie(e),r||Le(e.parent,e),e},We=function(e){return e instanceof $t?Le(e):Xe(e,e._dur)},Ze={_start:0,endTime:te,totalDuration:te},$e=function e(t,r,s){var n,i,o,a=t.labels,l=t._recent||Ze,u=t.duration()>=E?l.endTime(!1):t._dur;return D(r)&&(isNaN(r)||r in a)?(i=r.charAt(0),o="%"===r.substr(-1),n=r.indexOf("="),"<"===i||">"===i?(n>=0&&(r=r.replace(/=/,"")),("<"===i?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(o?(n<0?l:s).totalDuration()/100:1)):n<0?(r in a||(a[r]=u),a[r]):(i=parseFloat(r.charAt(n-1)+r.substr(n+1)),o&&s&&(i=i/100*(N(s)?s[0]:s).totalDuration()),n>1?e(t,r.substr(0,n-1),s)+i:u+i)):null==r?u:+r},Qe=function(e,t,r){var s,n,i=q(t[1]),o=(i?2:1)+(e<2?0:1),a=t[o];if(i&&(a.duration=t[1]),a.parent=r,e){for(s=a,n=r;n&&!("immediateRender"in s);)s=n.vars.defaults||{},n=z(n.vars.inherit)&&n.parent;a.immediateRender=z(s.immediateRender),e<2?a.runBackwards=1:a.startAt=t[o-1]}return new ar(t[0],a,t[o+1])},Ke=function(e,t){return e||0===e?t(e):t},Je=function(e,t,r){return r<e?e:r>t?t:r},et=function(e,t){return D(e)&&(t=W.exec(e))?t[1]:""},tt=function(e,t,r){return Ke(r,(function(r){return Je(e,t,r)}))},rt=[].slice,st=function(e,t){return e&&R(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&R(e[0]))&&!e.nodeType&&e!==u},nt=function(e,t,r){return void 0===r&&(r=[]),e.forEach((function(e){var s;return D(e)&&!t||st(e,1)?(s=r).push.apply(s,it(e)):r.push(e)}))||r},it=function(e,t,r){return a&&!t&&a.selector?a.selector(e):!D(e)||r||!c&&Rt()?N(e)?nt(e,r):st(e)?rt.call(e,0):e?[e]:[]:rt.call((t||h).querySelectorAll(e),0)},ot=function(e){return e=it(e)[0]||J("Invalid scope")||{},function(t){var r=e.current||e.nativeElement||e;return it(t,r.querySelectorAll?r:r===e?J("Invalid scope")||h.createElement("div"):e)}},at=function(e){return e.sort((function(){return.5-Math.random()}))},lt=function(e){if(L(e))return e;var t=R(e)?e:{each:e},r=Ht(t.ease),s=t.from||0,n=parseFloat(t.base)||0,i={},o=s>0&&s<1,a=isNaN(s)||o,l=t.axis,u=s,c=s;return D(s)?u=c={center:.5,edges:.5,end:1}[s]||0:!o&&a&&(u=s[0],c=s[1]),function(e,o,h){var d,p,m,f,g,v,_,y,b,w=(h||t).length,x=i[w];if(!x){if(!(b="auto"===t.grid?0:(t.grid||[1,E])[1])){for(_=-E;_<(_=h[b++].getBoundingClientRect().left)&&b<w;);b<w&&b--}for(x=i[w]=[],d=a?Math.min(b,w)*u-.5:s%b,p=b===E?0:a?w*c/b-.5:s/b|0,_=0,y=E,v=0;v<w;v++)m=v%b-d,f=p-(v/b|0),x[v]=g=l?Math.abs("y"===l?f:m):C(m*m+f*f),g>_&&(_=g),g<y&&(y=g);"random"===s&&at(x),x.max=_-y,x.min=y,x.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===s?-1:1),x.b=w<0?n-w:n,x.u=et(t.amount||t.each)||0,r=r&&w<0?Nt(r):r}return w=(x[e]-x.min)/x.max||0,_e(x.b+(r?r(w):w)*x.v)+x.u}},ut=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(r){var s=_e(Math.round(parseFloat(r)/e)*e*t);return(s-s%1)/t+(q(r)?0:et(r))}},ct=function(e,t){var r,s,n=N(e);return!n&&R(e)&&(r=n=e.radius||E,e.values?(e=it(e.values),(s=!q(e[0]))&&(r*=r)):e=ut(e.increment)),Ke(t,n?L(e)?function(t){return s=e(t),Math.abs(s-t)<=r?s:t}:function(t){for(var n,i,o=parseFloat(s?t.x:t),a=parseFloat(s?t.y:0),l=E,u=0,c=e.length;c--;)(n=s?(n=e[c].x-o)*n+(i=e[c].y-a)*i:Math.abs(e[c]-o))<l&&(l=n,u=c);return u=!r||l<=r?e[u]:t,s||u===t||q(t)?u:u+et(t)}:ut(e))},ht=function(e,t,r,s){return Ke(N(e)?!t:!0===r?!!(r=0):!s,(function(){return N(e)?e[~~(Math.random()*e.length)]:(r=r||1e-5)&&(s=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((e-r/2+Math.random()*(t-e+.99*r))/r)*r*s)/s}))},dt=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},pt=function(e,t){return function(r){return e(parseFloat(r))+(t||et(r))}},mt=function(e,t,r){return yt(e,t,0,1,r)},ft=function(e,t,r){return Ke(r,(function(r){return e[~~t(r)]}))},gt=function e(t,r,s){var n=r-t;return N(t)?ft(t,e(0,t.length),r):Ke(s,(function(e){return(n+(e-t)%n)%n+t}))},vt=function e(t,r,s){var n=r-t,i=2*n;return N(t)?ft(t,e(0,t.length-1),r):Ke(s,(function(e){return t+((e=(i+(e-t)%i)%i||0)>n?i-e:e)}))},_t=function(e){for(var t,r,s,n,i=0,o="";~(t=e.indexOf("random(",i));)s=e.indexOf(")",t),n="["===e.charAt(t+7),r=e.substr(t+7,s-t-7).match(n?X:B),o+=e.substr(i,t-i)+ht(n?r:+r[0],n?0:+r[1],+r[2]||1e-5),i=s+1;return o+e.substr(i,e.length-i)},yt=function(e,t,r,s,n){var i=t-e,o=s-r;return Ke(n,(function(t){return r+((t-e)/i*o||0)}))},bt=function e(t,r,s,n){var i=isNaN(t+r)?0:function(e){return(1-e)*t+e*r};if(!i){var o,a,l,u,c,h=D(t),d={};if(!0===s&&(n=1)&&(s=null),h)t={p:t},r={p:r};else if(N(t)&&!N(r)){for(l=[],u=t.length,c=u-2,a=1;a<u;a++)l.push(e(t[a-1],t[a]));u--,i=function(e){e*=u;var t=Math.min(c,~~e);return l[t](e-t)},s=r}else n||(t=Te(N(t)?[]:{},t));if(!l){for(o in r)er.call(d,t,o,"get",r[o]);i=function(e){return gr(e,d)||(h?t.p:t)}}}return Ke(s,i)},wt=function(e,t,r){var s,n,i,o=e.labels,a=E;for(s in o)(n=o[s]-t)<0==!!r&&n&&a>(n=Math.abs(n))&&(i=s,a=n);return i},xt=function(e,t,r){var s,n,i,o=e.vars,l=o[t],u=a,c=e._ctx;if(l)return s=o[t+"Params"],n=o.callbackScope||e,r&&oe.length&&we(),c&&(a=c),i=s?l.apply(n,s):l.call(n),a=u,i},jt=function(e){return De(e),e.scrollTrigger&&e.scrollTrigger.kill(!!o),e.progress()<1&&xt(e,"onInterrupt"),e},Et=[],At=function(e){if(e)if(e=!e.name&&e.default||e,F()||e.headless){var t=e.name,r=L(e),s=t&&!r&&e.init?function(){this._props=[]}:e,n={init:te,render:gr,add:er,kill:_r,modifier:vr,rawVars:0},i={targetTest:0,get:0,getSetter:dr,aliases:{},register:0};if(Rt(),e!==s){if(le[t])return;Ae(s,Ae(Se(e,n),i)),Te(s.prototype,Te(n,Se(e,i))),le[s.prop=t]=s,e.targetTest&&(he.push(s),ie[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}ee(t,s),e.register&&e.register(qr,s,wr)}else Et.push(e)},Tt=255,Mt={aqua:[0,Tt,Tt],lime:[0,Tt,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Tt],navy:[0,0,128],white:[Tt,Tt,Tt],olive:[128,128,0],yellow:[Tt,Tt,0],orange:[Tt,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Tt,0,0],pink:[Tt,192,203],cyan:[0,Tt,Tt],transparent:[Tt,Tt,Tt,0]},St=function(e,t,r){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(r-t)*e*6:e<.5?r:3*e<2?t+(r-t)*(2/3-e)*6:t)*Tt+.5|0},Ct=function(e,t,r){var s,n,i,o,a,l,u,c,h,d,p=e?q(e)?[e>>16,e>>8&Tt,e&Tt]:0:Mt.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),Mt[e])p=Mt[e];else if("#"===e.charAt(0)){if(e.length<6&&(s=e.charAt(1),n=e.charAt(2),i=e.charAt(3),e="#"+s+s+n+n+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&Tt,p&Tt,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&Tt,e&Tt]}else if("hsl"===e.substr(0,3))if(p=d=e.match(B),t){if(~e.indexOf("="))return p=e.match(H),r&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,s=2*(l=+p[2]/100)-(n=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=St(o+1/3,s,n),p[1]=St(o,s,n),p[2]=St(o-1/3,s,n);else p=e.match(B)||Mt.transparent;p=p.map(Number)}return t&&!d&&(s=p[0]/Tt,n=p[1]/Tt,i=p[2]/Tt,l=((u=Math.max(s,n,i))+(c=Math.min(s,n,i)))/2,u===c?o=a=0:(h=u-c,a=l>.5?h/(2-u-c):h/(u+c),o=u===s?(n-i)/h+(n<i?6:0):u===n?(i-s)/h+2:(s-n)/h+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},kt=function(e){var t=[],r=[],s=-1;return e.split(Dt).forEach((function(e){var n=e.match(V)||[];t.push.apply(t,n),r.push(s+=n.length+1)})),t.c=r,t},Ot=function(e,t,r){var s,n,i,o,a="",l=(e+a).match(Dt),u=t?"hsla(":"rgba(",c=0;if(!l)return e;if(l=l.map((function(e){return(e=Ct(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),r&&(i=kt(e),(s=r.c).join(a)!==i.c.join(a)))for(o=(n=e.replace(Dt,"1").split(V)).length-1;c<o;c++)a+=n[c]+(~s.indexOf(c)?l.shift()||u+"0,0,0,0)":(i.length?i:l.length?l:r).shift());if(!n)for(o=(n=e.split(Dt)).length-1;c<o;c++)a+=n[c]+l[c];return a+n[o]},Dt=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in Mt)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Lt=/hsl[a]?\(/,qt=function(e){var t,r=e.join(" ");if(Dt.lastIndex=0,Dt.test(r))return t=Lt.test(r),e[1]=Ot(e[1],t),e[0]=Ot(e[0],t,kt(e[1])),!0},Pt=function(){var e,t,r,s,n,i,o=Date.now,a=500,l=33,p=o(),m=p,g=1e3/240,v=g,_=[],y=function r(u){var c,h,d,f,y=o()-m,b=!0===u;if((y>a||y<0)&&(p+=y-l),((c=(d=(m+=y)-p)-v)>0||b)&&(f=++s.frame,n=d-1e3*s.time,s.time=d/=1e3,v+=c+(c>=g?4:g-c),h=1),b||(e=t(r)),h)for(i=0;i<_.length;i++)_[i](d,n,f,u)};return s={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(e){return n/(1e3/(e||60))},wake:function(){d&&(!c&&F()&&(u=c=window,h=u.document||{},Z.gsap=qr,(u.gsapVersions||(u.gsapVersions=[])).push(qr.version),Q($||u.GreenSockGlobals||!u.gsap&&u||{}),Et.forEach(At)),r="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,e&&s.sleep(),t=r||function(e){return setTimeout(e,v-1e3*s.time+1|0)},f=1,y(2))},sleep:function(){(r?cancelAnimationFrame:clearTimeout)(e),f=0,t=te},lagSmoothing:function(e,t){a=e||1/0,l=Math.min(t||33,a)},fps:function(e){g=1e3/(e||240),v=1e3*s.time+g},add:function(e,t,r){var n=t?function(t,r,i,o){e(t,r,i,o),s.remove(n)}:e;return s.remove(e),_[r?"unshift":"push"](n),Rt(),n},remove:function(e,t){~(t=_.indexOf(e))&&_.splice(t,1)&&i>=t&&i--},_listeners:_}}(),Rt=function(){return!f&&Pt.wake()},zt={},Ft=/^[\d.\-M][\d.\-,\s]/,It=/["']/g,Ut=function(e){for(var t,r,s,n={},i=e.substr(1,e.length-3).split(":"),o=i[0],a=1,l=i.length;a<l;a++)r=i[a],t=a!==l-1?r.lastIndexOf(","):r.length,s=r.substr(0,t),n[o]=isNaN(s)?s.replace(It,"").trim():+s,o=r.substr(t+1).trim();return n},Nt=function(e){return function(t){return 1-e(1-t)}},Bt=function e(t,r){for(var s,n=t._first;n;)n instanceof $t?e(n,r):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===r||(n.timeline?e(n.timeline,r):(s=n._ease,n._ease=n._yEase,n._yEase=s,n._yoyo=r)),n=n._next},Ht=function(e,t){return e&&(L(e)?e:zt[e]||function(e){var t,r,s,n,i=(e+"").split("("),o=zt[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[Ut(i[1])]:(t=e,r=t.indexOf("(")+1,s=t.indexOf(")"),n=t.indexOf("(",r),t.substring(r,~n&&n<s?t.indexOf(")",s+1):s)).split(",").map(je)):zt._CE&&Ft.test(e)?zt._CE("",e):o}(e))||t},Vt=function(e,t,r,s){void 0===r&&(r=function(e){return 1-t(1-e)}),void 0===s&&(s=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var n,i={easeIn:t,easeOut:r,easeInOut:s};return ge(e,(function(e){for(var t in zt[e]=Z[e]=i,zt[n=e.toLowerCase()]=r,i)zt[n+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=zt[e+"."+t]=i[t]})),i},Gt=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Yt=function e(t,r,s){var n=r>=1?r:1,i=(s||(t?.3:.45))/(r<1?r:1),o=i/T*(Math.asin(1/n)||0),a=function(e){return 1===e?1:n*Math.pow(2,-10*e)*O((e-o)*i)+1},l="out"===t?a:"in"===t?function(e){return 1-a(1-e)}:Gt(a);return i=T/i,l.config=function(r,s){return e(t,r,s)},l},Xt=function e(t,r){void 0===r&&(r=1.70158);var s=function(e){return e?--e*e*((r+1)*e+r)+1:0},n="out"===t?s:"in"===t?function(e){return 1-s(1-e)}:Gt(s);return n.config=function(r){return e(t,r)},n};ge("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var r=t<5?t+1:t;Vt(e+",Power"+(r-1),t?function(e){return Math.pow(e,r)}:function(e){return e},(function(e){return 1-Math.pow(1-e,r)}),(function(e){return e<.5?Math.pow(2*e,r)/2:1-Math.pow(2*(1-e),r)/2}))})),zt.Linear.easeNone=zt.none=zt.Linear.easeIn,Vt("Elastic",Yt("in"),Yt("out"),Yt()),g=7.5625,y=2*(_=1/(v=2.75)),b=2.5*_,Vt("Bounce",(function(e){return 1-w(1-e)}),w=function(e){return e<_?g*e*e:e<y?g*Math.pow(e-1.5/v,2)+.75:e<b?g*(e-=2.25/v)*e+.9375:g*Math.pow(e-2.625/v,2)+.984375}),Vt("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Vt("Circ",(function(e){return-(C(1-e*e)-1)})),Vt("Sine",(function(e){return 1===e?1:1-k(e*M)})),Vt("Back",Xt("in"),Xt("out"),Xt()),zt.SteppedEase=zt.steps=Z.SteppedEase={config:function(e,t){void 0===e&&(e=1);var r=1/e,s=e+(t?0:1),n=t?1:0;return function(e){return((s*Je(0,.99999999,e)|0)+n)*r}}},j.ease=zt["quad.out"],ge("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return de+=e+","+e+"Params,"}));var Wt=function(e,t){this.id=S++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:fe,this.set=t?t.getSetter:dr},Zt=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Xe(this,+e.duration,1,1),this.data=e.data,a&&(this._ctx=a,a.data.push(this)),f||Pt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Xe(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Rt(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Ue(this,e),!r._dp||r.parent||Ne(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&Be(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===A||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),xe(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Re(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Re(this),t):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},t.iteration=function(e,t){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*r,t):this._repeat?ze(this._tTime,r)+1:1},t.timeScale=function(e,t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var r=this.parent&&this._ts?Fe(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(Je(-Math.abs(this._delay),this._tDur,r),!1!==t),Ie(this),function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e}(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Rt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==A&&(this._tTime-=A)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Be(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(z(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Fe(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=ne);var t=o;return o=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),o=t,this},t.globalTime=function(e){for(var t=this,r=arguments.length?e:t.rawTime();t;)r=t._start+r/(Math.abs(t._ts)||1),t=t._dp;return!this.parent&&this._sat?this._sat.globalTime(e):r},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,We(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,We(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime($e(this,e),z(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,z(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,r=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=r&&e<this.endTime(!0)-A))},t.eventCallback=function(e,t,r){var s=this.vars;return arguments.length>1?(t?(s[e]=t,r&&(s[e+"Params"]=r),"onUpdate"===e&&(this._onUpdate=t)):delete s[e],this):s[e]},t.then=function(e){var t=this;return new Promise((function(r){var s=L(e)?e:Ee,n=function(){var e=t.then;t.then=null,L(s)&&(s=s(t))&&(s.then||s===t)&&(t.then=e),r(s),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?n():t._prom=n}))},t.kill=function(){jt(this)},e}();Ae(Zt.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var $t=function(e){function t(t,r){var n;return void 0===t&&(t={}),(n=e.call(this,t)||this).labels={},n.smoothChildTiming=!!t.smoothChildTiming,n.autoRemoveChildren=!!t.autoRemoveChildren,n._sort=z(t.sortChildren),l&&Be(t.parent||l,s(n),r),t.reversed&&n.reverse(),t.paused&&n.paused(!0),t.scrollTrigger&&He(s(n),t.scrollTrigger),n}n(t,e);var r=t.prototype;return r.to=function(e,t,r){return Qe(0,arguments,this),this},r.from=function(e,t,r){return Qe(1,arguments,this),this},r.fromTo=function(e,t,r,s){return Qe(2,arguments,this),this},r.set=function(e,t,r){return t.duration=0,t.parent=this,Ce(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new ar(e,t,$e(this,r),1),this},r.call=function(e,t,r){return Be(this,ar.delayedCall(0,e,t),r)},r.staggerTo=function(e,t,r,s,n,i,o){return r.duration=t,r.stagger=r.stagger||s,r.onComplete=i,r.onCompleteParams=o,r.parent=this,new ar(e,r,$e(this,n)),this},r.staggerFrom=function(e,t,r,s,n,i,o){return r.runBackwards=1,Ce(r).immediateRender=z(r.immediateRender),this.staggerTo(e,t,r,s,n,i,o)},r.staggerFromTo=function(e,t,r,s,n,i,o,a){return s.startAt=r,Ce(s).immediateRender=z(s.immediateRender),this.staggerTo(e,t,s,n,i,o,a)},r.render=function(e,t,r){var s,n,i,a,u,c,h,d,p,m,f,g,v=this._time,_=this._dirty?this.totalDuration():this._tDur,y=this._dur,b=e<=0?0:_e(e),w=this._zTime<0!=e<0&&(this._initted||!y);if(this!==l&&b>_&&e>=0&&(b=_),b!==this._tTime||r||w){if(v!==this._time&&y&&(b+=this._time-v,e+=this._time-v),s=b,p=this._start,c=!(d=this._ts),w&&(y||(v=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(f=this._yoyo,u=y+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*u+e,t,r);if(s=_e(b%u),b===_?(a=this._repeat,s=y):((a=~~(b/u))&&a===b/u&&(s=y,a--),s>y&&(s=y)),m=ze(this._tTime,u),!v&&this._tTime&&m!==a&&this._tTime-m*u-this._dur<=0&&(m=a),f&&1&a&&(s=y-s,g=1),a!==m&&!this._lock){var x=f&&1&m,j=x===(f&&1&a);if(a<m&&(x=!x),v=x?0:b%y?y:b,this._lock=1,this.render(v||(g?0:_e(a*u)),t,!y)._lock=0,this._tTime=b,!t&&this.parent&&xt(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),v&&v!==this._time||c!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,_=this._tDur,j&&(this._lock=2,v=x?y:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!c)return this;Bt(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(h=function(e,t,r){var s;if(r>t)for(s=e._first;s&&s._start<=r;){if("isPause"===s.data&&s._start>t)return s;s=s._next}else for(s=e._last;s&&s._start>=r;){if("isPause"===s.data&&s._start<t)return s;s=s._prev}}(this,_e(v),_e(s)),h&&(b-=s-(s=h._start))),this._tTime=b,this._time=s,this._act=!d,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,v=0),!v&&s&&!t&&!a&&(xt(this,"onStart"),this._tTime!==b))return this;if(s>=v&&e>=0)for(n=this._first;n;){if(i=n._next,(n._act||s>=n._start)&&n._ts&&h!==n){if(n.parent!==this)return this.render(e,t,r);if(n.render(n._ts>0?(s-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(s-n._start)*n._ts,t,r),s!==this._time||!this._ts&&!c){h=0,i&&(b+=this._zTime=-1e-8);break}}n=i}else{n=this._last;for(var E=e<0?e:s;n;){if(i=n._prev,(n._act||E<=n._end)&&n._ts&&h!==n){if(n.parent!==this)return this.render(e,t,r);if(n.render(n._ts>0?(E-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(E-n._start)*n._ts,t,r||o&&(n._initted||n._startAt)),s!==this._time||!this._ts&&!c){h=0,i&&(b+=this._zTime=E?-1e-8:A);break}}n=i}}if(h&&!t&&(this.pause(),h.render(s>=v?0:-1e-8)._zTime=s>=v?1:-1,this._ts))return this._start=p,Ie(this),this.render(e,t,r);this._onUpdate&&!t&&xt(this,"onUpdate",!0),(b===_&&this._tTime>=this.totalDuration()||!b&&v)&&(p!==this._start&&Math.abs(d)===Math.abs(this._ts)||this._lock||((e||!y)&&(b===_&&this._ts>0||!b&&this._ts<0)&&De(this,1),t||e<0&&!v||!b&&!v&&_||(xt(this,b===_&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(b<_&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(e,t){var r=this;if(q(t)||(t=$e(this,t,e)),!(e instanceof Zt)){if(N(e))return e.forEach((function(e){return r.add(e,t)})),this;if(D(e))return this.addLabel(e,t);if(!L(e))return this;e=ar.delayedCall(0,e)}return this!==e?Be(this,e,t):this},r.getChildren=function(e,t,r,s){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===s&&(s=-E);for(var n=[],i=this._first;i;)i._start>=s&&(i instanceof ar?t&&n.push(i):(r&&n.push(i),e&&n.push.apply(n,i.getChildren(!0,t,r)))),i=i._next;return n},r.getById=function(e){for(var t=this.getChildren(1,1,1),r=t.length;r--;)if(t[r].vars.id===e)return t[r]},r.remove=function(e){return D(e)?this.removeLabel(e):L(e)?this.killTweensOf(e):(Oe(this,e),e===this._recent&&(this._recent=this._last),Le(this))},r.totalTime=function(t,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=_e(Pt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,r),this._forcing=0,this):this._tTime},r.addLabel=function(e,t){return this.labels[e]=$e(this,t),this},r.removeLabel=function(e){return delete this.labels[e],this},r.addPause=function(e,t,r){var s=ar.delayedCall(0,t||te,r);return s.data="isPause",this._hasPause=1,Be(this,s,$e(this,e))},r.removePause=function(e){var t=this._first;for(e=$e(this,e);t;)t._start===e&&"isPause"===t.data&&De(t),t=t._next},r.killTweensOf=function(e,t,r){for(var s=this.getTweensOf(e,r),n=s.length;n--;)Qt!==s[n]&&s[n].kill(e,t);return this},r.getTweensOf=function(e,t){for(var r,s=[],n=it(e),i=this._first,o=q(t);i;)i instanceof ar?be(i._targets,n)&&(o?(!Qt||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&s.push(i):(r=i.getTweensOf(n,t)).length&&s.push.apply(s,r),i=i._next;return s},r.tweenTo=function(e,t){t=t||{};var r,s=this,n=$e(s,e),i=t,o=i.startAt,a=i.onStart,l=i.onStartParams,u=i.immediateRender,c=ar.to(s,Ae({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:t.duration||Math.abs((n-(o&&"time"in o?o.time:s._time))/s.timeScale())||A,onStart:function(){if(s.pause(),!r){var e=t.duration||Math.abs((n-(o&&"time"in o?o.time:s._time))/s.timeScale());c._dur!==e&&Xe(c,e,0,1).render(c._time,!0,!0),r=1}a&&a.apply(c,l||[])}},t));return u?c.render(0):c},r.tweenFromTo=function(e,t,r){return this.tweenTo(t,Ae({startAt:{time:$e(this,e)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(e){return void 0===e&&(e=this._time),wt(this,$e(this,e))},r.previousLabel=function(e){return void 0===e&&(e=this._time),wt(this,$e(this,e),1)},r.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+A)},r.shiftChildren=function(e,t,r){void 0===r&&(r=0);for(var s,n=this._first,i=this.labels;n;)n._start>=r&&(n._start+=e,n._end+=e),n=n._next;if(t)for(s in i)i[s]>=r&&(i[s]+=e);return Le(this)},r.invalidate=function(t){var r=this._first;for(this._lock=0;r;)r.invalidate(t),r=r._next;return e.prototype.invalidate.call(this,t)},r.clear=function(e){void 0===e&&(e=!0);for(var t,r=this._first;r;)t=r._next,this.remove(r),r=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Le(this)},r.totalDuration=function(e){var t,r,s,n=0,i=this,o=i._last,a=E;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(s=i.parent;o;)t=o._prev,o._dirty&&o.totalDuration(),(r=o._start)>a&&i._sort&&o._ts&&!i._lock?(i._lock=1,Be(i,o,r-o._delay,1)._lock=0):a=r,r<0&&o._ts&&(n-=r,(!s&&!i._dp||s&&s.smoothChildTiming)&&(i._start+=r/i._ts,i._time-=r,i._tTime-=r),i.shiftChildren(-r,!1,-Infinity),a=0),o._end>n&&o._ts&&(n=o._end),o=t;Xe(i,i===l&&i._time>n?i._time:n,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(l._ts&&(xe(l,Fe(e,l)),p=Pt.frame),Pt.frame>=ce){ce+=x.autoSleep||120;var t=l._first;if((!t||!t._ts)&&x.autoSleep&&Pt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Pt.sleep()}}},t}(Zt);Ae($t.prototype,{_lock:0,_hasPause:0,_forcing:0});var Qt,Kt,Jt=function(e,t,r,s,n,i,o){var a,l,u,c,h,d,p,m,f=new wr(this._pt,e,t,0,1,fr,null,n),g=0,v=0;for(f.b=r,f.e=s,r+="",(p=~(s+="").indexOf("random("))&&(s=_t(s)),i&&(i(m=[r,s],e,t),r=m[0],s=m[1]),l=r.match(G)||[];a=G.exec(s);)c=a[0],h=s.substring(g,a.index),u?u=(u+1)%5:"rgba("===h.substr(-5)&&(u=1),c!==l[v++]&&(d=parseFloat(l[v-1])||0,f._pt={_next:f._pt,p:h||1===v?h:",",s:d,c:"="===c.charAt(1)?ye(d,c)-d:parseFloat(c)-d,m:u&&u<4?Math.round:0},g=G.lastIndex);return f.c=g<s.length?s.substring(g,s.length):"",f.fp=o,(Y.test(s)||p)&&(f.e=0),this._pt=f,f},er=function(e,t,r,s,n,i,o,a,l,u){L(s)&&(s=s(n||0,e,i));var c,h=e[t],d="get"!==r?r:L(h)?l?e[t.indexOf("set")||!L(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():h,p=L(h)?l?cr:ur:lr;if(D(s)&&(~s.indexOf("random(")&&(s=_t(s)),"="===s.charAt(1)&&((c=ye(d,s)+(et(d)||0))||0===c)&&(s=c)),!u||d!==s||Kt)return isNaN(d*s)||""===s?(!h&&!(t in e)&&K(t,s),Jt.call(this,e,t,d,s,p,a||x.stringFilter,l)):(c=new wr(this._pt,e,t,+d||0,s-(d||0),"boolean"==typeof h?mr:pr,0,p),l&&(c.fp=l),o&&c.modifier(o,this,e),this._pt=c)},tr=function(e,t,r,s,n,i){var o,a,l,u;if(le[e]&&!1!==(o=new le[e]).init(n,o.rawVars?t[e]:function(e,t,r,s,n){if(L(e)&&(e=nr(e,n,t,r,s)),!R(e)||e.style&&e.nodeType||N(e)||U(e))return D(e)?nr(e,n,t,r,s):e;var i,o={};for(i in e)o[i]=nr(e[i],n,t,r,s);return o}(t[e],s,n,i,r),r,s,i)&&(r._pt=a=new wr(r._pt,n,e,0,1,o.render,o,0,o.priority),r!==m))for(l=r._ptLookup[r._targets.indexOf(n)],u=o._props.length;u--;)l[o._props[u]]=a;return o},rr=function e(t,r,s){var n,a,u,c,h,d,p,m,f,g,v,_,y,b=t.vars,w=b.ease,x=b.startAt,T=b.immediateRender,M=b.lazy,S=b.onUpdate,C=b.runBackwards,k=b.yoyoEase,O=b.keyframes,D=b.autoRevert,L=t._dur,q=t._startAt,P=t._targets,R=t.parent,F=R&&"nested"===R.data?R.vars.targets:P,I="auto"===t._overwrite&&!i,U=t.timeline;if(U&&(!O||!w)&&(w="none"),t._ease=Ht(w,j.ease),t._yEase=k?Nt(Ht(!0===k?w:k,j.ease)):0,k&&t._yoyo&&!t._repeat&&(k=t._yEase,t._yEase=t._ease,t._ease=k),t._from=!U&&!!b.runBackwards,!U||O&&!b.stagger){if(_=(m=P[0]?me(P[0]).harness:0)&&b[m.prop],n=Se(b,ie),q&&(q._zTime<0&&q.progress(1),r<0&&C&&T&&!D?q.render(-1,!0):q.revert(C&&L?se:re),q._lazy=0),x){if(De(t._startAt=ar.set(P,Ae({data:"isStart",overwrite:!1,parent:R,immediateRender:!0,lazy:!q&&z(M),startAt:null,delay:0,onUpdate:S&&function(){return xt(t,"onUpdate")},stagger:0},x))),t._startAt._dp=0,t._startAt._sat=t,r<0&&(o||!T&&!D)&&t._startAt.revert(se),T&&L&&r<=0&&s<=0)return void(r&&(t._zTime=r))}else if(C&&L&&!q)if(r&&(T=!1),u=Ae({overwrite:!1,data:"isFromStart",lazy:T&&!q&&z(M),immediateRender:T,stagger:0,parent:R},n),_&&(u[m.prop]=_),De(t._startAt=ar.set(P,u)),t._startAt._dp=0,t._startAt._sat=t,r<0&&(o?t._startAt.revert(se):t._startAt.render(-1,!0)),t._zTime=r,T){if(!r)return}else e(t._startAt,A,A);for(t._pt=t._ptCache=0,M=L&&z(M)||M&&!L,a=0;a<P.length;a++){if(p=(h=P[a])._gsap||pe(P)[a]._gsap,t._ptLookup[a]=g={},ae[p.id]&&oe.length&&we(),v=F===P?a:F.indexOf(h),m&&!1!==(f=new m).init(h,_||n,t,v,F)&&(t._pt=c=new wr(t._pt,h,f.name,0,1,f.render,f,0,f.priority),f._props.forEach((function(e){g[e]=c})),f.priority&&(d=1)),!m||_)for(u in n)le[u]&&(f=tr(u,n,t,v,h,F))?f.priority&&(d=1):g[u]=c=er.call(t,h,u,"get",n[u],v,F,0,b.stringFilter);t._op&&t._op[a]&&t.kill(h,t._op[a]),I&&t._pt&&(Qt=t,l.killTweensOf(h,g,t.globalTime(r)),y=!t.parent,Qt=0),t._pt&&M&&(ae[p.id]=1)}d&&br(t),t._onInit&&t._onInit(t)}t._onUpdate=S,t._initted=(!t._op||t._pt)&&!y,O&&r<=0&&U.render(E,!0,!0)},sr=function(e,t,r,s){var n,i,o=t.ease||s||"power1.inOut";if(N(t))i=r[e]||(r[e]=[]),t.forEach((function(e,r){return i.push({t:r/(t.length-1)*100,v:e,e:o})}));else for(n in t)i=r[n]||(r[n]=[]),"ease"===n||i.push({t:parseFloat(e),v:t[n],e:o})},nr=function(e,t,r,s,n){return L(e)?e.call(t,r,s,n):D(e)&&~e.indexOf("random(")?_t(e):e},ir=de+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",or={};ge(ir+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return or[e]=1}));var ar=function(e){function t(t,r,n,o){var a;"number"==typeof r&&(n.duration=r,r=n,n=null);var u,c,h,d,p,m,f,g,v=(a=e.call(this,o?r:Ce(r))||this).vars,_=v.duration,y=v.delay,b=v.immediateRender,w=v.stagger,j=v.overwrite,E=v.keyframes,A=v.defaults,T=v.scrollTrigger,M=v.yoyoEase,S=r.parent||l,C=(N(t)||U(t)?q(t[0]):"length"in r)?[t]:it(t);if(a._targets=C.length?pe(C):J("GSAP target "+t+" not found. https://gsap.com",!x.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=j,E||w||I(_)||I(y)){if(r=a.vars,(u=a.timeline=new $t({data:"nested",defaults:A||{},targets:S&&"nested"===S.data?S.vars.targets:C})).kill(),u.parent=u._dp=s(a),u._start=0,w||I(_)||I(y)){if(d=C.length,f=w&&lt(w),R(w))for(p in w)~ir.indexOf(p)&&(g||(g={}),g[p]=w[p]);for(c=0;c<d;c++)(h=Se(r,or)).stagger=0,M&&(h.yoyoEase=M),g&&Te(h,g),m=C[c],h.duration=+nr(_,s(a),c,m,C),h.delay=(+nr(y,s(a),c,m,C)||0)-a._delay,!w&&1===d&&h.delay&&(a._delay=y=h.delay,a._start+=y,h.delay=0),u.to(m,h,f?f(c,m,C):0),u._ease=zt.none;u.duration()?_=y=0:a.timeline=0}else if(E){Ce(Ae(u.vars.defaults,{ease:"none"})),u._ease=Ht(E.ease||r.ease||"none");var k,O,D,L=0;if(N(E))E.forEach((function(e){return u.to(C,e,">")})),u.duration();else{for(p in h={},E)"ease"===p||"easeEach"===p||sr(p,E[p],h,E.easeEach);for(p in h)for(k=h[p].sort((function(e,t){return e.t-t.t})),L=0,c=0;c<k.length;c++)(D={ease:(O=k[c]).e,duration:(O.t-(c?k[c-1].t:0))/100*_})[p]=O.v,u.to(C,D,L),L+=D.duration;u.duration()<_&&u.to({},{duration:_-u.duration()})}}_||a.duration(_=u.duration())}else a.timeline=0;return!0!==j||i||(Qt=s(a),l.killTweensOf(C),Qt=0),Be(S,s(a),n),r.reversed&&a.reverse(),r.paused&&a.paused(!0),(b||!_&&!E&&a._start===_e(S._time)&&z(b)&&Pe(s(a))&&"nested"!==S.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-y)||0)),T&&He(s(a),T),a}n(t,e);var r=t.prototype;return r.render=function(e,t,r){var s,n,i,a,l,u,c,h,d,p=this._time,m=this._tDur,f=this._dur,g=e<0,v=e>m-A&&!g?m:e<A?0:e;if(f){if(v!==this._tTime||!e||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g){if(s=v,h=this.timeline,this._repeat){if(a=f+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*a+e,t,r);if(s=_e(v%a),v===m?(i=this._repeat,s=f):((i=~~(v/a))&&i===_e(v/a)&&(s=f,i--),s>f&&(s=f)),(u=this._yoyo&&1&i)&&(d=this._yEase,s=f-s),l=ze(this._tTime,a),s===p&&!r&&this._initted&&i===l)return this._tTime=v,this;i!==l&&(h&&this._yEase&&Bt(h,u),this.vars.repeatRefresh&&!u&&!this._lock&&this._time!==a&&this._initted&&(this._lock=r=1,this.render(_e(a*i),!0).invalidate()._lock=0))}if(!this._initted){if(Ve(this,g?e:s,r,t,v))return this._tTime=0,this;if(!(p===this._time||r&&this.vars.repeatRefresh&&i!==l))return this;if(f!==this._dur)return this.render(e,t,r)}if(this._tTime=v,this._time=s,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=c=(d||this._ease)(s/f),this._from&&(this.ratio=c=1-c),s&&!p&&!t&&!i&&(xt(this,"onStart"),this._tTime!==v))return this;for(n=this._pt;n;)n.r(c,n.d),n=n._next;h&&h.render(e<0?e:h._dur*h._ease(s/this._dur),t,r)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(g&&qe(this,e,0,r),xt(this,"onUpdate")),this._repeat&&i!==l&&this.vars.onRepeat&&!t&&this.parent&&xt(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(g&&!this._onUpdate&&qe(this,e,0,!0),(e||!f)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&De(this,1),t||g&&!p||!(v||p||u)||(xt(this,v===m?"onComplete":"onReverseComplete",!0),this._prom&&!(v<m&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,r,s){var n,i,a,l=e.ratio,u=t<0||!t&&(!e._start&&Ge(e)&&(e._initted||!Ye(e))||(e._ts<0||e._dp._ts<0)&&!Ye(e))?0:1,c=e._rDelay,h=0;if(c&&e._repeat&&(h=Je(0,e._tDur,t),i=ze(h,c),e._yoyo&&1&i&&(u=1-u),i!==ze(e._tTime,c)&&(l=1-u,e.vars.repeatRefresh&&e._initted&&e.invalidate())),u!==l||o||s||e._zTime===A||!t&&e._zTime){if(!e._initted&&Ve(e,t,s,r,h))return;for(a=e._zTime,e._zTime=t||(r?A:0),r||(r=t&&!a),e.ratio=u,e._from&&(u=1-u),e._time=0,e._tTime=h,n=e._pt;n;)n.r(u,n.d),n=n._next;t<0&&qe(e,t,0,!0),e._onUpdate&&!r&&xt(e,"onUpdate"),h&&e._repeat&&!r&&e.parent&&xt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===u&&(u&&De(e,1),r||o||(xt(e,u?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,r);return this},r.targets=function(){return this._targets},r.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},r.resetTo=function(e,t,r,s,n){f||Pt.wake(),this._ts||this.play();var i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||rr(this,i),function(e,t,r,s,n,i,o,a){var l,u,c,h,d=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!d)for(d=e._ptCache[t]=[],c=e._ptLookup,h=e._targets.length;h--;){if((l=c[h][t])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==t&&l.fp!==t;)l=l._next;if(!l)return Kt=1,e.vars[t]="+=0",rr(e,o),Kt=0,a?J(t+" not eligible for reset"):1;d.push(l)}for(h=d.length;h--;)(l=(u=d[h])._pt||u).s=!s&&0!==s||n?l.s+(s||0)+i*l.c:s,l.c=r-l.s,u.e&&(u.e=ve(r)+et(u.e)),u.b&&(u.b=l.s+et(u.b))}(this,e,t,r,s,this._ease(i/this._dur),i,n)?this.resetTo(e,t,r,s,1):(Ue(this,0),this.parent||ke(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},r.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?jt(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,Qt&&!0!==Qt.vars.overwrite)._first||jt(this),this.parent&&r!==this.timeline.totalDuration()&&Xe(this,this._dur*this.timeline._tDur/r,0,1),this}var s,n,i,o,a,l,u,c=this._targets,h=e?it(e):c,d=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var r=e.length,s=r===t.length;s&&r--&&e[r]===t[r];);return r<0}(c,h))return"all"===t&&(this._pt=0),jt(this);for(s=this._op=this._op||[],"all"!==t&&(D(t)&&(a={},ge(t,(function(e){return a[e]=1})),t=a),t=function(e,t){var r,s,n,i,o=e[0]?me(e[0]).harness:0,a=o&&o.aliases;if(!a)return t;for(s in r=Te({},t),a)if(s in r)for(n=(i=a[s].split(",")).length;n--;)r[i[n]]=r[s];return r}(c,t)),u=c.length;u--;)if(~h.indexOf(c[u]))for(a in n=d[u],"all"===t?(s[u]=t,o=n,i={}):(i=s[u]=s[u]||{},o=t),o)(l=n&&n[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Oe(this,l,"_pt"),delete n[a]),"all"!==i&&(i[a]=1);return this._initted&&!this._pt&&p&&jt(this),this},t.to=function(e,r){return new t(e,r,arguments[2])},t.from=function(e,t){return Qe(1,arguments)},t.delayedCall=function(e,r,s,n){return new t(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:r,onReverseComplete:r,onCompleteParams:s,onReverseCompleteParams:s,callbackScope:n})},t.fromTo=function(e,t,r){return Qe(2,arguments)},t.set=function(e,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new t(e,r)},t.killTweensOf=function(e,t,r){return l.killTweensOf(e,t,r)},t}(Zt);Ae(ar.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),ge("staggerTo,staggerFrom,staggerFromTo",(function(e){ar[e]=function(){var t=new $t,r=rt.call(arguments,0);return r.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,r)}}));var lr=function(e,t,r){return e[t]=r},ur=function(e,t,r){return e[t](r)},cr=function(e,t,r,s){return e[t](s.fp,r)},hr=function(e,t,r){return e.setAttribute(t,r)},dr=function(e,t){return L(e[t])?ur:P(e[t])&&e.setAttribute?hr:lr},pr=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},mr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},fr=function(e,t){var r=t._pt,s="";if(!e&&t.b)s=t.b;else if(1===e&&t.e)s=t.e;else{for(;r;)s=r.p+(r.m?r.m(r.s+r.c*e):Math.round(1e4*(r.s+r.c*e))/1e4)+s,r=r._next;s+=t.c}t.set(t.t,t.p,s,t)},gr=function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next},vr=function(e,t,r,s){for(var n,i=this._pt;i;)n=i._next,i.p===s&&i.modifier(e,t,r),i=n},_r=function(e){for(var t,r,s=this._pt;s;)r=s._next,s.p===e&&!s.op||s.op===e?Oe(this,s,"_pt"):s.dep||(t=1),s=r;return!t},yr=function(e,t,r,s){s.mSet(e,t,s.m.call(s.tween,r,s.mt),s)},br=function(e){for(var t,r,s,n,i=e._pt;i;){for(t=i._next,r=s;r&&r.pr>i.pr;)r=r._next;(i._prev=r?r._prev:n)?i._prev._next=i:s=i,(i._next=r)?r._prev=i:n=i,i=t}e._pt=s},wr=function(){function e(e,t,r,s,n,i,o,a,l){this.t=t,this.s=s,this.c=n,this.p=r,this.r=i||pr,this.d=o||this,this.set=a||lr,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,r){this.mSet=this.mSet||this.set,this.set=yr,this.m=e,this.mt=r,this.tween=t},e}();ge(de+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return ie[e]=1})),Z.TweenMax=Z.TweenLite=ar,Z.TimelineLite=Z.TimelineMax=$t,l=new $t({sortChildren:!1,defaults:j,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),x.stringFilter=qt;var xr=[],jr={},Er=[],Ar=0,Tr=0,Mr=function(e){return(jr[e]||Er).map((function(e){return e()}))},Sr=function(){var e=Date.now(),t=[];e-Ar>2&&(Mr("matchMediaInit"),xr.forEach((function(e){var r,s,n,i,o=e.queries,a=e.conditions;for(s in o)(r=u.matchMedia(o[s]).matches)&&(n=1),r!==a[s]&&(a[s]=r,i=1);i&&(e.revert(),n&&t.push(e))})),Mr("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e,(function(t){return e.add(null,t)}))})),Ar=e,Mr("matchMedia"))},Cr=function(){function e(e,t){this.selector=t&&ot(t),this.data=[],this._r=[],this.isReverted=!1,this.id=Tr++,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,r){L(e)&&(r=t,t=e,e=L);var s=this,n=function(){var e,n=a,i=s.selector;return n&&n!==s&&n.data.push(s),r&&(s.selector=ot(r)),a=s,e=t.apply(s,arguments),L(e)&&s._r.push(e),a=n,s.selector=i,s.isReverted=!1,e};return s.last=n,e===L?n(s,(function(e){return s.add(null,e)})):e?s[e]=n:n},t.ignore=function(e){var t=a;a=null,e(this),a=t},t.getTweens=function(){var t=[];return this.data.forEach((function(r){return r instanceof e?t.push.apply(t,r.getTweens()):r instanceof ar&&!(r.parent&&"nested"===r.parent.data)&&t.push(r)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var r=this;if(e?function(){for(var t,s=r.getTweens(),n=r.data.length;n--;)"isFlip"===(t=r.data[n]).data&&(t.revert(),t.getChildren(!0,!0,!1).forEach((function(e){return s.splice(s.indexOf(e),1)})));for(s.map((function(e){return{g:e._dur||e._delay||e._sat&&!e._sat.vars.immediateRender?e.globalTime(0):-1/0,t:e}})).sort((function(e,t){return t.g-e.g||-1/0})).forEach((function(t){return t.t.revert(e)})),n=r.data.length;n--;)(t=r.data[n])instanceof $t?"nested"!==t.data&&(t.scrollTrigger&&t.scrollTrigger.revert(),t.kill()):!(t instanceof ar)&&t.revert&&t.revert(e);r._r.forEach((function(t){return t(e,r)})),r.isReverted=!0}():this.data.forEach((function(e){return e.kill&&e.kill()})),this.clear(),t)for(var s=xr.length;s--;)xr[s].id===this.id&&xr.splice(s,1)},t.revert=function(e){this.kill(e||{})},e}(),kr=function(){function e(e){this.contexts=[],this.scope=e,a&&a.data.push(this)}var t=e.prototype;return t.add=function(e,t,r){R(e)||(e={matches:e});var s,n,i,o=new Cr(0,r||this.scope),l=o.conditions={};for(n in a&&!o.selector&&(o.selector=a.selector),this.contexts.push(o),t=o.add("onMatch",t),o.queries=e,e)"all"===n?i=1:(s=u.matchMedia(e[n]))&&(xr.indexOf(o)<0&&xr.push(o),(l[n]=s.matches)&&(i=1),s.addListener?s.addListener(Sr):s.addEventListener("change",Sr));return i&&t(o,(function(e){return o.add(null,e)})),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),Or={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach((function(e){return At(e)}))},timeline:function(e){return new $t(e)},getTweensOf:function(e,t){return l.getTweensOf(e,t)},getProperty:function(e,t,r,s){D(e)&&(e=it(e)[0]);var n=me(e||{}).get,i=r?Ee:je;return"native"===r&&(r=""),e?t?i((le[t]&&le[t].get||n)(e,t,r,s)):function(t,r,s){return i((le[t]&&le[t].get||n)(e,t,r,s))}:e},quickSetter:function(e,t,r){if((e=it(e)).length>1){var s=e.map((function(e){return qr.quickSetter(e,t,r)})),n=s.length;return function(e){for(var t=n;t--;)s[t](e)}}e=e[0]||{};var i=le[t],o=me(e),a=o.harness&&(o.harness.aliases||{})[t]||t,l=i?function(t){var s=new i;m._pt=0,s.init(e,r?t+r:t,m,0,[e]),s.render(1,s),m._pt&&gr(1,m)}:o.set(e,a);return i?l:function(t){return l(e,a,r?t+r:t,o,1)}},quickTo:function(e,t,r){var s,n=qr.to(e,Te(((s={})[t]="+=0.1",s.paused=!0,s),r||{})),i=function(e,r,s){return n.resetTo(t,e,r,s)};return i.tween=n,i},isTweening:function(e){return l.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Ht(e.ease,j.ease)),Me(j,e||{})},config:function(e){return Me(x,e||{})},registerEffect:function(e){var t=e.name,r=e.effect,s=e.plugins,n=e.defaults,i=e.extendTimeline;(s||"").split(",").forEach((function(e){return e&&!le[e]&&!Z[e]&&J(t+" effect requires "+e+" plugin.")})),ue[t]=function(e,t,s){return r(it(e),Ae(t||{},n),s)},i&&($t.prototype[t]=function(e,r,s){return this.add(ue[t](e,R(r)?r:(s=r)&&{},this),s)})},registerEase:function(e,t){zt[e]=Ht(t)},parseEase:function(e,t){return arguments.length?Ht(e,t):zt},getById:function(e){return l.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var r,s,n=new $t(e);for(n.smoothChildTiming=z(e.smoothChildTiming),l.remove(n),n._dp=0,n._time=n._tTime=l._time,r=l._first;r;)s=r._next,!t&&!r._dur&&r instanceof ar&&r.vars.onComplete===r._targets[0]||Be(n,r,r._start-r._delay),r=s;return Be(l,n,0),n},context:function(e,t){return e?new Cr(e,t):a},matchMedia:function(e){return new kr(e)},matchMediaRefresh:function(){return xr.forEach((function(e){var t,r,s=e.conditions;for(r in s)s[r]&&(s[r]=!1,t=1);t&&e.revert()}))||Sr()},addEventListener:function(e,t){var r=jr[e]||(jr[e]=[]);~r.indexOf(t)||r.push(t)},removeEventListener:function(e,t){var r=jr[e],s=r&&r.indexOf(t);s>=0&&r.splice(s,1)},utils:{wrap:gt,wrapYoyo:vt,distribute:lt,random:ht,snap:ct,normalize:mt,getUnit:et,clamp:tt,splitColor:Ct,toArray:it,selector:ot,mapRange:yt,pipe:dt,unitize:pt,interpolate:bt,shuffle:at},install:Q,effects:ue,ticker:Pt,updateRoot:$t.updateRoot,plugins:le,globalTimeline:l,core:{PropTween:wr,globals:ee,Tween:ar,Timeline:$t,Animation:Zt,getCache:me,_removeLinkedListItem:Oe,reverting:function(){return o},context:function(e){return e&&a&&(a.data.push(e),e._ctx=a),a},suppressOverwrites:function(e){return i=e}}};ge("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return Or[e]=ar[e]})),Pt.add($t.updateRoot),m=Or.to({},{duration:0});var Dr=function(e,t){for(var r=e._pt;r&&r.p!==t&&r.op!==t&&r.fp!==t;)r=r._next;return r},Lr=function(e,t){return{name:e,rawVars:1,init:function(e,r,s){s._onInit=function(e){var s,n;if(D(r)&&(s={},ge(r,(function(e){return s[e]=1})),r=s),t){for(n in s={},r)s[n]=t(r[n]);r=s}!function(e,t){var r,s,n,i=e._targets;for(r in t)for(s=i.length;s--;)(n=e._ptLookup[s][r])&&(n=n.d)&&(n._pt&&(n=Dr(n,r)),n&&n.modifier&&n.modifier(t[r],e,i[s],r))}(e,r)}}}},qr=Or.registerPlugin({name:"attr",init:function(e,t,r,s,n){var i,o,a;for(i in this.tween=r,t)a=e.getAttribute(i)||"",(o=this.add(e,"setAttribute",(a||0)+"",t[i],s,n,0,0,i)).op=i,o.b=a,this._props.push(i)},render:function(e,t){for(var r=t._pt;r;)o?r.set(r.t,r.p,r.b,r):r.r(e,r.d),r=r._next}},{name:"endArray",init:function(e,t){for(var r=t.length;r--;)this.add(e,r,e[r]||0,t[r],0,0,0,0,0,1)}},Lr("roundProps",ut),Lr("modifiers"),Lr("snap",ct))||Or;ar.version=$t.version=qr.version="3.12.5",d=1,F()&&Rt();var Pr=zt.Power0,Rr=zt.Power1,zr=zt.Power2,Fr=zt.Power3,Ir=zt.Power4,Ur=zt.Linear,Nr=zt.Quad,Br=zt.Cubic,Hr=zt.Quart,Vr=zt.Quint,Gr=zt.Strong,Yr=zt.Elastic,Xr=zt.Back,Wr=zt.SteppedEase,Zr=zt.Bounce,$r=zt.Sine,Qr=zt.Expo,Kr=zt.Circ},"./node_modules/gsap/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Back:()=>s.Back,Bounce:()=>s.Bounce,CSSPlugin:()=>n.CSSPlugin,Circ:()=>s.Circ,Cubic:()=>s.Cubic,Elastic:()=>s.Elastic,Expo:()=>s.Expo,Linear:()=>s.Linear,Power0:()=>s.Power0,Power1:()=>s.Power1,Power2:()=>s.Power2,Power3:()=>s.Power3,Power4:()=>s.Power4,Quad:()=>s.Quad,Quart:()=>s.Quart,Quint:()=>s.Quint,Sine:()=>s.Sine,SteppedEase:()=>s.SteppedEase,Strong:()=>s.Strong,TimelineLite:()=>s.TimelineLite,TimelineMax:()=>s.TimelineMax,TweenLite:()=>s.TweenLite,TweenMax:()=>o,default:()=>i,gsap:()=>i});var s=r("./node_modules/gsap/gsap-core.js"),n=r("./node_modules/gsap/CSSPlugin.js"),i=s.gsap.registerPlugin(n.CSSPlugin)||s.gsap,o=i.core.Tween},"./node_modules/html-entities/lib/index.js":function(e,t,r){"use strict";var s=this&&this.__assign||function(){return s=Object.assign||function(e){for(var t,r=1,s=arguments.length;r<s;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},s.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/named-references.js"),i=r("./node_modules/html-entities/lib/numeric-unicode-map.js"),o=r("./node_modules/html-entities/lib/surrogate-pairs.js"),a=s(s({},n.namedReferences),{all:n.namedReferences.html5});function l(e,t,r){t.lastIndex=0;var s,n=t.exec(e);if(n){s="";var i=0;do{i!==n.index&&(s+=e.substring(i,n.index));var o=n[0];s+=r(o),i=n.index+o.length}while(n=t.exec(e));i!==e.length&&(s+=e.substring(i))}else s=e;return s}var u={specialChars:/[<>'"&]/g,nonAscii:/[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,nonAsciiPrintable:/[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,nonAsciiPrintableOnly:/[\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,extensive:/[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g},c={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var r=void 0===t?c:t,s=r.mode,n=void 0===s?"specialChars":s,i=r.numeric,h=void 0===i?"decimal":i,d=r.level;if(!e)return"";var p=u[n],m=a[void 0===d?"all":d].characters,f="hexadecimal"===h;return l(e,p,(function(e){var t=m[e];if(!t){var r=e.length>1?o.getCodePoint(e,0):e.charCodeAt(0);t=(f?"&#x"+r.toString(16):"&#"+r)+";"}return t}))};var h={scope:"body",level:"all"},d=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,p=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,m={xml:{strict:d,attribute:p,body:n.bodyRegExps.xml},html4:{strict:d,attribute:p,body:n.bodyRegExps.html4},html5:{strict:d,attribute:p,body:n.bodyRegExps.html5}},f=s(s({},m),{all:m.html5}),g=String.fromCharCode,v=g(65533),_={level:"all"};function y(e,t,r,s){var n=e,a=e[e.length-1];if(r&&"="===a)n=e;else if(s&&";"!==a)n=e;else{var l=t[e];if(l)n=l;else if("&"===e[0]&&"#"===e[1]){var u=e[2],c="x"==u||"X"==u?parseInt(e.substr(3),16):parseInt(e.substr(2));n=c>=1114111?v:c>65535?o.fromCodePoint(c):g(i.numericUnicodeMap[c]||c)}}return n}t.decodeEntity=function(e,t){var r=(void 0===t?_:t).level;return e?y(e,a[void 0===r?"all":r].entities,!1,!1):""},t.decode=function(e,t){var r=void 0===t?h:t,s=r.level,n=void 0===s?"all":s,i=r.scope,o=void 0===i?"xml"===n?"strict":"body":i;if(!e)return"";var u=f[n][o],c=a[n].entities,d="attribute"===o,p="strict"===o;return l(e,u,(function(e){return y(e,c,d,p)}))}},"./node_modules/html-entities/lib/named-references.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&notin;|&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&centerdot;|&copysr;|&divideontimes;|&gtcc;|&gtcir;|&gtdot;|&gtlPar;|&gtquest;|&gtrapprox;|&gtrarr;|&gtrdot;|&gtreqless;|&gtreqqless;|&gtrless;|&gtrsim;|&ltcc;|&ltcir;|&ltdot;|&lthree;|&ltimes;|&ltlarr;|&ltquest;|&ltrPar;|&ltri;|&ltrie;|&ltrif;|&notin;|&notinE;|&notindot;|&notinva;|&notinvb;|&notinvc;|&notni;|&notniva;|&notnivb;|&notnivc;|&parallel;|&timesb;|&timesbar;|&timesd;|&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;",ª:"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;",µ:"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;",º:"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;",À:"&Agrave;",Á:"&Aacute;",Â:"&Acirc;",Ã:"&Atilde;",Ä:"&Auml;",Å:"&Aring;",Æ:"&AElig;",Ç:"&Ccedil;",È:"&Egrave;",É:"&Eacute;",Ê:"&Ecirc;",Ë:"&Euml;",Ì:"&Igrave;",Í:"&Iacute;",Î:"&Icirc;",Ï:"&Iuml;",Ð:"&ETH;",Ñ:"&Ntilde;",Ò:"&Ograve;",Ó:"&Oacute;",Ô:"&Ocirc;",Õ:"&Otilde;",Ö:"&Ouml;","×":"&times;",Ø:"&Oslash;",Ù:"&Ugrave;",Ú:"&Uacute;",Û:"&Ucirc;",Ü:"&Uuml;",Ý:"&Yacute;",Þ:"&THORN;",ß:"&szlig;",à:"&agrave;",á:"&aacute;",â:"&acirc;",ã:"&atilde;",ä:"&auml;",å:"&aring;",æ:"&aelig;",ç:"&ccedil;",è:"&egrave;",é:"&eacute;",ê:"&ecirc;",ë:"&euml;",ì:"&igrave;",í:"&iacute;",î:"&icirc;",ï:"&iuml;",ð:"&eth;",ñ:"&ntilde;",ò:"&ograve;",ó:"&oacute;",ô:"&ocirc;",õ:"&otilde;",ö:"&ouml;","÷":"&divide;",ø:"&oslash;",ù:"&ugrave;",ú:"&uacute;",û:"&ucirc;",ü:"&uuml;",ý:"&yacute;",þ:"&thorn;",ÿ:"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;",Œ:"&OElig;",œ:"&oelig;",Š:"&Scaron;",š:"&scaron;",Ÿ:"&Yuml;",ˆ:"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;",ƒ:"&fnof;",Α:"&Alpha;",Β:"&Beta;",Γ:"&Gamma;",Δ:"&Delta;",Ε:"&Epsilon;",Ζ:"&Zeta;",Η:"&Eta;",Θ:"&Theta;",Ι:"&Iota;",Κ:"&Kappa;",Λ:"&Lambda;",Μ:"&Mu;",Ν:"&Nu;",Ξ:"&Xi;",Ο:"&Omicron;",Π:"&Pi;",Ρ:"&Rho;",Σ:"&Sigma;",Τ:"&Tau;",Υ:"&Upsilon;",Φ:"&Phi;",Χ:"&Chi;",Ψ:"&Psi;",Ω:"&Omega;",α:"&alpha;",β:"&beta;",γ:"&gamma;",δ:"&delta;",ε:"&epsilon;",ζ:"&zeta;",η:"&eta;",θ:"&theta;",ι:"&iota;",κ:"&kappa;",λ:"&lambda;",μ:"&mu;",ν:"&nu;",ξ:"&xi;",ο:"&omicron;",π:"&pi;",ρ:"&rho;",ς:"&sigmaf;",σ:"&sigma;",τ:"&tau;",υ:"&upsilon;",φ:"&phi;",χ:"&chi;",ψ:"&psi;",ω:"&omega;",ϑ:"&thetasym;",ϒ:"&upsih;",ϖ:"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;",℘:"&weierp;",ℑ:"&image;",ℜ:"&real;","™":"&trade;",ℵ:"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{Æ:"&AElig;","&":"&amp;",Á:"&Aacute;",Ă:"&Abreve;",Â:"&Acirc;",А:"&Acy;",𝔄:"&Afr;",À:"&Agrave;",Α:"&Alpha;",Ā:"&Amacr;","⩓":"&And;",Ą:"&Aogon;",𝔸:"&Aopf;","⁡":"&af;",Å:"&angst;",𝒜:"&Ascr;","≔":"&coloneq;",Ã:"&Atilde;",Ä:"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;",Б:"&Bcy;","∵":"&because;",ℬ:"&bernou;",Β:"&Beta;",𝔅:"&Bfr;",𝔹:"&Bopf;","˘":"&breve;","≎":"&bump;",Ч:"&CHcy;","©":"&copy;",Ć:"&Cacute;","⋒":"&Cap;",ⅅ:"&DD;",ℭ:"&Cfr;",Č:"&Ccaron;",Ç:"&Ccedil;",Ĉ:"&Ccirc;","∰":"&Cconint;",Ċ:"&Cdot;","¸":"&cedil;","·":"&middot;",Χ:"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;",ℂ:"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;",𝒞:"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;",Ђ:"&DJcy;",Ѕ:"&DScy;",Џ:"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;",Ď:"&Dcaron;",Д:"&Dcy;","∇":"&nabla;",Δ:"&Delta;",𝔇:"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;",ⅆ:"&dd;",𝔻:"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;",𝒟:"&Dscr;",Đ:"&Dstrok;",Ŋ:"&ENG;",Ð:"&ETH;",É:"&Eacute;",Ě:"&Ecaron;",Ê:"&Ecirc;",Э:"&Ecy;",Ė:"&Edot;",𝔈:"&Efr;",È:"&Egrave;","∈":"&isinv;",Ē:"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;",Ę:"&Eogon;",𝔼:"&Eopf;",Ε:"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;",ℰ:"&expectation;","⩳":"&Esim;",Η:"&Eta;",Ë:"&Euml;","∃":"&exist;",ⅇ:"&exponentiale;",Ф:"&Fcy;",𝔉:"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;",𝔽:"&Fopf;","∀":"&forall;",ℱ:"&Fscr;",Ѓ:"&GJcy;",">":"&gt;",Γ:"&Gamma;",Ϝ:"&Gammad;",Ğ:"&Gbreve;",Ģ:"&Gcedil;",Ĝ:"&Gcirc;",Г:"&Gcy;",Ġ:"&Gdot;",𝔊:"&Gfr;","⋙":"&ggg;",𝔾:"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;",𝒢:"&Gscr;","≫":"&gg;",Ъ:"&HARDcy;",ˇ:"&caron;","^":"&Hat;",Ĥ:"&Hcirc;",ℌ:"&Poincareplane;",ℋ:"&hamilt;",ℍ:"&quaternions;","─":"&boxh;",Ħ:"&Hstrok;","≏":"&bumpeq;",Е:"&IEcy;",Ĳ:"&IJlig;",Ё:"&IOcy;",Í:"&Iacute;",Î:"&Icirc;",И:"&Icy;",İ:"&Idot;",ℑ:"&imagpart;",Ì:"&Igrave;",Ī:"&Imacr;",ⅈ:"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;",Į:"&Iogon;",𝕀:"&Iopf;",Ι:"&Iota;",ℐ:"&imagline;",Ĩ:"&Itilde;",І:"&Iukcy;",Ï:"&Iuml;",Ĵ:"&Jcirc;",Й:"&Jcy;",𝔍:"&Jfr;",𝕁:"&Jopf;",𝒥:"&Jscr;",Ј:"&Jsercy;",Є:"&Jukcy;",Х:"&KHcy;",Ќ:"&KJcy;",Κ:"&Kappa;",Ķ:"&Kcedil;",К:"&Kcy;",𝔎:"&Kfr;",𝕂:"&Kopf;",𝒦:"&Kscr;",Љ:"&LJcy;","<":"&lt;",Ĺ:"&Lacute;",Λ:"&Lambda;","⟪":"&Lang;",ℒ:"&lagran;","↞":"&twoheadleftarrow;",Ľ:"&Lcaron;",Ļ:"&Lcedil;",Л:"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;",𝔏:"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;",Ŀ:"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;",𝕃:"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;",Ł:"&Lstrok;","≪":"&ll;","⤅":"&Map;",М:"&Mcy;"," ":"&MediumSpace;",ℳ:"&phmmat;",𝔐:"&Mfr;","∓":"&mp;",𝕄:"&Mopf;",Μ:"&Mu;",Њ:"&NJcy;",Ń:"&Nacute;",Ň:"&Ncaron;",Ņ:"&Ncedil;",Н:"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;",𝔑:"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;",ℕ:"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;",𝒩:"&Nscr;",Ñ:"&Ntilde;",Ν:"&Nu;",Œ:"&OElig;",Ó:"&Oacute;",Ô:"&Ocirc;",О:"&Ocy;",Ő:"&Odblac;",𝔒:"&Ofr;",Ò:"&Ograve;",Ō:"&Omacr;",Ω:"&ohm;",Ο:"&Omicron;",𝕆:"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;",𝒪:"&Oscr;",Ø:"&Oslash;",Õ:"&Otilde;","⨷":"&Otimes;",Ö:"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;",П:"&Pcy;",𝔓:"&Pfr;",Φ:"&Phi;",Π:"&Pi;","±":"&pm;",ℙ:"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;",𝒫:"&Pscr;",Ψ:"&Psi;",'"':"&quot;",𝔔:"&Qfr;",ℚ:"&rationals;",𝒬:"&Qscr;","⤐":"&drbkarow;","®":"&reg;",Ŕ:"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;",Ř:"&Rcaron;",Ŗ:"&Rcedil;",Р:"&Rcy;",ℜ:"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;",Ρ:"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;",ℝ:"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;",ℛ:"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;",Щ:"&SHCHcy;",Ш:"&SHcy;",Ь:"&SOFTcy;",Ś:"&Sacute;","⪼":"&Sc;",Š:"&Scaron;",Ş:"&Scedil;",Ŝ:"&Scirc;",С:"&Scy;",𝔖:"&Sfr;","↑":"&uparrow;",Σ:"&Sigma;","∘":"&compfn;",𝕊:"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;",𝒮:"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;",Þ:"&THORN;","™":"&trade;",Ћ:"&TSHcy;",Ц:"&TScy;","\t":"&Tab;",Τ:"&Tau;",Ť:"&Tcaron;",Ţ:"&Tcedil;",Т:"&Tcy;",𝔗:"&Tfr;","∴":"&therefore;",Θ:"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;",𝕋:"&Topf;","⃛":"&tdot;",𝒯:"&Tscr;",Ŧ:"&Tstrok;",Ú:"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;",Ў:"&Ubrcy;",Ŭ:"&Ubreve;",Û:"&Ucirc;",У:"&Ucy;",Ű:"&Udblac;",𝔘:"&Ufr;",Ù:"&Ugrave;",Ū:"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;",Ų:"&Uogon;",𝕌:"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;",ϒ:"&upsih;",Υ:"&Upsilon;",Ů:"&Uring;",𝒰:"&Uscr;",Ũ:"&Utilde;",Ü:"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;",В:"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;",𝔙:"&Vfr;",𝕍:"&Vopf;",𝒱:"&Vscr;","⊪":"&Vvdash;",Ŵ:"&Wcirc;","⋀":"&xwedge;",𝔚:"&Wfr;",𝕎:"&Wopf;",𝒲:"&Wscr;",𝔛:"&Xfr;",Ξ:"&Xi;",𝕏:"&Xopf;",𝒳:"&Xscr;",Я:"&YAcy;",Ї:"&YIcy;",Ю:"&YUcy;",Ý:"&Yacute;",Ŷ:"&Ycirc;",Ы:"&Ycy;",𝔜:"&Yfr;",𝕐:"&Yopf;",𝒴:"&Yscr;",Ÿ:"&Yuml;",Ж:"&ZHcy;",Ź:"&Zacute;",Ž:"&Zcaron;",З:"&Zcy;",Ż:"&Zdot;",Ζ:"&Zeta;",ℨ:"&zeetrf;",ℤ:"&integers;",𝒵:"&Zscr;",á:"&aacute;",ă:"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;",â:"&acirc;",а:"&acy;",æ:"&aelig;",𝔞:"&afr;",à:"&agrave;",ℵ:"&aleph;",α:"&alpha;",ā:"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;",ą:"&aogon;",𝕒:"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;",å:"&aring;",𝒶:"&ascr;","*":"&midast;",ã:"&atilde;",ä:"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;",б:"&bcy;","„":"&ldquor;","⦰":"&bemptyv;",β:"&beta;",ℶ:"&beth;","≬":"&twixt;",𝔟:"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;",𝕓:"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;",𝒷:"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;",ć:"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;",č:"&ccaron;",ç:"&ccedil;",ĉ:"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;",ċ:"&cdot;","⦲":"&cemptyv;","¢":"&cent;",𝔠:"&cfr;",ч:"&chcy;","✓":"&checkmark;",χ:"&chi;","○":"&cir;","⧃":"&cirE;",ˆ:"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;",𝕔:"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;",𝒸:"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;",ℸ:"&daleth;","‐":"&hyphen;","⤏":"&rBarr;",ď:"&dcaron;",д:"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;",δ:"&delta;","⦱":"&demptyv;","⥿":"&dfisht;",𝔡:"&dfr;","♦":"&diams;",ϝ:"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;",ђ:"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;",𝕕:"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;",𝒹:"&dscr;",ѕ:"&dscy;","⧶":"&dsol;",đ:"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;",џ:"&dzcy;","⟿":"&dzigrarr;",é:"&eacute;","⩮":"&easter;",ě:"&ecaron;","≖":"&eqcirc;",ê:"&ecirc;","≕":"&eqcolon;",э:"&ecy;",ė:"&edot;","≒":"&fallingdotseq;",𝔢:"&efr;","⪚":"&eg;",è:"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;",ℓ:"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;",ē:"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;",ŋ:"&eng;"," ":"&ensp;",ę:"&eogon;",𝕖:"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;",ε:"&epsilon;",ϵ:"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;",ℯ:"&escr;",η:"&eta;",ð:"&eth;",ë:"&euml;","€":"&euro;","!":"&excl;",ф:"&fcy;","♀":"&female;",ﬃ:"&ffilig;",ﬀ:"&fflig;",ﬄ:"&ffllig;",𝔣:"&ffr;",ﬁ:"&filig;",fj:"&fjlig;","♭":"&flat;",ﬂ:"&fllig;","▱":"&fltns;",ƒ:"&fnof;",𝕗:"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;",𝒻:"&fscr;","⪌":"&gtreqqless;",ǵ:"&gacute;",γ:"&gamma;","⪆":"&gtrapprox;",ğ:"&gbreve;",ĝ:"&gcirc;",г:"&gcy;",ġ:"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;",𝔤:"&gfr;",ℷ:"&gimel;",ѓ:"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;",𝕘:"&gopf;",ℊ:"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;",ъ:"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;",ℏ:"&plankv;",ĥ:"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;",𝔥:"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;",𝕙:"&hopf;","―":"&horbar;",𝒽:"&hscr;",ħ:"&hstrok;","⁃":"&hybull;",í:"&iacute;",î:"&icirc;",и:"&icy;",е:"&iecy;","¡":"&iexcl;",𝔦:"&ifr;",ì:"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;",ĳ:"&ijlig;",ī:"&imacr;",ı:"&inodot;","⊷":"&imof;",Ƶ:"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;",ё:"&iocy;",į:"&iogon;",𝕚:"&iopf;",ι:"&iota;","¿":"&iquest;",𝒾:"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;",ĩ:"&itilde;",і:"&iukcy;",ï:"&iuml;",ĵ:"&jcirc;",й:"&jcy;",𝔧:"&jfr;",ȷ:"&jmath;",𝕛:"&jopf;",𝒿:"&jscr;",ј:"&jsercy;",є:"&jukcy;",κ:"&kappa;",ϰ:"&varkappa;",ķ:"&kcedil;",к:"&kcy;",𝔨:"&kfr;",ĸ:"&kgreen;",х:"&khcy;",ќ:"&kjcy;",𝕜:"&kopf;",𝓀:"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;",ĺ:"&lacute;","⦴":"&laemptyv;",λ:"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;",ľ:"&lcaron;",ļ:"&lcedil;",л:"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;",𝔩:"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;",љ:"&ljcy;","⥫":"&llhard;","◺":"&lltri;",ŀ:"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;",𝕝:"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;",𝓁:"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;",ł:"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;",м:"&mcy;","—":"&mdash;",𝔪:"&mfr;","℧":"&mho;",µ:"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;",𝕞:"&mopf;",𝓂:"&mscr;",μ:"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;",ń:"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;",ŉ:"&napos;","♮":"&natural;","⩃":"&ncap;",ň:"&ncaron;",ņ:"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;",н:"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;",𝔫:"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;",њ:"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;",𝕟:"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;",𝓃:"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;",ñ:"&ntilde;",ν:"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;",ó:"&oacute;",ô:"&ocirc;",о:"&ocy;",ő:"&odblac;","⨸":"&odiv;","⦼":"&odsold;",œ:"&oelig;","⦿":"&ofcir;",𝔬:"&ofr;","˛":"&ogon;",ò:"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;",ō:"&omacr;",ω:"&omega;",ο:"&omicron;","⦶":"&omid;",𝕠:"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;",ℴ:"&oscr;",ª:"&ordf;",º:"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;",ø:"&oslash;","⊘":"&osol;",õ:"&otilde;","⨶":"&otimesas;",ö:"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;",п:"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;",𝔭:"&pfr;",φ:"&phi;",ϕ:"&varphi;","☎":"&phone;",π:"&pi;",ϖ:"&varpi;",ℎ:"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;",𝕡:"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;",𝓅:"&pscr;",ψ:"&psi;"," ":"&puncsp;",𝔮:"&qfr;",𝕢:"&qopf;","⁗":"&qprime;",𝓆:"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;",ŕ:"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;",ř:"&rcaron;",ŗ:"&rcedil;",р:"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;",𝔯:"&rfr;","⥬":"&rharul;",ρ:"&rho;",ϱ:"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;",𝕣:"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;",𝓇:"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;",ś:"&sacute;","⪴":"&scE;","⪸":"&succapprox;",š:"&scaron;",ş:"&scedil;",ŝ:"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;",с:"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;",𝔰:"&sfr;","♯":"&sharp;",щ:"&shchcy;",ш:"&shcy;","­":"&shy;",σ:"&sigma;",ς:"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;",ь:"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;",𝕤:"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;",𝓈:"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;",ß:"&szlig;","⌖":"&target;",τ:"&tau;",ť:"&tcaron;",ţ:"&tcedil;",т:"&tcy;","⌕":"&telrec;",𝔱:"&tfr;",θ:"&theta;",ϑ:"&vartheta;",þ:"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;",𝕥:"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;",𝓉:"&tscr;",ц:"&tscy;",ћ:"&tshcy;",ŧ:"&tstrok;","⥣":"&uHar;",ú:"&uacute;",ў:"&ubrcy;",ŭ:"&ubreve;",û:"&ucirc;",у:"&ucy;",ű:"&udblac;","⥾":"&ufisht;",𝔲:"&ufr;",ù:"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;",ū:"&umacr;",ų:"&uogon;",𝕦:"&uopf;",υ:"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;",ů:"&uring;","◹":"&urtri;",𝓊:"&uscr;","⋰":"&utdot;",ũ:"&utilde;",ü:"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;",в:"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;",𝔳:"&vfr;",𝕧:"&vopf;",𝓋:"&vscr;","⦚":"&vzigzag;",ŵ:"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;",℘:"&wp;",𝔴:"&wfr;",𝕨:"&wopf;",𝓌:"&wscr;",𝔵:"&xfr;",ξ:"&xi;","⋻":"&xnis;",𝕩:"&xopf;",𝓍:"&xscr;",ý:"&yacute;",я:"&yacy;",ŷ:"&ycirc;",ы:"&ycy;","¥":"&yen;",𝔶:"&yfr;",ї:"&yicy;",𝕪:"&yopf;",𝓎:"&yscr;",ю:"&yucy;",ÿ:"&yuml;",ź:"&zacute;",ž:"&zcaron;",з:"&zcy;",ż:"&zdot;",ζ:"&zeta;",𝔷:"&zfr;",ж:"&zhcy;","⇝":"&zigrarr;",𝕫:"&zopf;",𝓏:"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"./node_modules/html-entities/lib/numeric-unicode-map.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/lodash/_DataView.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"DataView");e.exports=s},"./node_modules/lodash/_Hash.js":(e,t,r)=>{var s=r("./node_modules/lodash/_hashClear.js"),n=r("./node_modules/lodash/_hashDelete.js"),i=r("./node_modules/lodash/_hashGet.js"),o=r("./node_modules/lodash/_hashHas.js"),a=r("./node_modules/lodash/_hashSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_ListCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_listCacheClear.js"),n=r("./node_modules/lodash/_listCacheDelete.js"),i=r("./node_modules/lodash/_listCacheGet.js"),o=r("./node_modules/lodash/_listCacheHas.js"),a=r("./node_modules/lodash/_listCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Map.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Map");e.exports=s},"./node_modules/lodash/_MapCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_mapCacheClear.js"),n=r("./node_modules/lodash/_mapCacheDelete.js"),i=r("./node_modules/lodash/_mapCacheGet.js"),o=r("./node_modules/lodash/_mapCacheHas.js"),a=r("./node_modules/lodash/_mapCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Promise.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Promise");e.exports=s},"./node_modules/lodash/_Set.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Set");e.exports=s},"./node_modules/lodash/_SetCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_MapCache.js"),n=r("./node_modules/lodash/_setCacheAdd.js"),i=r("./node_modules/lodash/_setCacheHas.js");function o(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new s;++t<r;)this.add(e[t])}o.prototype.add=o.prototype.push=n,o.prototype.has=i,e.exports=o},"./node_modules/lodash/_Stack.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js"),n=r("./node_modules/lodash/_stackClear.js"),i=r("./node_modules/lodash/_stackDelete.js"),o=r("./node_modules/lodash/_stackGet.js"),a=r("./node_modules/lodash/_stackHas.js"),l=r("./node_modules/lodash/_stackSet.js");function u(e){var t=this.__data__=new s(e);this.size=t.size}u.prototype.clear=n,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=a,u.prototype.set=l,e.exports=u},"./node_modules/lodash/_Symbol.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js").Symbol;e.exports=s},"./node_modules/lodash/_Uint8Array.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js").Uint8Array;e.exports=s},"./node_modules/lodash/_WeakMap.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"WeakMap");e.exports=s},"./node_modules/lodash/_arrayEach.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length;++r<s&&!1!==t(e[r],r,e););return e}},"./node_modules/lodash/_arrayFilter.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length,n=0,i=[];++r<s;){var o=e[r];t(o,r,e)&&(i[n++]=o)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseTimes.js"),n=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isBuffer.js"),a=r("./node_modules/lodash/_isIndex.js"),l=r("./node_modules/lodash/isTypedArray.js"),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=i(e),c=!r&&n(e),h=!r&&!c&&o(e),d=!r&&!c&&!h&&l(e),p=r||c||h||d,m=p?s(e.length,String):[],f=m.length;for(var g in e)!t&&!u.call(e,g)||p&&("length"==g||h&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,f))||m.push(g);return m}},"./node_modules/lodash/_arrayMap.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length,n=Array(s);++r<s;)n[r]=t(e[r],r,e);return n}},"./node_modules/lodash/_arrayPush.js":e=>{e.exports=function(e,t){for(var r=-1,s=t.length,n=e.length;++r<s;)e[n+r]=t[r];return e}},"./node_modules/lodash/_arraySome.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length;++r<s;)if(t(e[r],r,e))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(e,t,r)=>{var s=r("./node_modules/lodash/eq.js");e.exports=function(e,t){for(var r=e.length;r--;)if(s(e[r][0],t))return r;return-1}},"./node_modules/lodash/_baseEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseForOwn.js"),n=r("./node_modules/lodash/_createBaseEach.js")(s);e.exports=n},"./node_modules/lodash/_baseFor.js":(e,t,r)=>{var s=r("./node_modules/lodash/_createBaseFor.js")();e.exports=s},"./node_modules/lodash/_baseForOwn.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseFor.js"),n=r("./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&s(e,t,n)}},"./node_modules/lodash/_baseGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_castPath.js"),n=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){for(var r=0,i=(t=s(t,e)).length;null!=e&&r<i;)e=e[n(t[r++])];return r&&r==i?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayPush.js"),n=r("./node_modules/lodash/isArray.js");e.exports=function(e,t,r){var i=t(e);return n(e)?i:s(i,r(e))}},"./node_modules/lodash/_baseGetTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_getRawTag.js"),i=r("./node_modules/lodash/_objectToString.js"),o=s?s.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":o&&o in Object(e)?n(e):i(e)}},"./node_modules/lodash/_baseHasIn.js":e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},"./node_modules/lodash/_baseIsArguments.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return n(e)&&"[object Arguments]"==s(e)}},"./node_modules/lodash/_baseIsEqual.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsEqualDeep.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function e(t,r,i,o,a){return t===r||(null==t||null==r||!n(t)&&!n(r)?t!=t&&r!=r:s(t,r,i,o,e,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Stack.js"),n=r("./node_modules/lodash/_equalArrays.js"),i=r("./node_modules/lodash/_equalByTag.js"),o=r("./node_modules/lodash/_equalObjects.js"),a=r("./node_modules/lodash/_getTag.js"),l=r("./node_modules/lodash/isArray.js"),u=r("./node_modules/lodash/isBuffer.js"),c=r("./node_modules/lodash/isTypedArray.js"),h="[object Arguments]",d="[object Array]",p="[object Object]",m=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,f,g,v){var _=l(e),y=l(t),b=_?d:a(e),w=y?d:a(t),x=(b=b==h?p:b)==p,j=(w=w==h?p:w)==p,E=b==w;if(E&&u(e)){if(!u(t))return!1;_=!0,x=!1}if(E&&!x)return v||(v=new s),_||c(e)?n(e,t,r,f,g,v):i(e,t,b,r,f,g,v);if(!(1&r)){var A=x&&m.call(e,"__wrapped__"),T=j&&m.call(t,"__wrapped__");if(A||T){var M=A?e.value():e,S=T?t.value():t;return v||(v=new s),g(M,S,r,f,v)}}return!!E&&(v||(v=new s),o(e,t,r,f,g,v))}},"./node_modules/lodash/_baseIsMatch.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Stack.js"),n=r("./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,t,r,i){var o=r.length,a=o,l=!i;if(null==e)return!a;for(e=Object(e);o--;){var u=r[o];if(l&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var c=(u=r[o])[0],h=e[c],d=u[1];if(l&&u[2]){if(void 0===h&&!(c in e))return!1}else{var p=new s;if(i)var m=i(h,d,c,e,t,p);if(!(void 0===m?n(d,h,3,i,p):m))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(e,t,r)=>{var s=r("./node_modules/lodash/isFunction.js"),n=r("./node_modules/lodash/_isMasked.js"),i=r("./node_modules/lodash/isObject.js"),o=r("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,l=Function.prototype,u=Object.prototype,c=l.toString,h=u.hasOwnProperty,d=RegExp("^"+c.call(h).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||n(e))&&(s(e)?d:a).test(o(e))}},"./node_modules/lodash/_baseIsTypedArray.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isLength.js"),i=r("./node_modules/lodash/isObjectLike.js"),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&n(e.length)&&!!o[s(e)]}},"./node_modules/lodash/_baseIteratee.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseMatches.js"),n=r("./node_modules/lodash/_baseMatchesProperty.js"),i=r("./node_modules/lodash/identity.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?o(e)?n(e[0],e[1]):s(e):a(e)}},"./node_modules/lodash/_baseKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isPrototype.js"),n=r("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!s(e))return n(e);var t=[];for(var r in Object(e))i.call(e,r)&&"constructor"!=r&&t.push(r);return t}},"./node_modules/lodash/_baseMap.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseEach.js"),n=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){var r=-1,i=n(e)?Array(e.length):[];return s(e,(function(e,s,n){i[++r]=t(e,s,n)})),i}},"./node_modules/lodash/_baseMatches.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsMatch.js"),n=r("./node_modules/lodash/_getMatchData.js"),i=r("./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var t=n(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(r){return r===e||s(r,e,t)}}},"./node_modules/lodash/_baseMatchesProperty.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsEqual.js"),n=r("./node_modules/lodash/get.js"),i=r("./node_modules/lodash/hasIn.js"),o=r("./node_modules/lodash/_isKey.js"),a=r("./node_modules/lodash/_isStrictComparable.js"),l=r("./node_modules/lodash/_matchesStrictComparable.js"),u=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){return o(e)&&a(t)?l(u(e),t):function(r){var o=n(r,e);return void 0===o&&o===t?i(r,e):s(t,o,3)}}},"./node_modules/lodash/_baseProperty.js":e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},"./node_modules/lodash/_basePropertyDeep.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(t){return s(t,e)}}},"./node_modules/lodash/_baseTimes.js":e=>{e.exports=function(e,t){for(var r=-1,s=Array(e);++r<e;)s[r]=t(r);return s}},"./node_modules/lodash/_baseToString.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_arrayMap.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isSymbol.js"),a=s?s.prototype:void 0,l=a?a.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return n(t,e)+"";if(o(t))return l?l.call(t):"";var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}},"./node_modules/lodash/_baseUnary.js":e=>{e.exports=function(e){return function(t){return e(t)}}},"./node_modules/lodash/_cacheHas.js":e=>{e.exports=function(e,t){return e.has(t)}},"./node_modules/lodash/_castFunction.js":(e,t,r)=>{var s=r("./node_modules/lodash/identity.js");e.exports=function(e){return"function"==typeof e?e:s}},"./node_modules/lodash/_castPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArray.js"),n=r("./node_modules/lodash/_isKey.js"),i=r("./node_modules/lodash/_stringToPath.js"),o=r("./node_modules/lodash/toString.js");e.exports=function(e,t){return s(e)?e:n(e,t)?[e]:i(o(e))}},"./node_modules/lodash/_coreJsData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=s},"./node_modules/lodash/_createBaseEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){return function(r,n){if(null==r)return r;if(!s(r))return e(r,n);for(var i=r.length,o=t?i:-1,a=Object(r);(t?o--:++o<i)&&!1!==n(a[o],o,a););return r}}},"./node_modules/lodash/_createBaseFor.js":e=>{e.exports=function(e){return function(t,r,s){for(var n=-1,i=Object(t),o=s(t),a=o.length;a--;){var l=o[e?a:++n];if(!1===r(i[l],l,i))break}return t}}},"./node_modules/lodash/_equalArrays.js":(e,t,r)=>{var s=r("./node_modules/lodash/_SetCache.js"),n=r("./node_modules/lodash/_arraySome.js"),i=r("./node_modules/lodash/_cacheHas.js");e.exports=function(e,t,r,o,a,l){var u=1&r,c=e.length,h=t.length;if(c!=h&&!(u&&h>c))return!1;var d=l.get(e),p=l.get(t);if(d&&p)return d==t&&p==e;var m=-1,f=!0,g=2&r?new s:void 0;for(l.set(e,t),l.set(t,e);++m<c;){var v=e[m],_=t[m];if(o)var y=u?o(_,v,m,t,e,l):o(v,_,m,e,t,l);if(void 0!==y){if(y)continue;f=!1;break}if(g){if(!n(t,(function(e,t){if(!i(g,t)&&(v===e||a(v,e,r,o,l)))return g.push(t)}))){f=!1;break}}else if(v!==_&&!a(v,_,r,o,l)){f=!1;break}}return l.delete(e),l.delete(t),f}},"./node_modules/lodash/_equalByTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_Uint8Array.js"),i=r("./node_modules/lodash/eq.js"),o=r("./node_modules/lodash/_equalArrays.js"),a=r("./node_modules/lodash/_mapToArray.js"),l=r("./node_modules/lodash/_setToArray.js"),u=s?s.prototype:void 0,c=u?u.valueOf:void 0;e.exports=function(e,t,r,s,u,h,d){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!h(new n(e),new n(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=a;case"[object Set]":var m=1&s;if(p||(p=l),e.size!=t.size&&!m)return!1;var f=d.get(e);if(f)return f==t;s|=2,d.set(e,t);var g=o(p(e),p(t),s,u,h,d);return d.delete(e),g;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},"./node_modules/lodash/_equalObjects.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getAllKeys.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,i,o,a){var l=1&r,u=s(e),c=u.length;if(c!=s(t).length&&!l)return!1;for(var h=c;h--;){var d=u[h];if(!(l?d in t:n.call(t,d)))return!1}var p=a.get(e),m=a.get(t);if(p&&m)return p==t&&m==e;var f=!0;a.set(e,t),a.set(t,e);for(var g=l;++h<c;){var v=e[d=u[h]],_=t[d];if(i)var y=l?i(_,v,d,t,e,a):i(v,_,d,e,t,a);if(!(void 0===y?v===_||o(v,_,r,i,a):y)){f=!1;break}g||(g="constructor"==d)}if(f&&!g){var b=e.constructor,w=t.constructor;b==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(f=!1)}return a.delete(e),a.delete(t),f}},"./node_modules/lodash/_freeGlobal.js":(e,t,r)=>{var s="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=s},"./node_modules/lodash/_getAllKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetAllKeys.js"),n=r("./node_modules/lodash/_getSymbols.js"),i=r("./node_modules/lodash/keys.js");e.exports=function(e){return s(e,i,n)}},"./node_modules/lodash/_getMapData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isKeyable.js");e.exports=function(e,t){var r=e.__data__;return s(t)?r["string"==typeof t?"string":"hash"]:r.map}},"./node_modules/lodash/_getMatchData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isStrictComparable.js"),n=r("./node_modules/lodash/keys.js");e.exports=function(e){for(var t=n(e),r=t.length;r--;){var i=t[r],o=e[i];t[r]=[i,o,s(o)]}return t}},"./node_modules/lodash/_getNative.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsNative.js"),n=r("./node_modules/lodash/_getValue.js");e.exports=function(e,t){var r=n(e,t);return s(r)?r:void 0}},"./node_modules/lodash/_getRawTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=Object.prototype,i=n.hasOwnProperty,o=n.toString,a=s?s.toStringTag:void 0;e.exports=function(e){var t=i.call(e,a),r=e[a];try{e[a]=void 0;var s=!0}catch(e){}var n=o.call(e);return s&&(t?e[a]=r:delete e[a]),n}},"./node_modules/lodash/_getSymbols.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayFilter.js"),n=r("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,a=o?function(e){return null==e?[]:(e=Object(e),s(o(e),(function(t){return i.call(e,t)})))}:n;e.exports=a},"./node_modules/lodash/_getTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_DataView.js"),n=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_Promise.js"),o=r("./node_modules/lodash/_Set.js"),a=r("./node_modules/lodash/_WeakMap.js"),l=r("./node_modules/lodash/_baseGetTag.js"),u=r("./node_modules/lodash/_toSource.js"),c="[object Map]",h="[object Promise]",d="[object Set]",p="[object WeakMap]",m="[object DataView]",f=u(s),g=u(n),v=u(i),_=u(o),y=u(a),b=l;(s&&b(new s(new ArrayBuffer(1)))!=m||n&&b(new n)!=c||i&&b(i.resolve())!=h||o&&b(new o)!=d||a&&b(new a)!=p)&&(b=function(e){var t=l(e),r="[object Object]"==t?e.constructor:void 0,s=r?u(r):"";if(s)switch(s){case f:return m;case g:return c;case v:return h;case _:return d;case y:return p}return t}),e.exports=b},"./node_modules/lodash/_getValue.js":e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash/_hasPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/_castPath.js"),n=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/_isIndex.js"),a=r("./node_modules/lodash/isLength.js"),l=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t,r){for(var u=-1,c=(t=s(t,e)).length,h=!1;++u<c;){var d=l(t[u]);if(!(h=null!=e&&r(e,d)))break;e=e[d]}return h||++u!=c?h:!!(c=null==e?0:e.length)&&a(c)&&o(d,c)&&(i(e)||n(e))}},"./node_modules/lodash/_hashClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=s?s(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash/_hashGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(s){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return n.call(t,e)?t[e]:void 0}},"./node_modules/lodash/_hashHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return s?void 0!==t[e]:n.call(t,e)}},"./node_modules/lodash/_hashSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=s&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash/_isIndex.js":e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var s=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==s||"symbol"!=s&&t.test(e))&&e>-1&&e%1==0&&e<r}},"./node_modules/lodash/_isKey.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArray.js"),n=r("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;e.exports=function(e,t){if(s(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!n(e))||(o.test(e)||!i.test(e)||null!=t&&e in Object(t))}},"./node_modules/lodash/_isKeyable.js":e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":(e,t,r)=>{var s,n=r("./node_modules/lodash/_coreJsData.js"),i=(s=/[^.]+$/.exec(n&&n.keys&&n.keys.IE_PROTO||""))?"Symbol(src)_1."+s:"";e.exports=function(e){return!!i&&i in e}},"./node_modules/lodash/_isPrototype.js":e=>{var t=Object.prototype;e.exports=function(e){var r=e&&e.constructor;return e===("function"==typeof r&&r.prototype||t)}},"./node_modules/lodash/_isStrictComparable.js":(e,t,r)=>{var s=r("./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!s(e)}},"./node_modules/lodash/_listCacheClear.js":e=>{e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js"),n=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=s(t,e);return!(r<0)&&(r==t.length-1?t.pop():n.call(t,r,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var t=this.__data__,r=s(t,e);return r<0?void 0:t[r][1]}},"./node_modules/lodash/_listCacheHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return s(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,t){var r=this.__data__,n=s(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this}},"./node_modules/lodash/_mapCacheClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Hash.js"),n=r("./node_modules/lodash/_ListCache.js"),i=r("./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new s,map:new(i||n),string:new s}}},"./node_modules/lodash/_mapCacheDelete.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){var t=s(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash/_mapCacheGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return s(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return s(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e,t){var r=s(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this}},"./node_modules/lodash/_mapToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e,s){r[++t]=[s,e]})),r}},"./node_modules/lodash/_matchesStrictComparable.js":e=>{e.exports=function(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}},"./node_modules/lodash/_memoizeCapped.js":(e,t,r)=>{var s=r("./node_modules/lodash/memoize.js");e.exports=function(e){var t=s(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},"./node_modules/lodash/_nativeCreate.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(Object,"create");e.exports=s},"./node_modules/lodash/_nativeKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_overArg.js")(Object.keys,Object);e.exports=s},"./node_modules/lodash/_nodeUtil.js":(e,t,r)=>{e=r.nmd(e);var s=r("./node_modules/lodash/_freeGlobal.js"),n=t&&!t.nodeType&&t,i=n&&e&&!e.nodeType&&e,o=i&&i.exports===n&&s.process,a=function(){try{var e=i&&i.require&&i.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=a},"./node_modules/lodash/_objectToString.js":e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},"./node_modules/lodash/_overArg.js":e=>{e.exports=function(e,t){return function(r){return e(t(r))}}},"./node_modules/lodash/_root.js":(e,t,r)=>{var s=r("./node_modules/lodash/_freeGlobal.js"),n="object"==typeof self&&self&&self.Object===Object&&self,i=s||n||Function("return this")();e.exports=i},"./node_modules/lodash/_setCacheAdd.js":e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}},"./node_modules/lodash/_stackClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new s,this.size=0}},"./node_modules/lodash/_stackDelete.js":e=>{e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},"./node_modules/lodash/_stackGet.js":e=>{e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js"),n=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_MapCache.js");e.exports=function(e,t){var r=this.__data__;if(r instanceof s){var o=r.__data__;if(!n||o.length<199)return o.push([e,t]),this.size=++r.size,this;r=this.__data__=new i(o)}return r.set(e,t),this.size=r.size,this}},"./node_modules/lodash/_stringToPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/_memoizeCapped.js"),n=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=s((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(n,(function(e,r,s,n){t.push(s?n.replace(i,"$1"):r||e)})),t}));e.exports=o},"./node_modules/lodash/_toKey.js":(e,t,r)=>{var s=r("./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||s(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},"./node_modules/lodash/_toSource.js":e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/each.js":(e,t,r)=>{e.exports=r("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash/forEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayEach.js"),n=r("./node_modules/lodash/_baseEach.js"),i=r("./node_modules/lodash/_castFunction.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?s:n)(e,i(t))}},"./node_modules/lodash/get.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGet.js");e.exports=function(e,t,r){var n=null==e?void 0:s(e,t);return void 0===n?r:n}},"./node_modules/lodash/hasIn.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseHasIn.js"),n=r("./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&n(e,t,s)}},"./node_modules/lodash/identity.js":e=>{e.exports=function(e){return e}},"./node_modules/lodash/isArguments.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsArguments.js"),n=r("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,o=i.hasOwnProperty,a=i.propertyIsEnumerable,l=s(function(){return arguments}())?s:function(e){return n(e)&&o.call(e,"callee")&&!a.call(e,"callee")};e.exports=l},"./node_modules/lodash/isArray.js":e=>{var t=Array.isArray;e.exports=t},"./node_modules/lodash/isArrayLike.js":(e,t,r)=>{var s=r("./node_modules/lodash/isFunction.js"),n=r("./node_modules/lodash/isLength.js");e.exports=function(e){return null!=e&&n(e.length)&&!s(e)}},"./node_modules/lodash/isBuffer.js":(e,t,r)=>{e=r.nmd(e);var s=r("./node_modules/lodash/_root.js"),n=r("./node_modules/lodash/stubFalse.js"),i=t&&!t.nodeType&&t,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i?s.Buffer:void 0,l=(a?a.isBuffer:void 0)||n;e.exports=l},"./node_modules/lodash/isFunction.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObject.js");e.exports=function(e){if(!n(e))return!1;var t=s(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash/isLength.js":e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash/isObject.js":e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash/isObjectLike.js":e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash/isSymbol.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||n(e)&&"[object Symbol]"==s(e)}},"./node_modules/lodash/isTypedArray.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsTypedArray.js"),n=r("./node_modules/lodash/_baseUnary.js"),i=r("./node_modules/lodash/_nodeUtil.js"),o=i&&i.isTypedArray,a=o?n(o):s;e.exports=a},"./node_modules/lodash/keys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayLikeKeys.js"),n=r("./node_modules/lodash/_baseKeys.js"),i=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e){return i(e)?s(e):n(e)}},"./node_modules/lodash/map.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayMap.js"),n=r("./node_modules/lodash/_baseIteratee.js"),i=r("./node_modules/lodash/_baseMap.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?s:i)(e,n(t,3))}},"./node_modules/lodash/memoize.js":(e,t,r)=>{var s=r("./node_modules/lodash/_MapCache.js");function n(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var s=arguments,n=t?t.apply(this,s):s[0],i=r.cache;if(i.has(n))return i.get(n);var o=e.apply(this,s);return r.cache=i.set(n,o)||i,o};return r.cache=new(n.Cache||s),r}n.Cache=s,e.exports=n},"./node_modules/lodash/property.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseProperty.js"),n=r("./node_modules/lodash/_basePropertyDeep.js"),i=r("./node_modules/lodash/_isKey.js"),o=r("./node_modules/lodash/_toKey.js");e.exports=function(e){return i(e)?s(o(e)):n(e)}},"./node_modules/lodash/stubArray.js":e=>{e.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":e=>{e.exports=function(){return!1}},"./node_modules/lodash/toString.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":s(e)}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var s=r("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),n=Object.create(null),i="undefined"==typeof document,o=Array.prototype.forEach;function a(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(h(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function u(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return o.call(t,(function(t){if(t.href){var n=function(e,t){var r;return e=s(e),t.some((function(s){e.indexOf(t)>-1&&(r=s)})),r}(t.href,e);h(n)&&!0!==t.visited&&n&&(l(t,n),r=!0)}})),r}function c(){var e=document.querySelectorAll("link");o.call(e,(function(e){!0!==e.visited&&l(e)}))}function h(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),a;var r,o,l,h=function(e){var t=n[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}n[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),n=r&&r[1];return n&&e?e.split(",").map((function(e){var r=new RegExp("".concat(n,"\\.js$"),"g");return s(t.replace(r,"".concat(e.replace(/{fileName}/g,n),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=h(t.filename),r=u(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},o=50,l=0,function(){var e=this,t=arguments;clearTimeout(l),l=setTimeout((function(){return r.apply(e,t)}),o)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),s=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+s+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},"./node_modules/normalize-wheel/index.js":(e,t,r)=>{e.exports=r("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=r},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":e=>{var t,r,s,n,i,o,a,l,u,c,h,d,p,m,f,g=!1;function v(){if(!g){g=!0;var e=navigator.userAgent,v=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),_=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(d=/\b(iPhone|iP[ao]d)/.exec(e),p=/\b(iP[ao]d)/.exec(e),c=/Android/i.exec(e),m=/FBAN\/\w+;/i.exec(e),f=/Mobile/i.exec(e),h=!!/Win64/.exec(e),v){(t=v[1]?parseFloat(v[1]):v[5]?parseFloat(v[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(e);o=y?parseFloat(y[1])+4:t,r=v[2]?parseFloat(v[2]):NaN,s=v[3]?parseFloat(v[3]):NaN,(n=v[4]?parseFloat(v[4]):NaN)?(v=/(?:Chrome\/(\d+\.\d+))/.exec(e),i=v&&v[1]?parseFloat(v[1]):NaN):i=NaN}else t=r=s=i=n=NaN;if(_){if(_[1]){var b=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);a=!b||parseFloat(b[1].replace("_","."))}else a=!1;l=!!_[2],u=!!_[3]}else a=l=u=!1}}var _={ie:function(){return v()||t},ieCompatibilityMode:function(){return v()||o>t},ie64:function(){return _.ie()&&h},firefox:function(){return v()||r},opera:function(){return v()||s},webkit:function(){return v()||n},safari:function(){return _.webkit()},chrome:function(){return v()||i},windows:function(){return v()||l},osx:function(){return v()||a},linux:function(){return v()||u},iphone:function(){return v()||d},mobile:function(){return v()||d||p||c||f},nativeApp:function(){return v()||m},android:function(){return v()||c},ipad:function(){return v()||p}};e.exports=_},"./node_modules/normalize-wheel/src/isEventSupported.js":(e,t,r)=>{"use strict";var s,n=r("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");n.canUseDOM&&(s=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!n.canUseDOM||t&&!("addEventListener"in document))return!1;var r="on"+e,i=r in document;if(!i){var o=document.createElement("div");o.setAttribute(r,"return;"),i="function"==typeof o[r]}return!i&&s&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(e,t,r)=>{"use strict";var s=r("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),n=r("./node_modules/normalize-wheel/src/isEventSupported.js");function i(e){var t=0,r=0,s=0,n=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),s=10*t,n=10*r,"deltaY"in e&&(n=e.deltaY),"deltaX"in e&&(s=e.deltaX),(s||n)&&e.deltaMode&&(1==e.deltaMode?(s*=40,n*=40):(s*=800,n*=800)),s&&!t&&(t=s<1?-1:1),n&&!r&&(r=n<1?-1:1),{spinX:t,spinY:r,pixelX:s,pixelY:n}}i.getEventType=function(){return s.firefox()?"DOMMouseScroll":n("wheel")?"wheel":"mousewheel"},e.exports=i},"./node_modules/prefix/index.js":e=>{var t="undefined"!=typeof document?document.createElement("p").style:{},r=["O","ms","Moz","Webkit"],s=/([A-Z])/g,n={};function i(e){if(e=e.replace(/-([a-z])/g,(function(e,t){return t.toUpperCase()})),void 0!==t[e])return e;for(var s=e.charAt(0).toUpperCase()+e.slice(1),n=r.length;n--;){var i=r[n]+s;if(void 0!==t[i])return i}return e}e.exports=function(e){return e in n?n[e]:n[e]=i(e)},e.exports.dash=function(e){return e=i(e),s.test(e)&&(e="-"+e.replace(s,"-$1"),s.lastIndex=0),e.toLowerCase()}},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var s=r("./node_modules/webpack-dev-server/client/utils/log.js");function n(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,i(s.key),s)}}function i(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,t||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}var o=function(){return e=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){s.log.error(e)}},(t=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&n(e.prototype,t),r&&n(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,r}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true":(e,t,r)=>{"use strict";r.r(t);var s=r("./node_modules/webpack/hot/log.js"),n=r.n(s),i=r("./node_modules/webpack-dev-server/client/utils/stripAnsi.js"),o=r("./node_modules/webpack-dev-server/client/utils/parseURL.js"),a=r("./node_modules/webpack-dev-server/client/socket.js"),l=r("./node_modules/webpack-dev-server/client/overlay.js"),u=r("./node_modules/webpack-dev-server/client/utils/log.js"),c=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),h=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),d=r("./node_modules/webpack-dev-server/client/utils/createSocketURL.js");function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function m(e,t,r){var s;return(t="symbol"==typeof(s=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,t||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"))?s:s+"")in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var f=function(e){"object"==typeof e&&["warnings","errors","runtimeErrors"].forEach((function(t){if("string"==typeof e[t]){var r=decodeURIComponent(e[t]),s=new Function("message","var callback = ".concat(r,"\n        return callback(message)"));e[t]=s}}))},g={isUnloading:!1,currentHash:r.h()},v={hot:!1,liveReload:!1,progress:!1,overlay:!1},_=(0,o.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),y={"Hot Module Replacement":!1,"Live Reloading":!1,Progress:!1,Overlay:!1};if("true"===_.hot&&(v.hot=!0,y["Hot Module Replacement"]=!0),"true"===_["live-reload"]&&(v.liveReload=!0,y["Live Reloading"]=!0),"true"===_.progress&&(v.progress=!0,y.Progress=!0),_.overlay){try{v.overlay=JSON.parse(_.overlay)}catch(e){u.log.error("Error parsing overlay options from resource query:",e)}"object"==typeof v.overlay&&(v.overlay=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){m(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({errors:!0,warnings:!0,runtimeErrors:!0},v.overlay),f(v.overlay)),y.Overlay=!0}function b(e){n().setLogLevel("verbose"===e||"log"===e?"info":e),(0,u.setLogLevel)(e)}_.logging&&(v.logging=_.logging),void 0!==_.reconnect&&(v.reconnect=Number(_.reconnect)),v.logging&&b(v.logging),(0,u.logEnabledFeatures)(y),self.addEventListener("beforeunload",(function(){g.isUnloading=!0}));var w="undefined"!=typeof window?(0,l.createOverlay)("object"==typeof v.overlay?{trustedTypesPolicyName:v.overlay.trustedTypesPolicyName,catchRuntimeError:v.overlay.runtimeErrors}:{trustedTypesPolicyName:!1,catchRuntimeError:v.overlay}):{send:function(){}},x={hot:function(){"false"!==_.hot&&(v.hot=!0)},liveReload:function(){"false"!==_["live-reload"]&&(v.liveReload=!0)},invalid:function(){u.log.info("App updated. Recompiling..."),v.overlay&&w.send({type:"DISMISS"}),(0,c.default)("Invalid")},hash:function(e){g.previousHash=g.currentHash,g.currentHash=e},logging:b,overlay:function(e){"undefined"!=typeof document&&(v.overlay=e,f(v.overlay))},reconnect:function(e){"false"!==_.reconnect&&(v.reconnect=e)},progress:function(e){v.progress=e},"progress-update":function(e){v.progress&&u.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,c.default)("Progress",e)},"still-ok":function(){u.log.info("Nothing changed."),v.overlay&&w.send({type:"DISMISS"}),(0,c.default)("StillOk")},ok:function(){(0,c.default)("Ok"),v.overlay&&w.send({type:"DISMISS"}),(0,h.default)(v,g)},"static-changed":function(e){u.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e,t){u.log.warn("Warnings while compiling.");var r=e.map((function(e){var t=(0,l.formatProblem)("warning",e),r=t.header,s=t.body;return"".concat(r,"\n").concat((0,i.default)(s))}));(0,c.default)("Warnings",r);for(var s=0;s<r.length;s++)u.log.warn(r[s]);var n="boolean"==typeof v.overlay?v.overlay:v.overlay&&v.overlay.warnings;n&&(("function"==typeof n?e.filter(n):e).length&&w.send({type:"BUILD_ERROR",level:"warning",messages:e}));t&&t.preventReloading||(0,h.default)(v,g)},errors:function(e){u.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){var t=(0,l.formatProblem)("error",e),r=t.header,s=t.body;return"".concat(r,"\n").concat((0,i.default)(s))}));(0,c.default)("Errors",t);for(var r=0;r<t.length;r++)u.log.error(t[r]);var s="boolean"==typeof v.overlay?v.overlay:v.overlay&&v.overlay.errors;s&&(("function"==typeof s?e.filter(s):e).length&&w.send({type:"BUILD_ERROR",level:"error",messages:e}))},error:function(e){u.log.error(e)},close:function(){u.log.info("Disconnected!"),v.overlay&&w.send({type:"DISMISS"}),(0,c.default)("Close")}},j=(0,d.default)(_);(0,a.default)(j,x,v.reconnect)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(e,t)=>{!function(){"use strict";var e={"./client-src/modules/logger/tapable.js":function(e,t,r){function s(){return{call:function(){}}}r.r(t),r.d(t,{SyncBailHook:function(){return s}})},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function r(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,s=new Array(t);r<t;r++)s[r]=e[r];return s}function n(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,i(s.key),s)}}function i(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).toPrimitive];if(void 0!==r){var s=r.call(e,t||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}var o=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=o;var a=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),u=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),c=function(){return e=function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[a]=t,this.getChildLogger=r},t=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,r=new Array(t>1?t-1:0),s=1;s<t;s++)r[s-1]=arguments[s];this[a](o.error,r)}}},{key:"trace",value:function(){this[a](o.trace,["Trace"])}},{key:"clear",value:function(){this[a](o.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[a](o.groupEnd,t)}},{key:"profile",value:function(e){this[a](o.profile,[e])}},{key:"profileEnd",value:function(e){this[a](o.profileEnd,[e])}},{key:"time",value:function(e){this[l]=this[l]||new Map,this[l].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[l]&&this[l].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var s=process.hrtime(t);this[a](o.time,[e].concat(r(s)))}},{key:"timeEnd",value:function(e){var t=this[l]&&this[l].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var s=process.hrtime(t);this[l].delete(e),this[a](o.time,[e].concat(r(s)))}},{key:"timeAggregate",value:function(e){var t=this[l]&&this[l].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var r=process.hrtime(t);this[l].delete(e),this[u]=this[u]||new Map;var s=this[u].get(e);void 0!==s&&(r[1]+s[1]>1e9?(r[0]+=s[0]+1,r[1]=r[1]-1e9+s[1]):(r[0]+=s[0],r[1]+=s[1])),this[u].set(e,r)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[u]){var t=this[u].get(e);void 0!==t&&(this[u].delete(e),this[a](o.time,[e].concat(r(t))))}}}],t&&n(e.prototype,t),s&&n(e,s),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,s}();t.Logger=c},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,r){function s(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,s=new Array(t);r<t;r++)s[r]=e[r];return s}var i=r("./node_modules/webpack/lib/logging/Logger.js").LogType,o=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},a={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,r=void 0===t?"info":t,n=e.debug,l=void 0!==n&&n,u=e.console,c="boolean"==typeof l?[function(){return l}]:[].concat(l).map(o),h=a["".concat(r)]||0;return function(e,t,r){var n=function(){return Array.isArray(r)?r.length>0&&"string"==typeof r[0]?["[".concat(e,"] ").concat(r[0])].concat(s(r.slice(1))):["[".concat(e,"]")].concat(s(r)):[]},o=c.some((function(t){return t(e)}));switch(t){case i.debug:if(!o)return;"function"==typeof u.debug?u.debug.apply(u,s(n())):u.log.apply(u,s(n()));break;case i.log:if(!o&&h>a.log)return;u.log.apply(u,s(n()));break;case i.info:if(!o&&h>a.info)return;u.info.apply(u,s(n()));break;case i.warn:if(!o&&h>a.warn)return;u.warn.apply(u,s(n()));break;case i.error:if(!o&&h>a.error)return;u.error.apply(u,s(n()));break;case i.trace:if(!o)return;u.trace();break;case i.groupCollapsed:if(!o&&h>a.log)return;if(!o&&h>a.verbose){"function"==typeof u.groupCollapsed?u.groupCollapsed.apply(u,s(n())):u.log.apply(u,s(n()));break}case i.group:if(!o&&h>a.log)return;"function"==typeof u.group?u.group.apply(u,s(n())):u.log.apply(u,s(n()));break;case i.groupEnd:if(!o&&h>a.log)return;"function"==typeof u.groupEnd&&u.groupEnd();break;case i.time:if(!o&&h>a.log)return;var l=1e3*r[1]+r[2]/1e6,d="[".concat(e,"] ").concat(r[0],": ").concat(l," ms");"function"==typeof u.logTime?u.logTime(d):u.log(d);break;case i.profile:"function"==typeof u.profile&&u.profile.apply(u,s(n()));break;case i.profileEnd:"function"==typeof u.profileEnd&&u.profileEnd.apply(u,s(n()));break;case i.clear:if(!o&&h>a.log)return;"function"==typeof u.clear&&u.clear();break;case i.status:if(!o&&h>a.info)return;"function"==typeof u.status?0===r.length?u.status():u.status.apply(u,s(n())):0!==r.length&&u.info.apply(u,s(n()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,r){function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e},s.apply(this,arguments)}var n=r("./client-src/modules/logger/tapable.js").SyncBailHook,i=r("./node_modules/webpack/lib/logging/Logger.js").Logger,o=r("./node_modules/webpack/lib/logging/createConsoleLogger.js"),a={level:"info",debug:!1,console},l=o(a);t.getLogger=function(e){return new i((function(r,s){void 0===t.hooks.log.call(e,r,s)&&l(e,r,s)}),(function(r){return t.getLogger("".concat(e,"/").concat(r))}))},t.configureDefaultLogger=function(e){s(a,e),l=o(a)},t.hooks={log:new n(["origin","type","args"])}}},r={};function s(t){var n=r[t];if(void 0!==n)return n.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,s),i.exports}s.d=function(e,t){for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};!function(){s.r(n),s.d(n,{default:function(){return e}});var e=s("./node_modules/webpack/lib/logging/runtime.js")}();var i=t;for(var o in n)i[o]=n[o];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{createOverlay:()=>p,formatProblem:()=>d});var s=r("./node_modules/ansi-html-community/index.js"),n=r.n(s),i=r("./node_modules/html-entities/lib/index.js"),o=r("./node_modules/webpack-dev-server/client/overlay/runtime-error.js"),a=r("./node_modules/webpack-dev-server/client/overlay/state-machine.js"),l=r("./node_modules/webpack-dev-server/client/overlay/styles.js");function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){h(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function h(e,t,r){var s;return(t="symbol"==typeof(s=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,t||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"))?s:s+"")in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function d(e,t){var r="warning"===e?"WARNING":"ERROR",s="";if("string"==typeof t)s+=t;else{var n=t.file||"",i=t.moduleName?-1!==t.moduleName.indexOf("!")?"".concat(t.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(t.moduleName,")"):"".concat(t.moduleName):"",o=t.loc;r+="".concat(i||n?" in ".concat(i?"".concat(i).concat(n?" (".concat(n,")"):""):n).concat(o?" ".concat(o):""):""),s+=t.message||""}return Array.isArray(t.stack)&&t.stack.forEach((function(e){"string"==typeof e&&(s+="\r\n".concat(e))})),{header:r,body:s}}n().setColors({reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"});var p=function(e){var t,r,s,u,h=[];function p(e,t){Object.keys(t).forEach((function(r){e.style[r]=t[r]}))}function m(e,n){if(r)return r.innerHTML=u?u.createHTML(""):"",void e(r);h.push(e),t||function(e){window.trustedTypes&&(u=window.trustedTypes.createPolicy(e||"webpack-dev-server#overlay",{createHTML:function(e){return e}})),(t=document.createElement("iframe")).id="webpack-dev-server-client-overlay",t.src="about:blank",p(t,l.iframeStyle),t.onload=function(){var e=t.contentDocument.createElement("div");r=t.contentDocument.createElement("div"),e.id="webpack-dev-server-client-overlay-div",p(e,l.containerStyle),(s=document.createElement("div")).innerText="Compiled with problems:",p(s,l.headerStyle);var n=document.createElement("button");p(n,l.dismissButtonStyle),n.innerText="×",n.ariaLabel="Dismiss",n.addEventListener("click",(function(){f.send({type:"DISMISS"})})),e.appendChild(s),e.appendChild(n),e.appendChild(r),t.contentDocument.body.appendChild(e),h.forEach((function(t){t(e)})),h=[],t.onload=null},document.body.appendChild(t)}(n)}var f=(0,a.default)({showOverlay:function(t){var o=t.level,a=void 0===o?"error":o,h=t.messages,f=t.messageSource;return function(e,t,o,a){m((function(){s.innerText="runtime"===a?"Uncaught runtime errors:":"Compiled with problems:",t.forEach((function(t){var s=document.createElement("div");p(s,c(c({},"warning"===e?l.msgStyles.warning:l.msgStyles.error),{},{padding:"1rem 1rem 1.5rem 1rem"}));var o=document.createElement("div"),a=d(e,t),h=a.header,m=a.body;o.innerText=h,p(o,l.msgTypeStyle),t.moduleIdentifier&&(p(o,{cursor:"pointer"}),o.setAttribute("data-can-open",!0),o.addEventListener("click",(function(){fetch("/webpack-dev-server/open-editor?fileName=".concat(t.moduleIdentifier))})));var f=n()((0,i.encode)(m)),g=document.createElement("div");p(g,l.msgTextStyle),g.innerHTML=u?u.createHTML(f):f,s.appendChild(o),s.appendChild(g),r.appendChild(s)}))}),o)}(a,h,e.trustedTypesPolicyName,f)},hideOverlay:function(){t&&(document.body.removeChild(t),t=null,r=null)}});if(e.catchRuntimeError){var g=function(t,r){var s=t instanceof Error?t:new Error(t||r);("function"!=typeof e.catchRuntimeError||e.catchRuntimeError(s))&&f.send({type:"RUNTIME_ERROR",messages:[{message:s.message,stack:(0,o.parseErrorToStacks)(s)}]})};(0,o.listenToRuntimeError)((function(e){var t=e.error,r=e.message;(t||r)&&g(t,r)})),(0,o.listenToUnhandledRejection)((function(e){var t=e.reason;g(t,"Unknown promise rejection reason")}))}return f}},"./node_modules/webpack-dev-server/client/overlay/fsm.js":(e,t,r)=>{"use strict";function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function n(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t,r){var s;return(t="symbol"==typeof(s=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,t||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"))?s:s+"")in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.r(t),r.d(t,{default:()=>o});const o=function(e,t){var r=e.states,s=e.context,i=e.initial,o=t.actions,a=i,l=s;return{send:function(e){var t=r[a].on,s=t&&t[e.type];s&&(a=s.target,s.actions&&s.actions.forEach((function(t){var r=o[t],s=r&&r(l,e);s&&(l=n(n({},l),s))})))}}}},"./node_modules/webpack-dev-server/client/overlay/runtime-error.js":(e,t,r)=>{"use strict";function s(e){if(!(e&&e instanceof Error))throw new Error("parseErrorToStacks expects Error object");if("string"==typeof e.stack)return e.stack.split("\n").filter((function(t){return t!=="Error: ".concat(e.message)}))}function n(e){return window.addEventListener("error",e),function(){window.removeEventListener("error",e)}}function i(e){return window.addEventListener("unhandledrejection",e),function(){window.removeEventListener("unhandledrejection",e)}}r.r(t),r.d(t,{listenToRuntimeError:()=>n,listenToUnhandledRejection:()=>i,parseErrorToStacks:()=>s})},"./node_modules/webpack-dev-server/client/overlay/state-machine.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./node_modules/webpack-dev-server/client/overlay/fsm.js");const n=function(e){var t=e.hideOverlay,r=e.showOverlay;return(0,s.default)({initial:"hidden",context:{level:"error",messages:[],messageSource:"build"},states:{hidden:{on:{BUILD_ERROR:{target:"displayBuildError",actions:["setMessages","showOverlay"]},RUNTIME_ERROR:{target:"displayRuntimeError",actions:["setMessages","showOverlay"]}}},displayBuildError:{on:{DISMISS:{target:"hidden",actions:["dismissMessages","hideOverlay"]},BUILD_ERROR:{target:"displayBuildError",actions:["appendMessages","showOverlay"]}}},displayRuntimeError:{on:{DISMISS:{target:"hidden",actions:["dismissMessages","hideOverlay"]},RUNTIME_ERROR:{target:"displayRuntimeError",actions:["appendMessages","showOverlay"]},BUILD_ERROR:{target:"displayBuildError",actions:["setMessages","showOverlay"]}}}}},{actions:{dismissMessages:function(){return{messages:[],level:"error",messageSource:"build"}},appendMessages:function(e,t){return{messages:e.messages.concat(t.messages),level:t.level||e.level,messageSource:"RUNTIME_ERROR"===t.type?"runtime":"build"}},setMessages:function(e,t){return{messages:t.messages,level:t.level||e.level,messageSource:"RUNTIME_ERROR"===t.type?"runtime":"build"}},hideOverlay:t,showOverlay:r}})}},"./node_modules/webpack-dev-server/client/overlay/styles.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{containerStyle:()=>i,dismissButtonStyle:()=>a,headerStyle:()=>o,iframeStyle:()=>n,msgStyles:()=>s,msgTextStyle:()=>u,msgTypeStyle:()=>l});var s={error:{backgroundColor:"rgba(206, 17, 38, 0.1)",color:"#fccfcf"},warning:{backgroundColor:"rgba(251, 245, 180, 0.1)",color:"#fbf5b4"}},n={position:"fixed",top:0,left:0,right:0,bottom:0,width:"100vw",height:"100vh",border:"none","z-index":9999999999},i={position:"fixed",boxSizing:"border-box",left:0,top:0,right:0,bottom:0,width:"100vw",height:"100vh",fontSize:"large",padding:"2rem 2rem 4rem 2rem",lineHeight:"1.2",whiteSpace:"pre-wrap",overflow:"auto",backgroundColor:"rgba(0, 0, 0, 0.9)",color:"white"},o={color:"#e83b46",fontSize:"2em",whiteSpace:"pre-wrap",fontFamily:"sans-serif",margin:"0 2rem 2rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"},a={color:"#ffffff",lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0,backgroundColor:"transparent",border:"none"},l={color:"#e83b46",fontSize:"1.2em",marginBottom:"1rem",fontFamily:"sans-serif"},u={lineHeight:"1.5",fontSize:"1rem",fontFamily:"Menlo, Consolas, monospace"}},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{client:()=>u,default:()=>h});var s=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),n=r("./node_modules/webpack-dev-server/client/utils/log.js"),i=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),o=void 0!==i?void 0!==i.default?i.default:i:s.default,a=0,l=10,u=null,c=function(e,t,r){(u=new o(e)).onOpen((function(){a=0,void 0!==r&&(l=r)})),u.onClose((function(){if(0===a&&t.close(),u=null,a<l){var s=1e3*Math.pow(2,a)+100*Math.random();a+=1,n.log.info("Trying to reconnect..."),setTimeout((function(){c(e,t,r)}),s)}})),u.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data,r.params)}))};const h=c},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(e){var t=e.hostname,r="0.0.0.0"===t||"::"===t||"[::]"===t;r&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var s=e.protocol||self.location.protocol;("auto:"===s||t&&r&&"https:"===self.location.protocol)&&(s=self.location.protocol),s=s.replace(/^(?:http|.+-extension|file)/i,"ws");var n="";e.username&&(n=e.username,e.password&&(n=n.concat(":",e.password)));var i=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),o=e.port;o&&"0"!==o||(o=self.location.port);var a="/ws";return e.pathname&&!e.fromCurrentScript&&(a=e.pathname),function(e){var t=e.protocol||"";t&&":"!==t.substr(-1)&&(t+=":");var r=e.auth||"";r&&(r=(r=encodeURIComponent(r)).replace(/%3A/i,":"),r+="@");var s="";e.hostname&&(s=r+(-1===e.hostname.indexOf(":")?e.hostname:"[".concat(e.hostname,"]")),e.port&&(s+=":".concat(e.port)));var n=e.pathname||"";e.slashes?(s="//".concat(s||""),n&&"/"!==n.charAt(0)&&(n="/".concat(n))):s||(s="");var i=e.search||"";i&&"?"!==i.charAt(0)&&(i="?".concat(i));var o=e.hash||"";return o&&"#"!==o.charAt(0)&&(o="#".concat(o)),n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})),i=i.replace("#","%23"),"".concat(t).concat(s).concat(n).concat(i).concat(o)}({protocol:s,auth:n,hostname:i,port:o,pathname:a,slashes:!0})}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{log:()=>o,logEnabledFeatures:()=>a,setLogLevel:()=>i});var s=r("./node_modules/webpack-dev-server/client/modules/logger/index.js"),n=r.n(s);function i(e){n().configureDefaultLogger({level:e})}i("info");var o=n().getLogger("webpack-dev-server"),a=function(e){var t=Object.keys(e);if(e&&0!==t.length){for(var r="Server started:",s=0;s<t.length;s++){var n=t[s];r+=" ".concat(n," ").concat(e[n]?"enabled":"disabled",",")}r=r.slice(0,-1).concat("."),o.info(r)}}},"./node_modules/webpack-dev-server/client/utils/parseURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");const n=function(e){var t={};if("string"==typeof e&&""!==e)for(var r=e.slice(1).split("&"),n=0;n<r.length;n++){var i=r[n].split("=");t[i[0]]=decodeURIComponent(i[1])}else{var o,a=(0,s.default)();try{o=new URL(a,self.location.href)}catch(e){}o&&((t=o).fromCurrentScript=!0)}return t}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var s=r("./node_modules/webpack/hot/emitter.js"),n=r.n(s),i=r("./node_modules/webpack-dev-server/client/utils/log.js");const o=function(e,t){var r=e.hot,s=e.liveReload;if(!t.isUnloading){var o=t.currentHash,a=t.previousHash;if(!(o.indexOf(a)>=0)){var l=self.location.search.toLowerCase(),u=-1===l.indexOf("webpack-dev-server-hot=false"),c=-1===l.indexOf("webpack-dev-server-live-reload=false");if(r&&u)i.log.info("App hot update..."),n().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(s&&c)var h=self,d=self.setInterval((function(){("about:"!==h.location.protocol||(h=h.parent).parent===h)&&p(h,d)}))}}function p(e,t){clearInterval(t),i.log.info("App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack-dev-server/client/utils/stripAnsi.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"),"g");const n=function(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace(s,"")}},"./node_modules/webpack/hot/dev-server.js":(e,t,r)=>{var s,n=function(){return s.indexOf(r.h())>=0},i=r("./node_modules/webpack/hot/log.js"),o=function t(){e.hot.check(!0).then((function(e){if(!e)return i("warning","[HMR] Cannot find update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),i("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void("undefined"!=typeof window&&window.location.reload());n()||t(),r("./node_modules/webpack/hot/log-apply-result.js")(e,e),n()&&i("info","[HMR] App is up to date.")})).catch((function(t){var r=e.hot.status();["abort","fail"].indexOf(r)>=0?(i("warning","[HMR] Cannot apply update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),i("warning","[HMR] "+i.formatError(t)),"undefined"!=typeof window&&window.location.reload()):i("warning","[HMR] Update failed: "+i.formatError(t))}))};r("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(t){s=t,n()||"idle"!==e.hot.status()||(i("info","[HMR] Checking for updates on the server..."),o())})),i("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var s=r("./node_modules/events/events.js");e.exports=new s},"./node_modules/webpack/hot/log-apply-result.js":(e,t,r)=>{e.exports=function(e,t){var s=e.filter((function(e){return t&&t.indexOf(e)<0})),n=r("./node_modules/webpack/hot/log.js");(s.length>0&&(n("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),s.forEach((function(e){n("warning","[HMR]  - "+e)}))),t&&0!==t.length)?(n("info","[HMR] Updated modules:"),t.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");n.groupCollapsed("info","[HMR]  - "+t.pop()),n("info","[HMR]  - "+e),n.groupEnd("info")}else n("info","[HMR]  - "+e)})),t.every((function(e){return"number"==typeof e}))&&n("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):n("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function s(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function n(e){return function(t,r){s(t)&&e(r)}}e.exports=function(e,t){s(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||r,o=console.groupCollapsed||r,a=console.groupEnd||r;e.exports.group=n(i),e.exports.groupCollapsed=n(o),e.exports.groupEnd=n(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./styles/index.scss":(e,t,r)=>{"use strict";var s,n;r.r(t),s=void 0,n=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:""}),e.hot.data&&e.hot.data.value&&e.hot.data.value!==s?e.hot.invalidate():e.hot.accept(),e.hot.dispose((function(e){e.value=s,n()}))},"./app/shaders/collections-fragment.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha; \nuniform sampler2D tMap; \n\nvarying vec4 vPosition;\nvarying vec2 vUv; \n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n    \n    gl_FragColor = texture;\n    gl_FragColor.a = uAlpha;\n}\n \n// COMPLETE "},"./app/shaders/collections-vertex.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vPosition;\nvarying vec2 vUv; \n\nvoid main() {\n    vUv = uv; \n\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    vPosition = newPosition;\n\n    gl_Position = projectionMatrix * newPosition;\n}\n\n// COMPLETE "},"./app/shaders/home-fragment.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha; \nuniform sampler2D tMap; \n\nvarying vec2 vUv; \n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n    \n    gl_FragColor = texture;\n    gl_FragColor.a = uAlpha;\n}\n \n// COMPLETE "},"./app/shaders/home-vertex.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795 // Rotation of elements usually require PI\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv; \n\nvoid main() {\n    vUv = uv; \n\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0); // Checks to see which part of where your 3D Model is.\n    // uSpeed for mouse velocity\n    newPosition.z -= (sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0) + sin(newPosition.x / uViewportSizes.x * PI + PI / 2.0)) * abs(uSpeed); // <abs = no matter direction, effect will look the same;\n\n    gl_Position = projectionMatrix * newPosition;\n}\n\n// Play around with PI and other values as this is the base for most WebGL websites.\n\n// COMPLETE "},"./app/shaders/plane-fragment.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha; \nuniform sampler2D tMap; \n\nvarying vec2 vUv; \n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n    \n    gl_FragColor = texture;\n    gl_FragColor.a = uAlpha;\n}\n\n// COMPLETE "},"./app/shaders/plane-vertex.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv; \n\nvoid main() {\n    vUv = uv; \n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n\n// COMPLETE "},"./node_modules/ogl/src/core/Camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Camera:()=>u});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/math/Mat4.js"),i=r("./node_modules/ogl/src/math/Vec3.js");const o=new n.Mat4,a=new i.Vec3,l=new i.Vec3;class u extends s.Transform{constructor(e,{near:t=.1,far:r=100,fov:s=45,aspect:o=1,left:a,right:l,bottom:u,top:c,zoom:h=1}={}){super(),Object.assign(this,{near:t,far:r,fov:s,aspect:o,left:a,right:l,bottom:u,top:c,zoom:h}),this.projectionMatrix=new n.Mat4,this.viewMatrix=new n.Mat4,this.projectionViewMatrix=new n.Mat4,this.worldPosition=new i.Vec3,this.type=a||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:e=this.near,far:t=this.far,fov:r=this.fov,aspect:s=this.aspect}={}){return Object.assign(this,{near:e,far:t,fov:r,aspect:s}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:s,near:e,far:t}),this.type="perspective",this}orthographic({near:e=this.near,far:t=this.far,left:r=this.left||-1,right:s=this.right||1,bottom:n=this.bottom||-1,top:i=this.top||1,zoom:o=this.zoom}={}){return Object.assign(this,{near:e,far:t,left:r,right:s,bottom:n,top:i,zoom:o}),r/=o,s/=o,n/=o,i/=o,this.projectionMatrix.fromOrthogonal({left:r,right:s,bottom:n,top:i,near:e,far:t}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}updateProjectionMatrix(){return"perspective"===this.type?this.perspective():this.orthographic()}lookAt(e){return super.lookAt(e,!0),this}project(e){return e.applyMatrix4(this.viewMatrix),e.applyMatrix4(this.projectionMatrix),this}unproject(e){return e.applyMatrix4(o.inverse(this.projectionMatrix)),e.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const e=this.projectionViewMatrix;this.frustum[0].set(e[3]-e[0],e[7]-e[4],e[11]-e[8]).constant=e[15]-e[12],this.frustum[1].set(e[3]+e[0],e[7]+e[4],e[11]+e[8]).constant=e[15]+e[12],this.frustum[2].set(e[3]+e[1],e[7]+e[5],e[11]+e[9]).constant=e[15]+e[13],this.frustum[3].set(e[3]-e[1],e[7]-e[5],e[11]-e[9]).constant=e[15]-e[13],this.frustum[4].set(e[3]-e[2],e[7]-e[6],e[11]-e[10]).constant=e[15]-e[14],this.frustum[5].set(e[3]+e[2],e[7]+e[6],e[11]+e[10]).constant=e[15]+e[14];for(let e=0;e<6;e++){const t=1/this.frustum[e].distance();this.frustum[e].multiply(t),this.frustum[e].constant*=t}}frustumIntersectsMesh(e,t=e.worldMatrix){if(!e.geometry.attributes.position)return!0;if(e.geometry.bounds&&e.geometry.bounds.radius!==1/0||e.geometry.computeBoundingSphere(),!e.geometry.bounds)return!0;const r=a;r.copy(e.geometry.bounds.center),r.applyMatrix4(t);const s=e.geometry.bounds.radius*t.getMaxScaleOnAxis();return this.frustumIntersectsSphere(r,s)}frustumIntersectsSphere(e,t){const r=l;for(let s=0;s<6;s++){const n=this.frustum[s];if(r.copy(n).dot(e)+n.constant<-t)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Geometry:()=>l});var s=r("./node_modules/ogl/src/math/Vec3.js");const n=new s.Vec3;let i=1,o=1,a=!1;class l{constructor(e,t={}){e.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=e,this.attributes=t,this.id=i++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let e in t)this.addAttribute(e,t[e])}addAttribute(e,t){if(this.attributes[e]=t,t.id=o++,t.size=t.size||1,t.type=t.type||(t.data.constructor===Float32Array?this.gl.FLOAT:t.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),t.target="index"===e?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,t.normalized=t.normalized||!1,t.stride=t.stride||0,t.offset=t.offset||0,t.count=t.count||(t.stride?t.data.byteLength/t.stride:t.data.length/t.size),t.divisor=t.instanced||0,t.needsUpdate=!1,t.usage=t.usage||this.gl.STATIC_DRAW,t.buffer||this.updateAttribute(t),t.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==t.count*t.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,t.count*t.divisor);this.instancedCount=t.count*t.divisor}else"index"===e?this.drawRange.count=t.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,t.count))}updateAttribute(e){const t=!e.buffer;t&&(e.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==e.buffer&&(this.gl.bindBuffer(e.target,e.buffer),this.glState.boundBuffer=e.buffer),t?this.gl.bufferData(e.target,e.data,e.usage):this.gl.bufferSubData(e.target,0,e.data),e.needsUpdate=!1}setIndex(e){this.addAttribute("index",e)}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}setInstancedCount(e){this.instancedCount=e}createVAO(e){this.VAOs[e.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.bindAttributes(e)}bindAttributes(e){e.attributeLocations.forEach(((e,{name:t,type:r})=>{if(!this.attributes[t])return void console.warn(`active attribute ${t} not being supplied`);const s=this.attributes[t];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let n=1;35674===r&&(n=2),35675===r&&(n=3),35676===r&&(n=4);const i=s.size/n,o=1===n?0:n*n*4,a=1===n?0:4*n;for(let t=0;t<n;t++)this.gl.vertexAttribPointer(e+t,i,s.type,s.normalized,s.stride+o,s.offset+t*a),this.gl.enableVertexAttribArray(e+t),this.gl.renderer.vertexAttribDivisor(e+t,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:e,mode:t=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${e.attributeOrder}`&&(this.VAOs[e.attributeOrder]||this.createVAO(e),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${e.attributeOrder}`),e.attributeLocations.forEach(((e,{name:t})=>{const r=this.attributes[t];r.needsUpdate&&this.updateAttribute(r)}));let r=2;this.attributes.index?.type===this.gl.UNSIGNED_INT&&(r=4),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*r,this.instancedCount):this.gl.renderer.drawArraysInstanced(t,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*r):this.gl.drawArrays(t,this.drawRange.start,this.drawRange.count)}getPosition(){const e=this.attributes.position;return e.data?e:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(e){e||(e=this.getPosition());const t=e.data,r=e.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const n=this.bounds.min,i=this.bounds.max,o=this.bounds.center,a=this.bounds.scale;n.set(1/0),i.set(-1/0);for(let e=0,s=t.length;e<s;e+=r){const r=t[e],s=t[e+1],o=t[e+2];n.x=Math.min(r,n.x),n.y=Math.min(s,n.y),n.z=Math.min(o,n.z),i.x=Math.max(r,i.x),i.y=Math.max(s,i.y),i.z=Math.max(o,i.z)}a.sub(i,n),o.add(n,i).divide(2)}computeBoundingSphere(e){e||(e=this.getPosition());const t=e.data,r=e.size;this.bounds||this.computeBoundingBox(e);let s=0;for(let e=0,i=t.length;e<i;e+=r)n.fromArray(t,e),s=Math.max(s,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(s)}remove(){for(let e in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[e]),delete this.VAOs[e];for(let e in this.attributes)this.gl.deleteBuffer(this.attributes[e].buffer),delete this.attributes[e]}}},"./node_modules/ogl/src/core/Mesh.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mesh:()=>a});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/math/Mat3.js"),i=r("./node_modules/ogl/src/math/Mat4.js");let o=0;class a extends s.Transform{constructor(e,{geometry:t,program:r,mode:s=e.TRIANGLES,frustumCulled:a=!0,renderOrder:l=0}={}){super(),e.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=e,this.id=o++,this.geometry=t,this.program=r,this.mode=s,this.frustumCulled=a,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new n.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(e){return this.beforeRenderCallbacks.push(e),this}onAfterRender(e){return this.afterRenderCallbacks.push(e),this}draw({camera:e}={}){e&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=e.projectionMatrix,this.program.uniforms.cameraPosition.value=e.worldPosition,this.program.uniforms.viewMatrix.value=e.viewMatrix,this.modelViewMatrix.multiply(e.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})));let t=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:t}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})))}}},"./node_modules/ogl/src/core/Program.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Program:()=>i});let s=1;const n={};class i{constructor(e,{vertex:t,fragment:r,uniforms:n={},transparent:i=!1,cullFace:o=e.BACK,frontFace:a=e.CCW,depthTest:l=!0,depthWrite:u=!0,depthFunc:c=e.LEQUAL}={}){e.canvas||console.error("gl not passed as first argument to Program"),this.gl=e,this.uniforms=n,this.id=s++,t||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=i,this.cullFace=o,this.frontFace=a,this.depthTest=l,this.depthWrite=u,this.depthFunc=c,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA)),this.vertexShader=e.createShader(e.VERTEX_SHADER),this.fragmentShader=e.createShader(e.FRAGMENT_SHADER),this.program=e.createProgram(),e.attachShader(this.program,this.vertexShader),e.attachShader(this.program,this.fragmentShader),this.setShaders({vertex:t,fragment:r})}setShaders({vertex:e,fragment:t}){if(e&&(this.gl.shaderSource(this.vertexShader,e),this.gl.compileShader(this.vertexShader),""!==this.gl.getShaderInfoLog(this.vertexShader)&&console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\nVertex Shader\n${a(e)}`)),t&&(this.gl.shaderSource(this.fragmentShader,t),this.gl.compileShader(this.fragmentShader),""!==this.gl.getShaderInfoLog(this.fragmentShader)&&console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\nFragment Shader\n${a(t)}`)),this.gl.linkProgram(this.program),!this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS))return console.warn(this.gl.getProgramInfoLog(this.program));this.uniformLocations=new Map;let r=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_UNIFORMS);for(let e=0;e<r;e++){let t=this.gl.getActiveUniform(this.program,e);this.uniformLocations.set(t,this.gl.getUniformLocation(this.program,t.name));const r=t.name.match(/(\w+)/g);t.uniformName=r[0],t.nameComponents=r.slice(1)}this.attributeLocations=new Map;const s=[],n=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_ATTRIBUTES);for(let e=0;e<n;e++){const t=this.gl.getActiveAttrib(this.program,e),r=this.gl.getAttribLocation(this.program,t.name);-1!==r&&(s[r]=t.name,this.attributeLocations.set(t,r))}this.attributeOrder=s.join("")}setBlendFunc(e,t,r,s){this.blendFunc.src=e,this.blendFunc.dst=t,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=s,e&&(this.transparent=!0)}setBlendEquation(e,t){this.blendEquation.modeRGB=e,this.blendEquation.modeAlpha=t}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:e=!1}={}){let t=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((e,r)=>{let s=this.uniforms[r.uniformName];for(const e of r.nameComponents){if(!s)break;if(!(e in s)){if(Array.isArray(s.value))break;s=void 0;break}s=s[e]}if(!s)return u(`Active uniform ${r.name} has not been supplied`);if(s&&void 0===s.value)return u(`${r.name} uniform is missing a value parameter`);if(s.value.texture)return t+=1,s.value.update(t),o(this.gl,r.type,e,t);if(s.value.length&&s.value[0].texture){const n=[];return s.value.forEach((e=>{t+=1,e.update(t),n.push(t)})),o(this.gl,r.type,e,n)}o(this.gl,r.type,e,s.value)})),this.applyState(),e&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(e,t,r,s){s=s.length?function(e){const t=e.length,r=e[0].length;if(void 0===r)return e;const s=t*r;let i=n[s];i||(n[s]=i=new Float32Array(s));for(let s=0;s<t;s++)i.set(e[s],s*r);return i}(s):s;const i=e.renderer.state.uniformLocations.get(r);if(s.length)if(void 0===i||i.length!==s.length)e.renderer.state.uniformLocations.set(r,s.slice(0));else{if(function(e,t){if(e.length!==t.length)return!1;for(let r=0,s=e.length;r<s;r++)if(e[r]!==t[r])return!1;return!0}(i,s))return;i.set?i.set(s):function(e,t){for(let r=0,s=e.length;r<s;r++)e[r]=t[r]}(i,s),e.renderer.state.uniformLocations.set(r,i)}else{if(i===s)return;e.renderer.state.uniformLocations.set(r,s)}switch(t){case 5126:return s.length?e.uniform1fv(r,s):e.uniform1f(r,s);case 35664:return e.uniform2fv(r,s);case 35665:return e.uniform3fv(r,s);case 35666:return e.uniform4fv(r,s);case 35670:case 5124:case 35678:case 36306:case 35680:case 36289:return s.length?e.uniform1iv(r,s):e.uniform1i(r,s);case 35671:case 35667:return e.uniform2iv(r,s);case 35672:case 35668:return e.uniform3iv(r,s);case 35673:case 35669:return e.uniform4iv(r,s);case 35674:return e.uniformMatrix2fv(r,!1,s);case 35675:return e.uniformMatrix3fv(r,!1,s);case 35676:return e.uniformMatrix4fv(r,!1,s)}}function a(e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}let l=0;function u(e){l>100||(console.warn(e),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Renderer:()=>i});const s=new(r("./node_modules/ogl/src/math/Vec3.js").Vec3);let n=1;class i{constructor({canvas:e=document.createElement("canvas"),width:t=300,height:r=150,dpr:s=1,alpha:i=!1,depth:o=!0,stencil:a=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:c=!1,powerPreference:h="default",autoClear:d=!0,webgl:p=2}={}){const m={alpha:i,depth:o,stencil:a,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:c,powerPreference:h};this.dpr=s,this.alpha=i,this.color=!0,this.depth=o,this.stencil=a,this.premultipliedAlpha=u,this.autoClear=d,this.id=n++,2===p&&(this.gl=e.getContext("webgl2",m)),this.isWebgl2=!!this.gl,this.gl||(this.gl=e.getContext("webgl",m)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(t,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=!1,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LEQUAL,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(e,t){this.width=e,this.height=t,this.gl.canvas.width=e*this.dpr,this.gl.canvas.height=t*this.dpr,this.gl.canvas.style&&Object.assign(this.gl.canvas.style,{width:e+"px",height:t+"px"})}setViewport(e,t,r=0,s=0){this.state.viewport.width===e&&this.state.viewport.height===t||(this.state.viewport.width=e,this.state.viewport.height=t,this.state.viewport.x=r,this.state.viewport.y=s,this.gl.viewport(r,s,e,t))}setScissor(e,t,r=0,s=0){this.gl.scissor(r,s,e,t)}enable(e){!0!==this.state[e]&&(this.gl.enable(e),this.state[e]=!0)}disable(e){!1!==this.state[e]&&(this.gl.disable(e),this.state[e]=!1)}setBlendFunc(e,t,r,s){this.state.blendFunc.src===e&&this.state.blendFunc.dst===t&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===s||(this.state.blendFunc.src=e,this.state.blendFunc.dst=t,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=s,void 0!==r?this.gl.blendFuncSeparate(e,t,r,s):this.gl.blendFunc(e,t))}setBlendEquation(e,t){e=e||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===e&&this.state.blendEquation.modeAlpha===t||(this.state.blendEquation.modeRGB=e,this.state.blendEquation.modeAlpha=t,void 0!==t?this.gl.blendEquationSeparate(e,t):this.gl.blendEquation(e))}setCullFace(e){this.state.cullFace!==e&&(this.state.cullFace=e,this.gl.cullFace(e))}setFrontFace(e){this.state.frontFace!==e&&(this.state.frontFace=e,this.gl.frontFace(e))}setDepthMask(e){this.state.depthMask!==e&&(this.state.depthMask=e,this.gl.depthMask(e))}setDepthFunc(e){this.state.depthFunc!==e&&(this.state.depthFunc=e,this.gl.depthFunc(e))}activeTexture(e){this.state.activeTextureUnit!==e&&(this.state.activeTextureUnit=e,this.gl.activeTexture(this.gl.TEXTURE0+e))}bindFramebuffer({target:e=this.gl.FRAMEBUFFER,buffer:t=null}={}){this.state.framebuffer!==t&&(this.state.framebuffer=t,this.gl.bindFramebuffer(e,t))}getExtension(e,t,r){return t&&this.gl[t]?this.gl[t].bind(this.gl):(this.extensions[e]||(this.extensions[e]=this.gl.getExtension(e)),t?this.extensions[e]?this.extensions[e][r].bind(this.extensions[e]):null:this.extensions[e])}sortOpaque(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:e.zDepth!==t.zDepth?e.zDepth-t.zDepth:t.id-e.id}sortTransparent(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.zDepth!==t.zDepth?t.zDepth-e.zDepth:t.id-e.id}sortUI(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:t.id-e.id}getRenderList({scene:e,camera:t,frustumCull:r,sort:n}){let i=[];if(t&&r&&t.updateFrustum(),e.traverse((e=>{if(!e.visible)return!0;e.draw&&(r&&e.frustumCulled&&t&&!t.frustumIntersectsMesh(e)||i.push(e))})),n){const e=[],r=[],n=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?r.push(i):n.push(i):e.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&t&&(i.worldMatrix.getTranslation(s),s.applyMatrix4(t.projectionViewMatrix),i.zDepth=s.z)})),e.sort(this.sortOpaque),r.sort(this.sortTransparent),n.sort(this.sortUI),i=e.concat(r,n)}return i}render({scene:e,camera:t,target:r=null,update:s=!0,sort:n=!0,frustumCull:i=!0,clear:o}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(o||this.autoClear&&!1!==o)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),s&&e.updateMatrixWorld(),t&&t.updateMatrixWorld();this.getRenderList({scene:e,camera:t,frustumCull:i,sort:n}).forEach((e=>{e.draw({camera:t})}))}}},"./node_modules/ogl/src/core/Texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Texture:()=>o});const s=new Uint8Array(4);function n(e){return!(e&e-1)}let i=1;class o{constructor(e,{image:t,target:r=e.TEXTURE_2D,type:s=e.UNSIGNED_BYTE,format:n=e.RGBA,internalFormat:o=n,wrapS:a=e.CLAMP_TO_EDGE,wrapT:l=e.CLAMP_TO_EDGE,generateMipmaps:u=r===(e.TEXTURE_2D||e.TEXTURE_CUBE_MAP),minFilter:c=(u?e.NEAREST_MIPMAP_LINEAR:e.LINEAR),magFilter:h=e.LINEAR,premultiplyAlpha:d=!1,unpackAlignment:p=4,flipY:m=r==e.TEXTURE_2D,anisotropy:f=0,level:g=0,width:v,height:_=v,length:y=1}={}){this.gl=e,this.id=i++,this.image=t,this.target=r,this.type=s,this.format=n,this.internalFormat=o,this.minFilter=c,this.magFilter=h,this.wrapS=a,this.wrapT=l,this.generateMipmaps=u,this.premultiplyAlpha=d,this.unpackAlignment=p,this.flipY=m,this.anisotropy=Math.min(f,this.gl.renderer.parameters.maxAnisotropy),this.level=g,this.width=v,this.height=_,this.length=y,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(e=0){const t=!(this.image===this.store.image&&!this.needsUpdate);if((t||this.glState.textureUnits[e]!==this.id)&&(this.gl.renderer.activeTexture(e),this.bind()),t){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.level,this.internalFormat,this.format,this.type,this.image[e]);else if(ArrayBuffer.isView(this.image))this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image):this.target===this.gl.TEXTURE_2D_ARRAY&&this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let e=0;e<this.image.length;e++)this.gl.compressedTexImage2D(this.target,e,this.internalFormat,this.image[e].width,this.image[e].height,0,this.image[e].data);else this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image):this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||n(this.image.width)&&n(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.target===this.gl.TEXTURE_2D_ARRAY&&this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Transform:()=>a});var s=r("./node_modules/ogl/src/math/Vec3.js"),n=r("./node_modules/ogl/src/math/Quat.js"),i=r("./node_modules/ogl/src/math/Mat4.js"),o=r("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.worldMatrixNeedsUpdate=!1,this.position=new s.Vec3,this.quaternion=new n.Quat,this.scale=new s.Vec3(1),this.rotation=new o.Euler,this.up=new s.Vec3(0,1,0),this.rotation._target.onChange=()=>this.quaternion.fromEuler(this.rotation,!0),this.quaternion._target.onChange=()=>this.rotation.fromQuaternion(this.quaternion,void 0,!0)}setParent(e,t=!0){this.parent&&e!==this.parent&&this.parent.removeChild(this,!1),this.parent=e,t&&e&&e.addChild(this,!1)}addChild(e,t=!0){~this.children.indexOf(e)||this.children.push(e),t&&e.setParent(this,!1)}removeChild(e,t=!0){~this.children.indexOf(e)&&this.children.splice(this.children.indexOf(e),1),t&&e.setParent(null,!1)}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||e)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,e=!0);for(let t=0,r=this.children.length;t<r;t++)this.children[t].updateMatrixWorld(e)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(e){if(!e(this))for(let t=0,r=this.children.length;t<r;t++)this.children[t].traverse(e)}decompose(){this.matrix.decompose(this.quaternion._target,this.position,this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(e,t=!1){t?this.matrix.lookAt(this.position,e,this.up):this.matrix.lookAt(e,this.position,this.up),this.matrix.getRotation(this.quaternion._target),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Plane:()=>n});var s=r("./node_modules/ogl/src/core/Geometry.js");class n extends s.Geometry{constructor(e,{width:t=1,height:r=1,widthSegments:s=1,heightSegments:i=1,attributes:o={}}={}){const a=s,l=i,u=(a+1)*(l+1),c=a*l*6,h=new Float32Array(3*u),d=new Float32Array(3*u),p=new Float32Array(2*u),m=c>65536?new Uint32Array(c):new Uint16Array(c);n.buildPlane(h,d,p,m,t,r,0,a,l),Object.assign(o,{position:{size:3,data:h},normal:{size:3,data:d},uv:{size:2,data:p},index:{data:m}}),super(e,o)}static buildPlane(e,t,r,s,n,i,o,a,l,u=0,c=1,h=2,d=1,p=-1,m=0,f=0){const g=m,v=n/a,_=i/l;for(let y=0;y<=l;y++){let b=y*_-i/2;for(let i=0;i<=a;i++,m++){let _=i*v-n/2;if(e[3*m+u]=_*d,e[3*m+c]=b*p,e[3*m+h]=o/2,t[3*m+u]=0,t[3*m+c]=0,t[3*m+h]=o>=0?1:-1,r[2*m]=i/a,r[2*m+1]=1-y/l,y===l||i===a)continue;let w=g+i+y*(a+1),x=g+i+(y+1)*(a+1),j=g+i+(y+1)*(a+1)+1,E=g+i+y*(a+1)+1;s[6*f]=w,s[6*f+1]=x,s[6*f+2]=E,s[6*f+3]=x,s[6*f+4]=j,s[6*f+5]=E,f++}}}}},"./node_modules/ogl/src/math/Euler.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Euler:()=>i});var s=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const n=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(e=0,t=e,r=e,s="YXZ"){super(e,t,r),this.order=s,this.onChange=()=>{},this._target=this;const n=["0","1","2"];return new Proxy(this,{set(e,t){const r=Reflect.set(...arguments);return r&&n.includes(t)&&e.onChange(),r}})}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this._target[0]=e,this.onChange()}set y(e){this._target[1]=e,this.onChange()}set z(e){this._target[2]=e,this.onChange()}set(e,t=e,r=e){return e.length?this.copy(e):(this._target[0]=e,this._target[1]=t,this._target[2]=r,this.onChange(),this)}copy(e){return this._target[0]=e[0],this._target[1]=e[1],this._target[2]=e[2],this.onChange(),this}reorder(e){return this._target.order=e,this.onChange(),this}fromRotationMatrix(e,t=this.order){return s.fromRotationMatrix(this._target,e,t),this.onChange(),this}fromQuaternion(e,t=this.order,r){return n.fromQuaternion(e),this._target.fromRotationMatrix(n,t),r||this.onChange(),this}fromArray(e,t=0){return this._target[0]=e[t],this._target[1]=e[t+1],this._target[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}}},"./node_modules/ogl/src/math/Mat3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat3:()=>n});var s=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class n extends Array{constructor(e=1,t=0,r=0,s=0,n=1,i=0,o=0,a=0,l=1){return super(e,t,r,s,n,i,o,a,l),this}set(e,t,r,n,i,o,a,l,u){return e.length?this.copy(e):(s.set(this,e,t,r,n,i,o,a,l,u),this)}translate(e,t=this){return s.translate(this,t,e),this}rotate(e,t=this){return s.rotate(this,t,e),this}scale(e,t=this){return s.scale(this,t,e),this}multiply(e,t){return t?s.multiply(this,e,t):s.multiply(this,this,e),this}identity(){return s.identity(this),this}copy(e){return s.copy(this,e),this}fromMatrix4(e){return s.fromMat4(this,e),this}fromQuaternion(e){return s.fromQuat(this,e),this}fromBasis(e,t,r){return this.set(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2]),this}inverse(e=this){return s.invert(this,e),this}getNormalMatrix(e){return s.normalFromMat4(this,e),this}}},"./node_modules/ogl/src/math/Mat4.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat4:()=>n});var s=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class n extends Array{constructor(e=1,t=0,r=0,s=0,n=0,i=1,o=0,a=0,l=0,u=0,c=1,h=0,d=0,p=0,m=0,f=1){return super(e,t,r,s,n,i,o,a,l,u,c,h,d,p,m,f),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(e){this[12]=e}set y(e){this[13]=e}set z(e){this[14]=e}set w(e){this[15]=e}set(e,t,r,n,i,o,a,l,u,c,h,d,p,m,f,g){return e.length?this.copy(e):(s.set(this,e,t,r,n,i,o,a,l,u,c,h,d,p,m,f,g),this)}translate(e,t=this){return s.translate(this,t,e),this}rotate(e,t,r=this){return s.rotate(this,r,e,t),this}scale(e,t=this){return s.scale(this,t,"number"==typeof e?[e,e,e]:e),this}add(e,t){return t?s.add(this,e,t):s.add(this,this,e),this}sub(e,t){return t?s.subtract(this,e,t):s.subtract(this,this,e),this}multiply(e,t){return e.length?t?s.multiply(this,e,t):s.multiply(this,this,e):s.multiplyScalar(this,this,e),this}identity(){return s.identity(this),this}copy(e){return s.copy(this,e),this}fromPerspective({fov:e,aspect:t,near:r,far:n}={}){return s.perspective(this,e,t,r,n),this}fromOrthogonal({left:e,right:t,bottom:r,top:n,near:i,far:o}){return s.ortho(this,e,t,r,n,i,o),this}fromQuaternion(e){return s.fromQuat(this,e),this}setPosition(e){return this.x=e[0],this.y=e[1],this.z=e[2],this}inverse(e=this){return s.invert(this,e),this}compose(e,t,r){return s.compose(this,e,t,r),this}decompose(e,t,r){return s.decompose(this,e,t,r),this}getRotation(e){return s.getRotation(e,this),this}getTranslation(e){return s.getTranslation(e,this),this}getScaling(e){return s.getScaling(e,this),this}getMaxScaleOnAxis(){return s.getMaxScaleOnAxis(this)}lookAt(e,t,r){return s.targetTo(this,e,t,r),this}determinant(){return s.determinant(this)}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this[4]=e[t+4],this[5]=e[t+5],this[6]=e[t+6],this[7]=e[t+7],this[8]=e[t+8],this[9]=e[t+9],this[10]=e[t+10],this[11]=e[t+11],this[12]=e[t+12],this[13]=e[t+13],this[14]=e[t+14],this[15]=e[t+15],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e[t+4]=this[4],e[t+5]=this[5],e[t+6]=this[6],e[t+7]=this[7],e[t+8]=this[8],e[t+9]=this[9],e[t+10]=this[10],e[t+11]=this[11],e[t+12]=this[12],e[t+13]=this[13],e[t+14]=this[14],e[t+15]=this[15],e}}},"./node_modules/ogl/src/math/Quat.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Quat:()=>n});var s=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class n extends Array{constructor(e=0,t=0,r=0,s=1){super(e,t,r,s),this.onChange=()=>{},this._target=this;const n=["0","1","2","3"];return new Proxy(this,{set(e,t){const r=Reflect.set(...arguments);return r&&n.includes(t)&&e.onChange(),r}})}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(e){this._target[0]=e,this.onChange()}set y(e){this._target[1]=e,this.onChange()}set z(e){this._target[2]=e,this.onChange()}set w(e){this._target[3]=e,this.onChange()}identity(){return s.identity(this._target),this.onChange(),this}set(e,t,r,n){return e.length?this.copy(e):(s.set(this._target,e,t,r,n),this.onChange(),this)}rotateX(e){return s.rotateX(this._target,this._target,e),this.onChange(),this}rotateY(e){return s.rotateY(this._target,this._target,e),this.onChange(),this}rotateZ(e){return s.rotateZ(this._target,this._target,e),this.onChange(),this}inverse(e=this._target){return s.invert(this._target,e),this.onChange(),this}conjugate(e=this._target){return s.conjugate(this._target,e),this.onChange(),this}copy(e){return s.copy(this._target,e),this.onChange(),this}normalize(e=this._target){return s.normalize(this._target,e),this.onChange(),this}multiply(e,t){return t?s.multiply(this._target,e,t):s.multiply(this._target,this._target,e),this.onChange(),this}dot(e){return s.dot(this._target,e)}fromMatrix3(e){return s.fromMat3(this._target,e),this.onChange(),this}fromEuler(e,t){return s.fromEuler(this._target,e,e.order),t||this.onChange(),this}fromAxisAngle(e,t){return s.setAxisAngle(this._target,e,t),this.onChange(),this}slerp(e,t){return s.slerp(this._target,this._target,e,t),this.onChange(),this}fromArray(e,t=0){return this._target[0]=e[t],this._target[1]=e[t+1],this._target[2]=e[t+2],this._target[3]=e[t+3],this.onChange(),this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e}}},"./node_modules/ogl/src/math/Vec3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Vec3:()=>n});var s=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class n extends Array{constructor(e=0,t=e,r=e){return super(e,t,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e}set y(e){this[1]=e}set z(e){this[2]=e}set(e,t=e,r=e){return e.length?this.copy(e):(s.set(this,e,t,r),this)}copy(e){return s.copy(this,e),this}add(e,t){return t?s.add(this,e,t):s.add(this,this,e),this}sub(e,t){return t?s.subtract(this,e,t):s.subtract(this,this,e),this}multiply(e){return e.length?s.multiply(this,this,e):s.scale(this,this,e),this}divide(e){return e.length?s.divide(this,this,e):s.scale(this,this,1/e),this}inverse(e=this){return s.inverse(this,e),this}len(){return s.length(this)}distance(e){return e?s.distance(this,e):s.length(this)}squaredLen(){return s.squaredLength(this)}squaredDistance(e){return e?s.squaredDistance(this,e):s.squaredLength(this)}negate(e=this){return s.negate(this,e),this}cross(e,t){return t?s.cross(this,e,t):s.cross(this,this,e),this}scale(e){return s.scale(this,this,e),this}normalize(){return s.normalize(this,this),this}dot(e){return s.dot(this,e)}equals(e){return s.exactEquals(this,e)}applyMatrix3(e){return s.transformMat3(this,this,e),this}applyMatrix4(e){return s.transformMat4(this,this,e),this}scaleRotateMatrix4(e){return s.scaleRotateMat4(this,this,e),this}applyQuaternion(e){return s.transformQuat(this,this,e),this}angle(e){return s.angle(this,e)}lerp(e,t){return s.lerp(this,this,e,t),this}clone(){return new n(this[0],this[1],this[2])}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}transformDirection(e){const t=this[0],r=this[1],s=this[2];return this[0]=e[0]*t+e[4]*r+e[8]*s,this[1]=e[1]*t+e[5]*r+e[9]*s,this[2]=e[2]*t+e[6]*r+e[10]*s,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(e,t,r)=>{"use strict";function s(e,t,r="YXZ"){return"XYZ"===r?(e[1]=Math.asin(Math.min(Math.max(t[8],-1),1)),Math.abs(t[8])<.99999?(e[0]=Math.atan2(-t[9],t[10]),e[2]=Math.atan2(-t[4],t[0])):(e[0]=Math.atan2(t[6],t[5]),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-Math.min(Math.max(t[9],-1),1)),Math.abs(t[9])<.99999?(e[1]=Math.atan2(t[8],t[10]),e[2]=Math.atan2(t[1],t[5])):(e[1]=Math.atan2(-t[2],t[0]),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(Math.min(Math.max(t[6],-1),1)),Math.abs(t[6])<.99999?(e[1]=Math.atan2(-t[2],t[10]),e[2]=Math.atan2(-t[4],t[5])):(e[1]=0,e[2]=Math.atan2(t[1],t[0]))):"ZYX"===r?(e[1]=Math.asin(-Math.min(Math.max(t[2],-1),1)),Math.abs(t[2])<.99999?(e[0]=Math.atan2(t[6],t[10]),e[2]=Math.atan2(t[1],t[0])):(e[0]=0,e[2]=Math.atan2(-t[4],t[5]))):"YZX"===r?(e[2]=Math.asin(Math.min(Math.max(t[1],-1),1)),Math.abs(t[1])<.99999?(e[0]=Math.atan2(-t[9],t[5]),e[1]=Math.atan2(-t[2],t[0])):(e[0]=0,e[1]=Math.atan2(t[8],t[10]))):"XZY"===r&&(e[2]=Math.asin(-Math.min(Math.max(t[4],-1),1)),Math.abs(t[4])<.99999?(e[0]=Math.atan2(t[6],t[5]),e[1]=Math.atan2(t[8],t[0])):(e[0]=Math.atan2(-t[9],t[10]),e[1]=0)),e}r.r(t),r.d(t,{fromRotationMatrix:()=>s})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>v,copy:()=>i,determinant:()=>c,fromMat4:()=>s,fromQuat:()=>n,identity:()=>a,invert:()=>u,multiply:()=>h,multiplyScalar:()=>y,normalFromMat4:()=>f,projection:()=>g,rotate:()=>p,scale:()=>m,set:()=>o,subtract:()=>_,translate:()=>d,transpose:()=>l});function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function n(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r+r,a=s+s,l=n+n,u=r*o,c=s*o,h=s*a,d=n*o,p=n*a,m=n*l,f=i*o,g=i*a,v=i*l;return e[0]=1-h-m,e[3]=c-v,e[6]=d+g,e[1]=c+v,e[4]=1-u-m,e[7]=p-f,e[2]=d-g,e[5]=p+f,e[8]=1-u-h,e}function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function o(e,t,r,s,n,i,o,a,l,u){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e}function a(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function l(e,t){if(e===t){let r=t[1],s=t[2],n=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=s,e[7]=n}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function u(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],h=c*o-a*u,d=-c*i+a*l,p=u*i-o*l,m=r*h+s*d+n*p;return m?(m=1/m,e[0]=h*m,e[1]=(-c*s+n*u)*m,e[2]=(a*s-n*o)*m,e[3]=d*m,e[4]=(c*r-n*l)*m,e[5]=(-a*r+n*i)*m,e[6]=p*m,e[7]=(-u*r+s*l)*m,e[8]=(o*r-s*i)*m,e):null}function c(e){let t=e[0],r=e[1],s=e[2],n=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8];return t*(u*i-o*l)+r*(-u*n+o*a)+s*(l*n-i*a)}function h(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=r[0],p=r[1],m=r[2],f=r[3],g=r[4],v=r[5],_=r[6],y=r[7],b=r[8];return e[0]=d*s+p*o+m*u,e[1]=d*n+p*a+m*c,e[2]=d*i+p*l+m*h,e[3]=f*s+g*o+v*u,e[4]=f*n+g*a+v*c,e[5]=f*i+g*l+v*h,e[6]=_*s+y*o+b*u,e[7]=_*n+y*a+b*c,e[8]=_*i+y*l+b*h,e}function d(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=r[0],p=r[1];return e[0]=s,e[1]=n,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=d*s+p*o+u,e[7]=d*n+p*a+c,e[8]=d*i+p*l+h,e}function p(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=Math.sin(r),p=Math.cos(r);return e[0]=p*s+d*o,e[1]=p*n+d*a,e[2]=p*i+d*l,e[3]=p*o-d*s,e[4]=p*a-d*n,e[5]=p*l-d*i,e[6]=u,e[7]=c,e[8]=h,e}function m(e,t,r){let s=r[0],n=r[1];return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=n*t[3],e[4]=n*t[4],e[5]=n*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function f(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],h=t[9],d=t[10],p=t[11],m=t[12],f=t[13],g=t[14],v=t[15],_=r*a-s*o,y=r*l-n*o,b=r*u-i*o,w=s*l-n*a,x=s*u-i*a,j=n*u-i*l,E=c*f-h*m,A=c*g-d*m,T=c*v-p*m,M=h*g-d*f,S=h*v-p*f,C=d*v-p*g,k=_*C-y*S+b*M+w*T-x*A+j*E;return k?(k=1/k,e[0]=(a*C-l*S+u*M)*k,e[1]=(l*T-o*C-u*A)*k,e[2]=(o*S-a*T+u*E)*k,e[3]=(n*S-s*C-i*M)*k,e[4]=(r*C-n*T+i*A)*k,e[5]=(s*T-r*S-i*E)*k,e[6]=(f*j-g*x+v*w)*k,e[7]=(g*b-m*j-v*y)*k,e[8]=(m*x-f*b+v*_)*k,e):null}function g(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function v(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function _(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function y(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>T,compose:()=>b,copy:()=>i,decompose:()=>y,determinant:()=>c,fromQuat:()=>x,fromRotationTranslationScale:()=>w,getMaxScaleOnAxis:()=>v,getRotation:()=>_,getScaling:()=>g,getTranslation:()=>f,identity:()=>a,invert:()=>u,multiply:()=>h,multiplyScalar:()=>S,ortho:()=>E,perspective:()=>j,rotate:()=>m,scale:()=>p,set:()=>o,subtract:()=>M,targetTo:()=>A,translate:()=>d,transpose:()=>l});var s=r("./node_modules/ogl/src/math/functions/Vec3Func.js");const n=1e-6;function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function o(e,t,r,s,n,i,o,a,l,u,c,h,d,p,m,f,g){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e[9]=c,e[10]=h,e[11]=d,e[12]=p,e[13]=m,e[14]=f,e[15]=g,e}function a(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function l(e,t){if(e===t){let r=t[1],s=t[2],n=t[3],i=t[6],o=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=s,e[9]=i,e[11]=t[14],e[12]=n,e[13]=o,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function u(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],h=t[9],d=t[10],p=t[11],m=t[12],f=t[13],g=t[14],v=t[15],_=r*a-s*o,y=r*l-n*o,b=r*u-i*o,w=s*l-n*a,x=s*u-i*a,j=n*u-i*l,E=c*f-h*m,A=c*g-d*m,T=c*v-p*m,M=h*g-d*f,S=h*v-p*f,C=d*v-p*g,k=_*C-y*S+b*M+w*T-x*A+j*E;return k?(k=1/k,e[0]=(a*C-l*S+u*M)*k,e[1]=(n*S-s*C-i*M)*k,e[2]=(f*j-g*x+v*w)*k,e[3]=(d*x-h*j-p*w)*k,e[4]=(l*T-o*C-u*A)*k,e[5]=(r*C-n*T+i*A)*k,e[6]=(g*b-m*j-v*y)*k,e[7]=(c*j-d*b+p*y)*k,e[8]=(o*S-a*T+u*E)*k,e[9]=(s*T-r*S-i*E)*k,e[10]=(m*x-f*b+v*_)*k,e[11]=(h*b-c*x-p*_)*k,e[12]=(a*A-o*M-l*E)*k,e[13]=(r*M-s*A+n*E)*k,e[14]=(f*y-m*w-g*_)*k,e[15]=(c*w-h*y+d*_)*k,e):null}function c(e){let t=e[0],r=e[1],s=e[2],n=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8],c=e[9],h=e[10],d=e[11],p=e[12],m=e[13],f=e[14],g=e[15];return(t*o-r*i)*(h*g-d*f)-(t*a-s*i)*(c*g-d*m)+(t*l-n*i)*(c*f-h*m)+(r*a-s*o)*(u*g-d*p)-(r*l-n*o)*(u*f-h*p)+(s*l-n*a)*(u*m-c*p)}function h(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=t[9],p=t[10],m=t[11],f=t[12],g=t[13],v=t[14],_=t[15],y=r[0],b=r[1],w=r[2],x=r[3];return e[0]=y*s+b*a+w*h+x*f,e[1]=y*n+b*l+w*d+x*g,e[2]=y*i+b*u+w*p+x*v,e[3]=y*o+b*c+w*m+x*_,y=r[4],b=r[5],w=r[6],x=r[7],e[4]=y*s+b*a+w*h+x*f,e[5]=y*n+b*l+w*d+x*g,e[6]=y*i+b*u+w*p+x*v,e[7]=y*o+b*c+w*m+x*_,y=r[8],b=r[9],w=r[10],x=r[11],e[8]=y*s+b*a+w*h+x*f,e[9]=y*n+b*l+w*d+x*g,e[10]=y*i+b*u+w*p+x*v,e[11]=y*o+b*c+w*m+x*_,y=r[12],b=r[13],w=r[14],x=r[15],e[12]=y*s+b*a+w*h+x*f,e[13]=y*n+b*l+w*d+x*g,e[14]=y*i+b*u+w*p+x*v,e[15]=y*o+b*c+w*m+x*_,e}function d(e,t,r){let s,n,i,o,a,l,u,c,h,d,p,m,f=r[0],g=r[1],v=r[2];return t===e?(e[12]=t[0]*f+t[4]*g+t[8]*v+t[12],e[13]=t[1]*f+t[5]*g+t[9]*v+t[13],e[14]=t[2]*f+t[6]*g+t[10]*v+t[14],e[15]=t[3]*f+t[7]*g+t[11]*v+t[15]):(s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],h=t[8],d=t[9],p=t[10],m=t[11],e[0]=s,e[1]=n,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=u,e[7]=c,e[8]=h,e[9]=d,e[10]=p,e[11]=m,e[12]=s*f+a*g+h*v+t[12],e[13]=n*f+l*g+d*v+t[13],e[14]=i*f+u*g+p*v+t[14],e[15]=o*f+c*g+m*v+t[15]),e}function p(e,t,r){let s=r[0],n=r[1],i=r[2];return e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s,e[3]=t[3]*s,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function m(e,t,r,s){let i,o,a,l,u,c,h,d,p,m,f,g,v,_,y,b,w,x,j,E,A,T,M,S,C=s[0],k=s[1],O=s[2],D=Math.hypot(C,k,O);return Math.abs(D)<n?null:(D=1/D,C*=D,k*=D,O*=D,i=Math.sin(r),o=Math.cos(r),a=1-o,l=t[0],u=t[1],c=t[2],h=t[3],d=t[4],p=t[5],m=t[6],f=t[7],g=t[8],v=t[9],_=t[10],y=t[11],b=C*C*a+o,w=k*C*a+O*i,x=O*C*a-k*i,j=C*k*a-O*i,E=k*k*a+o,A=O*k*a+C*i,T=C*O*a+k*i,M=k*O*a-C*i,S=O*O*a+o,e[0]=l*b+d*w+g*x,e[1]=u*b+p*w+v*x,e[2]=c*b+m*w+_*x,e[3]=h*b+f*w+y*x,e[4]=l*j+d*E+g*A,e[5]=u*j+p*E+v*A,e[6]=c*j+m*E+_*A,e[7]=h*j+f*E+y*A,e[8]=l*T+d*M+g*S,e[9]=u*T+p*M+v*S,e[10]=c*T+m*M+_*S,e[11]=h*T+f*M+y*S,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function f(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function g(e,t){let r=t[0],s=t[1],n=t[2],i=t[4],o=t[5],a=t[6],l=t[8],u=t[9],c=t[10];return e[0]=Math.hypot(r,s,n),e[1]=Math.hypot(i,o,a),e[2]=Math.hypot(l,u,c),e}function v(e){let t=e[0],r=e[1],s=e[2],n=e[4],i=e[5],o=e[6],a=e[8],l=e[9],u=e[10];const c=t*t+r*r+s*s,h=n*n+i*i+o*o,d=a*a+l*l+u*u;return Math.sqrt(Math.max(c,h,d))}const _=function(){const e=[1,1,1];return function(t,r){let s=e;g(s,r);let n=1/s[0],i=1/s[1],o=1/s[2],a=r[0]*n,l=r[1]*i,u=r[2]*o,c=r[4]*n,h=r[5]*i,d=r[6]*o,p=r[8]*n,m=r[9]*i,f=r[10]*o,v=a+h+f,_=0;return v>0?(_=2*Math.sqrt(v+1),t[3]=.25*_,t[0]=(d-m)/_,t[1]=(p-u)/_,t[2]=(l-c)/_):a>h&&a>f?(_=2*Math.sqrt(1+a-h-f),t[3]=(d-m)/_,t[0]=.25*_,t[1]=(l+c)/_,t[2]=(p+u)/_):h>f?(_=2*Math.sqrt(1+h-a-f),t[3]=(p-u)/_,t[0]=(l+c)/_,t[1]=.25*_,t[2]=(d+m)/_):(_=2*Math.sqrt(1+f-a-h),t[3]=(l-c)/_,t[0]=(p+u)/_,t[1]=(d+m)/_,t[2]=.25*_),t}}();function y(e,t,r,n){let i=s.length([e[0],e[1],e[2]]);const o=s.length([e[4],e[5],e[6]]),a=s.length([e[8],e[9],e[10]]);c(e)<0&&(i=-i),r[0]=e[12],r[1]=e[13],r[2]=e[14];const l=e.slice(),u=1/i,h=1/o,d=1/a;l[0]*=u,l[1]*=u,l[2]*=u,l[4]*=h,l[5]*=h,l[6]*=h,l[8]*=d,l[9]*=d,l[10]*=d,_(t,l),n[0]=i,n[1]=o,n[2]=a}function b(e,t,r,s){const n=e,i=t[0],o=t[1],a=t[2],l=t[3],u=i+i,c=o+o,h=a+a,d=i*u,p=i*c,m=i*h,f=o*c,g=o*h,v=a*h,_=l*u,y=l*c,b=l*h,w=s[0],x=s[1],j=s[2];return n[0]=(1-(f+v))*w,n[1]=(p+b)*w,n[2]=(m-y)*w,n[3]=0,n[4]=(p-b)*x,n[5]=(1-(d+v))*x,n[6]=(g+_)*x,n[7]=0,n[8]=(m+y)*j,n[9]=(g-_)*j,n[10]=(1-(d+f))*j,n[11]=0,n[12]=r[0],n[13]=r[1],n[14]=r[2],n[15]=1,n}function w(e,t,r,s){let n=t[0],i=t[1],o=t[2],a=t[3],l=n+n,u=i+i,c=o+o,h=n*l,d=n*u,p=n*c,m=i*u,f=i*c,g=o*c,v=a*l,_=a*u,y=a*c,b=s[0],w=s[1],x=s[2];return e[0]=(1-(m+g))*b,e[1]=(d+y)*b,e[2]=(p-_)*b,e[3]=0,e[4]=(d-y)*w,e[5]=(1-(h+g))*w,e[6]=(f+v)*w,e[7]=0,e[8]=(p+_)*x,e[9]=(f-v)*x,e[10]=(1-(h+m))*x,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function x(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r+r,a=s+s,l=n+n,u=r*o,c=s*o,h=s*a,d=n*o,p=n*a,m=n*l,f=i*o,g=i*a,v=i*l;return e[0]=1-h-m,e[1]=c+v,e[2]=d-g,e[3]=0,e[4]=c-v,e[5]=1-u-m,e[6]=p+f,e[7]=0,e[8]=d+g,e[9]=p-f,e[10]=1-u-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function j(e,t,r,s,n){let i=1/Math.tan(t/2),o=1/(s-n);return e[0]=i/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(n+s)*o,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*n*s*o,e[15]=0,e}function E(e,t,r,s,n,i,o){let a=1/(t-r),l=1/(s-n),u=1/(i-o);return e[0]=-2*a,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*u,e[11]=0,e[12]=(t+r)*a,e[13]=(n+s)*l,e[14]=(o+i)*u,e[15]=1,e}function A(e,t,r,s){let n=t[0],i=t[1],o=t[2],a=s[0],l=s[1],u=s[2],c=n-r[0],h=i-r[1],d=o-r[2],p=c*c+h*h+d*d;0===p?d=1:(p=1/Math.sqrt(p),c*=p,h*=p,d*=p);let m=l*d-u*h,f=u*c-a*d,g=a*h-l*c;return p=m*m+f*f+g*g,0===p&&(u?a+=1e-6:l?u+=1e-6:l+=1e-6,m=l*d-u*h,f=u*c-a*d,g=a*h-l*c,p=m*m+f*f+g*g),p=1/Math.sqrt(p),m*=p,f*=p,g*=p,e[0]=m,e[1]=f,e[2]=g,e[3]=0,e[4]=h*g-d*f,e[5]=d*m-c*g,e[6]=c*f-h*m,e[7]=0,e[8]=c,e[9]=h,e[10]=d,e[11]=0,e[12]=n,e[13]=i,e[14]=o,e[15]=1,e}function T(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function M(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function S(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>v,conjugate:()=>d,copy:()=>f,dot:()=>y,fromEuler:()=>m,fromMat3:()=>p,identity:()=>n,invert:()=>h,length:()=>w,lerp:()=>b,multiply:()=>o,normalize:()=>x,rotateX:()=>a,rotateY:()=>l,rotateZ:()=>u,scale:()=>_,set:()=>g,setAxisAngle:()=>i,slerp:()=>c});var s=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function n(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function i(e,t,r){r*=.5;let s=Math.sin(r);return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=Math.cos(r),e}function o(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=r[0],l=r[1],u=r[2],c=r[3];return e[0]=s*c+o*a+n*u-i*l,e[1]=n*c+o*l+i*a-s*u,e[2]=i*c+o*u+s*l-n*a,e[3]=o*c-s*a-n*l-i*u,e}function a(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=s*l+o*a,e[1]=n*l+i*a,e[2]=i*l-n*a,e[3]=o*l-s*a,e}function l(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=s*l-i*a,e[1]=n*l+o*a,e[2]=i*l+s*a,e[3]=o*l-n*a,e}function u(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=s*l+n*a,e[1]=n*l-s*a,e[2]=i*l+o*a,e[3]=o*l-i*a,e}function c(e,t,r,s){let n,i,o,a,l,u=t[0],c=t[1],h=t[2],d=t[3],p=r[0],m=r[1],f=r[2],g=r[3];return i=u*p+c*m+h*f+d*g,i<0&&(i=-i,p=-p,m=-m,f=-f,g=-g),1-i>1e-6?(n=Math.acos(i),o=Math.sin(n),a=Math.sin((1-s)*n)/o,l=Math.sin(s*n)/o):(a=1-s,l=s),e[0]=a*u+l*p,e[1]=a*c+l*m,e[2]=a*h+l*f,e[3]=a*d+l*g,e}function h(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r*r+s*s+n*n+i*i,a=o?1/o:0;return e[0]=-r*a,e[1]=-s*a,e[2]=-n*a,e[3]=i*a,e}function d(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function p(e,t){let r,s=t[0]+t[4]+t[8];if(s>0)r=Math.sqrt(s+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{let s=0;t[4]>t[0]&&(s=1),t[8]>t[3*s+s]&&(s=2);let n=(s+1)%3,i=(s+2)%3;r=Math.sqrt(t[3*s+s]-t[3*n+n]-t[3*i+i]+1),e[s]=.5*r,r=.5/r,e[3]=(t[3*n+i]-t[3*i+n])*r,e[n]=(t[3*n+s]+t[3*s+n])*r,e[i]=(t[3*i+s]+t[3*s+i])*r}return e}function m(e,t,r="YXZ"){let s=Math.sin(.5*t[0]),n=Math.cos(.5*t[0]),i=Math.sin(.5*t[1]),o=Math.cos(.5*t[1]),a=Math.sin(.5*t[2]),l=Math.cos(.5*t[2]);return"XYZ"===r?(e[0]=s*o*l+n*i*a,e[1]=n*i*l-s*o*a,e[2]=n*o*a+s*i*l,e[3]=n*o*l-s*i*a):"YXZ"===r?(e[0]=s*o*l+n*i*a,e[1]=n*i*l-s*o*a,e[2]=n*o*a-s*i*l,e[3]=n*o*l+s*i*a):"ZXY"===r?(e[0]=s*o*l-n*i*a,e[1]=n*i*l+s*o*a,e[2]=n*o*a+s*i*l,e[3]=n*o*l-s*i*a):"ZYX"===r?(e[0]=s*o*l-n*i*a,e[1]=n*i*l+s*o*a,e[2]=n*o*a-s*i*l,e[3]=n*o*l+s*i*a):"YZX"===r?(e[0]=s*o*l+n*i*a,e[1]=n*i*l+s*o*a,e[2]=n*o*a-s*i*l,e[3]=n*o*l-s*i*a):"XZY"===r&&(e[0]=s*o*l-n*i*a,e[1]=n*i*l-s*o*a,e[2]=n*o*a+s*i*l,e[3]=n*o*l+s*i*a),e}const f=s.copy,g=s.set,v=s.add,_=s.scale,y=s.dot,b=s.lerp,w=s.length,x=s.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>o,angle:()=>E,copy:()=>n,cross:()=>_,distance:()=>h,divide:()=>u,dot:()=>v,exactEquals:()=>A,inverse:()=>f,length:()=>s,lerp:()=>y,multiply:()=>l,negate:()=>m,normalize:()=>g,scale:()=>c,scaleRotateMat4:()=>w,set:()=>i,squaredDistance:()=>d,squaredLength:()=>p,subtract:()=>a,transformMat3:()=>x,transformMat4:()=>b,transformQuat:()=>j});function s(e){let t=e[0],r=e[1],s=e[2];return Math.sqrt(t*t+r*r+s*s)}function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function i(e,t,r,s){return e[0]=t,e[1]=r,e[2]=s,e}function o(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function a(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function l(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function u(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function c(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function h(e,t){let r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2];return Math.sqrt(r*r+s*s+n*n)}function d(e,t){let r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2];return r*r+s*s+n*n}function p(e){let t=e[0],r=e[1],s=e[2];return t*t+r*r+s*s}function m(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function f(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function g(e,t){let r=t[0],s=t[1],n=t[2],i=r*r+s*s+n*n;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}function v(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function _(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[0],a=r[1],l=r[2];return e[0]=n*l-i*a,e[1]=i*o-s*l,e[2]=s*a-n*o,e}function y(e,t,r,s){let n=t[0],i=t[1],o=t[2];return e[0]=n+s*(r[0]-n),e[1]=i+s*(r[1]-i),e[2]=o+s*(r[2]-o),e}function b(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[3]*s+r[7]*n+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*s+r[4]*n+r[8]*i+r[12])/o,e[1]=(r[1]*s+r[5]*n+r[9]*i+r[13])/o,e[2]=(r[2]*s+r[6]*n+r[10]*i+r[14])/o,e}function w(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[3]*s+r[7]*n+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*s+r[4]*n+r[8]*i)/o,e[1]=(r[1]*s+r[5]*n+r[9]*i)/o,e[2]=(r[2]*s+r[6]*n+r[10]*i)/o,e}function x(e,t,r){let s=t[0],n=t[1],i=t[2];return e[0]=s*r[0]+n*r[3]+i*r[6],e[1]=s*r[1]+n*r[4]+i*r[7],e[2]=s*r[2]+n*r[5]+i*r[8],e}function j(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[0],a=r[1],l=r[2],u=a*i-l*n,c=l*s-o*i,h=o*n-a*s,d=a*h-l*c,p=l*u-o*h,m=o*c-a*u,f=2*r[3];return u*=f,c*=f,h*=f,d*=2,p*=2,m*=2,e[0]=s+u+d,e[1]=n+c+p,e[2]=i+h+m,e}const E=function(){const e=[0,0,0],t=[0,0,0];return function(r,s){n(e,r),n(t,s),g(e,e),g(t,t);let i=v(e,t);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function A(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>i,copy:()=>s,dot:()=>u,length:()=>a,lerp:()=>c,normalize:()=>l,scale:()=>o,set:()=>n});function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function n(e,t,r,s,n){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e}function i(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function o(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function a(e){let t=e[0],r=e[1],s=e[2],n=e[3];return Math.sqrt(t*t+r*r+s*s+n*n)}function l(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r*r+s*s+n*n+i*i;return o>0&&(o=1/Math.sqrt(o)),e[0]=r*o,e[1]=s*o,e[2]=n*o,e[3]=i*o,e}function u(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function c(e,t,r,s){let n=t[0],i=t[1],o=t[2],a=t[3];return e[0]=n+s*(r[0]-n),e[1]=i+s*(r[1]-i),e[2]=o+s*(r[2]-o),e[3]=a+s*(r[3]-a),e}}},s={};function n(e){var t=s[e];if(void 0!==t)return t.exports;var i=s[e]={id:e,loaded:!1,exports:{}},o={id:e,module:i,factory:r[e],require:n};return n.i.forEach((function(e){e(o)})),i=o.module,o.factory.call(i.exports,i,i.exports,o.require),i.loaded=!0,i.exports}n.m=r,n.c=s,n.i=[],n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.hu=e=>e+"."+n.h()+".hot-update.js",n.miniCssF=e=>{},n.hmrF=()=>"main."+n.h()+".hot-update.json",n.h=()=>"c65bccc4dd26ab209bcb",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="floema:",n.l=(r,s,i,o)=>{if(e[r])e[r].push(s);else{var a,l;if(void 0!==i)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var h=u[c];if(h.getAttribute("src")==r||h.getAttribute("data-webpack")==t+i){a=h;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,n.nc&&a.setAttribute("nonce",n.nc),a.setAttribute("data-webpack",t+i),a.src=r),e[r]=[s];var d=(t,s)=>{a.onerror=a.onload=null,clearTimeout(p);var n=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),n&&n.forEach((e=>e(s))),t)return t(s)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),l&&document.head.appendChild(a)}},n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,s={},i=n.c,o=[],a=[],l="idle",u=0,c=[];function h(e){l=e;for(var t=[],r=0;r<a.length;r++)t[r]=a[r].call(null,e);return Promise.all(t).then((function(){}))}function d(){0==--u&&h("ready").then((function(){if(0===u){var e=c;c=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return h("check").then(n.hmrM).then((function(r){return r?h("prepare").then((function(){var s=[];return t=[],Promise.all(Object.keys(n.hmrC).reduce((function(e,i){return n.hmrC[i](r.c,r.r,r.m,e,t,s),e}),[])).then((function(){return t=function(){return e?f(e):h("ready").then((function(){return s}))},0===u?t():new Promise((function(e){c.push((function(){e(t())}))}));var t}))})):h(g()?"ready":"idle").then((function(){return null}))}))}function m(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+l+")")})):f(e)}function f(e){e=e||{},g();var s=t.map((function(t){return t(e)}));t=void 0;var n=s.map((function(e){return e.error})).filter(Boolean);if(n.length>0)return h("abort").then((function(){throw n[0]}));var i=h("dispose");s.forEach((function(e){e.dispose&&e.dispose()}));var o,a=h("apply"),l=function(e){o||(o=e)},u=[];return s.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var r=0;r<t.length;r++)u.push(t[r])}})),Promise.all([i,a]).then((function(){return o?h("fail").then((function(){throw o})):r?f(e).then((function(e){return u.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):h("idle").then((function(){return u}))}))}function g(){if(r)return t||(t=[]),Object.keys(n.hmrI).forEach((function(e){r.forEach((function(r){n.hmrI[e](r,t)}))})),r=void 0,!0}n.hmrD=s,n.i.push((function(c){var f,g,v,_,y=c.module,b=function(t,r){var s=i[r];if(!s)return t;var n=function(n){if(s.hot.active){if(i[n]){var a=i[n].parents;-1===a.indexOf(r)&&a.push(r)}else o=[r],e=n;-1===s.children.indexOf(n)&&s.children.push(n)}else console.warn("[HMR] unexpected require("+n+") from disposed module "+r),o=[];return t(n)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var c in t)Object.prototype.hasOwnProperty.call(t,c)&&"e"!==c&&Object.defineProperty(n,c,a(c));return n.e=function(e,r){return function(e){switch(l){case"ready":h("prepare");case"prepare":return u++,e.then(d,d),e;default:return e}}(t.e(e,r))},n}(c.require,c.id);y.hot=(f=c.id,g=y,_={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==f,_requireSelf:function(){o=g.parents.slice(),e=v?void 0:f,n(f)},active:!0,accept:function(e,t,r){if(void 0===e)_._selfAccepted=!0;else if("function"==typeof e)_._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var s=0;s<e.length;s++)_._acceptedDependencies[e[s]]=t||function(){},_._acceptedErrorHandlers[e[s]]=r;else _._acceptedDependencies[e]=t||function(){},_._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)_._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)_._declinedDependencies[e[t]]=!0;else _._declinedDependencies[e]=!0},dispose:function(e){_._disposeHandlers.push(e)},addDisposeHandler:function(e){_._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=_._disposeHandlers.indexOf(e);t>=0&&_._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":t=[],Object.keys(n.hmrI).forEach((function(e){n.hmrI[e](f,t)})),h("ready");break;case"ready":Object.keys(n.hmrI).forEach((function(e){n.hmrI[e](f,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(f)}},check:p,apply:m,status:function(e){if(!e)return l;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:s[f]},e=void 0,_),y.parents=o,y.children=[],o=[],c.require=b})),n.hmrC={},n.hmrI={}})(),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var s=r.length-1;s>-1&&(!e||!/^http(s?):/.test(e));)e=r[s--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{if("undefined"!=typeof document){var e=(e,t,r,s,i)=>{var o=document.createElement("link");o.rel="stylesheet",o.type="text/css",n.nc&&(o.nonce=n.nc);return o.onerror=o.onload=r=>{if(o.onerror=o.onload=null,"load"===r.type)s();else{var n=r&&r.type,a=r&&r.target&&r.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+n+": "+a+")");l.name="ChunkLoadError",l.code="CSS_CHUNK_LOAD_FAILED",l.type=n,l.request=a,o.parentNode&&o.parentNode.removeChild(o),i(l)}},o.href=t,r?r.parentNode.insertBefore(o,r.nextSibling):document.head.appendChild(o),o},t=(e,t)=>{for(var r=document.getElementsByTagName("link"),s=0;s<r.length;s++){var n=(o=r[s]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(n===e||n===t))return o}var i=document.getElementsByTagName("style");for(s=0;s<i.length;s++){var o;if((n=(o=i[s]).getAttribute("data-href"))===e||n===t)return o}},r=[],s=[],i=e=>({dispose:()=>{for(var e=0;e<r.length;e++){var t=r[e];t.parentNode&&t.parentNode.removeChild(t)}r.length=0},apply:()=>{for(var e=0;e<s.length;e++)s[e].rel="stylesheet";s.length=0}});n.hmrC.miniCss=(o,a,l,u,c,h)=>{c.push(i),o.forEach((i=>{var o=n.miniCssF(i),a=n.p+o,l=t(o,a);l&&u.push(new Promise(((t,n)=>{var o=e(i,a,l,(()=>{o.as="style",o.rel="preload",t()}),n);r.push(l),s.push(o)})))}))}}})(),(()=>{var e,t,r,s,i,o=n.hmrS_jsonp=n.hmrS_jsonp||{main:0},a={};function l(t,r){return e=r,new Promise(((e,r)=>{a[t]=e;var s=n.p+n.hu(t),i=new Error;n.l(s,(e=>{if(a[t]){a[t]=void 0;var s=e&&("load"===e.type?"missing":e.type),n=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+t+" failed.\n("+s+": "+n+")",i.name="ChunkLoadError",i.type=s,i.request=n,r(i)}}))}))}function u(e){function a(e){for(var t=[e],r={},s=t.map((function(e){return{chain:[e],id:e}}));s.length>0;){var i=s.pop(),o=i.id,a=i.chain,u=n.c[o];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var c=0;c<u.parents.length;c++){var h=u.parents[c],d=n.c[h];if(d){if(d.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([h]),moduleId:o,parentId:h};-1===t.indexOf(h)&&(d.hot._acceptedDependencies[o]?(r[h]||(r[h]=[]),l(r[h],[o])):(delete r[h],t.push(h),s.push({chain:a.concat([h]),id:h})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function l(e,t){for(var r=0;r<t.length;r++){var s=t[r];-1===e.indexOf(s)&&e.push(s)}}n.f&&delete n.f.jsonpHmr,t=void 0;var u={},c=[],h={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(n.o(r,p)){var m,f=r[p],g=!1,v=!1,_=!1,y="";switch((m=f?a(p):{type:"disposed",moduleId:p}).chain&&(y="\nUpdate propagation: "+m.chain.join(" -> ")),m.type){case"self-declined":e.onDeclined&&e.onDeclined(m),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+m.moduleId+y));break;case"declined":e.onDeclined&&e.onDeclined(m),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+m.moduleId+" in "+m.parentId+y));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(m),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+y));break;case"accepted":e.onAccepted&&e.onAccepted(m),v=!0;break;case"disposed":e.onDisposed&&e.onDisposed(m),_=!0;break;default:throw new Error("Unexception type "+m.type)}if(g)return{error:g};if(v)for(p in h[p]=f,l(c,m.outdatedModules),m.outdatedDependencies)n.o(m.outdatedDependencies,p)&&(u[p]||(u[p]=[]),l(u[p],m.outdatedDependencies[p]));_&&(l(c,[m.moduleId]),h[p]=d)}r=void 0;for(var b,w=[],x=0;x<c.length;x++){var j=c[x],E=n.c[j];E&&(E.hot._selfAccepted||E.hot._main)&&h[j]!==d&&!E.hot._selfInvalidated&&w.push({module:j,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;s.forEach((function(e){delete o[e]})),s=void 0;for(var t,r=c.slice();r.length>0;){var i=r.pop(),a=n.c[i];if(a){var l={},h=a.hot._disposeHandlers;for(x=0;x<h.length;x++)h[x].call(null,l);for(n.hmrD[i]=l,a.hot.active=!1,delete n.c[i],delete u[i],x=0;x<a.children.length;x++){var d=n.c[a.children[x]];d&&((e=d.parents.indexOf(i))>=0&&d.parents.splice(e,1))}}}for(var p in u)if(n.o(u,p)&&(a=n.c[p]))for(b=u[p],x=0;x<b.length;x++)t=b[x],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(t){for(var r in h)n.o(h,r)&&(n.m[r]=h[r]);for(var s=0;s<i.length;s++)i[s](n);for(var o in u)if(n.o(u,o)){var a=n.c[o];if(a){b=u[o];for(var l=[],d=[],p=[],m=0;m<b.length;m++){var f=b[m],g=a.hot._acceptedDependencies[f],v=a.hot._acceptedErrorHandlers[f];if(g){if(-1!==l.indexOf(g))continue;l.push(g),d.push(v),p.push(f)}}for(var _=0;_<l.length;_++)try{l[_].call(null,b)}catch(r){if("function"==typeof d[_])try{d[_](r,{moduleId:o,dependencyId:p[_]})}catch(s){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:p[_],error:s,originalError:r}),e.ignoreErrored||(t(s),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[_],error:r}),e.ignoreErrored||t(r)}}}for(var y=0;y<w.length;y++){var x=w[y],j=x.module;try{x.require(j)}catch(r){if("function"==typeof x.errorHandler)try{x.errorHandler(r,{moduleId:j,module:n.c[j]})}catch(s){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:j,error:s,originalError:r}),e.ignoreErrored||(t(s),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:j,error:r}),e.ignoreErrored||t(r)}}return c}}}self.webpackHotUpdatefloema=(t,s,o)=>{for(var l in s)n.o(s,l)&&(r[l]=s[l],e&&e.push(l));o&&i.push(o),a[t]&&(a[t](),a[t]=void 0)},n.hmrI.jsonp=function(e,t){r||(r={},i=[],s=[],t.push(u)),n.o(r,e)||(r[e]=n.m[e])},n.hmrC.jsonp=function(e,a,c,h,d,p){d.push(u),t={},s=a,r=c.reduce((function(e,t){return e[t]=!1,e}),{}),i=[],e.forEach((function(e){n.o(o,e)&&void 0!==o[e]?(h.push(l(e,p)),t[e]=!0):t[e]=!1})),n.f&&(n.f.jsonpHmr=function(e,r){t&&n.o(t,e)&&!t[e]&&(r.push(l(e)),t[e]=!0)})},n.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(n.p+n.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),n("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),n("./node_modules/webpack/hot/dev-server.js"),n("./app/index.js");n("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBQVMsSUFDVCxTQUFVLElBQ1YsU0FBVSxJQUNWLFVBQVcsSUFDWCxPQUFRLElBQ1IsUUFBUyxJQUNULE9BQVEsSUFDUixRQUFTLElBQ1QsT0FBUSxJQUNSLFFBQVMsSUFDVCxRQUFTLElBQ1QsU0FBVSxJQUNWLE9BQVEsSUFDUixRQUFTLElBQ1QsVUFBVyxJQUNYLFdBQVksSUFDWixRQUFTLElBQ1QsU0FBVSxJQUNWLFFBQVMsSUFDVCxTQUFVLElBQ1YsU0FBVSxJQUNWLFVBQVcsSUFDWCxTQUFVLElBQ1YsVUFBVyxJQUNYLFFBQVMsSUFDVCxTQUFVLElBQ1YsVUFBVyxJQUNYLFdBQVksSUFDWixTQUFVLElBQ1YsVUFBVyxJQUNYLFFBQVMsSUFDVCxTQUFVLElBQ1YsUUFBUyxJQUNULFNBQVUsSUFDVixTQUFVLElBQ1YsVUFBVyxJQUNYLFVBQVcsSUFDWCxXQUFZLElBQ1osVUFBVyxJQUNYLFdBQVksSUFDWixVQUFXLElBQ1gsV0FBWSxJQUNaLFVBQVcsSUFDWCxXQUFZLElBQ1osVUFBVyxJQUNYLFdBQVksSUFDWixVQUFXLElBQ1gsV0FBWSxJQUNaLFNBQVUsSUFDVixVQUFXLElBQ1gsVUFBVyxJQUNYLFdBQVksSUFDWixRQUFTLElBQ1QsU0FBVSxJQUNWLFNBQVUsSUFDVixVQUFXLElBQ1gsU0FBVSxJQUNWLFVBQVcsSUFDWCxVQUFXLElBQ1gsV0FBWSxJQUNaLFVBQVcsSUFDWCxXQUFZLElBQ1osVUFBVyxJQUNYLFdBQVksSUFDWixTQUFVLElBQ1YsVUFBVyxJQUNYLFFBQVMsSUFDVCxTQUFVLElBQ1YsVUFBVyxJQUNYLFdBQVksSUFDWixVQUFXLElBQ1gsV0FBWSxJQUNaLFNBQVUsSUFDVixVQUFXLElBQ1gsUUFBUyxJQUNULFNBQVUsSUFDVixPQUFRLElBQ1IsUUFBUyxJQUNULFVBQVcsSUFDWCxXQUFZLElBQ1osVUFBVyxJQUNYLFdBQVksSUFDWixVQUFXLElBQ1gsV0FBWSxJQUNaLFNBQVUsSUFDVixVQUFXLElBQ1gsVUFBVyxJQUNYLFdBQVksSUFDWixRQUFTLElBQ1QsU0FBVSxJQUNWLFNBQVUsSUFDVixVQUFXLElBQ1gsVUFBVyxJQUNYLFdBQVksSUFDWixVQUFXLElBQ1gsV0FBWSxJQUNaLFVBQVcsSUFDWCxXQUFZLElBQ1osU0FBVSxJQUNWLFVBQVcsSUFDWCxRQUFTLElBQ1QsU0FBVSxJQUNWLFVBQVcsSUFDWCxXQUFZLElBQ1osU0FBVSxJQUNWLFVBQVcsSUFDWCxTQUFVLElBQ1YsVUFBVyxJQUNYLFVBQVcsSUFDWCxXQUFZLElBQ1osVUFBVyxJQUNYLFdBQVksSUFDWixTQUFVLElBQ1YsVUFBVyxJQUNYLFVBQVcsSUFDWCxXQUFZLElBQ1osUUFBUyxJQUNULFNBQVUsSUFDVixTQUFVLElBQ1YsVUFBVyxJQUNYLFNBQVUsSUFDVixVQUFXLElBQ1gsVUFBVyxJQUNYLFdBQVksSUFDWixVQUFXLElBQ1gsV0FBWSxJQUNaLFVBQVcsSUFDWCxXQUFZLElBQ1osU0FBVSxJQUNWLFVBQVcsSUFDWCxRQUFTLElBQ1QsU0FBVSxJQUNWLFVBQVcsSUFDWCxXQUFZLElBQ1osVUFBVyxJQUNYLFdBQVksSUFDWixTQUFVLElBQ1YsVUFBVyxJQUNYLFFBQVMsSUFDVCxTQUFVLElBQ1YsT0FBUSxJQUNSLFFBQVMsSUFDVCxVQUFXLElBQ1gsV0FBWSxJQUNaLFVBQVcsSUFDWCxXQUFZLElBQ1osVUFBVyxJQUNYLFdBQVksSUFDWixTQUFVLElBQ1YsVUFBVyxJQUNYLFVBQVcsSUFDWCxXQUFZLElBQ1osUUFBUyxJQUNULFNBQVUsSUFDVixVQUFXLElBQ1gsV0FBWSxJQUNaLFVBQVcsSUFDWCxXQUFZLElBQ1osVUFBVyxJQUNYLFdBQVksSUFDWixVQUFXLElBQ1gsV0FBWSxJQUNaLFNBQVUsSUFDVixVQUFXLElBQ1gsUUFBUyxJQUNULFNBQVUsSUFDVixVQUFXLElBQ1gsV0FBWSxJQUNaLFNBQVUsSUFDVixVQUFXLElBQ1gsUUFBUyxJQUNULFNBQVUsSUFDVixRQUFTLElBQ1QsU0FBVSxJQUNWLE9BQVEsSUFDUixRQUFTLElBQ1QsTUFBTyxJQUNQLE9BQVEsSUFDUixNQUFPLElBQ1AsT0FBUSxJQUNSLFVBQVcsSUFDWCxVQUFXLElBQ1gsV0FBWSxJQUNaLFdBQVksSUFDWixTQUFVLElBQ1YsU0FBVSxJQUNWLFVBQVcsSUFDWCxTQUFVLElBQ1YsU0FBVSxJQUNWLFdBQVksSUFDWixTQUFVLElBQ1YsUUFBUyxJQUNULFFBQVMsSUFDVCxRQUFTLElBQ1QsVUFBVyxJQUNYLFVBQVcsSUFDWCxVQUFXLElBQ1gsVUFBVyxJQUNYLFVBQVcsSUFDWCxVQUFXLElBQ1gsVUFBVyxJQUNYLFVBQVcsSUFDWCxXQUFZLElBQ1osV0FBWSxJQUNaLFdBQVksSUFDWixXQUFZLElBQ1osV0FBWSxJQUNaLFNBQVUsSUFDVixTQUFVLElBQ1YsVUFBVyxJQUNYLFNBQVUsSUFDVixVQUFXLElBQ1gsVUFBVyxJQUNYLFlBQWEsSUFDYixTQUFVLElBQ1YsUUFBUyxJQUNULFVBQVcsSUFDWCxTQUFVLElBQ1YsVUFBVyxJQUNYLFdBQVksSUFDWixPQUFRLElBQ1IsT0FBUSxJQUNSLE9BQVEsSUFDUixZQUFhLElBQ2IsT0FBUSxJQUNSLFFBQVMsSUFDVCxVQUFXLElBQ1gsUUFBUyxJQUNULFlBQWEsSUFDYixRQUFTLElBQ1QsUUFBUyxJQUNULFFBQVMsSUFDVCxVQUFXLElBQ1gsVUFBVyxJQUNYLFNBQVUsSUFDVixVQUFXLElBQ1gsVUFBVyxJQUNYLFlBQWEsSUFDYixTQUFVLElBQ1YsUUFBUyxJQUNULFVBQVcsSUFDWCxTQUFVLElBQ1YsVUFBVyxJQUNYLFdBQVksSUFDWixPQUFRLElBQ1IsT0FBUSxJQUNSLE9BQVEsSUFDUixZQUFhLElBQ2IsT0FBUSxJQUNSLFFBQVMsSUFDVCxXQUFZLElBQ1osVUFBVyxJQUNYLFFBQVMsSUFDVCxZQUFhLElBQ2IsUUFBUyxJQUNULFFBQVMsSUFDVCxRQUFTLElBQ1QsVUFBVyxJQUNYLGFBQWMsSUFDZCxVQUFXLElBQ1gsUUFBUyxJQUNULFNBQVUsSUFDVixXQUFZLElBQ1osVUFBVyxJQUNYLFVBQVcsSUFDWCxVQUFXLElBQ1gsVUFBVyxJQUNYLFdBQVksSUFDWixVQUFXLElBQ1gsU0FBVSxJQUNWLFVBQVcsSUFDWCxZQUFhLElBQ2IsU0FBVSxJQUNWLFNBQVUsSUFDVixTQUFVLElBQ1YsU0FBVSxJQUNWLFNBQVUsSUFDVixVQUFXLElBQ1gsU0FBVSxJQUNWLFNBQVUsSUFDVixTQUFVLElBQ1YsU0FBVSxJQUNWLFNBQVUsSUFDVixXQUFZLElBQ1osU0FBVSxJQUNWLFVBQVcsSUFDWCxVQUFXLElBQ1gsVUFBVyxJQUNYLFNBQVUsSUFDVixVQUFXLElBQ1gsT0FBUSxJQUNSLFNBQVUsSUFDVixRQUFTLElBQ1QsVUFBVyxJQUNYLFdBQVksSUFDWixVQUFXLElBQ1gsU0FBVSxJQUNWLFVBQVcsSUFDWCxRQUFTLElBQ1QsUUFBUyxJQUNULE9BQVEsSUFDUixRQUFTLElBQ1QsUUFBUyxJQUNULFFBQVMsSUFDVCxXQUFZLElBQ1osUUFBUyxJQUNULFNBQVUsSUFDVixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsT0FBUSxJQUNSLFFBQVMsSUFDVCxRQUFTLElBQ1QsU0FBVSxJQUNWLFNBQVUsSUFDVixTQUFVLElBQ1YsVUFBVyxJQUNYLFdBQVksSUFDWixTQUFVLElBQ1YsU0FBVSxJQUNWLFVBQVcsSUFDWCxVQUFXLElBQ1gsV0FBWSxJQUNaLFdBQVksSUFDWixTQUFVLElBQ1YsU0FBVSxJQUNWLFFBQVMsSUFDVCxXQUFZLElBQ1osVUFBVyxJQUNYLFdBQVksSUFDWixVQUFXLEtBRWYzQixXQUFjLENBQ1YsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxRQUNMLElBQUssV0FDTCxJQUFLLFNBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxFQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFFBQ0wsSUFBSyxXQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLEVBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsRUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxXQUNMLEVBQUssU0FDTCxFQUFLLFVBQ0wsRUFBSyxVQUNMLEVBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssVUFDTCxFQUFLLFNBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxTQUNMLEVBQUssUUFDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxXQUNMLEVBQUssU0FDTCxJQUFLLFVBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxVQUNMLEVBQUssU0FDTCxFQUFLLFdBQ0wsRUFBSyxVQUNMLEVBQUssVUFDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssVUFDTCxFQUFLLFdBQ0wsRUFBSyxTQUNMLEVBQUssVUFDTCxFQUFLLFVBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxVQUNMLEVBQUssU0FDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssVUFDTCxFQUFLLFNBQ0wsRUFBSyxRQUNMLEVBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssVUFDTCxFQUFLLFdBQ0wsRUFBSyxTQUNMLElBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxTQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxTQUNMLElBQU0sU0FDTixJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssT0FDTCxFQUFLLFVBQ0wsRUFBSyxVQUNMLEVBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxTQUNMLEVBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFdBQ0wsSUFBSyxTQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFNBQ0wsRUFBSyxTQUNMLEVBQUssVUFDTCxFQUFLLFNBQ0wsRUFBSyxVQUNMLEVBQUssVUFDTCxFQUFLLFlBQ0wsRUFBSyxTQUNMLEVBQUssUUFDTCxFQUFLLFVBQ0wsRUFBSyxTQUNMLEVBQUssVUFDTCxFQUFLLFdBQ0wsRUFBSyxPQUNMLEVBQUssT0FDTCxFQUFLLE9BQ0wsRUFBSyxZQUNMLEVBQUssT0FDTCxFQUFLLFFBQ0wsRUFBSyxVQUNMLEVBQUssUUFDTCxFQUFLLFlBQ0wsRUFBSyxRQUNMLEVBQUssUUFDTCxFQUFLLFFBQ0wsRUFBSyxVQUNMLEVBQUssVUFDTCxFQUFLLFNBQ0wsRUFBSyxVQUNMLEVBQUssVUFDTCxFQUFLLFlBQ0wsRUFBSyxTQUNMLEVBQUssUUFDTCxFQUFLLFVBQ0wsRUFBSyxTQUNMLEVBQUssVUFDTCxFQUFLLFdBQ0wsRUFBSyxPQUNMLEVBQUssT0FDTCxFQUFLLE9BQ0wsRUFBSyxZQUNMLEVBQUssT0FDTCxFQUFLLFFBQ0wsRUFBSyxXQUNMLEVBQUssVUFDTCxFQUFLLFFBQ0wsRUFBSyxZQUNMLEVBQUssUUFDTCxFQUFLLFFBQ0wsRUFBSyxRQUNMLEVBQUssVUFDTCxFQUFLLGFBQ0wsRUFBSyxVQUNMLEVBQUssUUFDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxFQUFLLFdBQ0wsRUFBSyxVQUNMLEVBQUssU0FDTCxJQUFLLFVBQ0wsRUFBSyxZQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssU0FDTCxJQUFLLFVB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QUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSywwQkFDTCxJQUFLLFNBQ0wsRUFBSyxjQUNMLElBQUssV0FDTCxJQUFLLGFBQ0wsSUFBSyxVQUNMLEdBQU0sU0FDTixJQUFLLFFBQ0wsSUFBSyxZQUNMLElBQUssYUFDTCxFQUFLLFNBQ0wsRUFBSyxTQUNMLEVBQUssU0FDTCxJQUFLLFlBQ0wsSUFBSyxTQUNMLElBQUssa0JBQ0wsRUFBSyxXQUNMLEVBQUssUUFDTCxJQUFLLFVBQ0wsRUFBSyxVQUNMLEdBQU0sUUFDTixJQUFLLFVBQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxFQUFLLE9BQ0wsR0FBTSxTQUNOLElBQUssUUFDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxjQUNMLElBQUssaUJBQ0wsSUFBSyxVQUNMLElBQUssY0FDTCxJQUFLLHdCQUNMLElBQUssc0JBQ0wsSUFBSyxVQUNMLElBQUssc0JBQ0wsSUFBSyx1QkFDTCxJQUFLLHFCQUNMLElBQUssdUJBQ0wsSUFBSyxRQUNMLElBQUssZUFDTCxHQUFNLFNBQ04sRUFBSyxXQUNMLEVBQUssUUFDTCxFQUFLLFFBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxRQUNMLEVBQUssU0FDTCxHQUFNLFFBQ04sRUFBSyxXQUNMLElBQUssVUFDTCxFQUFLLFVBQ0wsSUFBSyxxQkFDTCxJQUFLLHlCQUNMLEVBQUssVUFDTCxHQUFNLFNBQ04sRUFBSyxZQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLEVBQUssZ0JBQ0wsSUFBSyxTQUNMLEVBQUssUUFDTCxFQUFLLFNBQ0wsSUFBSyxVQUNMLEVBQUssaUJBQ0wsRUFBSyxRQUNMLEdBQU0sUUFDTixJQUFLLHNCQUNMLElBQUssU0FDTCxHQUFNLFNBQ04sSUFBSyxXQUNMLEVBQUssU0FDTCxFQUFLLFNBQ0wsSUFBSyxPQUNMLEVBQUssVUFDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxRQUNMLEVBQUssU0FDTCxHQUFNLFFBQ04sSUFBSyxRQUNMLEdBQU0sU0FDTixJQUFLLFFBQ0wsSUFBSyxjQUNMLElBQUssU0FDTCxJQUFLLG1CQUNMLElBQUssWUFDTCxJQUFLLFFBQ0wsSUFBSyxXQUNMLEdBQU0sU0FDTixJQUFLLE9BQ0wsRUFBSyxXQUNMLEVBQUssVUFDTCxJQUFLLFFBQ0wsRUFBSyxVQUNMLEVBQUssa0JBQ0wsRUFBSyxXQUNMLEVBQUssZ0JBQ0wsSUFBSyxTQUNMLEVBQUssV0FDTCxJQUFLLFdBQ0wsRUFBSyxTQUNMLEVBQUssVUFDTCxFQUFLLFNBQ0wsRUFBSyxXQUNMLEVBQUssVUFDTCxFQUFLLFFBQ0wsRUFBSyxTQUNMLEVBQUssYUFDTCxFQUFLLFdBQ0wsRUFBSyxVQUNMLEVBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLE9BQ0wsSUFBSyxPQUNMLEVBQUssVUFDTCxHQUFNLFNBQ04sRUFBSyxTQUNMLEVBQUssYUFDTCxFQUFLLFdBQ0wsRUFBSyxVQUNMLEVBQUssU0FDTCxFQUFLLFVBQ0wsRUFBSyxRQUNMLEdBQU0sUUFDTixHQUFNLFNBQ04sR0FBTSxTQUNOLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxTQUNMLEVBQUssU0FDTCxFQUFLLFVBQ0wsRUFBSyxXQUNMLEVBQUssUUFDTCxHQUFNLFFBQ04sR0FBTSxTQUNOLEdBQU0sU0FDTixFQUFLLFNBQ0wsSUFBSyxPQUNMLEVBQUssV0FDTCxFQUFLLFdBQ0wsSUFBSyxTQUNMLEVBQUssV0FDTCxJQUFLLHFCQUNMLEVBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxRQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssc0JBQ0wsSUFBSyxvQkFDTCxJQUFLLHNCQUNMLElBQUssV0FDTCxJQUFLLG1CQUNMLElBQUssb0JBQ0wsSUFBSyxVQUNMLElBQUssZUFDTCxJQUFLLGtCQUNMLElBQUssVUFDTCxJQUFLLG9CQUNMLElBQUssbUJBQ0wsSUFBSyxxQkFDTCxJQUFLLG9CQUNMLElBQUssa0JBQ0wsSUFBSyxvQkFDTCxJQUFLLFVBQ0wsSUFBSyxrQkFDTCxJQUFLLGNBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLGFBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxHQUFNLFFBQ04sSUFBSyxPQUNMLElBQUssVUFDTCxFQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsR0FBTSxTQUNOLElBQUssWUFDTCxJQUFLLFlBQ0wsSUFBSyxRQUNMLEVBQUssV0FDTCxJQUFLLE9BQ0wsSUFBSyxRQUNMLEVBQUssUUFDTCxJQUFLLGdCQUNMLEVBQUssV0FDTCxHQUFNLFFBQ04sSUFBSyxPQUNMLEdBQU0sU0FDTixFQUFLLE9BQ0wsRUFBSyxTQUNMLEVBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssUUFDTCxJQUFLLG1CQUNMLEtBQU0sWUFDTixHQUFNLFFBQ04sSUFBSyxZQUNMLElBQUssU0FDTCxFQUFLLGFBQ0wsSUFBSyxRQUNMLElBQUssV0FDTCxJQUFLLGNBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLE9BQ0wsS0FBTSxVQUNOLElBQUssWUFDTCxJQUFLLFNBQ0wsSUFBSyxTQUNMLEtBQU0sVUFDTixLQUFNLFNBQ04sSUFBSyxTQUNMLEtBQU0sU0FDTixJQUFLLFVBQ0wsS0FBTSxVQUNOLEtBQU0sV0FDTixJQUFLLGtCQUNMLEtBQU0sdUJBQ04sSUFBSyxvQkFDTCxJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxLQUFNLFNBQ04sS0FBTSxTQUNOLElBQUssVUFDTCxLQUFNLDRCQUNOLEtBQU0sc0JBQ04sSUFBSyxVQUNMLEtBQU0sWUFDTixJQUFLLFdBQ0wsSUFBSyxZQUNMLElBQUssbUJBQ0wsS0FBTSx3QkFDTixJQUFLLHFCQUNMLEtBQU0sb0JBQ04sSUFBSyxZQUNMLEtBQU0sc0JBQ04sSUFBSyxZQUNMLEtBQU0sVUFDTixJQUFLLGNBQ0wsSUFBSyxVQUNMLEtBQU0sWUFDTixJQUFLLFdBQ0wsS0FBTSxxQkFDTixLQUFNLFVBQ04sSUFBSyxjQUNMLElBQUssU0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLFVBQ0wsR0FBTSxTQUNOLEVBQUssV0FDTCxFQUFLLE9BQ0wsRUFBSyxVQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxRQUNMLEVBQUssV0FDTCxHQUFNLFFBQ04sRUFBSyxXQUNMLEVBQUssVUFDTCxFQUFLLFFBQ0wsRUFBSyxZQUNMLEdBQU0sU0FDTixJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssT0FDTCxHQUFNLFNBQ04sRUFBSyxXQUNMLEVBQUssV0FDTCxJQUFLLFdBQ0wsRUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLGNBQ0wsSUFBSyxTQUNMLElBQUssb0JBQ0wsSUFBSyxTQUNMLEVBQUssUUFDTCxHQUFNLFFBQ04sRUFBSyxRQUNMLEVBQUssT0FDTCxJQUFLLE9BQ0wsRUFBSyxXQUNMLElBQUssT0FDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssZ0JBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLEdBQU0sU0FDTixFQUFLLFFBQ0wsSUFBTSxTQUNOLEdBQU0sUUFDTixFQUFLLGNBQ0wsR0FBTSxTQUNOLElBQUssYUFDTCxJQUFLLFFBQ0wsRUFBSyxXQUNMLElBQUssU0FDTCxJQUFLLHNCQUNMLElBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssUUFDTCxFQUFLLGFBQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsRUFBSyxRQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssdUJBQ0wsSUFBSyxxQkFDTCxJQUFLLHVCQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssbUJBQ0wsSUFBSyxVQUNMLElBQUsscUJBQ0wsSUFBSyxvQkFDTCxJQUFLLHNCQUNMLElBQUsscUJBQ0wsSUFBSyxtQkFDTCxJQUFLLHFCQUNMLElBQUssbUJBQ0wsSUFBSyxtQkFDTCxFQUFLLFVBQ0wsSUFBSyxpQkFDTCxJQUFLLFVBQ0wsRUFBSyxZQUNMLElBQUssUUFDTCxJQUFLLGdCQUNMLEVBQUssV0FDTCxFQUFLLFNBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxJQUFLLE9BQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxRQUNMLEdBQU0sUUFDTixJQUFLLFlBQ0wsRUFBSyxVQUNMLElBQUssV0FDTCxHQUFNLFNBQ04sSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxhQUNMLElBQUssZUFDTCxJQUFLLGFBQ0wsSUFBSyxlQUNMLElBQUssVUFDTCxHQUFNLFNBQ04sSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLGFBQ0wsSUFBSyxTQUNMLElBQUssV0FDTCxJQUFLLGdCQUNMLElBQUssWUFDTCxJQUFLLFFBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLGFBQ0wsRUFBSyxVQUNMLElBQUssVUFDTCxFQUFLLFVBQ0wsRUFBSyxTQUNMLEtBQU0sUUFDTixFQUFLLFFBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFFBQ0wsR0FBTSxRQUNOLElBQUssY0FDTCxFQUFLLFVBQ0wsS0FBTSxlQUNOLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsR0FBTSxTQUNOLElBQUssU0FDTCxHQUFNLFNBQ04sRUFBSyxXQUNMLEVBQUssV0FDTCxJQUFLLFNBQ0wsSUFBSyxhQUNMLEVBQUssVUFDTCxFQUFLLFdBQ0wsRUFBSyxVQUNMLEVBQUssUUFDTCxFQUFLLFdBQ0wsR0FBTSxRQUNOLEVBQUssV0FDTCxFQUFLLFVBQ0wxN0MsRUFBSyxXQUNMLElBQUssZUFDTCxJQUFLLFNBQ0wsSUFBSyxxQkFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLEVBQUssVUFDTCxHQUFNLFNBQ04sSUFBSyxlQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLGFBQ0wsSUFBSyxZQUNMLElBQUssWUFDTCxFQUFLLFVBQ0wsRUFBSyxZQUNMLEVBQUssVUFDTCxHQUFNLFNBQ04sRUFBSyxXQUNMLEVBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLEVBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLHNCQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsR0FBTSxRQUNOLEdBQU0sU0FDTixHQUFNLFNBQ04sSUFBSyxXQUNMLEVBQUssVUFDTCxJQUFLLFdBQ0wsR0FBTSxRQUNOLEdBQU0sU0FDTixHQUFNLFNBQ04sR0FBTSxRQUNOLEVBQUssT0FDTCxHQUFNLFNBQ04sR0FBTSxTQUNOLEVBQUssU0FDTCxFQUFLLFNBQ0wsRUFBSyxTQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxRQUNMLEdBQU0sUUFDTixHQUFNLFNBQ04sR0FBTSxTQUNOLEVBQUssU0FDTCxFQUFLLFNBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFFBQ0wsRUFBSyxTQUNMLEVBQUssU0FDTCxFQUFLLFdBQ0wsRUFBSyxhQUNMLEdBQU0sU0FDTixFQUFLLFdBQ0wsRUFBSyxXQUNMLElBQUssV0FDTCxLQUFNLFFBQ04sSUFBSyxRQUNMLEVBQUssVUFDTCxFQUFLLFFBQ0wsRUFBSyxVQUNMLEdBQU0sUUFDTixFQUFLLFdBQ0wsRUFBSyxVQUNMLEVBQUssVUFDTCxFQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxTQUNMLElBQUssYUFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLGtCQUNMLElBQUssYUFDTCxJQUFLLGFBQ0wsSUFBSyxhQUNMLElBQUssYUFDTCxJQUFLLGFBQ0wsSUFBSyxhQUNMLElBQUssYUFDTCxJQUFLLGFBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLGFBQ0wsSUFBSyxXQUNMLElBQUssWUFDTCxFQUFLLFVBQ0wsR0FBTSxTQUNOLElBQUssUUFDTCxJQUFLLFdBQ0wsSUFBSyxhQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsRUFBSyxVQUNMLEdBQU0sU0FDTixJQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssYUFDTCxJQUFLLGFBQ0wsRUFBSyxRQUNMLElBQUssV0FDTCxJQUFLLFlBQ0wsRUFBSyxTQUNMLEVBQUssU0FDTCxJQUFLLFVBQ0wsR0FBTSxRQUNOLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsS0FBTSxRQUNOLEtBQU0sWUFDTixJQUFLLFNBQ0wsR0FBTSxTQUNOLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLEdBQU0sU0FDTixJQUFLLFVBQ0wsS0FBTSxTQUNOLElBQUssVUFDTCxJQUFLLGFBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxFQUFLLFdBQ0wsSUFBSyxRQUNMLElBQUssV0FDTCxJQUFLLGFBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsS0FBTSxTQUNOLElBQUssVUFDTCxJQUFLLFVBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxFQUFLLFNBQ0wsSUFBSyxZQUNMLElBQUssU0FDTCxHQUFNLFFBQ04sRUFBSyxTQUNMLElBQUssY0FDTCxFQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxFQUFLLFNBQ0wsSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxPQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssYUFDTCxJQUFLLFdBQ0wsSUFBSyxZQUNMLElBQUssYUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLGVBQ0wsSUFBSyxZQUNMLEdBQU0sU0FDTixJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxHQUFNLFNBQ04sSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFlBQ0wsSUFBSyxZQUNMLElBQUssZ0JBQ0wsSUFBSyxnQkFDTCxJQUFLLG1CQUNMLElBQUssWUFDTCxJQUFLLFFBQ0wsSUFBSyxhQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxLQUFNLFNBQ04sSUFBSyxvQkFDTCxJQUFLLFlBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLEVBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLEVBQUssV0FDTCxFQUFLLFFBQ0wsSUFBSyxtQkFDTCxJQUFLLFVBQ0wsSUFBSyxRQUNMLEVBQUssVUFDTCxJQUFLLFlBQ0wsSUFBSyxXQUNMLEdBQU0sUUFDTixJQUFLLFVBQ0wsRUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLEVBQUssU0FDTCxJQUFLLGFBQ0wsSUFBSyxXQUNMdTlDLEVBQUssV0FDTCxHQUFNLFNBQ04sSUFBSyxTQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssYUFDTCxJQUFLLFdBQ0wsR0FBTSxTQUNOLEVBQUssU0FDTCxJQUFLLFNBQ0wsRUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLGlCQUNMLElBQUssWUFDTCxFQUFLLFNBQ0wsSUFBSyxhQUNMLEVBQUssV0FDTCxJQUFLLFdBQ0wsRUFBSyxXQUNMLElBQUssV0FDTCxFQUFLLFVBQ0wsSUFBSyxZQUNMLEVBQUssUUFDTCxFQUFLLFNBQ0wsSUFBSyxrQkFDTCxHQUFNLFFBQ04sSUFBSyxPQUNMLEVBQUssV0FDTCxJQUFLLGVBQ0wsSUFBSyxXQUNMLElBQUssT0FDTCxJQUFLLGFBQ0wsRUFBSyxRQUNMLElBQUssZ0JBQ0wsSUFBSyxXQUNMLEVBQUssVUFDTCxJQUFLLGVBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFNBQ0wsRUFBSyxRQUNMLElBQUssU0FDTCxFQUFLLFVBQ0wsR0FBTSxTQUNOLElBQUssU0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLEVBQUssWUFDTCxFQUFLLGVBQ0wsSUFBSyxXQUNMLElBQUssWUFDTCxJQUFLLFlBQ0wsSUFBSyxhQUNMLElBQUssaUJBQ0wsSUFBSyxVQUNMLEVBQUssU0FDTCxFQUFLLFFBQ0wsRUFBSyxRQUNMLEVBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxTQUNMLEVBQUssUUFDTCxJQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssVUFDTCxFQUFLLFdBQ0wsR0FBTSxRQUNOLEVBQUssVUFDTEMsR0FBTSxVQUNOLElBQUssU0FDTCxFQUFLLFVBQ0wsSUFBSyxVQUNMLEVBQUssU0FDTCxHQUFNLFNBQ04sSUFBSyxjQUNMLElBQUssVUFDTCxJQUFLLGFBQ0wsSUFBSyxTQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxHQUFNLFNBQ04sSUFBSyxlQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsSUFBSyxjQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxRQUNMLEVBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssWUFDTCxJQUFLLGFBQ0wsS0FBTSxTQUNOLElBQUssV0FDTCxHQUFNLFFBQ04sRUFBSyxVQUNMLEVBQUssU0FDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxhQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsR0FBTSxTQUNOLEVBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFlBQ0wsSUFBSyxXQUNMLEtBQU0sU0FDTixFQUFLLFdBQ0wsSUFBSyxZQUNMLElBQUssd0JBQ0wsRUFBSyxXQUNMLEVBQUssVUFDTCxJQUFLLGNBQ0wsSUFBSyxTQUNMLElBQUssV0FDTCxHQUFNLFFBQ04sSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsR0FBTSxTQUNOLElBQUssV0FDTCxHQUFNLFNBQ04sRUFBSyxXQUNMLElBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxVQUNMLEVBQUssUUFDTCxFQUFLLFNBQ0wsSUFBSyxVQUNMLEdBQU0sUUFDTixFQUFLLFdBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLEVBQUssVUFDTCxFQUFLLFVBQ0wsRUFBSyxXQUNMLElBQUssU0FDTCxFQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLGFBQ0wsSUFBSyxhQUNMLElBQUssYUFDTCxJQUFLLFVBQ0wsRUFBSyxTQUNMLEVBQUssVUFDTCxHQUFNLFNBQ04sRUFBSyxTQUNMLElBQUssV0FDTCxHQUFNLFNBQ04sSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxTQUNMLEVBQUssVUFDTCxFQUFLLFFBQ0wsR0FBTSxRQUNOLEVBQUssVUFDTCxHQUFNLFNBQ04sR0FBTSxTQUNOLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxVQUNMLEVBQUssYUFDTCxFQUFLLFdBQ0wsRUFBSyxRQUNMLEdBQU0sUUFDTixFQUFLLFdBQ0wsRUFBSyxTQUNMLEVBQUssU0FDTCxHQUFNLFNBQ04sR0FBTSxTQUNOLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxlQUNMLElBQUssU0FDTCxFQUFLLFdBQ0wsSUFBSyxhQUNMLEVBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxlQUNMLElBQUssVUFDTCxJQUFLLFlBQ0wsSUFBSyxXQUNMLElBQUssa0JBQ0wsSUFBSyxXQUNMLElBQUssWUFDTCxJQUFLLGtCQUNMLElBQUssUUFDTCxJQUFLLFdBQ0wsSUFBSyxTQUNMLEtBQU0sVUFDTixJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLFlBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxFQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssWUFDTCxJQUFLLGFBQ0wsSUFBSyxTQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxZQUNMLElBQUssYUFDTCxLQUFNLFNBQ04sSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsR0FBTSxRQUNOLElBQUssUUFDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLEVBQUssU0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLEVBQUssV0FDTCxJQUFLLGVBQ0wsSUFBSyxVQUNMLElBQUssYUFDTCxJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsR0FBTSxTQUNOLElBQUssV0FDTCxJQUFLLFlBQ0wsSUFBSyxXQUNMLElBQUssWUFDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxHQUFNLFNBQ04sSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsRUFBSyxXQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFlBQ0wsSUFBSyxXQUNMLElBQUssaUJBQ0wsSUFBSyxhQUNMLElBQUssWUFDTCxLQUFNLFNBQ04sSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxZQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsRUFBSyxRQUNMLElBQUssVUFDTCxHQUFNLFFBQ04sSUFBSyxRQUNMLEVBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLEdBQU0sU0FDTixHQUFNLFNBQ04sRUFBSyxPQUNMLElBQUssVUFDTCxLQUFNLFFBQ04sS0FBTSxRQUNOLElBQUssVUFDTCxJQUFLLFVBQ0wsS0FBTSxRQUNOLEtBQU0sUUFDTixJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxFQUFLLFdBQ0wsS0FBTSxTQUNOLEtBQU0sU0FDTixLQUFNLFVBQ04sRUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLFNBQ0wsRUFBSyxXQUNMLEVBQUssV0FDTCxLQUFNLGFBQ04sSUFBSyxTQUNMLEVBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxLQUFNLFVBQ04sSUFBSyxTQUNMLEdBQU0sUUFDTixJQUFLLG9CQUNMLElBQUssVUFDTCxJQUFLLFFBQ0wsSUFBSyxTQUNMLEVBQUssU0FDTCxLQUFNLFVBQ04sSUFBSyxlQUNMLElBQUssU0FDTCxHQUFNLFNBQ04sSUFBSyxRQUNMLEtBQU0sV0FDTixLQUFNLGFBQ04sSUFBSyxZQUNMLElBQUssWUFDTCxJQUFLLFlBQ0wsSUFBSyxZQUNMLEtBQU0sV0FDTixLQUFNLFVBQ04sSUFBSyxZQUNMLElBQUssZ0JBQ0wsS0FBTSxXQUNOLEtBQU0sV0FDTixHQUFNLFNBQ04sSUFBSyxTQUNMLEtBQU0sZUFDTixJQUFLLFNBQ0wsS0FBTSxlQUNOLEVBQUssV0FDTCxFQUFLLE9BQ0wsSUFBSyxRQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxLQUFNLFNBQ04sSUFBSyxXQUNMLEtBQU0sU0FDTixLQUFNLFNBQ04sSUFBSyxZQUNMLElBQUssV0FDTCxLQUFNLFNBQ04sS0FBTSxTQUNOLEtBQU0sWUFDTixJQUFLLFdBQ0wsS0FBTSxZQUNOLEtBQU0sVUFDTixJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxVQUNMLEVBQUssUUFDTCxFQUFLLFdBQ0wsSUFBSyxTQUNMLElBQUssV0FDTCxFQUFLLFVBQ0wsSUFBSyxVQUNMLEdBQU0sUUFDTixJQUFLLFNBQ0wsRUFBSyxXQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssWUFDTCxJQUFLLFFBQ0wsRUFBSyxVQUNMLEVBQUssVUFDTCxFQUFLLFlBQ0wsSUFBSyxTQUNMLEdBQU0sU0FDTixJQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsRUFBSyxTQUNMLEVBQUssU0FDTCxFQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssU0FDTCxJQUFLLFlBQ0wsSUFBSyxRQUNMLEVBQUssV0FDTCxJQUFLLFNBQ0wsRUFBSyxXQUNMLElBQUssYUFDTCxFQUFLLFNBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLEVBQUssUUFDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFlBQ0wsR0FBTSxRQUNOLEVBQUssUUFDTCxFQUFLLFdBQ0wsSUFBSyxVQUNMLEVBQUssT0FDTCxFQUFLLFVBQ0wsRUFBSyxZQUNMLElBQUssU0FDTCxJQUFLLGFBQ0wsSUFBSyxZQUNMLElBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxZQUNMLElBQUssWUFDTCxJQUFLLGFBQ0wsR0FBTSxTQUNOLElBQUssVUFDTCxJQUFLLFFBQ0wsSUFBSyxlQUNMLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLGFBQ0wsSUFBSyxhQUNMLElBQUssYUFDTCxJQUFLLFdBQ0wsR0FBTSxTQUNOLEVBQUssUUFDTCxJQUFLLFdBQ0wsR0FBTSxRQUNOLEdBQU0sU0FDTixJQUFLLFdBQ0wsR0FBTSxTQUNOLElBQUssWUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssU0FDTCxLQUFNLFNBQ04sRUFBSyxXQUNMLElBQUssYUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxZQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLElBQUssWUFDTCxJQUFLLG1CQUNMLElBQUssb0JBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxZQUNMLElBQUssWUFDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssUUFDTCxJQUFLLFNBQ0wsSUFBSyxZQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLEdBQU0sUUFDTixJQUFLLFdBQ0wsRUFBSyxRQUNMLEVBQUssV0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLElBQUssU0FDTCxJQUFLLFFBQ0wsSUFBSyxlQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFDTCxHQUFNLFNBQ04sSUFBSyxXQUNMLElBQUssWUFDTCxJQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssYUFDTCxJQUFLLFdBQ0wsR0FBTSxTQUNOLElBQUssV0FDTCxJQUFLLGtCQUNMLElBQUssYUFDTCxJQUFLLFlBQ0wsSUFBSyxPQUNMLEVBQUssV0FDTCxJQUFLLFFBQ0wsSUFBSyxlQUNMLEVBQUssV0FDTCxFQUFLLFdBQ0wsRUFBSyxVQUNMLElBQUssYUFDTCxJQUFLLGdCQUNMLElBQUssYUFDTCxJQUFLLGFBQ0wsRUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxHQUFNLFFBQ04sSUFBSyxVQUNMLEVBQUssV0FDTCxFQUFLLFNBQ0wsSUFBSyxRQUNMLEVBQUssVUFDTCxFQUFLLGFBQ0wsSUFBSyxXQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFVBQ0wsSUFBSyxZQUNMLElBQUssWUFDTCxJQUFLLFdBQ0wsSUFBSyxhQUNMLElBQUssV0FDTCxJQUFLLFFBQ0wsSUFBSyxTQUNMLEtBQU0sVUFDTixFQUFLLFdBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFdBQ0wsR0FBTSxTQUNOLElBQUssY0FDTCxLQUFNLFdBQ04sS0FBTSxXQUNOLEdBQU0sU0FDTixJQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssY0FDTCxJQUFLLFdBQ0wsSUFBSyxZQUNMLElBQUssWUFDTCxJQUFLLGVBQ0wsSUFBSyxjQUNMLElBQUssWUFDTCxJQUFLLFlBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxTQUNMLElBQUssY0FDTCxJQUFLLFdBQ0wsSUFBSyxZQUNMLElBQUssWUFDTCxJQUFLLFlBQ0wsSUFBSyxZQUNMLElBQUssWUFDTCxJQUFLLFlBQ0wsSUFBSyxlQUNMLElBQUssY0FDTCxJQUFLLFlBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsSUFBSyxVQUNMLElBQUssV0FDTCxFQUFLLFVBQ0wsSUFBSyxXQUNMLEVBQUssUUFDTCxFQUFLLFdBQ0wsRUFBSyxXQUNMLEVBQUssUUFDTCxJQUFLLFdBQ0wsR0FBTSxRQUNOLEVBQUssVUFDTCxFQUFLLGFBQ0wsRUFBSyxVQUNMLElBQUssVUFDTCxJQUFLLGFBQ0wsSUFBSyxXQUNMLElBQUssV0FDTCxJQUFLLFdBQ0wsR0FBTSxTQUNOLElBQUssWUFDTCxJQUFLLFdBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLFdBQ0wsSUFBSyxhQUNMLElBQUssWUFDTCxJQUFLLFVBQ0wsSUFBSyxZQUNMLElBQUssYUFDTCxHQUFNLFNBQ04sRUFBSyxTQUNMLEVBQUssVUFDTCxFQUFLLFdBQ0wsSUFBSyxTQUNMLEVBQUssV0FDTCxFQUFLLFVBQ0wsRUFBSyxXQUNMLEVBQUssVUFDTCxFQUFLLFFBQ0wsRUFBSyxXQUNMLElBQUssV0FDTCxHQUFNLFFBQ04sRUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLGFBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxFQUFLLFVBQ0wsRUFBSyxVQUNMLEdBQU0sU0FDTixFQUFLLFlBQ0wsSUFBSyxVQUNMLElBQUssYUFDTCxJQUFLLFdBQ0wsRUFBSyxVQUNMLElBQUssVUFDTCxHQUFNLFNBQ04sSUFBSyxVQUNMLEVBQUssV0FDTCxFQUFLLFNBQ0wsSUFBSyxZQUNMLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxXQUNMLEtBQU0sV0FDTixLQUFNLFdBQ04sS0FBTSxXQUNOLEtBQU0sV0FDTixFQUFLLFFBQ0wsSUFBSyxXQUNMLElBQUssVUFDTCxJQUFLLFdBQ0wsR0FBTSxRQUNOLEdBQU0sU0FDTixHQUFNLFNBQ04sSUFBSyxZQUNMLEVBQUssVUFDTCxJQUFLLFdBQ0wsSUFBSyxXQUNMLEVBQUssT0FDTCxHQUFNLFFBQ04sR0FBTSxTQUNOLEdBQU0s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QXl5QixFQUFJenlCLElBQU8sRUFDSnl5QixDQUNSLEdBQUcsQ0FBQyxHQUNKazZELEVBQXVCLEdBQ3ZCVixFQUFTL3VGLFNBQVEsU0FBVTBwRixHQUV6QjF2QixFQUFvQnhqQixFQUFFazVDLEVBQWlCaEcsU0FDVnh1RSxJQUE3QncwRSxFQUFnQmhHLElBRWhCZ0MsRUFBUzFtRixLQUFLNnFGLEVBQWdCbkcsRUFBU3lGLElBQ3ZDRyxFQUFvQjVGLElBQVcsR0FFL0I0RixFQUFvQjVGLElBQVcsQ0FFakMsSUFDSTF2QixFQUFvQjF1QyxJQUN2QjB1QyxFQUFvQjF1QyxFQUFFaWxFLFNBQVcsU0FBVTdHLEVBQVNnQyxHQUVsRDRELEdBQ0F0MUIsRUFBb0J4akIsRUFBRTg0QyxFQUFxQjVGLEtBQzFDNEYsRUFBb0I1RixLQUVyQmdDLEVBQVMxbUYsS0FBSzZxRixFQUFnQm5HLElBQzlCNEYsRUFBb0I1RixJQUFXLEVBRWpDLEVBRUYsRUFFQTF2QixFQUFvQnd4QixLQUFPLEtBQzFCLEdBQXFCLG9CQUFWcjRFLE1BQXVCLE1BQU0sSUFBSW1GLE1BQU0sc0NBQ2xELE9BQU9uRixNQUFNNm1ELEVBQW9CMTVDLEVBQUkwNUMsRUFBb0I0dkIsUUFBUXArQyxNQUFNOG1ELElBQ3RFLEdBQXVCLE1BQXBCQSxFQUFTbC9FLE9BQVosQ0FDQSxJQUFJay9FLEVBQVM5NUIsR0FBSSxNQUFNLElBQUlsZ0QsTUFBTSxtQ0FBcUNnNkUsRUFBU0MsWUFDL0UsT0FBT0QsRUFBU0UsTUFGa0IsQ0FFWixHQUNyQixNQ3RmSHg0QixFQUFvQiwrS0FDcEJBLEVBQW9CLDRDQUNwQkEsRUFBb0Isa0JBQ01BLEVBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvYW5pbWF0aW9ucy9IaWdobGlnaHQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2FuaW1hdGlvbnMvTGFiZWwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2FuaW1hdGlvbnMvUGFyYWdyYXBoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9hbmltYXRpb25zL1RpdGxlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jbGFzc2VzL0FuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY2xhc3Nlcy9Bc3luY0xvYWQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NsYXNzZXMvQnV0dG9uLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jbGFzc2VzL0NvbG9ycy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY2xhc3Nlcy9Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NsYXNzZXMvRGV0ZWN0aW9uLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jbGFzc2VzL1BhZ2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0Fib3V0L0dhbGxlcnkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0Fib3V0L01lZGlhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9BYm91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvQ29sbGVjdGlvbnMvTWVkaWEuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0NvbGxlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9EZXRhaWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0hvbWUvTWVkaWEuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0hvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL05hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvUHJlbG9hZGVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvcGFnZXMvQWJvdXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3BhZ2VzL0NvbGxlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9wYWdlcy9EZXRhaWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3BhZ2VzL0hvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3V0aWxzL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvdXRpbHMvdGV4dC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvYW5zaS1odG1sLWNvbW11bml0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9DU1NQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2dzYXAvZ3NhcC1jb3JlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9nc2FwL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4uL3NyYy9uYW1lZC1yZWZlcmVuY2VzLnRzIiwid2VicGFjazovL2Zsb2VtYS8uLi9zcmMvbnVtZXJpYy11bmljb2RlLW1hcC50cyIsIndlYnBhY2s6Ly9mbG9lbWEvLi4vc3JjL3N1cnJvZ2F0ZS1wYWlycy50cyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fV2Vha01hcC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUVhY2guanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlTb21lLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRWFjaC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc01hdGNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJdGVyYXRlZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWFwLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eURlZXAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdEZ1bmN0aW9uLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RQYXRoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUZvci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXRjaERhdGEuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNQYXRoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXlhYmxlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlR2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBUb0FycmF5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21lbW9pemVDYXBwZWQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlQWRkLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlSGFzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0RlbGV0ZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb1BhdGguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lYWNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mb3JFYWNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZ2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaGFzSW4uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL21hcC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJBcnJheS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvbm9ybWFsaXplLXVybC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL1VzZXJBZ2VudF9ERVBSRUNBVEVELmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL2lzRXZlbnRTdXBwb3J0ZWQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9zcmMvbm9ybWFsaXplV2hlZWwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3ByZWZpeC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9tb2R1bGVzL2xvZ2dlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvZnNtLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvcnVudGltZS1lcnJvci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5L3N0YXRlLW1hY2hpbmUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS9zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2NyZWF0ZVNvY2tldFVSTC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9wYXJzZVVSTC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9yZWxvYWRBcHAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc2VuZE1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc3RyaXBBbnNpLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9kZXYtc2VydmVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9lbWl0dGVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2ctYXBwbHktcmVzdWx0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vc3R5bGVzL2luZGV4LnNjc3M/ZjBmZiIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvc2hhZGVycy9jb2xsZWN0aW9ucy1mcmFnbWVudC5nbHNsIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9zaGFkZXJzL2NvbGxlY3Rpb25zLXZlcnRleC5nbHNsIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9zaGFkZXJzL2hvbWUtZnJhZ21lbnQuZ2xzbCIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvc2hhZGVycy9ob21lLXZlcnRleC5nbHNsIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9zaGFkZXJzL3BsYW5lLWZyYWdtZW50Lmdsc2wiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3NoYWRlcnMvcGxhbmUtdmVydGV4Lmdsc2wiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9DYW1lcmEuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9HZW9tZXRyeS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL01lc2guanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9Qcm9ncmFtLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9UZXh0dXJlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2V4dHJhcy9QbGFuZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL0V1bGVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvTWF0My5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL01hdDQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9RdWF0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvVmVjMy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9FdWxlckZ1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvTWF0M0Z1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvTWF0NEZ1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvUXVhdEZ1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvVmVjM0Z1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvVmVjNEZ1bmMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgdXBkYXRlIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0IHVwZGF0ZSBtYW5pZmVzdCBmaWxlbmFtZSIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9jc3MgbG9hZGluZyIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJmbG9lbWE6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJpbXBvcnQgR1NBUCBmcm9tIFwiZ3NhcFwiXHJcbmltcG9ydCBBbmltYXRpb24gZnJvbSBcImNsYXNzZXMvQW5pbWF0aW9uXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIaWdobGlnaHQgZXh0ZW5kcyBBbmltYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgICBlbGVtZW50cyxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGFuaW1hdGVJbigpIHtcclxuICAgICAgICBHU0FQLmZyb21Ubyh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAwLFxyXG4gICAgICAgICAgICBkZWxheTogMC41XHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBhdXRvQWxwaGE6IDEsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxLFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgYW5pbWF0ZU91dCgpIHtcclxuICAgICAgICBHU0FQLnNldCh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAwXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuLy8gVVNFIFZFUlNJT04gQ09OVFJPTCBGT1IgTU9SRSBBRFZBTkNFRCBWRVJTSU9OXHJcbiIsImltcG9ydCBHU0FQIGZyb20gXCJnc2FwXCJcclxuaW1wb3J0IEFuaW1hdGlvbiBmcm9tIFwiY2xhc3Nlcy9BbmltYXRpb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhYmVsIGV4dGVuZHMgQW5pbWF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZWxlbWVudHMgfSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgZWxlbWVudCxcclxuICAgICAgICAgICAgZWxlbWVudHMsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBhbmltYXRlSW4oKSB7XHJcbiAgICAgICAgR1NBUC5mcm9tVG8odGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIGF1dG9BbHBoYTogMCxcclxuICAgICAgICAgICAgZGVsYXk6IDAuNVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAxLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMSxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGFuaW1hdGVPdXQoKSB7XHJcbiAgICAgICAgR1NBUC5zZXQodGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIGF1dG9BbHBoYTogMFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyBVU0UgVkVSU0lPTiBDT05UUk9MIEZPUiBNT1JFIEFEVkFOQ0VEIFZFUlNJT05cclxuIiwiaW1wb3J0IEdTQVAgZnJvbSBcImdzYXBcIlxyXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gXCJjbGFzc2VzL0FuaW1hdGlvblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFyYWdyYXBoIGV4dGVuZHMgQW5pbWF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZWxlbWVudHMgfSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgZWxlbWVudCxcclxuICAgICAgICAgICAgZWxlbWVudHMsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBhbmltYXRlSW4oKSB7XHJcbiAgICAgICAgR1NBUC5mcm9tVG8odGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIGF1dG9BbHBoYTogMCxcclxuICAgICAgICAgICAgZGVsYXk6IDAuNVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAxLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMSxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGFuaW1hdGVPdXQoKSB7XHJcbiAgICAgICAgR1NBUC5zZXQodGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIGF1dG9BbHBoYTogMFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyBVU0UgVkVSU0lPTiBDT05UUk9MIEZPUiBNT1JFIEFEVkFOQ0VEIFZFUlNJT04iLCJpbXBvcnQgR1NBUCBmcm9tIFwiZ3NhcFwiXHJcbmltcG9ydCBBbmltYXRpb24gZnJvbSBcImNsYXNzZXMvQW5pbWF0aW9uXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaXRsZSBleHRlbmRzIEFuaW1hdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgICAgIGVsZW1lbnRzLFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgYW5pbWF0ZUluKCkge1xyXG4gICAgICAgIEdTQVAuZnJvbVRvKHRoaXMuZWxlbWVudCwge1xyXG4gICAgICAgICAgICBhdXRvQWxwaGE6IDAsXHJcbiAgICAgICAgICAgIGRlbGF5OiAwLjVcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIGF1dG9BbHBoYTogMSxcclxuICAgICAgICAgICAgZHVyYXRpb246IDEsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBhbmltYXRlT3V0KCkge1xyXG4gICAgICAgIEdTQVAuc2V0KHRoaXMuZWxlbWVudCwge1xyXG4gICAgICAgICAgICBhdXRvQWxwaGE6IDBcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gVVNFIFZFUlNJT04gQ09OVFJPTCBGT1IgTU9SRSBBRFZBTkNFRCBWRVJTSU9OXHJcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSBcImNsYXNzZXMvQ29tcG9uZW50XCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcclxuICAgICAgICBzdXBlcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pXHJcblxyXG4gICAgICAgIHRoaXMuY3JlYXRlT2JzZXJ2ZXIoKVxyXG4gICAgICAgIHRoaXMuYW5pbWF0ZU91dCgpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlT2JzZXJ2ZXIoKSB7IC8vSW50ZXJzZWN0aW9uIE9idmVyc2VyIG5vdGlmaWVzIHdoZW4gYW4gZWxlbWVudCBpcyBpbiB0aGUgVmlld3BvcnQuXHJcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XHJcbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGVJbigpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQpXHJcbiAgICB9XHJcblxyXG4gICAgYW5pbWF0ZUluKCkge31cclxuXHJcbiAgICBhbmltYXRlT3V0KCkge31cclxuXHJcbiAgICBvblJlc2l6ZSgpIHt9XHJcbn1cclxuXHJcbi8vIENPTVBMRVRFIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiY2xhc3Nlcy9Db21wb25lbnRcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXN5bmNMb2FkIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZWxlbWVudCB9KSB7XHJcbiAgICAgICAgc3VwZXIoeyBlbGVtZW50IH0pXHJcbiAgICAgICAgdGhpcy5jcmVhdGVPYnNlcnZlcigpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlT2JzZXJ2ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XHJcbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZWxlbWVudC5zcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNyYyA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQub25sb2FkID0gXyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImxvYWRlZFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENPTVBMRVRFIiwiaW1wb3J0IEdTQVAgZnJvbSBcImdzYXBcIlxyXG5cclxuaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiY2xhc3Nlcy9Db21wb25lbnRcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZWxlbWVudCB9KSB7XHJcbiAgICAgICAgc3VwZXIoeyBlbGVtZW50IH0pXHJcblxyXG4gICAgICAgIHRoaXMucGF0aCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihcInBhdGg6bGFzdC1jaGlsZFwiKVxyXG4gICAgICAgIHRoaXMucGF0aExlbmd0aCA9IHRoaXMucGF0aC5nZXRUb3RhbExlbmd0aCgpXHJcblxyXG4gICAgICAgIHRoaXMudGltZWxpbmUgPSBHU0FQLnRpbWVsaW5lKHsgcGF1c2VkOiB0cnVlIH0pXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy50aW1lbGluZS5mcm9tVG8odGhpcy5wYXRoLCB7XHJcbiAgICAgICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IHRoaXMucGF0aExlbmd0aCxcclxuICAgICAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiBgJHt0aGlzLnBhdGhMZW5ndGh9ICR7dGhpcy5wYXRoTGVuZ3RofWAsXHJcbiAgICAgICAgfSwgeyBcclxuICAgICAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogMCxcclxuICAgICAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiBgJHt0aGlzLnBhdGhMZW5ndGh9ICR7dGhpcy5wYXRoTGVuZ3RofWAsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlRW50ZXIoKSB7XHJcbiAgICAgICAgdGhpcy50aW1lbGluZS5wbGF5KClcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlTGVhdmUoKSB7XHJcbiAgICAgICAgdGhpcy50aW1lbGluZS5yZXZlcnNlKClcclxuICAgIH1cclxuXHJcbiAgICBhZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLm9uTW91c2VFbnRlckV2ZW50ID0gdGhpcy5vbk1vdXNlRW50ZXIuYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMub25Nb3VzZUxlYXZlRXZlbnQgPSB0aGlzLm9uTW91c2VMZWF2ZS5iaW5kKHRoaXMpXHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLm9uTW91c2VFbnRlckV2ZW50KVxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLm9uTW91c2VMZWF2ZUV2ZW50KVxyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMub25Nb3VzZUVudGVyRXZlbnQpXHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMub25Nb3VzZUxlYXZlRXZlbnQpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENPTVBMRVRFIiwiaW1wb3J0IEdTQVAgZnJvbSBcImdzYXBcIlxyXG5cclxuY2xhc3MgQ29sb3JzIHtcclxuICAgIGNoYW5nZSh7IGJhY2tncm91bmRDb2xvciwgY29sb3IgfSkge1xyXG4gICAgICAgIEdTQVAudG8oZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGJhY2tncm91bmRDb2xvcixcclxuICAgICAgICAgICAgY29sb3IsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxLjVcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQ29sb3JzTWFuYWdlciA9IG5ldyBDb2xvcnMoKSBcclxuXHJcbi8vIENPTVBMRVRFIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiZXZlbnRzXCJcclxuaW1wb3J0IGVhY2ggZnJvbSBcImxvZGFzaC9lYWNoXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7ZWxlbWVudCwgZWxlbWVudHMgfSkge1xyXG4gICAgICAgIHN1cGVyKClcclxuXHJcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IGVsZW1lbnRcclxuICAgICAgICB0aGlzLnNlbGVjdG9yQ2hpbGRyZW4gPSB7XHJcbiAgICAgICAgICAgIC4uLmVsZW1lbnRzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZSgpXHJcblxyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RvciBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLnNlbGVjdG9yXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuc2VsZWN0b3IpIC8vIFNhdmVzIG1lbW9yeSBieSBub3QgZGVzdHJveWluZyBhbmQgY3JlYXRpbmcgZGlmZmVyZW50IGNsYXNzZXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSB7fVxyXG5cclxuICAgICAgICBlYWNoKHRoaXMuc2VsZWN0b3JDaGlsZHJlbiwgKGVudHJ5LCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50IHx8IGVudHJ5IGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0IHx8IEFycmF5LmlzQXJyYXkoZW50cnkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBlbnRyeVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbnRyeSlcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZWxlbWVudHNba2V5XS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVudHJ5KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBhZGRFdmVudExpc3RlbmVycygpIHt9XHJcblxyXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7fVxyXG59XHJcblxyXG4vLyBDT01QTEVURSIsImNsYXNzIERldGVjdGlvbiB7XHJcbiAgICBpc1Bob25lKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUGhvbmVDaGVja2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNQaG9uZUNoZWNrZWQgPSB0cnVlXHJcblxyXG4gICAgICAgICAgICB0aGlzLlBob25lQ2hlY2sgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicGhvbmVcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLlBob25lQ2hlY2tcclxuICAgIH1cclxuXHJcbiAgICBpc0Rlc2t0b3AoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZXNrdG9wQ2hlY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzRGVza3RvcENoZWNrZWQgPSB0cnVlXHJcblxyXG4gICAgICAgICAgICB0aGlzLkRlc2t0b3BDaGVjayA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJkZXNrdG9wXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5EZXNrdG9wQ2hlY2tcclxuICAgIH1cclxuXHJcbiAgICBpc1RhYmxldCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1RhYmxldENoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1RhYmxldENoZWNrZWQgPSB0cnVlXHJcblxyXG4gICAgICAgICAgICB0aGlzLlRhYmxldENoZWNrID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInRhYmxldFwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuVGFibGV0Q2hlY2tcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IERldGVjdGlvbk1hbmFnZXIgPSBuZXcgRGV0ZWN0aW9uKClcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERldGVjdGlvbk1hbmFnZXJcclxuXHJcbi8vIENPTVBMRVRFIiwiaW1wb3J0IEdTQVAgZnJvbSBcImdzYXBcIlxyXG5cclxuaW1wb3J0IFByZWZpeCBmcm9tIFwicHJlZml4XCJcclxuXHJcbmltcG9ydCBlYWNoIGZyb20gXCJsb2Rhc2gvZWFjaFwiXHJcbmltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIlxyXG5cclxuaW1wb3J0IFRpdGxlIGZyb20gXCJhbmltYXRpb25zL1RpdGxlXCJcclxuaW1wb3J0IFBhcmFncmFwaCBmcm9tIFwiYW5pbWF0aW9ucy9QYXJhZ3JhcGhcIlxyXG5pbXBvcnQgTGFiZWwgZnJvbSBcImFuaW1hdGlvbnMvTGFiZWxcIlxyXG5pbXBvcnQgSGlnaGxpZ2h0IGZyb20gXCJhbmltYXRpb25zL0hpZ2hsaWdodFwiXHJcblxyXG5pbXBvcnQgQXN5bmNMb2FkIGZyb20gXCJjbGFzc2VzL0FzeW5jTG9hZFwiXHJcblxyXG5pbXBvcnQgeyBDb2xvcnNNYW5hZ2VyIH0gZnJvbSBcImNsYXNzZXMvQ29sb3JzXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2Uge1xyXG4gICAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cywgaWQgfSkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBlbGVtZW50XHJcbiAgICAgICAgdGhpcy5zZWxlY3RvckNoaWxkcmVuID0ge1xyXG4gICAgICAgICAgICAuLi5lbGVtZW50cyxcclxuXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbnNIaWdobGlnaHRzOiBgW2RhdGEtYW5pbWF0aW9uPVwiaGlnaGxpZ2h0XCJdYCxcclxuICAgICAgICAgICAgYW5pbWF0aW9uc1RpdGxlczogYFtkYXRhLWFuaW1hdGlvbj1cInRpdGxlXCJdYCxcclxuICAgICAgICAgICAgYW5pbWF0aW9uc0xhYmVsczogYFtkYXRhLWFuaW1hdGlvbj1cImxhYmVsXCJdYCxcclxuICAgICAgICAgICAgYW5pbWF0aW9uc1BhcmFncmFwaHM6IGBbZGF0YS1hbmltYXRpb249XCJwYXJhZ3JhcGhcIl1gLFxyXG5cclxuICAgICAgICAgICAgcHJlbG9hZGVyczogJ1tkYXRhLXNyY10nXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlkID0gaWRcclxuICAgICAgICB0aGlzLnRyYW5zZm9ybVByZWZpeCA9IFByZWZpeChcInRyYW5zZm9ybVwiKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZSgpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuc2VsZWN0b3IpIC8vIFNhdmVzIG1lbW9yeSBieSBub3QgZGVzdHJveWluZyBhbmQgY3JlYXRpbmcgZGlmZmVyZW50IGNsYXNzZXNcclxuICAgICAgICB0aGlzLmVsZW1lbnRzID0ge31cclxuXHJcbiAgICAgICAgdGhpcy5zY3JvbGwgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgICAgICAgIHRhcmdldDogMCwgXHJcbiAgICAgICAgICAgIGxhc3Q6IDAsXHJcbiAgICAgICAgICAgIGxpbWl0OiAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlYWNoKHRoaXMuc2VsZWN0b3JDaGlsZHJlbiwgKGVudHJ5LCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50IHx8IGVudHJ5IGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0IHx8IEFycmF5LmlzQXJyYXkoZW50cnkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBlbnRyeVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbnRyeSlcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZWxlbWVudHNba2V5XS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVudHJ5KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVBbmltYXRpb25zKClcclxuICAgICAgICB0aGlzLmNyZWF0ZVByZWxvYWRlcigpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUHJlbG9hZGVyKCkge1xyXG4gICAgICAgIHRoaXMucHJlbG9hZGVycyA9IG1hcCh0aGlzLmVsZW1lbnRzLnByZWxvYWRlcnMsIGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFzeW5jTG9hZCh7IGVsZW1lbnQgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEFuaW1hdGlvbnMgXHJcblxyXG4gICAgY3JlYXRlQW5pbWF0aW9ucygpIHtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBbXVxyXG5cclxuICAgICAgICAgLy8gVGl0bGVzIFxyXG4gICAgICAgICB0aGlzLmFuaW1hdGlvbnNUaXRsZXMgPSBtYXAodGhpcy5lbGVtZW50cy5hbmltYXRpb25zVGl0bGVzLCBlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUaXRsZSh7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLnB1c2goLi4udGhpcy5hbmltYXRpb25zVGl0bGVzKVxyXG5cclxuICAgICAgICAvLyBQYXJhZ3JhcGhzXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zUGFyYWdyYXBocyA9IG1hcCh0aGlzLmVsZW1lbnRzLmFuaW1hdGlvbnNQYXJhZ3JhcGhzLCBlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJhZ3JhcGgoe1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc1BhcmFncmFwaHMpXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTGFiZWxzXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zTGFiZWxzID0gbWFwKHRoaXMuZWxlbWVudHMuYW5pbWF0aW9uc0xhYmVscywgZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGFiZWwoe1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc0xhYmVscylcclxuXHJcbiAgICAgICAgIC8vIEhpZ2hsaWdodHNcclxuICAgICAgICAgdGhpcy5hbmltYXRpb25zSGlnaGxpZ2h0cyA9IG1hcCh0aGlzLmVsZW1lbnRzLmFuaW1hdGlvbnNIaWdobGlnaHRzLCBlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBIaWdobGlnaHQoe1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc0hpZ2hsaWdodHMpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW5pbWF0aW9uc1xyXG4gICAgICovXHJcbiAgICBzaG93KGFuaW1hdGlvbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgQ29sb3JzTWFuYWdlci5jaGFuZ2Uoe1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1iYWNrZ3JvdW5kXCIpLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbG9yXCIpLFxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGFuaW1hdGlvblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25JbiA9IEdTQVAudGltZWxpbmUoKVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uSW4uZnJvbVRvKHRoaXMuZWxlbWVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9BbHBoYTogMCxcclxuICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDEsXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkluLmNhbGwoXyA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKClcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaGlkZSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpXHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbk91dCA9IEdTQVAudGltZWxpbmUoKVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25PdXQudG8odGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDAsXHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiByZXNvbHZlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50c1xyXG4gICAgICovXHJcbiAgICBcclxuICAgIG9uUmVzaXplKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzLndyYXBwZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGwubGltaXQgPSB0aGlzLmVsZW1lbnRzLndyYXBwZXIuY2xpZW50SGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGVhY2godGhpcy5hbmltYXRpb25zLCBhbmltYXRpb24gPT4gYW5pbWF0aW9uLm9uUmVzaXplKCkpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIG9uV2hlZWwoIHsgcGl4ZWxZIH0pIHtcclxuICAgICAgICB0aGlzLnNjcm9sbC50YXJnZXQgKz0gcGl4ZWxZXHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaFN0YXJ0KGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5zY3JvbGwuc3RhcnRZID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSA6IGV2ZW50LmNsaWVudFlcclxuICAgICAgICB0aGlzLnNjcm9sbC50b3VjaERlbHRhID0gMFxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFkgOiBldmVudC5jbGllbnRZXHJcbiAgICAgICAgdGhpcy5zY3JvbGwudG91Y2hEZWx0YSA9IHRoaXMuc2Nyb2xsLnN0YXJ0WSAtIHlcclxuICAgICAgICB0aGlzLnNjcm9sbC50YXJnZXQgKz0gdGhpcy5zY3JvbGwudG91Y2hEZWx0YVxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLnN0YXJ0WSA9IHlcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoRW5kKCkge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsLnRvdWNoRGVsdGEgPSAwXHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogTG9vcFxyXG4gICAgICovXHJcbiAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gR1NBUC51dGlscy5jbGFtcCgwLCB0aGlzLnNjcm9sbC5saW1pdCwgdGhpcy5zY3JvbGwudGFyZ2V0KVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSBHU0FQLnV0aWxzLmludGVycG9sYXRlKHRoaXMuc2Nyb2xsLmN1cnJlbnQsIHRoaXMuc2Nyb2xsLnRhcmdldCwgMC4xKSAvLyBMb3dlciA9PSBNb3JlIFNtb290aCBidXQgbW9yZSBDb3N0XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNjcm9sbC5jdXJyZW50IDwgMC4wMSkge1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHMud3JhcHBlcikge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLndyYXBwZXIuc3R5bGVbdGhpcy50cmFuc2Zvcm1QcmVmaXhdID0gYHRyYW5zbGF0ZVkoLSR7dGhpcy5zY3JvbGwuY3VycmVudH1weClgXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExpc3RlbmVyc1xyXG4gICAgICovXHJcbiAgICBhZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0LmJpbmQodGhpcykpXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUuYmluZCh0aGlzKSlcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQuYmluZCh0aGlzKSlcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydC5iaW5kKHRoaXMpKVxyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlLmJpbmQodGhpcykpXHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vblRvdWNoRW5kLmJpbmQodGhpcykpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95XHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENPTVBMRVRFIiwiaW1wb3J0IEdTQVAgZnJvbSBcImdzYXBcIlxyXG5cclxuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSBcIm9nbFwiXHJcbmltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIlxyXG5cclxuaW1wb3J0IE1lZGlhIGZyb20gXCIuL01lZGlhXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbGxlcnkge1xyXG4gICAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBnZW9tZXRyeSwgaW5kZXgsIGdsLCBzY2VuZSwgc2l6ZXMgfSkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcclxuICAgICAgICB0aGlzLmVsZW1lbnRfd3JhcHBlciA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5hYm91dF9nYWxsZXJ5X3dyYXBwZXJcIilcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnlcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXhcclxuICAgICAgICB0aGlzLmdsID0gZ2xcclxuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmVcclxuICAgICAgICB0aGlzLnNpemVzID0gc2l6ZXNcclxuXHJcbiAgICAgICAgdGhpcy5ncm91cCA9IG5ldyBUcmFuc2Zvcm0oKVxyXG5cclxuICAgICAgICB0aGlzLnNjcm9sbCA9IHtcclxuICAgICAgICAgICAgc3RhcnQ6IDAsXHJcbiAgICAgICAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgICAgICAgIHRhcmdldDogMCxcclxuICAgICAgICAgICAgbGVycDogMC4xLFxyXG4gICAgICAgICAgICB2ZWxvY3RpeTogMVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVNZWRpYXMoKVxyXG5cclxuICAgICAgICB0aGlzLm9uUmVzaXplKHtcclxuICAgICAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLmdyb3VwLnNldFBhcmVudCh0aGlzLnNjZW5lKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZU1lZGlhcygpIHtcclxuICAgICAgICB0aGlzLm1lZGlhc0VsZW1lbnRzID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYWJvdXRfZ2FsbGVyeV9tZWRpYVwiKVxyXG5cclxuICAgICAgICB0aGlzLm1lZGlhcyA9IG1hcCh0aGlzLm1lZGlhc0VsZW1lbnRzLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBNZWRpYSh7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICAgICAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgICAgICAgICBzaXplczogdGhpcy5zaXplcyxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBBbmltYXRpb25zXHJcbiAgICAqL1xyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgbWFwKHRoaXMubWVkaWFzLCBtZWRpYSA9PiBtZWRpYS5zaG93KCkpXHJcbiAgICB9XHJcblxyXG4gICAgaGlkZSgpIHtcclxuICAgICAgICBtYXAodGhpcy5tZWRpYXMsIG1lZGlhID0+IG1lZGlhLmhpZGUoKSlcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudHNcclxuICAgICAqL1xyXG5cclxuICAgIG9uUmVzaXplKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnRfd3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG5cclxuICAgICAgICB0aGlzLnNpemVzID0gZXZlbnQuc2l6ZXNcclxuXHJcbiAgICAgICAgdGhpcy53aWR0aCA9ICh0aGlzLmJvdW5kcy53aWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIHRoaXMuc2l6ZXMud2lkdGhcclxuXHJcbiAgICAgICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IHRoaXMuc2Nyb2xsLnRhcmdldCA9IDBcclxuXHJcbiAgICAgICAgbWFwKHRoaXMubWVkaWFzLCBtZWRpYSA9PiBtZWRpYS5vblJlc2l6ZShldmVudCwgdGhpcy5zY3JvbGwuY3VycmVudCkpXHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaERvd24oeyB4LCB5IH0pIHtcclxuICAgICAgICB0aGlzLnNjcm9sbC5zdGFydCA9IHRoaXMuc2Nyb2xsLmN1cnJlbnRcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoTW92ZSh7IHgsIHkgfSkge1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0geC5zdGFydCAtIHguZW5kXHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCA9IHRoaXMuc2Nyb2xsLnN0YXJ0IC0gZGlzdGFuY2VcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoVXAoeyB4LCB5IH0pIHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb29wXHJcbiAgICAgKi9cclxuXHJcbiAgICB1cGRhdGUoc2Nyb2xsKSB7XHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSAoc2Nyb2xsLmN1cnJlbnQgLSBzY3JvbGwudGFyZ2V0KSAqIDAuMVxyXG4gICAgICAgIGNvbnN0IHkgPSBzY3JvbGwuY3VycmVudCAvIHdpbmRvdy5pbm5lckhlaWdodFxyXG5cclxuICAgICAgICBpZiAodGhpcy5zY3JvbGwuY3VycmVudCA8IHRoaXMuc2Nyb2xsLnRhcmdldCkge1xyXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IFwicmlnaHRcIlxyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbC52ZWxvY3RpeSA9IC0xXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc2Nyb2xsLmN1cnJlbnQgPiB0aGlzLnNjcm9sbC50YXJnZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBcImxlZnRcIlxyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbC52ZWxvY3RpeSA9IDFcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCAtPSB0aGlzLnNjcm9sbC52ZWxvY3RpeSAvLyBBdXRvIFNjcm9sbGluZ1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCArPSBkaXN0YW5jZVxyXG5cclxuICAgICAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gR1NBUC51dGlscy5pbnRlcnBvbGF0ZSh0aGlzLnNjcm9sbC5jdXJyZW50LCB0aGlzLnNjcm9sbC50YXJnZXQsIHRoaXMuc2Nyb2xsLmxlcnApXHJcblxyXG4gICAgICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzY2FsZVggPSBtZWRpYS5tZXNoLnNjYWxlLnggLyAyICsgMC4yNSAvLyAoMC4yNSkgV2hlbiB0aGUgaW1hZ2Ugc2hvdWxkIGFwcGVhciB1cG9uIHJlYWNoaW5nIHNjcmVlbiBlbmRcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBtZWRpYS5tZXNoLnBvc2l0aW9uLnggKyBzY2FsZVhcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoeCA8IC10aGlzLnNpemVzLndpZHRoIC8gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLmV4dHJhICs9IHRoaXMud2lkdGhcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gbWVkaWEubWVzaC5wb3NpdGlvbi54IC0gc2NhbGVYXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHggPiB0aGlzLnNpemVzLndpZHRoIC8gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLmV4dHJhIC09IHRoaXMud2lkdGhcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWVkaWEudXBkYXRlKHRoaXMuc2Nyb2xsLmN1cnJlbnQpXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5ncm91cC5wb3NpdGlvbi55ID0geSAqIHRoaXMuc2l6ZXMuaGVpZ2h0XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVzdHJveVxyXG4gICAgICovXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlQ2hpbGQodGhpcy5ncm91cClcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ09NUExFVEUiLCJpbXBvcnQgeyBNZXNoLCBQcm9ncmFtIH0gZnJvbSBcIm9nbFwiXHJcbmltcG9ydCBHU0FQIGZyb20gXCJnc2FwXCJcclxuXHJcbmltcG9ydCBEZXRlY3Rpb24gZnJvbSBcImNsYXNzZXMvRGV0ZWN0aW9uXCJcclxuXHJcbmltcG9ydCB2ZXJ0ZXggZnJvbSBcInNoYWRlcnMvcGxhbmUtdmVydGV4Lmdsc2xcIlxyXG5pbXBvcnQgZnJhZ21lbnQgZnJvbSBcInNoYWRlcnMvcGxhbmUtZnJhZ21lbnQuZ2xzbFwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGdlb21ldHJ5LCBnbCwgaW5kZXgsIHNjZW5lLCBzaXplcyB9KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxyXG4gICAgICAgIHRoaXMuZ2wgPSBnbFxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeVxyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleFxyXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG5cclxuICAgICAgICB0aGlzLmV4dHJhID0ge1xyXG4gICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICB5OiAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZVRleHR1cmUoKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlUHJvZ3JhbSgpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVNZXNoKClcclxuICAgICAgICB0aGlzLmNyZWF0ZUJvdW5kcyh7XHJcbiAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlVGV4dHVyZSgpIHtcclxuICAgICAgICBjb25zdCBpbWFnZSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpXHJcblxyXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IHdpbmRvdy5URVhUVVJFU1tpbWFnZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKV1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQcm9ncmFtKCkge1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcclxuICAgICAgICAgICAgZnJhZ21lbnQsXHJcbiAgICAgICAgICAgIHZlcnRleCxcclxuICAgICAgICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICAgICAgICAgIHVBbHBoYTogeyB2YWx1ZTogMCB9LFxyXG4gICAgICAgICAgICAgICAgdE1hcDogeyB2YWx1ZTogdGhpcy50ZXh0dXJlIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVNZXNoKCkge1xyXG4gICAgICAgIHRoaXMubWVzaCA9IG5ldyBNZXNoKHRoaXMuZ2wsIHtcclxuICAgICAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgICAgIHByb2dyYW06IHRoaXMucHJvZ3JhbSxcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQm91bmRzKHsgc2l6ZXMgfSkge1xyXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG5cclxuICAgICAgICB0aGlzLmJvdW5kcyA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZVNjYWxlKClcclxuICAgICAgICB0aGlzLnVwZGF0ZVgoKVxyXG4gICAgICAgIHRoaXMudXBkYXRlWSgpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICogQW5pbWF0aW9uc1xyXG4gICAqL1xyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgR1NBUC5mcm9tVG8odGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgdmFsdWU6IDFcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgR1NBUC50byh0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLCB7XHJcbiAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudHNcclxuICAgICAqL1xyXG5cclxuICAgIG9uUmVzaXplKHNpemVzLCBzY3JvbGwpIHtcclxuICAgICAgICB0aGlzLmV4dHJhID0gMFxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZUJvdW5kcyhzaXplcylcclxuICAgICAgICB0aGlzLnVwZGF0ZVgoc2Nyb2xsKVxyXG4gICAgICAgIHRoaXMudXBkYXRlWSgwKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9vcFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVSb3RhdGlvbigpIHtcclxuICAgICAgICB0aGlzLm1lc2gucm90YXRpb24ueiA9IEdTQVAudXRpbHMubWFwUmFuZ2UoXHJcbiAgICAgICAgICAgIC10aGlzLnNpemVzLndpZHRoIC8gMixcclxuICAgICAgICAgICAgdGhpcy5zaXplcy53aWR0aCAvIDIsXHJcbiAgICAgICAgICAgIE1hdGguUEkgKiAwLjEsXHJcbiAgICAgICAgICAgIC1NYXRoLlBJICogMC4xLFxyXG4gICAgICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24ueFxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTY2FsZSgpIHtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm91bmRzLmhlaWdodCAvIHdpbmRvdy5pbm5lckhlaWdodFxyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmJvdW5kcy53aWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoXHJcblxyXG4gICAgICAgIHRoaXMubWVzaC5zY2FsZS54ID0gdGhpcy5zaXplcy53aWR0aCAqIHRoaXMud2lkdGhcclxuICAgICAgICB0aGlzLm1lc2guc2NhbGUueSA9IHRoaXMuc2l6ZXMuaGVpZ2h0ICogdGhpcy5oZWlnaHRcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVYKHggPSAwKSB7IC8vIEJhc2VkIG9uIFVzZXIgRHJhZy4gXHJcbiAgICAgICAgdGhpcy54ID0gKHRoaXMuYm91bmRzLmxlZnQgKyB4KSAvIHdpbmRvdy5pbm5lcldpZHRoXHJcblxyXG4gICAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ID0gKC10aGlzLnNpemVzLndpZHRoIC8gMikgKyAodGhpcy5tZXNoLnNjYWxlLnggLyAyKSArICh0aGlzLnggKiB0aGlzLnNpemVzLndpZHRoKSArIHRoaXMuZXh0cmFcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVZKHkgPSAwKSB7XHJcbiAgICAgICAgdGhpcy55ID0gKHRoaXMuYm91bmRzLnRvcCArIHkpIC8gd2luZG93LmlubmVySGVpZ2h0XHJcblxyXG4gICAgICAgIGNvbnN0IGV4dHJhID0gRGV0ZWN0aW9uLmlzUGhvbmUoKSA/IDEwIDogNDBcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPSAodGhpcy5zaXplcy5oZWlnaHQgLyAyKSAtICh0aGlzLm1lc2guc2NhbGUueSAvIDIpIC0gKHRoaXMueSAqIHRoaXMuc2l6ZXMuaGVpZ2h0KVxyXG4gICAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ICs9IE1hdGguY29zKCh0aGlzLm1lc2gucG9zaXRpb24ueCAvIHRoaXMuc2l6ZXMud2lkdGgpICogTWF0aC5QSSAqIDAuMDc1KSAqIGV4dHJhIC0gZXh0cmEgLy8gVHdlYWsgVmFsdWVzIGZvciBtb3JlIE5hdHVyYWwgRmVlbC5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoc2Nyb2xsKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVSb3RhdGlvbigpXHJcbiAgICAgICAgdGhpcy51cGRhdGVTY2FsZSgpXHJcbiAgICAgICAgdGhpcy51cGRhdGVYKHNjcm9sbClcclxuICAgICAgICB0aGlzLnVwZGF0ZVkoMClcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ09NUExFVEUiLCJpbXBvcnQgeyBQbGFuZSwgVHJhbnNmb3JtIH0gZnJvbSBcIm9nbFwiXHJcblxyXG5pbXBvcnQgR1NBUCBmcm9tIFwiZ3NhcFwiXHJcblxyXG5pbXBvcnQgbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCJcclxuLy8gQWJvdXQgd2lsbCBiZSBXcmFwcGVyIGZvciBhbGwgR2FsbGVyaWVzIFxyXG5pbXBvcnQgR2FsbGVyeSBmcm9tIFwiLi9HYWxsZXJ5XCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZ2wsIHNjZW5lLCBzaXplcyB9KSB7XHJcbiAgICAgICAgdGhpcy5nbCA9IGdsXHJcbiAgICAgICAgdGhpcy5zaXplcyA9IHNpemVzXHJcblxyXG4gICAgICAgIHRoaXMuZ3JvdXAgPSBuZXcgVHJhbnNmb3JtKClcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVHZW9tZXRyeSgpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVHYWxsZXJpZXMoKVxyXG5cclxuICAgICAgICB0aGlzLm9uUmVzaXplKHtcclxuICAgICAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLmdyb3VwLnNldFBhcmVudChzY2VuZSlcclxuXHJcbiAgICAgICAgdGhpcy5zaG93KClcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVHZW9tZXRyeSgpIHtcclxuICAgICAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKHRoaXMuZ2wpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlR2FsbGVyaWVzKCkge1xyXG4gICAgICAgIHRoaXMuZ2FsbGVyaWVzRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFib3V0X2dhbGxlcnlcIilcclxuXHJcbiAgICAgICAgdGhpcy5nYWxsZXJpZXMgPSBtYXAodGhpcy5nYWxsZXJpZXNFbGVtZW50cywgKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2FsbGVyeSh7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICAgICAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgICAgICAgICBzaXplczogdGhpcy5zaXplcyxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW5pbWF0aW9uc1xyXG4gICAgICovXHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICBtYXAodGhpcy5nYWxsZXJpZXMsIGdhbGxlcnkgPT4gZ2FsbGVyeS5zaG93KCkpXHJcbiAgICB9XHJcblxyXG4gICAgaGlkZSgpIHtcclxuICAgICAgICBtYXAodGhpcy5nYWxsZXJpZXMsIGdhbGxlcnkgPT4gZ2FsbGVyeS5oaWRlKCkpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudHNcclxuICAgICAqL1xyXG5cclxuICAgIG9uUmVzaXplKGV2ZW50KSB7XHJcbiAgICAgICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCBnYWxsZXJ5ID0+IGdhbGxlcnkub25SZXNpemUoZXZlbnQpKVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hEb3duKGV2ZW50KSB7XHJcbiAgICAgICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCBnYWxsZXJ5ID0+IGdhbGxlcnkub25Ub3VjaERvd24oZXZlbnQpKVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCBnYWxsZXJ5ID0+IGdhbGxlcnkub25Ub3VjaE1vdmUoZXZlbnQpKVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hVcChldmVudCkge1xyXG4gICAgICAgIG1hcCh0aGlzLmdhbGxlcmllcywgZ2FsbGVyeSA9PiBnYWxsZXJ5Lm9uVG91Y2hVcChldmVudCkpXHJcbiAgICB9XHJcblxyXG4gICAgb25XaGVlbCh7IHBpeGVsWCwgcGl4ZWxZIH0pIHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb29wXHJcbiAgICAgKi9cclxuXHJcbiAgICB1cGRhdGUoc2Nyb2xsKSB7XHJcbiAgICAgICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCBnYWxsZXJ5ID0+IGdhbGxlcnkudXBkYXRlKHNjcm9sbCkpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95XHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCBnYWxsZXJ5ID0+IGdhbGxlcnkuZGVzdHJveSgpKVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDT01QTEVURSIsImltcG9ydCBHU0FQIGZyb20gXCJnc2FwXCJcclxuaW1wb3J0IHsgTWVzaCwgUHJvZ3JhbSB9IGZyb20gXCJvZ2xcIlxyXG5cclxuaW1wb3J0IGZyYWdtZW50IGZyb20gXCJzaGFkZXJzL2NvbGxlY3Rpb25zLWZyYWdtZW50Lmdsc2xcIlxyXG5pbXBvcnQgdmVydGV4IGZyb20gXCJzaGFkZXJzL2NvbGxlY3Rpb25zLXZlcnRleC5nbHNsXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZ2VvbWV0cnksIGdsLCBpbmRleCwgc2NlbmUsIHNpemVzIH0pIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5XHJcbiAgICAgICAgdGhpcy5nbCA9IGdsXHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4XHJcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lXHJcbiAgICAgICAgdGhpcy5zaXplcyA9IHNpemVzXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5leHRyYSA9IHtcclxuICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgeTogMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0ge1xyXG4gICAgICAgICAgICBjdXJyZW50OiAwLFxyXG4gICAgICAgICAgICB0YXJnZXQ6IDAsXHJcbiAgICAgICAgICAgIGxlcnA6IDAuMSxcclxuICAgICAgICAgICAgbXVsdGlwbGllcjogMCxcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jcmVhdGVUZXh0dXJlKClcclxuICAgICAgICB0aGlzLmNyZWF0ZVByb2dyYW0oKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlTWVzaCgpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVCb3VuZHMoe1xyXG4gICAgICAgICAgICBzaXplczogdGhpcy5zaXplc1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlVGV4dHVyZSgpIHtcclxuICAgICAgICBjb25zdCBpbWFnZSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbGxlY3Rpb25zX2dhbGxlcnlfbWVkaWFfaW1hZ2VcIilcclxuXHJcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gd2luZG93LlRFWFRVUkVTW2ltYWdlLmdldEF0dHJpYnV0ZShcImRhdGEtc3JjXCIpXVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVByb2dyYW0oKSB7XHJcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcy5nbCwge1xyXG4gICAgICAgICAgICBmcmFnbWVudCxcclxuICAgICAgICAgICAgdmVydGV4LFxyXG4gICAgICAgICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgICAgICAgICAgdUFscGhhOiB7IHZhbHVlOiAwIH0sXHJcbiAgICAgICAgICAgICAgICB0TWFwOiB7IHZhbHVlOiB0aGlzLnRleHR1cmUgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlTWVzaCgpIHtcclxuICAgICAgICB0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XHJcbiAgICAgICAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxyXG4gICAgICAgICAgICBwcm9ncmFtOiB0aGlzLnByb2dyYW0sXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUJvdW5kcyh7IHNpemVzIH0pIHtcclxuICAgICAgICB0aGlzLnNpemVzID0gc2l6ZXNcclxuXHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTY2FsZSgpXHJcbiAgICAgICAgdGhpcy51cGRhdGVYKClcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuaW1hdGlvbnNcclxuICAgICAqL1xyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgR1NBUC5mcm9tVG8odGhpcy5vcGFjaXR5LCB7XHJcbiAgICAgICAgICAgIG11bHRpcGxpZXI6IDBcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIG11bHRpcGxpZXI6IDFcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgR1NBUC50byh0aGlzLm9wYWNpdHksIHtcclxuICAgICAgICAgICAgbXVsdGlwbGllcjogMFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudHNcclxuICAgICAqL1xyXG5cclxuICAgIG9uUmVzaXplKHNpemVzLCBzY3JvbGwpIHtcclxuICAgICAgICB0aGlzLmV4dHJhID0ge1xyXG4gICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICB5OiAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZUJvdW5kcyhzaXplcylcclxuICAgICAgICB0aGlzLnVwZGF0ZVgoc2Nyb2xsICYmIHNjcm9sbC54KVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9vcFxyXG4gICAgICovXHJcblxyXG4gICAgdXBkYXRlU2NhbGUoKSB7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdW5kcy5oZWlnaHQgLyB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5ib3VuZHMud2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aFxyXG5cclxuICAgICAgICB0aGlzLm1lc2guc2NhbGUueCA9IHRoaXMuc2l6ZXMud2lkdGggKiB0aGlzLndpZHRoXHJcbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgPSB0aGlzLnNpemVzLmhlaWdodCAqIHRoaXMuaGVpZ2h0XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlWCh4ID0gMCkgeyBcclxuICAgICAgICB0aGlzLnggPSAodGhpcy5ib3VuZHMubGVmdCArIHgpIC8gd2luZG93LmlubmVyV2lkdGhcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSAtdGhpcy5zaXplcy53aWR0aCAvIDIgKyB0aGlzLm1lc2guc2NhbGUueCAvIDIgKyB0aGlzLnggKiB0aGlzLnNpemVzLndpZHRoICsgdGhpcy5leHRyYS54XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHNjcm9sbCwgaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVgoc2Nyb2xsKVxyXG5cclxuICAgICAgICBjb25zdCBhbXBsaXR1ZGUgPSAwLjEgXHJcbiAgICAgICAgY29uc3QgZnJlcXVlbmN5ID0gMVxyXG5cclxuICAgICAgICB0aGlzLm1lc2gucm90YXRpb24ueiA9IC0wLjAyICogTWF0aC5QSSAqIE1hdGguc2luKHRoaXMuaW5kZXggLyBmcmVxdWVuY3kpXHJcbiAgICAgICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPSBhbXBsaXR1ZGUgKiBNYXRoLnNpbih0aGlzLmluZGV4IC8gZnJlcXVlbmN5KVxyXG5cclxuICAgICAgICB0aGlzLm9wYWNpdHkudGFyZ2V0ID0gaW5kZXggPT09IHRoaXMuaW5kZXggPyAxIDogMC40XHJcbiAgICAgICAgdGhpcy5vcGFjaXR5LmN1cnJlbnQgPSBHU0FQLnV0aWxzLmludGVycG9sYXRlKHRoaXMub3BhY2l0eS5jdXJyZW50LCB0aGlzLm9wYWNpdHkudGFyZ2V0LCB0aGlzLm9wYWNpdHkubGVycClcclxuXHJcbiAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYS52YWx1ZSA9IHRoaXMub3BhY2l0eS5tdWx0aXBsaWVyXHJcbiAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYS52YWx1ZSA9IHRoaXMub3BhY2l0eS5tdWx0aXBsaWVyICogdGhpcy5vcGFjaXR5LmN1cnJlbnRcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ09NUExFVEUiLCJpbXBvcnQgeyBQbGFuZSwgVHJhbnNmb3JtIH0gZnJvbSBcIm9nbFwiXHJcbmltcG9ydCBHU0FQIGZyb20gXCJnc2FwXCJcclxuaW1wb3J0IFByZWZpeCBmcm9tIFwicHJlZml4XCJcclxuXHJcbmltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIlxyXG5cclxuaW1wb3J0IE1lZGlhIGZyb20gXCIuL01lZGlhXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZ2wsIHNjZW5lLCBzaXplcywgdHJhbnNpdGlvbiB9KSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IFwiY29sbGVjdGlvbnNcIlxyXG5cclxuICAgICAgICB0aGlzLmdsID0gZ2xcclxuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmVcclxuICAgICAgICB0aGlzLnNpemVzID0gc2l6ZXNcclxuICAgICAgICB0aGlzLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uXHJcblxyXG4gICAgICAgIHRoaXMudHJhbnNmb3JtUHJlZml4ID0gUHJlZml4KFwidHJhbnNmb3JtXCIpXHJcblxyXG4gICAgICAgIHRoaXMuZ3JvdXAgPSBuZXcgVHJhbnNmb3JtKClcclxuXHJcbiAgICAgICAgdGhpcy5nYWxsZXJ5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29sbGVjdGlvbnNfZ2FsbGVyeVwiKVxyXG4gICAgICAgIHRoaXMuZ2FsbGVyeUVsZW1lbnRXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb2xsZWN0aW9uc19nYWxsZXJ5X3dyYXBwZXJcIilcclxuXHJcbiAgICAgICAgdGhpcy50aXRsZXNFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb2xsZWN0aW9uc190aXRsZXNcIilcclxuXHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uc0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jb2xsZWN0aW9uc19hcnRpY2xlXCIpXHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uc0VsZW1lbnRzQWN0aXZlID0gXCJjb2xsZWN0aW9uc19hcnRpY2xlLS1hY3RpdmVcIlxyXG5cclxuICAgICAgICB0aGlzLm1lZGlhc0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jb2xsZWN0aW9uc19nYWxsZXJ5X21lZGlhXCIpXHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsID0ge1xyXG4gICAgICAgICAgICBjdXJyZW50OiAwLFxyXG4gICAgICAgICAgICBzdGFydDogMCxcclxuICAgICAgICAgICAgdGFyZ2V0OiAwLFxyXG4gICAgICAgICAgICBsZXJwOiAwLjEsXHJcbiAgICAgICAgICAgIHZlbG9jdGl5OiAxXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KClcclxuICAgICAgICB0aGlzLmNyZWF0ZUdhbGxlcnkoKVxyXG5cclxuICAgICAgICB0aGlzLm9uUmVzaXplKHtcclxuICAgICAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLmdyb3VwLnNldFBhcmVudChzY2VuZSlcclxuXHJcbiAgICAgICAgdGhpcy5zaG93KClcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVHZW9tZXRyeSgpIHtcclxuICAgICAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKHRoaXMuZ2wpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlR2FsbGVyeSgpIHtcclxuICAgICAgICB0aGlzLm1lZGlhcyA9IG1hcCh0aGlzLm1lZGlhc0VsZW1lbnRzLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBNZWRpYSh7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICAgICAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgICAgICAgICBzaXplczogdGhpcy5zaXplcyxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBBbmltYXRpb25zXHJcbiAgICAqL1xyXG5cclxuICAgIGFzeW5jIHNob3coKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCB7IHNyYyB9ID0gdGhpcy50cmFuc2l0aW9uLm1lc2gucHJvZ3JhbS51bmlmb3Jtcy50TWFwLnZhbHVlLmltYWdlXHJcbiAgICAgICAgICAgIGNvbnN0IHRleHR1cmUgPSB3aW5kb3cuVEVYVFVSRVNbc3JjXVxyXG4gICAgICAgICAgICBjb25zdCBtZWRpYSA9IHRoaXMubWVkaWFzLmZpbmQobWVkaWEgPT4gbWVkaWEudGV4dHVyZSA9PT0gdGV4dHVyZSlcclxuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsID0gLW1lZGlhLmJvdW5kcy5sZWZ0IC0gbWVkaWEuYm91bmRzLndpZHRoIC8gMiArIHdpbmRvdy5pbm5lcldpZHRoIC8gMlxyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKVxyXG5cclxuICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9uLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHsgeDogMCwgeTogbWVkaWEubWVzaC5wb3NpdGlvbi55LCB6OiAwIH0sXHJcbiAgICAgICAgICAgICAgICByb3RhdGlvbjogbWVkaWEubWVzaC5yb3RhdGlvbixcclxuICAgICAgICAgICAgICAgIHNjYWxlOiBtZWRpYS5tZXNoLnNjYWxlLFxyXG4gICAgICAgICAgICB9LCBfID0+IHtcclxuICAgICAgICAgICAgICAgIG1lZGlhLm9wYWNpdHkubXVsdGlwbGllciA9IDFcclxuXHJcbiAgICAgICAgICAgICAgICBtYXAodGhpcy5tZWRpYXMsIGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZWRpYSAhPT0gaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNob3coKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IHRoaXMuc2Nyb2xsLnRhcmdldCA9IHRoaXMuc2Nyb2xsLnN0YXJ0ID0gdGhpcy5zY3JvbGwubGFzdCA9IHNjcm9sbFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWFwKHRoaXMubWVkaWFzLCBtZWRpYSA9PiBtZWRpYS5zaG93KCkpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBoaWRlKCkge1xyXG4gICAgICAgIG1hcCh0aGlzLm1lZGlhcywgbWVkaWEgPT4gbWVkaWEuaGlkZSgpKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnRzXHJcbiAgICAgKi9cclxuXHJcbiAgICBvblJlc2l6ZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBldmVudC5zaXplc1xyXG5cclxuICAgICAgICB0aGlzLmJvdW5kcyA9IHRoaXMuZ2FsbGVyeUVsZW1lbnRXcmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLmxhc3QgPSB0aGlzLnNjcm9sbC50YXJnZXQgPSAwXHJcblxyXG4gICAgICAgIG1hcCh0aGlzLm1lZGlhcywgbWVkaWEgPT4gbWVkaWEub25SZXNpemUoZXZlbnQsIHRoaXMuc2Nyb2xsKSlcclxuXHJcbiAgICAgICAgdGhpcy5zY3JvbGwubGltaXQgPSB0aGlzLmJvdW5kcy53aWR0aCAtIHRoaXMubWVkaWFzWzBdLmVsZW1lbnQuY2xpZW50V2lkdGhcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoRG93bih7IHgsIHkgfSkge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsLmxhc3QgPSB0aGlzLnNjcm9sbC5jdXJyZW50XHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaE1vdmUoeyB4LCB5IH0pIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHguc3RhcnQgLSB4LmVuZFxyXG5cclxuICAgICAgICB0aGlzLnNjcm9sbC50YXJnZXQgPSB0aGlzLnNjcm9sbC5sYXN0IC0gZGlzdGFuY2VcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoVXAoeyB4LCB5IH0pIHt9XHJcblxyXG4gICAgb25XaGVlbCh7IHBpeGVsWSB9KSB7XHJcbiAgICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ICs9IHBpeGVsWVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZWRcclxuICAgICAqL1xyXG5cclxuICAgIG9uQ2hhbmdlKGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQ29sbGVjdGlvbiA9IHBhcnNlSW50KHRoaXMubWVkaWFzRWxlbWVudHNbdGhpcy5pbmRleF0uZ2V0QXR0cmlidXRlKFwiZGF0YS1pbmRleFwiKSlcclxuXHJcbiAgICAgICAgbWFwKHRoaXMuY29sbGVjdGlvbnNFbGVtZW50cywgKGVsZW1lbnQsIGVsZW1lbnRJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudEluZGV4ID09PSBzZWxlY3RlZENvbGxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmNvbGxlY3Rpb25zRWxlbWVudHNBY3RpdmUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jb2xsZWN0aW9uc0VsZW1lbnRzQWN0aXZlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy50aXRsZXNFbGVtZW50LnN0eWxlW3RoaXMudHJhbnNmb3JtUHJlZml4XSA9IGB0cmFuc2xhdGVZKC0kezI1ICogc2VsZWN0ZWRDb2xsZWN0aW9ufSUpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSByb3RhdGUoLTkwZGVnKWBcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb29wXHJcbiAgICAgKi9cclxuXHJcbiAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gR1NBUC51dGlscy5jbGFtcCgtdGhpcy5zY3JvbGwubGltaXQsIDAsIHRoaXMuc2Nyb2xsLnRhcmdldClcclxuXHJcbiAgICAgICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IEdTQVAudXRpbHMuaW50ZXJwb2xhdGUodGhpcy5zY3JvbGwuY3VycmVudCwgdGhpcy5zY3JvbGwudGFyZ2V0LCB0aGlzLnNjcm9sbC5sZXJwKVxyXG5cclxuICAgICAgICB0aGlzLmdhbGxlcnlFbGVtZW50LnN0eWxlW3RoaXMudHJhbnNmb3JtUHJlZml4XSA9IGB0cmFuc2xhdGVYKCR7dGhpcy5zY3JvbGwuY3VycmVudH1weClgXHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNjcm9sbC5sYXN0IDwgdGhpcy5zY3JvbGwuY3VycmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbC5kaXJlY3Rpb24gPSBcInJpZ2h0XCJcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zY3JvbGwubGFzdCA+IHRoaXMuc2Nyb2xsLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGwuZGlyZWN0aW9uID0gXCJsZWZ0XCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLmxhc3QgPSB0aGlzLnNjcm9sbC5jdXJyZW50XHJcblxyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLmFicyggKHRoaXMuc2Nyb2xsLmN1cnJlbnQgLSB0aGlzLm1lZGlhc1swXS5ib3VuZHMud2lkdGggLyAyKSAvIHRoaXMuc2Nyb2xsLmxpbWl0ICkgKiAodGhpcy5tZWRpYXMubGVuZ3RoIC0gMSkpXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmluZGV4ICE9PSBpbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKGluZGV4KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbWFwKHRoaXMubWVkaWFzLCAobWVkaWEsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIG1lZGlhLnVwZGF0ZSh0aGlzLnNjcm9sbC5jdXJyZW50LCB0aGlzLmluZGV4KVxyXG5cclxuICAgICAgICAgICAgbWVkaWEubWVzaC5yb3RhdGlvbi56ID0gTWF0aC5hYnMoIEdTQVAudXRpbHMubWFwUmFuZ2UoMCwgMSwgLTAuMiwgMC4yLCBpbmRleCAvICh0aGlzLm1lZGlhcy5sZW5ndGggLSAxKSkgKSAtIDAuMVxyXG5cclxuICAgICAgICAgICAgLy8gbWVkaWEubWVzaC5wb3NpdGlvbi55ICs9IE1hdGguY29zKChtZWRpYS5tZXNoLnBvc2l0aW9uLnggLyB0aGlzLnNpemVzLndpZHRoKSAqIE1hdGguUEkgKiAwLjEpICogNDAgLSA0MFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVzdHJveSBcclxuICAgICAqL1xyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLmdyb3VwKVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDT01QTEVURSIsImltcG9ydCBHU0FQIGZyb20gXCJnc2FwXCJcclxuaW1wb3J0IHsgTWVzaCwgUGxhbmUsIFByb2dyYW0gfSBmcm9tIFwib2dsXCJcclxuXHJcbmltcG9ydCBmcmFnbWVudCBmcm9tIFwic2hhZGVycy9wbGFuZS1mcmFnbWVudC5nbHNsXCJcclxuaW1wb3J0IHZlcnRleCBmcm9tIFwic2hhZGVycy9wbGFuZS12ZXJ0ZXguZ2xzbFwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGdsLCBzY2VuZSwgc2l6ZXMsIHRyYW5zaXRpb24gfSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSBcImRldGFpbFwiXHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGV0YWlsX21lZGlhX2ltYWdlXCIpXHJcblxyXG4gICAgICAgIHRoaXMuZ2wgPSBnbFxyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG4gICAgICAgIHRoaXMudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25cclxuXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsKVxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZVRleHR1cmUoKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlUHJvZ3JhbSgpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVNZXNoKClcclxuICAgICAgICB0aGlzLmNyZWF0ZUJvdW5kcyh7XHJcbiAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5zaG93KClcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVUZXh0dXJlKCkge1xyXG4gICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtc3JjXCIpXHJcblxyXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IHdpbmRvdy5URVhUVVJFU1tpbWFnZV1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQcm9ncmFtKCkge1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcclxuICAgICAgICAgICAgZnJhZ21lbnQsXHJcbiAgICAgICAgICAgIHZlcnRleCxcclxuICAgICAgICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICAgICAgICAgIHVBbHBoYTogeyB2YWx1ZTogMCB9LFxyXG4gICAgICAgICAgICAgICAgdE1hcDogeyB2YWx1ZTogdGhpcy50ZXh0dXJlIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZU1lc2goKSB7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbmV3IE1lc2godGhpcy5nbCwge1xyXG4gICAgICAgICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcclxuICAgICAgICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtLFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMubWVzaC5yb3RhdGlvbi56ID0gTWF0aC5QSSAqIDAuMDFcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUJvdW5kcyh7IHNpemVzIH0pIHtcclxuICAgICAgICB0aGlzLnNpemVzID0gc2l6ZXNcclxuXHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTY2FsZSgpXHJcbiAgICAgICAgdGhpcy51cGRhdGVYKClcclxuICAgICAgICB0aGlzLnVwZGF0ZVkoKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW5pbWF0aW9uc1xyXG4gICAgICovXHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICBpZiAodGhpcy50cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbi5hbmltYXRlKHRoaXMubWVzaCwgXyA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLnZhbHVlID0gMVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgR1NBUC50byh0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogMVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoaWRlKCkge1xyXG4gICAgICAgIEdTQVAudG8odGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudHNcclxuICAgICAqL1xyXG5cclxuICAgIG9uUmVzaXplKHNpemVzLCBzY3JvbGwpIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZUJvdW5kcyhzaXplcylcclxuICAgICAgICB0aGlzLnVwZGF0ZVgoKVxyXG4gICAgICAgIHRoaXMudXBkYXRlWSgpXHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaFVwKCkge31cclxuXHJcbiAgICBvblRvdWNoTW92ZSgpIHt9XHJcblxyXG4gICAgb25Ub3VjaERvd24oKSB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9vcFxyXG4gICAgICovXHJcblxyXG4gICAgdXBkYXRlU2NhbGUoKSB7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdW5kcy5oZWlnaHQgLyB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5ib3VuZHMud2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aFxyXG5cclxuICAgICAgICB0aGlzLm1lc2guc2NhbGUueCA9IHRoaXMuc2l6ZXMud2lkdGggKiB0aGlzLndpZHRoXHJcbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgPSB0aGlzLnNpemVzLmhlaWdodCAqIHRoaXMuaGVpZ2h0XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlWCgpIHsgLy8gQmFzZWQgb24gVXNlciBEcmFnLiBcclxuICAgICAgICB0aGlzLnggPSB0aGlzLmJvdW5kcy5sZWZ0IC8gd2luZG93LmlubmVyV2lkdGhcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggPSAtdGhpcy5zaXplcy53aWR0aCAvIDIgKyB0aGlzLm1lc2guc2NhbGUueCAvIDIgKyB0aGlzLnggKiB0aGlzLnNpemVzLndpZHRoXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlWSgpIHtcclxuICAgICAgICB0aGlzLnkgPSB0aGlzLmJvdW5kcy50b3AgLyB3aW5kb3cuaW5uZXJIZWlnaHRcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLnBvc2l0aW9uLnkgPSB0aGlzLnNpemVzLmhlaWdodCAvIDIgLSB0aGlzLm1lc2guc2NhbGUueSAvIDIgLSB0aGlzLnkgKiB0aGlzLnNpemVzLmhlaWdodFxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVgoKVxyXG4gICAgICAgIC8vIHRoaXMudXBkYXRlWSgpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95XHJcbiAgICAgKi9cclxuXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlQ2hpbGQodGhpcy5tZXNoKVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDT01QTEVURSAiLCJpbXBvcnQgR1NBUCBmcm9tIFwiZ3NhcFwiXHJcbmltcG9ydCB7IE1lc2gsIFByb2dyYW0gfSBmcm9tIFwib2dsXCJcclxuXHJcbmltcG9ydCBmcmFnbWVudCBmcm9tIFwic2hhZGVycy9ob21lLWZyYWdtZW50Lmdsc2xcIlxyXG5pbXBvcnQgdmVydGV4IGZyb20gXCJzaGFkZXJzL2hvbWUtdmVydGV4Lmdsc2xcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG4gICAgY29uc3RydWN0b3IgKHsgZWxlbWVudCwgZ2VvbWV0cnksIGdsLCBpbmRleCwgc2NlbmUsIHNpemVzIH0pIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5XHJcbiAgICAgICAgdGhpcy5nbCA9IGdsXHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4IFxyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZXh0cmEgPSB7XHJcbiAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgIHk6IDAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVQcm9ncmFtKClcclxuICAgICAgICB0aGlzLmNyZWF0ZU1lc2goKVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuY3JlYXRlQm91bmRzKHtcclxuICAgICAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcclxuICAgICAgICB9KVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVUZXh0dXJlKCkge1xyXG4gICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5lbGVtZW50XHJcblxyXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IHdpbmRvdy5URVhUVVJFU1tpbWFnZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKV1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQcm9ncmFtKCkge1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcclxuICAgICAgICAgICAgZnJhZ21lbnQsIFxyXG4gICAgICAgICAgICB2ZXJ0ZXgsIFxyXG4gICAgICAgICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgICAgICAgICAgdUFscGhhOiB7IHZhbHVlOiAwIH0sXHJcbiAgICAgICAgICAgICAgICB1U3BlZWQ6IHsgdmFsdWU6IDAgfSxcclxuICAgICAgICAgICAgICAgIHVWaWV3cG9ydFNpemVzOiB7IHZhbHVlOiBbdGhpcy5zaXplcy53aWR0aCwgdGhpcy5zaXplcy5oZWlnaHRdIH0sXHJcbiAgICAgICAgICAgICAgICB0TWFwOiB7IHZhbHVlOiB0aGlzLnRleHR1cmUgfVxyXG4gICAgICAgICAgICB9LCBcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZU1lc2goKSB7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbmV3IE1lc2godGhpcy5nbCwge1xyXG4gICAgICAgICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcclxuICAgICAgICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtLFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMubWVzaC5zZXRQYXJlbnQodGhpcy5zY2VuZSlcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLnJvdGF0aW9uLnogPSBHU0FQLnV0aWxzLnJhbmRvbSgtTWF0aC5QSSAqIDAuMDMsIE1hdGguUEkgKiAwLjAzKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUJvdW5kcyh7IHNpemVzIH0pIHtcclxuICAgICAgICB0aGlzLnNpemVzID0gc2l6ZXMgXHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTY2FsZSgpXHJcbiAgICAgICAgdGhpcy51cGRhdGVYKClcclxuICAgICAgICB0aGlzLnVwZGF0ZVkoKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW5pbWF0aW9uc1xyXG4gICAgICovXHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICBHU0FQLmZyb21Ubyh0aGlzLnByb2dyYW0udW5pZm9ybXMudUFscGhhLCB7XHJcbiAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogMC40XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBoaWRlKCkge1xyXG4gICAgICAgIEdTQVAudG8odGhpcy5wcm9ncmFtLnVuaWZvcm1zLnVBbHBoYSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudHNcclxuICAgICAqL1xyXG5cclxuICAgIG9uUmVzaXplKHNpemVzLCBzY3JvbGwpIHtcclxuICAgICAgICB0aGlzLmV4dHJhID0ge1xyXG4gICAgICAgICAgICB4OiAwLCBcclxuICAgICAgICAgICAgeTogMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVCb3VuZHMoc2l6ZXMpXHJcbiAgICAgICAgdGhpcy51cGRhdGVYKHNjcm9sbCAmJiBzY3JvbGwueClcclxuICAgICAgICB0aGlzLnVwZGF0ZVkoc2Nyb2xsICYmIHNjcm9sbC55KVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIExvb3BcclxuICAgICAqL1xyXG4gICAgXHJcbiAgICB1cGRhdGVTY2FsZSgpIHtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm91bmRzLmhlaWdodCAvIHdpbmRvdy5pbm5lckhlaWdodFxyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmJvdW5kcy53aWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoXHJcblxyXG4gICAgICAgIHRoaXMubWVzaC5zY2FsZS54ID0gdGhpcy5zaXplcy53aWR0aCAqIHRoaXMud2lkdGhcclxuICAgICAgICB0aGlzLm1lc2guc2NhbGUueSA9IHRoaXMuc2l6ZXMuaGVpZ2h0ICogdGhpcy5oZWlnaHRcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlWCh4ID0gMCkgeyAvLyBCYXNlZCBvbiBVc2VyIERyYWcuIFxyXG4gICAgICAgIHRoaXMueCA9ICh0aGlzLmJvdW5kcy5sZWZ0ICsgeCkgLyB3aW5kb3cuaW5uZXJXaWR0aFxyXG5cclxuICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24ueCA9ICgtdGhpcy5zaXplcy53aWR0aCAvIDIpICsgKHRoaXMubWVzaC5zY2FsZS54IC8gMikgKyAodGhpcy54ICogdGhpcy5zaXplcy53aWR0aCkgKyB0aGlzLmV4dHJhLnhcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVZKHkgPSAwKSB7XHJcbiAgICAgICAgdGhpcy55ID0gKHRoaXMuYm91bmRzLnRvcCArIHkpIC8gd2luZG93LmlubmVySGVpZ2h0XHJcblxyXG4gICAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID0gKHRoaXMuc2l6ZXMuaGVpZ2h0IC8gMikgLSAodGhpcy5tZXNoLnNjYWxlLnkgLyAyKSAtICh0aGlzLnkgKiB0aGlzLnNpemVzLmhlaWdodCkgKyB0aGlzLmV4dHJhLnlcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoc2Nyb2xsLCBzcGVlZCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlWChzY3JvbGwueClcclxuICAgICAgICB0aGlzLnVwZGF0ZVkoc2Nyb2xsLnkpXHJcblxyXG4gICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy51U3BlZWQudmFsdWUgPSBzcGVlZFxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDT01QTEVURSIsImltcG9ydCB7IFBsYW5lLCBUcmFuc2Zvcm0gfSBmcm9tIFwib2dsXCJcclxuXHJcbmltcG9ydCBHU0FQIGZyb20gXCJnc2FwXCJcclxuXHJcbmltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIlxyXG5cclxuaW1wb3J0IE1lZGlhIGZyb20gXCIuL01lZGlhXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZ2wsIHNjZW5lLCBzaXplcyB9KSB7XHJcbiAgICAgICAgdGhpcy5nbCA9IGdsXHJcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lXHJcbiAgICAgICAgdGhpcy5zaXplcyA9IHNpemVzXHJcblxyXG4gICAgICAgIHRoaXMuZ3JvdXAgPSBuZXcgVHJhbnNmb3JtKClcclxuXHJcbiAgICAgICAgdGhpcy5nYWxsZXJ5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaG9tZV9nYWxsZXJ5XCIpXHJcbiAgICAgICAgdGhpcy5tZWRpYXNFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaG9tZV9nYWxsZXJ5X21lZGlhX2ltYWdlXCIpXHJcblxyXG4gICAgICAgIHRoaXMueCA9IHtcclxuICAgICAgICAgICAgY3VycmVudDogMCxcclxuICAgICAgICAgICAgdGFyZ2V0OiAwLFxyXG4gICAgICAgICAgICBsZXJwOiAwLjFcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMueSA9IHtcclxuICAgICAgICAgICAgY3VycmVudDogMCxcclxuICAgICAgICAgICAgdGFyZ2V0OiAwLFxyXG4gICAgICAgICAgICBsZXJwOiAwLjFcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsQ3VycmVudCA9IHtcclxuICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgeTogMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zY3JvbGwgPSB7XHJcbiAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgIHk6IDBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3BlZWQgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgICAgICAgIHRhcmdldDogMCxcclxuICAgICAgICAgICAgbGVycDogMC4xXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KClcclxuICAgICAgICB0aGlzLmNyZWF0ZUdhbGxlcnkoKVxyXG5cclxuICAgICAgICB0aGlzLm9uUmVzaXplKHtcclxuICAgICAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLmdyb3VwLnNldFBhcmVudChzY2VuZSlcclxuXHJcbiAgICAgICAgdGhpcy5zaG93KClcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVHZW9tZXRyeSgpIHtcclxuICAgICAgICB0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKHRoaXMuZ2wsIHtcclxuICAgICAgICAgICAgaGVpZ2h0U2VnbWVudHM6IDIwLFxyXG4gICAgICAgICAgICB3aWR0aFNlZ21lbnRzOiAyMFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlR2FsbGVyeSgpIHtcclxuICAgICAgICB0aGlzLm1lZGlhcyA9IG1hcCh0aGlzLm1lZGlhc0VsZW1lbnRzLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBNZWRpYSh7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICAgICAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgICAgICAgICBzaXplczogdGhpcy5zaXplcyxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBBbmltYXRpb25zXHJcbiAgICAqL1xyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgbWFwKHRoaXMubWVkaWFzLCBtZWRpYSA9PiBtZWRpYS5zaG93KCkpXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgbWFwKHRoaXMubWVkaWFzLCBtZWRpYSA9PiBtZWRpYS5oaWRlKCkpXHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnRzXHJcbiAgICAgKi9cclxuXHJcbiAgICBvblJlc2l6ZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuZ2FsbGVyeUJvdW5kcyA9IHRoaXMuZ2FsbGVyeUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuXHJcbiAgICAgICAgdGhpcy5zaXplcyA9IGV2ZW50LnNpemVzXHJcblxyXG4gICAgICAgIHRoaXMuZ2FsbGVyeVNpemVzID0ge1xyXG4gICAgICAgICAgICB3aWR0aDogKHRoaXMuZ2FsbGVyeUJvdW5kcy53aWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIHRoaXMuc2l6ZXMud2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogKHRoaXMuZ2FsbGVyeUJvdW5kcy5oZWlnaHQgLyB3aW5kb3cuaW5uZXJIZWlnaHQpICogdGhpcy5zaXplcy5oZWlnaHQsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNjcm9sbC54ID0gdGhpcy54LnRhcmdldCA9IDBcclxuICAgICAgICB0aGlzLnNjcm9sbC55ID0gdGhpcy55LnRhcmdldCA9IDBcclxuXHJcbiAgICAgICAgbWFwKHRoaXMubWVkaWFzLCBtZWRpYSA9PiBtZWRpYS5vblJlc2l6ZShldmVudCwgdGhpcy5zY3JvbGwpKVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hEb3duKHsgeCwgeSB9KSB7XHJcbiAgICAgICAgdGhpcy5zcGVlZC50YXJnZXQgPSAxXHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsQ3VycmVudC54ID0gdGhpcy5zY3JvbGwueFxyXG4gICAgICAgIHRoaXMuc2Nyb2xsQ3VycmVudC55ID0gdGhpcy5zY3JvbGwueVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hNb3ZlKHsgeCwgeSB9KSB7XHJcbiAgICAgICAgY29uc3QgeERpc3RhbmNlID0geC5zdGFydCAtIHguZW5kXHJcbiAgICAgICAgY29uc3QgeURpc3RhbmNlID0geS5zdGFydCAtIHkuZW5kXHJcblxyXG4gICAgICAgIHRoaXMueC50YXJnZXQgPSB0aGlzLnNjcm9sbEN1cnJlbnQueCAtIHhEaXN0YW5jZVxyXG4gICAgICAgIHRoaXMueS50YXJnZXQgPSB0aGlzLnNjcm9sbEN1cnJlbnQueSAtIHlEaXN0YW5jZVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hVcCh7IHgsIHkgfSkge1xyXG4gICAgICAgIHRoaXMuc3BlZWQudGFyZ2V0ID0gMFxyXG4gICAgfVxyXG5cclxuICAgIG9uV2hlZWwoeyBwaXhlbFgsIHBpeGVsWSB9KSB7XHJcbiAgICAgICAgdGhpcy54LnRhcmdldCArPSBwaXhlbFhcclxuICAgICAgICB0aGlzLnkudGFyZ2V0ICs9IHBpeGVsWVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9vcFxyXG4gICAgICovXHJcblxyXG4gICAgdXBkYXRlKCkge1xyXG4gICAgICAgIHRoaXMuc3BlZWQuY3VycmVudCA9IEdTQVAudXRpbHMuaW50ZXJwb2xhdGUodGhpcy5zcGVlZC5jdXJyZW50LCB0aGlzLnNwZWVkLnRhcmdldCwgdGhpcy5zcGVlZC5sZXJwKVxyXG5cclxuICAgICAgICB0aGlzLnguY3VycmVudCA9IEdTQVAudXRpbHMuaW50ZXJwb2xhdGUodGhpcy54LmN1cnJlbnQsIHRoaXMueC50YXJnZXQsIHRoaXMueC5sZXJwKVxyXG4gICAgICAgIHRoaXMueS5jdXJyZW50ID0gR1NBUC51dGlscy5pbnRlcnBvbGF0ZSh0aGlzLnkuY3VycmVudCwgdGhpcy55LnRhcmdldCwgdGhpcy55LmxlcnApXHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNjcm9sbC54IDwgdGhpcy54LmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy54LmRpcmVjdGlvbiA9IFwicmlnaHRcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnNjcm9sbC54ID4gdGhpcy54LmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy54LmRpcmVjdGlvbiA9IFwibGVmdFwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zY3JvbGwueSA8IHRoaXMueS5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMueS5kaXJlY3Rpb24gPSBcInRvcFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc2Nyb2xsLnkgPiB0aGlzLnkuY3VycmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnkuZGlyZWN0aW9uID0gXCJib3R0b21cIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zY3JvbGwueCA9IHRoaXMueC5jdXJyZW50XHJcbiAgICAgICAgdGhpcy5zY3JvbGwueSA9IHRoaXMueS5jdXJyZW50XHJcblxyXG4gICAgICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhLCBpbmRleCkgPT4geyAvLyBIb21lIHBhZ2UgaW1hZ2VzXHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSB0aGlzLnNpemVzLndpZHRoICogMC42XHJcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlWCA9IG1lZGlhLm1lc2guc2NhbGUueCAvIDJcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnguZGlyZWN0aW9uID09PSBcImxlZnRcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IG1lZGlhLm1lc2gucG9zaXRpb24ueCArIHNjYWxlWFxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh4IDwgLW9mZnNldFgpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5leHRyYS54ICs9IHRoaXMuZ2FsbGVyeVNpemVzLndpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWEubWVzaC5yb3RhdGlvbi56ID0gR1NBUC51dGlscy5yYW5kb20oLU1hdGguUEkgKiAwLjAzLCBNYXRoLlBJICogMC4wMylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy54LmRpcmVjdGlvbiA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gbWVkaWEubWVzaC5wb3NpdGlvbi54IC0gc2NhbGVYXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHggPiBvZmZzZXRYKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWEuZXh0cmEueCAtPSB0aGlzLmdhbGxlcnlTaXplcy53aWR0aFxyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLm1lc2gucm90YXRpb24ueiA9IEdTQVAudXRpbHMucmFuZG9tKC1NYXRoLlBJICogMC4wMywgTWF0aC5QSSAqIDAuMDMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFkgPSB0aGlzLnNpemVzLmhlaWdodCAqIDAuNlxyXG4gICAgICAgICAgICBjb25zdCBzY2FsZVkgPSBtZWRpYS5tZXNoLnNjYWxlLnkgLyAyXHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy55LmRpcmVjdGlvbiA9PT0gXCJ0b3BcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IG1lZGlhLm1lc2gucG9zaXRpb24ueSArIHNjYWxlWVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh5IDwgLW9mZnNldFkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5leHRyYS55ICs9IHRoaXMuZ2FsbGVyeVNpemVzLmhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLm1lc2gucm90YXRpb24ueiA9IEdTQVAudXRpbHMucmFuZG9tKC1NYXRoLlBJICogMC4wMywgTWF0aC5QSSAqIDAuMDMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy55LmRpcmVjdGlvbiA9PT0gXCJib3R0b21cIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IG1lZGlhLm1lc2gucG9zaXRpb24ueSAtIHNjYWxlWVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh5ID4gb2Zmc2V0WSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLmV4dHJhLnkgLT0gdGhpcy5nYWxsZXJ5U2l6ZXMuaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWEubWVzaC5yb3RhdGlvbi56ID0gR1NBUC51dGlscy5yYW5kb20oLU1hdGguUEkgKiAwLjAzLCBNYXRoLlBJICogMC4wMylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWVkaWEudXBkYXRlKHRoaXMuc2Nyb2xsLCB0aGlzLnNwZWVkLmN1cnJlbnQpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3kgXHJcbiAgICAgKi9cclxuXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlQ2hpbGQodGhpcy5ncm91cClcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ09NUExFVEUgLS0gVE8gRklYIENBU0NBREUgUkVTSVpFIFdJTkRPVyIsImltcG9ydCBHU0FQIGZyb20gXCJnc2FwXCJcclxuaW1wb3J0IHsgTWVzaCwgUGxhbmUsIFByb2dyYW0gfSBmcm9tIFwib2dsXCJcclxuXHJcbmltcG9ydCBmcmFnbWVudCBmcm9tIFwic2hhZGVycy9wbGFuZS1mcmFnbWVudC5nbHNsXCJcclxuaW1wb3J0IHZlcnRleCBmcm9tIFwic2hhZGVycy9wbGFuZS12ZXJ0ZXguZ2xzbFwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGNvbGxlY3Rpb25zLCBnbCwgc2NlbmUsIHNpemVzLCB1cmwgfSkge1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbnMgPSBjb2xsZWN0aW9uc1xyXG4gICAgICAgIHRoaXMuZ2wgPSBnbFxyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG4gICAgICAgIHRoaXMudXJsID0gdXJsXHJcblxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgUGxhbmUodGhpcy5nbClcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQcm9ncmFtKHRleHR1cmUpIHtcclxuICAgICAgICB0aGlzLnByb2dyYW0gPSBuZXcgUHJvZ3JhbSh0aGlzLmdsLCB7XHJcbiAgICAgICAgICAgIGZyYWdtZW50LFxyXG4gICAgICAgICAgICB2ZXJ0ZXgsXHJcbiAgICAgICAgICAgIHVuaWZvcm1zOiB7XHJcbiAgICAgICAgICAgICAgICB1QWxwaGE6IHsgdmFsdWU6IDEgfSxcclxuICAgICAgICAgICAgICAgIHRNYXA6IHsgdmFsdWU6IHRleHR1cmUgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlTWVzaChtZXNoKSB7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbmV3IE1lc2godGhpcy5nbCwge1xyXG4gICAgICAgICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcclxuICAgICAgICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtLFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMubWVzaC5zY2FsZS54ID0gbWVzaC5zY2FsZS54XHJcbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgPSBtZXNoLnNjYWxlLnlcclxuICAgICAgICB0aGlzLm1lc2guc2NhbGUueiA9IG1lc2guc2NhbGUuelxyXG5cclxuICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24ueCA9IG1lc2gucG9zaXRpb24ueFxyXG4gICAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID0gbWVzaC5wb3NpdGlvbi55XHJcbiAgICAgICAgdGhpcy5tZXNoLnBvc2l0aW9uLnogPSBtZXNoLnBvc2l0aW9uLnogKyAwLjAxXHJcblxyXG5cclxuICAgICAgICB0aGlzLm1lc2gucm90YXRpb24ueCA9IG1lc2gucm90YXRpb24ueFxyXG4gICAgICAgIHRoaXMubWVzaC5yb3RhdGlvbi55ID0gbWVzaC5yb3RhdGlvbi55XHJcbiAgICAgICAgdGhpcy5tZXNoLnJvdGF0aW9uLnogPSBtZXNoLnJvdGF0aW9uLnpcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRWxlbWVudFxyXG4gICAgICovXHJcbiAgICBzZXRFbGVtZW50KGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoZWxlbWVudC5pZCA9PT0gXCJjb2xsZWN0aW9uc1wiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaW5kZXgsIG1lZGlhcyB9ID0gZWxlbWVudFxyXG4gICAgICAgICAgICBjb25zdCBtZWRpYSA9IG1lZGlhc1tpbmRleF1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUHJvZ3JhbShtZWRpYS50ZXh0dXJlKVxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZU1lc2gobWVkaWEubWVzaClcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbiA9IFwiZGV0YWlsXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUHJvZ3JhbShlbGVtZW50LnRleHR1cmUpXHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTWVzaChlbGVtZW50Lm1lc2gpXHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb24gPSBcImNvbGxlY3Rpb25zXCJcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbmltYXRpb25zXHJcbiAgICAgKi9cclxuXHJcbiAgICBhbmltYXRlKGVsZW1lbnQsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICBjb25zdCB0aW1lbGluZSA9IEdTQVAudGltZWxpbmUoe1xyXG4gICAgICAgICAgICBvbkNvbXBsZXRlXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGltZWxpbmUudG8odGhpcy5tZXNoLnNjYWxlLCB7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxLjUsXHJcbiAgICAgICAgICAgIGVhc2U6IFwiZXhwby5pbk91dFwiLFxyXG4gICAgICAgICAgICB4OiBlbGVtZW50LnNjYWxlLngsXHJcbiAgICAgICAgICAgIHk6IGVsZW1lbnQuc2NhbGUueSxcclxuICAgICAgICAgICAgejogZWxlbWVudC5zY2FsZS56XHJcblxyXG4gICAgICAgIH0sIDApXHJcblxyXG4gICAgICAgIHRpbWVsaW5lLnRvKHRoaXMubWVzaC5wb3NpdGlvbiwge1xyXG4gICAgICAgICAgICBkdXJhdGlvbjogMS41LFxyXG4gICAgICAgICAgICBlYXNlOiBcImV4cG8uaW5PdXRcIixcclxuICAgICAgICAgICAgeDogZWxlbWVudC5wb3NpdGlvbi54LFxyXG4gICAgICAgICAgICB5OiBlbGVtZW50LnBvc2l0aW9uLnksXHJcbiAgICAgICAgICAgIHo6IGVsZW1lbnQucG9zaXRpb24uelxyXG5cclxuICAgICAgICB9LCAwKVxyXG5cclxuICAgICAgICB0aW1lbGluZS50byh0aGlzLm1lc2gucm90YXRpb24sIHtcclxuICAgICAgICAgICAgZHVyYXRpb246IDEuNSxcclxuICAgICAgICAgICAgZWFzZTogXCJleHBvLmluT3V0XCIsXHJcbiAgICAgICAgICAgIHg6IGVsZW1lbnQucm90YXRpb24ueCxcclxuICAgICAgICAgICAgeTogZWxlbWVudC5yb3RhdGlvbi55LFxyXG4gICAgICAgICAgICB6OiBlbGVtZW50LnJvdGF0aW9uLnpcclxuXHJcbiAgICAgICAgfSwgMClcclxuXHJcbiAgICAgICAgdGltZWxpbmUuY2FsbChfID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLm1lc2gpXHJcbiAgICAgICAgfSwgbnVsbCwgXCIrPS4xNVwiKVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRpbWVsaW5lLmNhbGwoXyA9PiB7XHJcbiAgICAgICAgICAgIG9uQ29tcGxldGUoKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENPTVBMRVRFIiwiaW1wb3J0IEdTQVAgZnJvbSBcImdzYXBcIlxyXG5pbXBvcnQgeyBDYW1lcmEsIFJlbmRlcmVyLCBUcmFuc2Zvcm0gfSBmcm9tIFwib2dsXCJcclxuXHJcbmltcG9ydCBBYm91dCBmcm9tIFwiLi9BYm91dFwiXHJcbmltcG9ydCBDb2xsZWN0aW9ucyBmcm9tIFwiLi9Db2xsZWN0aW9uc1wiXHJcbmltcG9ydCBEZXRhaWwgZnJvbSBcIi4vRGV0YWlsXCJcclxuaW1wb3J0IEhvbWUgZnJvbSBcIi4vSG9tZVwiXHJcblxyXG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tIFwiLi9UcmFuc2l0aW9uXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhcyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IHRlbXBsYXRlIH0pIHtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGVcclxuXHJcbiAgICAgICAgdGhpcy54ID0ge1xyXG4gICAgICAgICAgICBzdGFydDogMCxcclxuICAgICAgICAgICAgZGlzdGFuY2U6IDAsXHJcbiAgICAgICAgICAgIGVuZDogMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy55ID0ge1xyXG4gICAgICAgICAgICBzdGFydDogMCxcclxuICAgICAgICAgICAgZGlzdGFuY2U6IDAsXHJcbiAgICAgICAgICAgIGVuZDogMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVDYW1lcmEoKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlU2NlbmUoKVxyXG5cclxuICAgICAgICB0aGlzLm9uUmVzaXplKClcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUmVuZGVyZXIoKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcih7XHJcbiAgICAgICAgICAgIGFscGhhOiB0cnVlLFxyXG4gICAgICAgICAgICBhbnRpYWxpYXM6IHRydWUsXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5nbCA9IHRoaXMucmVuZGVyZXIuZ2wgLy8gRXhwb3NlZCB0byBrZWVwIFJlbmRlcmluZyB0aGluZ3NcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmdsLmNhbnZhcylcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVDYW1lcmEoKSB7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKHRoaXMuZ2wpXHJcbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueiA9IDVcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVTY2VuZSgpIHtcclxuICAgICAgICB0aGlzLnNjZW5lID0gbmV3IFRyYW5zZm9ybSgpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIb21lXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUhvbWUoKSB7XHJcbiAgICAgICAgdGhpcy5ob21lID0gbmV3IEhvbWUoe1xyXG4gICAgICAgICAgICBnbDogdGhpcy5nbCxcclxuICAgICAgICAgICAgc2NlbmU6IHRoaXMuc2NlbmUsXHJcbiAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiB0aGlzLnRyYW5zaXRpb25cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3lIb21lKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5ob21lKSByZXR1cm5cclxuXHJcbiAgICAgICAgdGhpcy5ob21lLmRlc3Ryb3koKVxyXG4gICAgICAgIHRoaXMuaG9tZSA9IG51bGxcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFib3V0XHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUFib3V0KCkge1xyXG4gICAgICAgIHRoaXMuYWJvdXQgPSBuZXcgQWJvdXQoe1xyXG4gICAgICAgICAgICBnbDogdGhpcy5nbCxcclxuICAgICAgICAgICAgc2NlbmU6IHRoaXMuc2NlbmUsXHJcbiAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzLFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveUFib3V0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5hYm91dCkgcmV0dXJuXHJcblxyXG4gICAgICAgIHRoaXMuYWJvdXQuZGVzdHJveSgpXHJcbiAgICAgICAgdGhpcy5hYm91dCA9IG51bGxcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbGxlY3Rpb25zXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUNvbGxlY3Rpb25zKCkge1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbnMgPSBuZXcgQ29sbGVjdGlvbnMoe1xyXG4gICAgICAgICAgICBnbDogdGhpcy5nbCxcclxuICAgICAgICAgICAgc2NlbmU6IHRoaXMuc2NlbmUsXHJcbiAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiB0aGlzLnRyYW5zaXRpb25cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3lDb2xsZWN0aW9ucygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY29sbGVjdGlvbnMpIHJldHVyblxyXG5cclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25zLmRlc3Ryb3koKVxyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbnMgPSBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRhaWxcclxuICAgICAqL1xyXG4gICAgY3JlYXRlRGV0YWlsKCkge1xyXG4gICAgICAgIHRoaXMuZGV0YWlsID0gbmV3IERldGFpbCh7XHJcbiAgICAgICAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICAgICAgICBzY2VuZTogdGhpcy5zY2VuZSxcclxuICAgICAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb246IHRoaXMudHJhbnNpdGlvblxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveURldGFpbCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGV0YWlsKSByZXR1cm5cclxuXHJcbiAgICAgICAgdGhpcy5kZXRhaWwuZGVzdHJveSgpXHJcbiAgICAgICAgdGhpcy5kZXRhaWwgPSBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudHNcclxuICAgICAqL1xyXG4gICAgb25QcmVsb2FkZWQoKSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZUVuZCh0aGlzLnRlbXBsYXRlKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBvbkNoYW5nZVN0YXJ0KHRlbXBsYXRlLCB1cmwpIHtcclxuICAgICAgICBpZiAodGhpcy5ob21lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9tZS5oaWRlKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnMuaGlkZSgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmRldGFpbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRldGFpbC5oaWRlKClcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuYWJvdXQpIHtcclxuICAgICAgICAgICAgdGhpcy5hYm91dC5oaWRlKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaXNGcm9tQ29sbGVjdGlvbnNUb0RldGFpbCA9IHRoaXMudGVtcGxhdGUgPT09IFwiY29sbGVjdGlvbnNcIiAmJiB1cmwuaW5kZXhPZihcImRldGFpbFwiKSA+IC0xXHJcbiAgICAgICAgdGhpcy5pc0Zyb21EZXRhaWxUb0NvbGxlY3Rpb25zID0gdGhpcy50ZW1wbGF0ZSA9PT0gXCJkZXRhaWxcIiAmJiB1cmwuaW5kZXhPZihcImNvbGxlY3Rpb25zXCIpID4gLTFcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNGcm9tQ29sbGVjdGlvbnNUb0RldGFpbCB8fCB0aGlzLmlzRnJvbURldGFpbFRvQ29sbGVjdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9uID0gbmV3IFRyYW5zaXRpb24oe1xyXG4gICAgICAgICAgICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgICAgICAgICAgICBzY2VuZTogdGhpcy5zY2VuZSxcclxuICAgICAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzLFxyXG4gICAgICAgICAgICAgICAgdXJsXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb24uc2V0RWxlbWVudCh0aGlzLmNvbGxlY3Rpb25zIHx8IHRoaXMuZGV0YWlsKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gSGFyZCBSZWFjdCBPYmplY3RpdmU6IE5vdCBhYmxlIHRvIGltcGxtZW5ldCB0aGUgdGl0bGUgZnJvbSBvbmUgc3BlY2lmaWMgY29tcG9uZW50IG91dHNpZGUgb2YgaXQgbWFrZXMgUmVhY3QgYmFkXHJcbiAgICBvbkNoYW5nZUVuZCh0ZW1wbGF0ZSkge1xyXG4gICAgICAgIGlmICh0ZW1wbGF0ZSA9PT0gXCJob21lXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVIb21lKClcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveUhvbWUoKVxyXG4gICAgICAgIH1cclxuIFxyXG4gICAgICAgIGlmICh0ZW1wbGF0ZSA9PT0gXCJhYm91dFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQWJvdXQoKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmFib3V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveUFib3V0KClcclxuICAgICAgICB9XHJcbiBcclxuICAgICAgICBpZiAodGVtcGxhdGUgPT09IFwiZGV0YWlsXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVEZXRhaWwoKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmRldGFpbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lEZXRhaWwoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRlbXBsYXRlID09PSBcImNvbGxlY3Rpb25zXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb2xsZWN0aW9ucygpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY29sbGVjdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXN0cm95Q29sbGVjdGlvbnMoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlXHJcbiAgICB9XHJcblxyXG4gICAgb25SZXNpemUoKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpXHJcblxyXG4gICAgICAgIHRoaXMuY2FtZXJhLnBlcnNwZWN0aXZlKHtcclxuICAgICAgICAgICAgYXNwZWN0OiB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNvbnN0IGZvdiA9IHRoaXMuY2FtZXJhLmZvdiAqIChNYXRoLlBJIC8gMTgwKVxyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IDIgKiBNYXRoLnRhbihmb3YgLyAyKSAqIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnpcclxuICAgICAgICBjb25zdCB3aWR0aCA9IGhlaWdodCAqIHRoaXMuY2FtZXJhLmFzcGVjdFxyXG5cclxuICAgICAgICB0aGlzLnNpemVzID0ge1xyXG4gICAgICAgICAgICBoZWlnaHQsXHJcbiAgICAgICAgICAgIHdpZHRoXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB2YWx1ZXMgPSB7XHJcbiAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5hYm91dCkge1xyXG4gICAgICAgICAgICB0aGlzLmFib3V0Lm9uUmVzaXplKHZhbHVlcylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnMub25SZXNpemUodmFsdWVzKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGV0YWlsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0YWlsLm9uUmVzaXplKHZhbHVlcylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmhvbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5ob21lLm9uUmVzaXplKHZhbHVlcylcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaERvd24oZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmlzRG93biA9IHRydWVcclxuXHJcbiAgICAgICAgdGhpcy54LnN0YXJ0ID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCA6IGV2ZW50LmNsaWVudFhcclxuICAgICAgICB0aGlzLnkuc3RhcnQgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQuY2xpZW50WVxyXG5cclxuICAgICAgICBjb25zdCB2YWx1ZXMgPSB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMueCxcclxuICAgICAgICAgICAgeTogdGhpcy55LFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYWJvdXQpIHtcclxuICAgICAgICAgICAgdGhpcy5hYm91dC5vblRvdWNoRG93bih2YWx1ZXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jb2xsZWN0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25zLm9uVG91Y2hEb3duKHZhbHVlcylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRldGFpbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRldGFpbC5vblRvdWNoRG93bih2YWx1ZXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5ob21lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9tZS5vblRvdWNoRG93bih2YWx1ZXMpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRG93bikgcmV0dXJuXHJcblxyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIDogZXZlbnQuY2xpZW50WFxyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQuY2xpZW50WVxyXG5cclxuICAgICAgICB0aGlzLnguZW5kID0geFxyXG4gICAgICAgIHRoaXMueS5lbmQgPSB5XHJcblxyXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHtcclxuICAgICAgICAgICAgeDogdGhpcy54LFxyXG4gICAgICAgICAgICB5OiB0aGlzLnksXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5hYm91dCkge1xyXG4gICAgICAgICAgICB0aGlzLmFib3V0Lm9uVG91Y2hNb3ZlKHZhbHVlcylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnMub25Ub3VjaE1vdmUodmFsdWVzKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGV0YWlsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0YWlsLm9uVG91Y2hNb3ZlKHZhbHVlcylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmhvbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5ob21lLm9uVG91Y2hNb3ZlKHZhbHVlcylcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaFVwKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5pc0Rvd24gPSBmYWxzZVxyXG5cclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYIDogZXZlbnQuY2xpZW50WFxyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyA/IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgOiBldmVudC5jbGllbnRZXHJcblxyXG4gICAgICAgIHRoaXMueC5lbmQgPSB4XHJcbiAgICAgICAgdGhpcy55LmVuZCA9IHlcclxuXHJcbiAgICAgICAgY29uc3QgdmFsdWVzID0ge1xyXG4gICAgICAgICAgICB4OiB0aGlzLngsXHJcbiAgICAgICAgICAgIHk6IHRoaXMueSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmFib3V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWJvdXQub25Ub3VjaFVwKHZhbHVlcylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnMub25Ub3VjaFVwKHZhbHVlcylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRldGFpbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRldGFpbC5vblRvdWNoVXAodmFsdWVzKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaG9tZSkge1xyXG4gICAgICAgICAgICB0aGlzLmhvbWUub25Ub3VjaFVwKHZhbHVlcylcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25XaGVlbChldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmhvbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5ob21lLm9uV2hlZWwoZXZlbnQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jb2xsZWN0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25zLm9uV2hlZWwoZXZlbnQpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBMb29wXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZShzY3JvbGwpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYWJvdXQpIHtcclxuICAgICAgICAgICAgdGhpcy5hYm91dC51cGRhdGUoc2Nyb2xsKSAvLyBUaGUgT25seSBwYWdlIHRoYXQgaGFzIHNjcm9sbGluZyBzY3JvbGwgYmFycy5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbGxlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnMudXBkYXRlKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRldGFpbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRldGFpbC51cGRhdGUoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaG9tZSkge1xyXG4gICAgICAgICAgICB0aGlzLmhvbWUudXBkYXRlKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHtcclxuICAgICAgICAgICAgY2FtZXJhOiB0aGlzLmNhbWVyYSxcclxuICAgICAgICAgICAgc2NlbmU6IHRoaXMuc2NlbmVcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDT01QTEVURSIsImltcG9ydCBHU0FQIGZyb20gXCJnc2FwXCJcclxuXHJcbmltcG9ydCBDb21wb25lbnQgZnJvbSBcImNsYXNzZXMvQ29tcG9uZW50XCJcclxuXHJcbmltcG9ydCB7IENPTE9SX0JSSUdIVF9HUkFZLCBDT0xPUl9RVUFSVEVSX1NQQU5JU0hfV0hJVEUgfSBmcm9tIFwidXRpbHMvY29sb3JzXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmlnYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoeyB0ZW1wbGF0ZSB9KSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBlbGVtZW50OiBcIi5uYXZpZ2F0aW9uXCIsXHJcbiAgICAgICAgICAgIGVsZW1lbnRzOiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtczogXCIubmF2aWdhdGlvbl9saXN0X2l0ZW1cIixcclxuICAgICAgICAgICAgICAgIGxpbmtzOiBcIi5uYXZpZ2F0aW9uX2xpc3RfbGlua1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHRlbXBsYXRlKVxyXG4gICAgfVxyXG5cclxuICAgIG9uQ2hhbmdlKHRlbXBsYXRlKSB7XHJcbiAgICAgICAgaWYgKHRlbXBsYXRlID09PSBcImFib3V0XCIpIHtcclxuICAgICAgICAgICAgR1NBUC50byh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiBDT0xPUl9CUklHSFRfR1JBWSxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLjVcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIEdTQVAudG8odGhpcy5lbGVtZW50cy5pdGVtc1swXSwge1xyXG4gICAgICAgICAgICAgICAgYXV0b0FscGhhOiAxLFxyXG4gICAgICAgICAgICAgICAgZGVsYXk6IDAuNzUsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC43NVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgR1NBUC50byh0aGlzLmVsZW1lbnRzLml0ZW1zWzFdLCB7XHJcbiAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDAsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC43NVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHsgXHJcbiAgICAgICAgICAgIEdTQVAudG8odGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogQ09MT1JfUVVBUlRFUl9TUEFOSVNIX1dISVRFLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDEuNVxyXG4gICAgICAgICAgICB9KSBcclxuXHJcbiAgICAgICAgICAgIEdTQVAudG8odGhpcy5lbGVtZW50cy5pdGVtc1swXSwge1xyXG4gICAgICAgICAgICAgICAgYXV0b0FscGhhOiAwLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDAuNzVcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIEdTQVAudG8odGhpcy5lbGVtZW50cy5pdGVtc1sxXSwge1xyXG4gICAgICAgICAgICAgICAgYXV0b0FscGhhOiAxLFxyXG4gICAgICAgICAgICAgICAgZGVsYXk6IDAuNzUsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC43NVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8gQ09NUExFVEUgIiwiaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gXCJvZ2xcIlxyXG5cclxuaW1wb3J0IEdTQVAgZnJvbSBcImdzYXBcIjtcclxuXHJcbmltcG9ydCBDb21wb25lbnQgZnJvbSBcImNsYXNzZXMvQ29tcG9uZW50XCI7XHJcblxyXG5pbXBvcnQgeyBzcGxpdCB9IGZyb20gXCJ1dGlscy90ZXh0XCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZWxvYWRlciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGNhbnZhcyB9KSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBlbGVtZW50OiBcIi5wcmVsb2FkZXJcIixcclxuICAgICAgICAgICAgZWxlbWVudHM6IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIi5wcmVsb2FkZXJfdGV4dFwiLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyOiBcIi5wcmVsb2FkZXJfbnVtYmVyXCIsXHJcbiAgICAgICAgICAgICAgICBudW1iZXJUZXh0OiBcIi5wcmVsb2FkZXJfbnVtYmVyX3RleHRcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzXHJcblxyXG4gICAgICAgIHdpbmRvdy5URVhUVVJFUyA9IHt9XHJcblxyXG4gICAgICAgIHNwbGl0KHtcclxuICAgICAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50cy50aXRsZSxcclxuICAgICAgICAgICAgZXhwcmVzc2lvbjogXCI8YnI+XCJcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBzcGxpdCh7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudHMudGl0bGUsXHJcbiAgICAgICAgICAgIGV4cHJlc3Npb246IFwiPGJyPlwiXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5lbGVtZW50cy50aXRsZVNwYW5zID0gdGhpcy5lbGVtZW50cy50aXRsZS5xdWVyeVNlbGVjdG9yQWxsKFwic3BhbiBzcGFuXCIpXHJcblxyXG4gICAgICAgIHRoaXMubGVuZ3RoID0gMFxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZUxvYWRlcigpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlTG9hZGVyKCkge1xyXG4gICAgICAgIHdpbmRvdy5BU1NFVFMuZm9yRWFjaChpbWFnZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSh0aGlzLmNhbnZhcy5nbCwge1xyXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVNaXBtYXBzOiBmYWxzZSAvLyBQcmV2ZW50cyBTYWZhcmkgYnJlYWthZ2UuXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBjb25zdCBtZWRpYSA9IG5ldyB3aW5kb3cuSW1hZ2UoKVxyXG5cclxuICAgICAgICAgICAgbWVkaWEuY3Jvc3NPcmlnaW4gPSBcImFub255bW91c1wiXHJcbiAgICAgICAgICAgIG1lZGlhLnNyYyA9IGltYWdlXHJcblxyXG4gICAgICAgICAgICBtZWRpYS5vbmxvYWQgPSBfID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHR1cmUuaW1hZ2UgPSBtZWRpYVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMub25Bc3NldExvYWRlZCgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHdpbmRvdy5URVhUVVJFU1tpbWFnZV0gPSB0ZXh0dXJlXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBvbkFzc2V0TG9hZGVkKGltYWdlKSB7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggKz0gMVxyXG5cclxuICAgICAgICBjb25zdCBwZXJjZW50ID0gdGhpcy5sZW5ndGggLyB3aW5kb3cuQVNTRVRTLmxlbmd0aFxyXG5cclxuICAgICAgICB0aGlzLmVsZW1lbnRzLm51bWJlclRleHQuaW5uZXJIVE1MID0gYCR7TWF0aC5yb3VuZChwZXJjZW50ICogMTAwKX0lYFxyXG5cclxuICAgICAgICBpZiAocGVyY2VudCA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLm9uTG9hZGVkKClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25Mb2FkZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyBcclxuICAgICAgICAgICAgdGhpcy5lbWl0KFwiY29tcGxldGVkXCIpXHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQgPSBHU0FQLnRpbWVsaW5lKHtcclxuICAgICAgICAgICAgICAgIGRlbGF5OiAxXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQudG8odGhpcy5lbGVtZW50cy50aXRsZVNwYW5zLCB7XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMS41LFxyXG4gICAgICAgICAgICAgICAgZWFzZTogXCJleHBvLm91dFwiLFxyXG4gICAgICAgICAgICAgICAgc3RhZ2dlcjogMC4xLFxyXG4gICAgICAgICAgICAgICAgeTogXCIxNTAlXCIsXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQudG8odGhpcy5lbGVtZW50cy5udW1iZXJUZXh0LCB7XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMS41LFxyXG4gICAgICAgICAgICAgICAgZWFzZTogXCJleHBvLm91dFwiLFxyXG4gICAgICAgICAgICAgICAgc3RhZ2dlcjogMC4xLFxyXG4gICAgICAgICAgICAgICAgeTogXCIxMDAlXCIsXHJcbiAgICAgICAgICAgIH0sIFwiLT0xLjRcIilcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZU91dC50byh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgICAgIGF1dG9BbHBoYTogMCxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLjVcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZU91dC5jYWxsKF8gPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDT01QTEVURSIsImltcG9ydCBOb3JtYWxpemVXaGVlbCBmcm9tIFwibm9ybWFsaXplLXdoZWVsXCJcclxuXHJcbmltcG9ydCBlYWNoIGZyb20gXCJsb2Rhc2gvZWFjaFwiXHJcblxyXG5pbXBvcnQgQ2FudmFzIGZyb20gXCJjb21wb25lbnRzL0NhbnZhc1wiXHJcblxyXG5pbXBvcnQgTmF2aWdhdGlvbiBmcm9tIFwiY29tcG9uZW50cy9OYXZpZ2F0aW9uXCJcclxuaW1wb3J0IFByZWxvYWRlciBmcm9tIFwiY29tcG9uZW50cy9QcmVsb2FkZXJcIlxyXG5cclxuaW1wb3J0IEFib3V0IGZyb20gXCJwYWdlcy9BYm91dFwiXHJcbmltcG9ydCBDb2xsZWN0aW9ucyBmcm9tIFwicGFnZXMvQ29sbGVjdGlvbnNcIlxyXG5pbXBvcnQgSG9tZSBmcm9tIFwicGFnZXMvSG9tZVwiXHJcbmltcG9ydCBEZXRhaWwgZnJvbSBcInBhZ2VzL0RldGFpbFwiXHJcblxyXG5jbGFzcyBBcHAge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVDb250ZW50KClcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVDYW52YXMoKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlUHJlbG9hZGVyKClcclxuICAgICAgICB0aGlzLmNyZWF0ZU5hdmlnYXRpb24oKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlUGFnZXMoKVxyXG5cclxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKClcclxuICAgICAgICB0aGlzLmFkZExpbmtMaXN0ZW5lcnMoKVxyXG5cclxuICAgICAgICB0aGlzLm9uUmVzaXplKClcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGUoKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZU5hdmlnYXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uID0gbmV3IE5hdmlnYXRpb24oe1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUHJlbG9hZGVyKCkge1xyXG4gICAgICAgIHRoaXMucHJlbG9hZGVyID0gbmV3IFByZWxvYWRlcih7XHJcbiAgICAgICAgICAgIGNhbnZhczogdGhpcy5jYW52YXNcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLnByZWxvYWRlci5vbmNlKFwiY29tcGxldGVkXCIsIHRoaXMub25QcmVsb2FkZWQuYmluZCh0aGlzKSlcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVDYW52YXMoKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKHtcclxuICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNvbnRlbnQoKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb250ZW50XCIpIC8vIFNlbGVjdHMgdGhlICdjb250ZW50JyBkaXYgZWxlbWVudC5cclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5jb250ZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdGVtcGxhdGVcIilcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQYWdlcygpIHtcclxuICAgICAgICB0aGlzLnBhZ2VzID0ge1xyXG4gICAgICAgICAgICBhYm91dDogbmV3IEFib3V0KCksXHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25zOiBuZXcgQ29sbGVjdGlvbnMoKSxcclxuICAgICAgICAgICAgaG9tZTogbmV3IEhvbWUoKSxcclxuICAgICAgICAgICAgZGV0YWlsOiBuZXcgRGV0YWlsKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGFnZSA9IHRoaXMucGFnZXNbdGhpcy50ZW1wbGF0ZV1cclxuICAgICAgICB0aGlzLnBhZ2UuY3JlYXRlKClcclxuICAgIH1cclxuXHJcbiAgICAvLyBFdmVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgb25QcmVsb2FkZWQoKSB7XHJcbiAgICAgICAgdGhpcy5vblJlc2l6ZSgpXHJcblxyXG4gICAgICAgIHRoaXMuY2FudmFzLm9uUHJlbG9hZGVkKClcclxuXHJcbiAgICAgICAgdGhpcy5wYWdlLnNob3coKVxyXG4gICAgfVxyXG5cclxuICAgIG9uUG9wU3RhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZSh7XHJcbiAgICAgICAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLFxyXG4gICAgICAgICAgICBwdXNoOiB0cnVlLCAvLyBmYWxzZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25DaGFuZ2UoeyB1cmwsIHB1c2ggPSB0cnVlIH0pIHtcclxuICAgICAgICB0aGlzLmNhbnZhcy5vbkNoYW5nZVN0YXJ0KHRoaXMudGVtcGxhdGUsIHVybClcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5wYWdlLmhpZGUoKVxyXG5cclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgd2luZG93LmZldGNoKHVybClcclxuXHJcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlcXVlc3QudGV4dCgpXHJcbiAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuXHJcbiAgICAgICAgICAgIGlmIChwdXNoKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sIFwiXCIsIHVybClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWxcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRpdkNvbnRlbnQgPSBkaXYucXVlcnlTZWxlY3RvcihcIi5jb250ZW50XCIpXHJcblxyXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlID0gZGl2Q29udGVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRlbXBsYXRlXCIpXHJcblxyXG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRpb24ub25DaGFuZ2UodGhpcy50ZW1wbGF0ZSlcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRlbXBsYXRlXCIsIHRoaXMudGVtcGxhdGUpXHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5pbm5lckhUTUwgPSBkaXZDb250ZW50LmlubmVySFRNTFxyXG5cclxuICAgICAgICAgICAgdGhpcy5jYW52YXMub25DaGFuZ2VFbmQodGhpcy50ZW1wbGF0ZSlcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFnZSA9IHRoaXMucGFnZXNbdGhpcy50ZW1wbGF0ZV1cclxuICAgICAgICAgICAgdGhpcy5wYWdlLmNyZWF0ZSgpXHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uUmVzaXplKClcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFnZS5zaG93KClcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWRkTGlua0xpc3RlbmVycygpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGByZXNwb25zZSBzdGF0dXM6ICR7cmVxdWVzdC5zdGF0dXN9YClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25SZXNpemUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2Uub25SZXNpemUpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlLm9uUmVzaXplKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoXyA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vblJlc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMub25SZXNpemUoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoRG93bihldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vblRvdWNoRG93bikge1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5vblRvdWNoRG93bihldmVudClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaE1vdmUoZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMub25Ub3VjaE1vdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMub25Ub3VjaE1vdmUoZXZlbnQpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hVcChldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vblRvdWNoVXApIHtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMub25Ub3VjaFVwKGV2ZW50KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbldoZWVsKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFdoZWVsID0gTm9ybWFsaXplV2hlZWwoZXZlbnQpXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vbldoZWVsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLm9uV2hlZWwobm9ybWFsaXplZFdoZWVsKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2Uub25XaGVlbCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2Uub25XaGVlbChub3JtYWxpemVkV2hlZWwpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9vcCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqL1xyXG5cclxuICAgIHVwZGF0ZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2UudXBkYXRlKSB7IC8vIFBhZ2UgaXMgdXBkYXRlZCBmaXJzdCBzbyBDYW52YXMgZ2V0cyBjb3JyZWN0IFkgUG9zaXRpb25cclxuICAgICAgICAgICAgdGhpcy5wYWdlLnVwZGF0ZSgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMudXBkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLnVwZGF0ZSh0aGlzLnBhZ2Uuc2Nyb2xsKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5mcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUuYmluZCh0aGlzKSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBMaXN0ZW5lcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCB0aGlzLm9uUG9wU3RhdGUuYmluZCh0aGlzKSlcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNld2hlZWxcIiwgdGhpcy5vbldoZWVsLmJpbmQodGhpcykpXHJcblxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMub25Ub3VjaERvd24uYmluZCh0aGlzKSlcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm9uVG91Y2hNb3ZlLmJpbmQodGhpcykpXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25Ub3VjaFVwLmJpbmQodGhpcykpXHJcblxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLm9uVG91Y2hEb3duLmJpbmQodGhpcykpXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5vblRvdWNoTW92ZS5iaW5kKHRoaXMpKVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcy5vblRvdWNoVXAuYmluZCh0aGlzKSlcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpKVxyXG4gICAgfVxyXG5cclxuICAgIGFkZExpbmtMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgY29uc3QgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYVwiKVxyXG5cclxuICAgICAgICBlYWNoKGxpbmtzLCBsaW5rID0+IHtcclxuICAgICAgICAgICAgbGluay5vbmNsaWNrID0gZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgaHJlZiB9ID0gbGlua1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFVybCA9IHdpbmRvdy5sb2NhdGlvblxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChsaW5rLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpIHx8IGhyZWYgPT0gY3VycmVudFVybCkgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIHRydWUpXHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEhSRUY6ICR7aHJlZn0gICBDdXJyZW50IFVSTDogJHtjdXJyZW50VXJsfWApXHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSh7IHVybDogaHJlZiB9KS5maW5hbGx5KCgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIilcclxuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbm5ldyBBcHAoKVxyXG5cclxuLy8gQ09NUExFVEUiLCJpbXBvcnQgUGFnZSBmcm9tIFwiY2xhc3Nlcy9QYWdlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBYm91dCBleHRlbmRzIFBhZ2UgeyBcclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGlkOiBcImFib3V0XCIsXHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IFwiLmFib3V0XCIsXHJcbiAgICAgICAgICAgIGVsZW1lbnRzOiB7IFxyXG4gICAgICAgICAgICAgICAgd3JhcHBlcjogXCIuYWJvdXRfd3JhcHBlclwiLFxyXG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZpZ2F0aW9uXCIpLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiLmFib3V0X3RpdGxlXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDT01QTEVURSAiLCJpbXBvcnQgUGFnZSBmcm9tIFwiY2xhc3Nlcy9QYWdlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2xsZWN0aW9ucyBleHRlbmRzIFBhZ2UgeyBcclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICBzdXBlcih7IGlkOiBcImNvbGxlY3Rpb25zXCIsIGVsZW1lbnQ6IFwiLmNvbGxlY3Rpb25zXCIgfSlcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ09NUExFVEUgIiwiaW1wb3J0IEdTQVAgZnJvbSBcImdzYXBcIlxyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCJjbGFzc2VzL0J1dHRvblwiO1xyXG5pbXBvcnQgUGFnZSBmcm9tIFwiY2xhc3Nlcy9QYWdlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZXRhaWwgZXh0ZW5kcyBQYWdlIHsgXHJcbiAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBpZDogXCJkZXRhaWxcIixcclxuICAgICAgICAgICAgZWxlbWVudDogXCIuZGV0YWlsXCIsXHJcbiAgICAgICAgICAgIGVsZW1lbnRzOiB7XHJcbiAgICAgICAgICAgICAgICBidXR0b246IFwiLmRldGFpbF9idXR0b25cIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNyZWF0ZSgpIHsgXHJcbiAgICAgICAgc3VwZXIuY3JlYXRlKClcclxuXHJcbiAgICAgICAgdGhpcy5saW5rID0gbmV3IEJ1dHRvbih7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudHMuYnV0dG9uXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIGNvbnN0IHRpbWVsaW5lID0gR1NBUC50aW1lbGluZSh7XHJcbiAgICAgICAgICAgIGRlbGF5OiAxXHJcbiAgICAgICAgfSkgXHJcblxyXG4gICAgICAgIHRpbWVsaW5lLmZyb21Ubyh0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgYXV0b0FscGhhOiAwXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBhdXRvQWxwaGE6IDFcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBzdXBlci5zaG93KHRpbWVsaW5lKVxyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpXHJcblxyXG4gICAgICAgIHRoaXMubGluay5yZW1vdmVFdmVudExpc3RlbmVycygpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENPTVBMRVRFIiwiaW1wb3J0IEJ1dHRvbiBmcm9tIFwiY2xhc3Nlcy9CdXR0b25cIjtcclxuaW1wb3J0IFBhZ2UgZnJvbSBcImNsYXNzZXMvUGFnZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSG9tZSBleHRlbmRzIFBhZ2UgeyBcclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGlkOiBcImhvbWVcIixcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IFwiLmhvbWVcIixcclxuICAgICAgICAgICAgZWxlbWVudHM6IHtcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRpb246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2aWdhdGlvblwiKSxcclxuICAgICAgICAgICAgICAgIGxpbms6IFwiLmhvbWVfbGlua1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZSgpIHsgXHJcbiAgICAgICAgc3VwZXIuY3JlYXRlKClcclxuXHJcbiAgICAgICAgdGhpcy5saW5rID0gbmV3IEJ1dHRvbih7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudHMubGlua1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICBzdXBlci5kZXN0cm95KClcclxuXHJcbiAgICAgICAgdGhpcy5saW5rLnJlbW92ZUV2ZW50TGlzdGVuZXJzKClcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ09NUExFVEUgIiwiZXhwb3J0IGNvbnN0IENPTE9SX1FVQVJURVJfU1BBTklTSF9XSElURSA9IFwiI0Y5RjFFN1wiXHJcbmV4cG9ydCBjb25zdCBDT0xPUl9CUklHSFRfR1JBWSA9IFwiICMzMDMxNDNcIlxyXG5cclxuIiwiaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3BsaXQgKHsgZWxlbWVudCwgZXhwcmVzc2lvbiA9ICcgJywgYXBwZW5kID0gdHJ1ZSB9KSB7XHJcbiAgY29uc3Qgd29yZHMgPSBzcGxpdFRleHQoZWxlbWVudC5pbm5lckhUTUwudG9TdHJpbmcoKS50cmltKCksIGV4cHJlc3Npb24pXHJcblxyXG4gIGxldCBpbm5lckhUTUwgPSAnJ1xyXG5cclxuICBlYWNoKHdvcmRzLCBsaW5lID0+IHtcclxuICAgIGlmIChsaW5lLmluZGV4T2YoJzxicj4nKSA+IC0xKSB7XHJcbiAgICAgIGNvbnN0IGxpbmVzID0gbGluZS5zcGxpdCgnPGJyPicpXHJcblxyXG4gICAgICBlYWNoKGxpbmVzLCAobGluZSwgaW5kZXgpID0+IHtcclxuICAgICAgICBpbm5lckhUTUwgKz0gKGluZGV4ID4gMCkgPyAnPGJyPicgKyBwYXJzZUxpbmUobGluZSkgOiBwYXJzZUxpbmUobGluZSlcclxuICAgICAgfSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlubmVySFRNTCArPSBwYXJzZUxpbmUobGluZSlcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBlbGVtZW50LmlubmVySFRNTCA9IGlubmVySFRNTFxyXG5cclxuICBjb25zdCBzcGFucyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbicpXHJcblxyXG4gIGlmIChhcHBlbmQpIHtcclxuICAgIGVhY2goc3BhbnMsIHNwYW4gPT4ge1xyXG4gICAgICBjb25zdCBpc1NpbmdsZUxldHRlciA9IHNwYW4udGV4dENvbnRlbnQubGVuZ3RoID09PSAxXHJcbiAgICAgIGNvbnN0IGlzTm90RW1wdHkgPSBzcGFuLmlubmVySFRNTC50cmltKCkgIT09ICcnXHJcbiAgICAgIGNvbnN0IGlzTm90QW5kQ2hhcmFjdGVyID0gc3Bhbi50ZXh0Q29udGVudCAhPT0gJyYnXHJcbiAgICAgIGNvbnN0IGlzTm90RGFzaENoYXJhY3RlciA9IHNwYW4udGV4dENvbnRlbnQgIT09ICctJ1xyXG5cclxuICAgICAgaWYgKGlzU2luZ2xlTGV0dGVyICYmIGlzTm90RW1wdHkgJiYgaXNOb3RBbmRDaGFyYWN0ZXIgJiYgaXNOb3REYXNoQ2hhcmFjdGVyKSB7XHJcbiAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSBgJHtzcGFuLnRleHRDb250ZW50fSZuYnNwO2BcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHJldHVybiBzcGFuc1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlIChzcGFucykge1xyXG4gIGNvbnN0IGxpbmVzID0gW11cclxuICBsZXQgd29yZHMgPSBbXVxyXG5cclxuICBsZXQgcG9zaXRpb24gPSBzcGFuc1swXS5vZmZzZXRUb3BcclxuXHJcbiAgZWFjaChzcGFucywgKHNwYW4sIGluZGV4KSA9PiB7XHJcbiAgICBpZiAoc3Bhbi5vZmZzZXRUb3AgPT09IHBvc2l0aW9uKSB7XHJcbiAgICAgIHdvcmRzLnB1c2goc3BhbilcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3Bhbi5vZmZzZXRUb3AgIT09IHBvc2l0aW9uKSB7XHJcbiAgICAgIGxpbmVzLnB1c2god29yZHMpXHJcblxyXG4gICAgICB3b3JkcyA9IFtdXHJcbiAgICAgIHdvcmRzLnB1c2goc3BhbilcclxuXHJcbiAgICAgIHBvc2l0aW9uID0gc3Bhbi5vZmZzZXRUb3BcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5kZXggKyAxID09PSBzcGFucy5sZW5ndGgpIHtcclxuICAgICAgbGluZXMucHVzaCh3b3JkcylcclxuICAgIH1cclxuICB9KVxyXG5cclxuICByZXR1cm4gbGluZXNcclxufVxyXG5cclxuZnVuY3Rpb24gc3BsaXRUZXh0ICh0ZXh0LCBleHByZXNzaW9uKSB7XHJcbiAgY29uc3Qgc3BsaXRzID0gdGV4dC5zcGxpdCgnPGJyPicpXHJcblxyXG4gIGxldCB3b3JkcyA9IFtdXHJcblxyXG4gIGVhY2goc3BsaXRzLCAoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgd29yZHMucHVzaCgnPGJyPicpXHJcbiAgICB9XHJcblxyXG4gICAgd29yZHMgPSB3b3Jkcy5jb25jYXQoaXRlbS5zcGxpdChleHByZXNzaW9uKSlcclxuXHJcbiAgICBsZXQgaXNMaW5rID0gZmFsc2VcclxuICAgIGxldCBsaW5rID0gJydcclxuXHJcbiAgICBjb25zdCBpbm5lckhUTUwgPSBbXVxyXG5cclxuICAgIGVhY2god29yZHMsIHdvcmQgPT4ge1xyXG4gICAgICBpZiAoIWlzTGluayAmJiAod29yZC5pbmNsdWRlcygnPGEnKSB8fCB3b3JkLmluY2x1ZGVzKCc8c3Ryb25nJykpKSB7XHJcbiAgICAgICAgbGluayA9ICcnXHJcblxyXG4gICAgICAgIGlzTGluayA9IHRydWVcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzTGluaykge1xyXG4gICAgICAgIGxpbmsgKz0gYCAke3dvcmR9YFxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNMaW5rICYmICh3b3JkLmluY2x1ZGVzKCcvYT4nKSB8fCB3b3JkLmluY2x1ZGVzKCcvc3Ryb25nPicpKSkge1xyXG4gICAgICAgIGlubmVySFRNTC5wdXNoKGxpbmspXHJcblxyXG4gICAgICAgIGxpbmsgPSAnJ1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWlzTGluayAmJiBsaW5rID09PSAnJykge1xyXG4gICAgICAgIGlubmVySFRNTC5wdXNoKHdvcmQpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoJy9hPicpIHx8IHdvcmQuaW5jbHVkZXMoJy9zdHJvbmc+JykpKSB7XHJcbiAgICAgICAgaXNMaW5rID0gZmFsc2VcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICB3b3JkcyA9IGlubmVySFRNTFxyXG4gIH0pXHJcblxyXG4gIHJldHVybiB3b3Jkc1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUxpbmUgKGxpbmUpIHtcclxuICBsaW5lID0gbGluZS50cmltKClcclxuXHJcbiAgaWYgKGxpbmUgPT09ICcnIHx8IGxpbmUgPT09ICcgJykge1xyXG4gICAgcmV0dXJuIGxpbmVcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIChsaW5lID09PSAnPGJyPicpID8gJzxicj4nIDogYDxzcGFuPiR7bGluZX08L3NwYW4+YCArICgobGluZS5sZW5ndGggPiAxKSA/ICcgJyA6ICcnKVxyXG4gIH1cclxufVxyXG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhbnNpSFRNTFxuXG4vLyBSZWZlcmVuY2UgdG8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9hbnNpLXJlZ2V4XG52YXIgX3JlZ0FOU0kgPSAvKD86KD86XFx1MDAxYlxcWyl8XFx1MDA5YikoPzooPzpbMC05XXsxLDN9KT8oPzooPzo7WzAtOV17MCwzfSkqKT9bQS1NfGYtbV0pfFxcdTAwMWJbQS1NXS9cblxudmFyIF9kZWZDb2xvcnMgPSB7XG4gIHJlc2V0OiBbJ2ZmZicsICcwMDAnXSwgLy8gW0ZPUkVHUk9VRF9DT0xPUiwgQkFDS0dST1VORF9DT0xPUl1cbiAgYmxhY2s6ICcwMDAnLFxuICByZWQ6ICdmZjAwMDAnLFxuICBncmVlbjogJzIwOTgwNScsXG4gIHllbGxvdzogJ2U4YmYwMycsXG4gIGJsdWU6ICcwMDAwZmYnLFxuICBtYWdlbnRhOiAnZmYwMGZmJyxcbiAgY3lhbjogJzAwZmZlZScsXG4gIGxpZ2h0Z3JleTogJ2YwZjBmMCcsXG4gIGRhcmtncmV5OiAnODg4J1xufVxudmFyIF9zdHlsZXMgPSB7XG4gIDMwOiAnYmxhY2snLFxuICAzMTogJ3JlZCcsXG4gIDMyOiAnZ3JlZW4nLFxuICAzMzogJ3llbGxvdycsXG4gIDM0OiAnYmx1ZScsXG4gIDM1OiAnbWFnZW50YScsXG4gIDM2OiAnY3lhbicsXG4gIDM3OiAnbGlnaHRncmV5J1xufVxudmFyIF9vcGVuVGFncyA9IHtcbiAgJzEnOiAnZm9udC13ZWlnaHQ6Ym9sZCcsIC8vIGJvbGRcbiAgJzInOiAnb3BhY2l0eTowLjUnLCAvLyBkaW1cbiAgJzMnOiAnPGk+JywgLy8gaXRhbGljXG4gICc0JzogJzx1PicsIC8vIHVuZGVyc2NvcmVcbiAgJzgnOiAnZGlzcGxheTpub25lJywgLy8gaGlkZGVuXG4gICc5JzogJzxkZWw+JyAvLyBkZWxldGVcbn1cbnZhciBfY2xvc2VUYWdzID0ge1xuICAnMjMnOiAnPC9pPicsIC8vIHJlc2V0IGl0YWxpY1xuICAnMjQnOiAnPC91PicsIC8vIHJlc2V0IHVuZGVyc2NvcmVcbiAgJzI5JzogJzwvZGVsPicgLy8gcmVzZXQgZGVsZXRlXG59XG5cbjtbMCwgMjEsIDIyLCAyNywgMjgsIDM5LCA0OV0uZm9yRWFjaChmdW5jdGlvbiAobikge1xuICBfY2xvc2VUYWdzW25dID0gJzwvc3Bhbj4nXG59KVxuXG4vKipcbiAqIENvbnZlcnRzIHRleHQgd2l0aCBBTlNJIGNvbG9yIGNvZGVzIHRvIEhUTUwgbWFya3VwLlxuICogQHBhcmFtIHtTdHJpbmd9IHRleHRcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBhbnNpSFRNTCAodGV4dCkge1xuICAvLyBSZXR1cm5zIHRoZSB0ZXh0IGlmIHRoZSBzdHJpbmcgaGFzIG5vIEFOU0kgZXNjYXBlIGNvZGUuXG4gIGlmICghX3JlZ0FOU0kudGVzdCh0ZXh0KSkge1xuICAgIHJldHVybiB0ZXh0XG4gIH1cblxuICAvLyBDYWNoZSBvcGVuZWQgc2VxdWVuY2UuXG4gIHZhciBhbnNpQ29kZXMgPSBbXVxuICAvLyBSZXBsYWNlIHdpdGggbWFya3VwLlxuICB2YXIgcmV0ID0gdGV4dC5yZXBsYWNlKC9cXDAzM1xcWyhcXGQrKW0vZywgZnVuY3Rpb24gKG1hdGNoLCBzZXEpIHtcbiAgICB2YXIgb3QgPSBfb3BlblRhZ3Nbc2VxXVxuICAgIGlmIChvdCkge1xuICAgICAgLy8gSWYgY3VycmVudCBzZXF1ZW5jZSBoYXMgYmVlbiBvcGVuZWQsIGNsb3NlIGl0LlxuICAgICAgaWYgKCEhfmFuc2lDb2Rlcy5pbmRleE9mKHNlcSkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1leHRyYS1ib29sZWFuLWNhc3RcbiAgICAgICAgYW5zaUNvZGVzLnBvcCgpXG4gICAgICAgIHJldHVybiAnPC9zcGFuPidcbiAgICAgIH1cbiAgICAgIC8vIE9wZW4gdGFnLlxuICAgICAgYW5zaUNvZGVzLnB1c2goc2VxKVxuICAgICAgcmV0dXJuIG90WzBdID09PSAnPCcgPyBvdCA6ICc8c3BhbiBzdHlsZT1cIicgKyBvdCArICc7XCI+J1xuICAgIH1cblxuICAgIHZhciBjdCA9IF9jbG9zZVRhZ3Nbc2VxXVxuICAgIGlmIChjdCkge1xuICAgICAgLy8gUG9wIHNlcXVlbmNlXG4gICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgIHJldHVybiBjdFxuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfSlcblxuICAvLyBNYWtlIHN1cmUgdGFncyBhcmUgY2xvc2VkLlxuICB2YXIgbCA9IGFuc2lDb2Rlcy5sZW5ndGhcbiAgOyhsID4gMCkgJiYgKHJldCArPSBBcnJheShsICsgMSkuam9pbignPC9zcGFuPicpKVxuXG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBDdXN0b21pemUgY29sb3JzLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbG9ycyByZWZlcmVuY2UgdG8gX2RlZkNvbG9yc1xuICovXG5hbnNpSFRNTC5zZXRDb2xvcnMgPSBmdW5jdGlvbiAoY29sb3JzKSB7XG4gIGlmICh0eXBlb2YgY29sb3JzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignYGNvbG9yc2AgcGFyYW1ldGVyIG11c3QgYmUgYW4gT2JqZWN0LicpXG4gIH1cblxuICB2YXIgX2ZpbmFsQ29sb3JzID0ge31cbiAgZm9yICh2YXIga2V5IGluIF9kZWZDb2xvcnMpIHtcbiAgICB2YXIgaGV4ID0gY29sb3JzLmhhc093blByb3BlcnR5KGtleSkgPyBjb2xvcnNba2V5XSA6IG51bGxcbiAgICBpZiAoIWhleCkge1xuICAgICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBfZGVmQ29sb3JzW2tleV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmICgncmVzZXQnID09PSBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2YgaGV4ID09PSAnc3RyaW5nJykge1xuICAgICAgICBoZXggPSBbaGV4XVxuICAgICAgfVxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGhleCkgfHwgaGV4Lmxlbmd0aCA9PT0gMCB8fCBoZXguc29tZShmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGggIT09ICdzdHJpbmcnXG4gICAgICB9KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBvZiBgJyArIGtleSArICdgIHByb3BlcnR5IG11c3QgYmUgYW4gQXJyYXkgYW5kIGVhY2ggaXRlbSBjb3VsZCBvbmx5IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICAgIH1cbiAgICAgIHZhciBkZWZIZXhDb2xvciA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgaWYgKCFoZXhbMF0pIHtcbiAgICAgICAgaGV4WzBdID0gZGVmSGV4Q29sb3JbMF1cbiAgICAgIH1cbiAgICAgIGlmIChoZXgubGVuZ3RoID09PSAxIHx8ICFoZXhbMV0pIHtcbiAgICAgICAgaGV4ID0gW2hleFswXV1cbiAgICAgICAgaGV4LnB1c2goZGVmSGV4Q29sb3JbMV0pXG4gICAgICB9XG5cbiAgICAgIGhleCA9IGhleC5zbGljZSgwLCAyKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhIGhleCBzdHJpbmcsIGUuZy46IEZGMDAwMCcpXG4gICAgfVxuICAgIF9maW5hbENvbG9yc1trZXldID0gaGV4XG4gIH1cbiAgX3NldFRhZ3MoX2ZpbmFsQ29sb3JzKVxufVxuXG4vKipcbiAqIFJlc2V0IGNvbG9ycy5cbiAqL1xuYW5zaUhUTUwucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIF9zZXRUYWdzKF9kZWZDb2xvcnMpXG59XG5cbi8qKlxuICogRXhwb3NlIHRhZ3MsIGluY2x1ZGluZyBvcGVuIGFuZCBjbG9zZS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmFuc2lIVE1MLnRhZ3MgPSB7fVxuXG5pZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhbnNpSFRNTC50YWdzLCAnb3BlbicsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9vcGVuVGFncyB9XG4gIH0pXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhbnNpSFRNTC50YWdzLCAnY2xvc2UnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfY2xvc2VUYWdzIH1cbiAgfSlcbn0gZWxzZSB7XG4gIGFuc2lIVE1MLnRhZ3Mub3BlbiA9IF9vcGVuVGFnc1xuICBhbnNpSFRNTC50YWdzLmNsb3NlID0gX2Nsb3NlVGFnc1xufVxuXG5mdW5jdGlvbiBfc2V0VGFncyAoY29sb3JzKSB7XG4gIC8vIHJlc2V0IGFsbFxuICBfb3BlblRhZ3NbJzAnXSA9ICdmb250LXdlaWdodDpub3JtYWw7b3BhY2l0eToxO2NvbG9yOiMnICsgY29sb3JzLnJlc2V0WzBdICsgJztiYWNrZ3JvdW5kOiMnICsgY29sb3JzLnJlc2V0WzFdXG4gIC8vIGludmVyc2VcbiAgX29wZW5UYWdzWyc3J10gPSAnY29sb3I6IycgKyBjb2xvcnMucmVzZXRbMV0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMF1cbiAgLy8gZGFyayBncmV5XG4gIF9vcGVuVGFnc1snOTAnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5kYXJrZ3JleVxuXG4gIGZvciAodmFyIGNvZGUgaW4gX3N0eWxlcykge1xuICAgIHZhciBjb2xvciA9IF9zdHlsZXNbY29kZV1cbiAgICB2YXIgb3JpQ29sb3IgPSBjb2xvcnNbY29sb3JdIHx8ICcwMDAnXG4gICAgX29wZW5UYWdzW2NvZGVdID0gJ2NvbG9yOiMnICsgb3JpQ29sb3JcbiAgICBjb2RlID0gcGFyc2VJbnQoY29kZSlcbiAgICBfb3BlblRhZ3NbKGNvZGUgKyAxMCkudG9TdHJpbmcoKV0gPSAnYmFja2dyb3VuZDojJyArIG9yaUNvbG9yXG4gIH1cbn1cblxuYW5zaUhUTUwucmVzZXQoKVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbiIsIi8qIVxuICogQ1NTUGx1Z2luIDMuMTIuNVxuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDA4LTIwMjQsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGdzYXAsIF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBnZXRVbml0LCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfY2hlY2tQbHVnaW4sIF9yZXBsYWNlUmFuZG9tLCBfcGx1Z2lucywgR1NDYWNoZSwgUHJvcFR3ZWVuLCBfY29uZmlnLCBfdGlja2VyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3BhcnNlUmVsYXRpdmUsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtIC8vZm9yIHRoZSBjb21tZW50ZWQtb3V0IGNsYXNzTmFtZSBmZWF0dXJlLlxufSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcblxudmFyIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWxlbWVudCxcbiAgICBfcGx1Z2luSW5pdHRlZCxcbiAgICBfdGVtcERpdixcbiAgICBfdGVtcERpdlN0eWxlcixcbiAgICBfcmVjZW50U2V0dGVyUGx1Z2luLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcHMgPSB7fSxcbiAgICBfUkFEMkRFRyA9IDE4MCAvIE1hdGguUEksXG4gICAgX0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuICAgIF9hdGFuMiA9IE1hdGguYXRhbjIsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgX2hvcml6b250YWxFeHAgPSAvKGxlZnR8cmlnaHR8d2lkdGh8bWFyZ2lufHBhZGRpbmd8eCkvaSxcbiAgICBfY29tcGxleEV4cCA9IC9bXFxzLFxcKF1cXFMvLFxuICAgIF9wcm9wZXJ0eUFsaWFzZXMgPSB7XG4gIGF1dG9BbHBoYTogXCJvcGFjaXR5LHZpc2liaWxpdHlcIixcbiAgc2NhbGU6IFwic2NhbGVYLHNjYWxlWVwiLFxuICBhbHBoYTogXCJvcGFjaXR5XCJcbn0sXG4gICAgX3JlbmRlckNTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BXaXRoRW5kID0gZnVuY3Rpb24gX3JlbmRlclByb3BXaXRoRW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPT09IDEgPyBkYXRhLmUgOiBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyhyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICAvL2lmIHVuaXRzIGNoYW5nZSwgd2UgbmVlZCBhIHdheSB0byByZW5kZXIgdGhlIG9yaWdpbmFsIHVuaXQvdmFsdWUgd2hlbiB0aGUgdHdlZW4gZ29lcyBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgKHJhdGlvOjApXG5fcmVuZGVyUm91bmRlZENTU1Byb3AgPSBmdW5jdGlvbiBfcmVuZGVyUm91bmRlZENTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHZhbHVlID0gZGF0YS5zICsgZGF0YS5jICogcmF0aW87XG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCB+fih2YWx1ZSArICh2YWx1ZSA8IDAgPyAtLjUgOiAuNSkpICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZShyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gZGF0YS5lIDogZGF0YS5iLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZChyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvICE9PSAxID8gZGF0YS5iIDogZGF0YS5lLCBkYXRhKTtcbn0sXG4gICAgX3NldHRlckNTU1N0eWxlID0gZnVuY3Rpb24gX3NldHRlckNTU1N0eWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJDU1NQcm9wID0gZnVuY3Rpb24gX3NldHRlckNTU1Byb3AodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwW3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyU2NhbGUgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcC5zY2FsZVggPSB0YXJnZXQuX2dzYXAuc2NhbGVZID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlLnNjYWxlWCA9IGNhY2hlLnNjYWxlWSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSwgcmF0aW8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICBjYWNoZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wID0gXCJ0cmFuc2Zvcm1cIixcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIixcbiAgICBfc2F2ZVN0eWxlID0gZnVuY3Rpb24gX3NhdmVTdHlsZShwcm9wZXJ0eSwgaXNOb3RDU1MpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgc3R5bGUpIHtcbiAgICB0aGlzLnRmbSA9IHRoaXMudGZtIHx8IHt9O1xuXG4gICAgaWYgKHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldIHx8IHByb3BlcnR5O1xuICAgICAgfnByb3BlcnR5LmluZGV4T2YoXCIsXCIpID8gcHJvcGVydHkuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnRmbVthXSA9IF9nZXQodGFyZ2V0LCBhKTtcbiAgICAgIH0pIDogdGhpcy50Zm1bcHJvcGVydHldID0gY2FjaGUueCA/IGNhY2hlW3Byb3BlcnR5XSA6IF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSk7IC8vIG5vdGU6IHNjYWxlIHdvdWxkIG1hcCB0byBcInNjYWxlWCxzY2FsZVlcIiwgdGh1cyB3ZSBsb29wIGFuZCBhcHBseSB0aGVtIGJvdGguXG5cbiAgICAgIHByb3BlcnR5ID09PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCAmJiAodGhpcy50Zm0uek9yaWdpbiA9IGNhY2hlLnpPcmlnaW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gX3Byb3BlcnR5QWxpYXNlcy50cmFuc2Zvcm0uc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuIF9zYXZlU3R5bGUuY2FsbChfdGhpcywgcCwgaXNOb3RDU1MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaW5kZXhPZihfdHJhbnNmb3JtUHJvcCkgPj0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIHRoaXMuc3ZnbyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7XG4gICAgICB0aGlzLnByb3BzLnB1c2goX3RyYW5zZm9ybU9yaWdpblByb3AsIGlzTm90Q1NTLCBcIlwiKTtcbiAgICB9XG5cbiAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICB9XG5cbiAgKHN0eWxlIHx8IGlzTm90Q1NTKSAmJiB0aGlzLnByb3BzLnB1c2gocHJvcGVydHksIGlzTm90Q1NTLCBzdHlsZVtwcm9wZXJ0eV0pO1xufSxcbiAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSkge1xuICBpZiAoc3R5bGUudHJhbnNsYXRlKSB7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2xhdGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJzY2FsZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInJvdGF0ZVwiKTtcbiAgfVxufSxcbiAgICBfcmV2ZXJ0U3R5bGUgPSBmdW5jdGlvbiBfcmV2ZXJ0U3R5bGUoKSB7XG4gIHZhciBwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBpLFxuICAgICAgcDtcblxuICBmb3IgKGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAvLyBzdG9yZWQgbGlrZSB0aGlzOiBwcm9wZXJ0eSwgaXNOb3RDU1MsIHZhbHVlXG4gICAgcHJvcHNbaSArIDFdID8gdGFyZ2V0W3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHByb3BzW2kgKyAyXSA/IHN0eWxlW3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXSA6IHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BzW2ldLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiID8gcHJvcHNbaV0gOiBwcm9wc1tpXS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIGlmICh0aGlzLnRmbSkge1xuICAgIGZvciAocCBpbiB0aGlzLnRmbSkge1xuICAgICAgY2FjaGVbcF0gPSB0aGlzLnRmbVtwXTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgdGhpcy5zdmdvIHx8IFwiXCIpO1xuICAgIH1cblxuICAgIGkgPSBfcmV2ZXJ0aW5nKCk7XG5cbiAgICBpZiAoKCFpIHx8ICFpLmlzU3RhcnQpICYmICFzdHlsZVtfdHJhbnNmb3JtUHJvcF0pIHtcbiAgICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpO1xuXG4gICAgICBpZiAoY2FjaGUuek9yaWdpbiAmJiBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pIHtcbiAgICAgICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdICs9IFwiIFwiICsgY2FjaGUuek9yaWdpbiArIFwicHhcIjsgLy8gc2luY2Ugd2UncmUgdW5jYWNoaW5nLCB3ZSBtdXN0IHB1dCB0aGUgek9yaWdpbiBiYWNrIGludG8gdGhlIHRyYW5zZm9ybU9yaWdpbiBzbyB0aGF0IHdlIGNhbiBwdWxsIGl0IG91dCBhY2N1cmF0ZWx5IHdoZW4gd2UgcGFyc2UgYWdhaW4uIE90aGVyd2lzZSwgd2UnZCBsb3NlIHRoZSB6IHBvcnRpb24gb2YgdGhlIG9yaWdpbiBzaW5jZSB3ZSBleHRyYWN0IGl0IHRvIHByb3RlY3QgZnJvbSBTYWZhcmkgYnVncy5cblxuICAgICAgICBjYWNoZS56T3JpZ2luID0gMDtcbiAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB9XG5cbiAgICAgIGNhY2hlLnVuY2FjaGUgPSAxOyAvLyBpZiBpdCdzIGEgc3RhcnRBdCB0aGF0J3MgYmVpbmcgcmV2ZXJ0ZWQgaW4gdGhlIF9pbml0VHdlZW4oKSBvZiB0aGUgY29yZSwgd2UgZG9uJ3QgbmVlZCB0byB1bmNhY2hlIHRyYW5zZm9ybXMuIFRoaXMgaXMgcHVyZWx5IGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3R5bGVTYXZlciA9IGZ1bmN0aW9uIF9nZXRTdHlsZVNhdmVyKHRhcmdldCwgcHJvcGVydGllcykge1xuICB2YXIgc2F2ZXIgPSB7XG4gICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgcHJvcHM6IFtdLFxuICAgIHJldmVydDogX3JldmVydFN0eWxlLFxuICAgIHNhdmU6IF9zYXZlU3R5bGVcbiAgfTtcbiAgdGFyZ2V0Ll9nc2FwIHx8IGdzYXAuY29yZS5nZXRDYWNoZSh0YXJnZXQpOyAvLyBqdXN0IG1ha2Ugc3VyZSB0aGVyZSdzIGEgX2dzYXAgY2FjaGUgZGVmaW5lZCBiZWNhdXNlIHdlIHJlYWQgZnJvbSBpdCBpbiBfc2F2ZVN0eWxlKCkgYW5kIGl0J3MgbW9yZSBlZmZpY2llbnQgdG8ganVzdCBjaGVjayBpdCBoZXJlIG9uY2UuXG5cbiAgcHJvcGVydGllcyAmJiBwcm9wZXJ0aWVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHNhdmVyLnNhdmUocCk7XG4gIH0pO1xuICByZXR1cm4gc2F2ZXI7XG59LFxuICAgIF9zdXBwb3J0czNELFxuICAgIF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQodHlwZSwgbnMpIHtcbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MuY3JlYXRlRWxlbWVudE5TKChucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpLCB0eXBlKSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIHNlcnZlcnMgc3dhcCBpbiBodHRwcyBmb3IgaHR0cCBpbiB0aGUgbmFtZXNwYWNlIHdoaWNoIGNhbiBicmVhayB0aGluZ3MsIG1ha2luZyBcInN0eWxlXCIgaW5hY2Nlc3NpYmxlLlxuXG4gIHJldHVybiBlICYmIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG59LFxuICAgIF9nZXRDb21wdXRlZFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgc2tpcFByZWZpeEZhbGxiYWNrKSB7XG4gIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcbiAgcmV0dXJuIGNzW3Byb3BlcnR5XSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8ICFza2lwUHJlZml4RmFsbGJhY2sgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSwgMSkgfHwgXCJcIjsgLy9jc3MgdmFyaWFibGVzIG1heSBub3QgbmVlZCBjYXBzIHN3YXBwZWQgb3V0IGZvciBkYXNoZXMgYW5kIGxvd2VyY2FzZS5cbn0sXG4gICAgX3ByZWZpeGVzID0gXCJPLE1veixtcyxNcyxXZWJraXRcIi5zcGxpdChcIixcIiksXG4gICAgX2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHksIGVsZW1lbnQsIHByZWZlclByZWZpeCkge1xuICB2YXIgZSA9IGVsZW1lbnQgfHwgX3RlbXBEaXYsXG4gICAgICBzID0gZS5zdHlsZSxcbiAgICAgIGkgPSA1O1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBzICYmICFwcmVmZXJQcmVmaXgpIHtcbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cblxuICBwcm9wZXJ0eSA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpO1xuXG4gIHdoaWxlIChpLS0gJiYgIShfcHJlZml4ZXNbaV0gKyBwcm9wZXJ0eSBpbiBzKSkge31cblxuICByZXR1cm4gaSA8IDAgPyBudWxsIDogKGkgPT09IDMgPyBcIm1zXCIgOiBpID49IDAgPyBfcHJlZml4ZXNbaV0gOiBcIlwiKSArIHByb3BlcnR5O1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gIGlmIChfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gX3dpbi5kb2N1bWVudDtcbiAgICBfZG9jRWxlbWVudCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIikgfHwge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICBfdGVtcERpdlN0eWxlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChfdHJhbnNmb3JtUHJvcCk7XG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCI7XG4gICAgX3RlbXBEaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyLXdpZHRoOjA7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjBcIjsgLy9tYWtlIHN1cmUgdG8gb3ZlcnJpZGUgY2VydGFpbiBwcm9wZXJ0aWVzIHRoYXQgbWF5IGNvbnRhbWluYXRlIG1lYXN1cmVtZW50cywgaW4gY2FzZSB0aGUgdXNlciBoYXMgb3ZlcnJlYWNoaW5nIHN0eWxlIHNoZWV0cy5cblxuICAgIF9zdXBwb3J0czNEID0gISFfY2hlY2tQcm9wUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gICAgX3JldmVydGluZyA9IGdzYXAuY29yZS5yZXZlcnRpbmc7XG4gICAgX3BsdWdpbkluaXR0ZWQgPSAxO1xuICB9XG59LFxuICAgIF9nZXRCQm94SGFjayA9IGZ1bmN0aW9uIF9nZXRCQm94SGFjayhzd2FwSWZQb3NzaWJsZSkge1xuICAvL3dvcmtzIGFyb3VuZCBpc3N1ZXMgaW4gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB0aGF0IGRvbid0IGNvcnJlY3RseSByZXBvcnQgZ2V0QkJveCgpIG9uIFNWRyBlbGVtZW50cyBpbnNpZGUgYSA8ZGVmcz4gZWxlbWVudCBhbmQvb3IgPG1hc2s+LiBXZSB0cnkgY3JlYXRpbmcgYW4gU1ZHLCBhZGRpbmcgaXQgdG8gdGhlIGRvY3VtZW50RWxlbWVudCBhbmQgdG9zcyB0aGUgZWxlbWVudCBpbiB0aGVyZSBzbyB0aGF0IGl0J3MgZGVmaW5pdGVseSBwYXJ0IG9mIHRoZSByZW5kZXJpbmcgdHJlZSwgdGhlbiBncmFiIHRoZSBiYm94IGFuZCBpZiBpdCB3b3Jrcywgd2UgYWN0dWFsbHkgc3dhcCBvdXQgdGhlIG9yaWdpbmFsIGdldEJCb3goKSBtZXRob2QgZm9yIG91ciBvd24gdGhhdCBkb2VzIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW5ldmVyIGdldEJCb3ggaXMgbmVlZGVkLiBUaGlzIGhlbHBzIGVuc3VyZSB0aGF0IHBlcmZvcm1hbmNlIGlzIG9wdGltYWwgKG9ubHkgZG8gYWxsIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW4gYWJzb2x1dGVseSBuZWNlc3NhcnkuLi5tb3N0IGVsZW1lbnRzIGRvbid0IG5lZWQgaXQpLlxuICB2YXIgc3ZnID0gX2NyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgdGhpcy5vd25lclNWR0VsZW1lbnQgJiYgdGhpcy5vd25lclNWR0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwieG1sbnNcIikgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSxcbiAgICAgIG9sZFBhcmVudCA9IHRoaXMucGFyZW50Tm9kZSxcbiAgICAgIG9sZFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nLFxuICAgICAgb2xkQ1NTID0gdGhpcy5zdHlsZS5jc3NUZXh0LFxuICAgICAgYmJveDtcblxuICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuXG4gIHN2Zy5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gIGlmIChzd2FwSWZQb3NzaWJsZSkge1xuICAgIHRyeSB7XG4gICAgICBiYm94ID0gdGhpcy5nZXRCQm94KCk7XG4gICAgICB0aGlzLl9nc2FwQkJveCA9IHRoaXMuZ2V0QkJveDsgLy9zdG9yZSB0aGUgb3JpZ2luYWxcblxuICAgICAgdGhpcy5nZXRCQm94ID0gX2dldEJCb3hIYWNrO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0gZWxzZSBpZiAodGhpcy5fZ3NhcEJCb3gpIHtcbiAgICBiYm94ID0gdGhpcy5fZ3NhcEJCb3goKTtcbiAgfVxuXG4gIGlmIChvbGRQYXJlbnQpIHtcbiAgICBpZiAob2xkU2libGluZykge1xuICAgICAgb2xkUGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBvbGRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2xkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cbiAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTO1xuICByZXR1cm4gYmJveDtcbn0sXG4gICAgX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyA9IGZ1bmN0aW9uIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBhdHRyaWJ1dGVzQXJyYXkpIHtcbiAgdmFyIGkgPSBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0QkJveCA9IGZ1bmN0aW9uIF9nZXRCQm94KHRhcmdldCkge1xuICB2YXIgYm91bmRzO1xuXG4gIHRyeSB7XG4gICAgYm91bmRzID0gdGFyZ2V0LmdldEJCb3goKTsgLy9GaXJlZm94IHRocm93cyBlcnJvcnMgaWYgeW91IHRyeSBjYWxsaW5nIGdldEJCb3goKSBvbiBhbiBTVkcgZWxlbWVudCB0aGF0J3Mgbm90IHJlbmRlcmVkIChsaWtlIGluIGEgPHN5bWJvbD4gb3IgPGRlZnM+KS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjEyMTE4XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKTtcbiAgfVxuXG4gIGJvdW5kcyAmJiAoYm91bmRzLndpZHRoIHx8IGJvdW5kcy5oZWlnaHQpIHx8IHRhcmdldC5nZXRCQm94ID09PSBfZ2V0QkJveEhhY2sgfHwgKGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSkpOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgbWlzcmVwb3J0IHRoZSBib3VuZHMgaWYgdGhlIGVsZW1lbnQgaGFzIHplcm8gd2lkdGggYW5kIGhlaWdodCAoaXQganVzdCBhc3N1bWVzIGl0J3MgYXQgeDowLCB5OjApLCB0aHVzIHdlIG5lZWQgdG8gbWFudWFsbHkgZ3JhYiB0aGUgcG9zaXRpb24gaW4gdGhhdCBjYXNlLlxuXG4gIHJldHVybiBib3VuZHMgJiYgIWJvdW5kcy53aWR0aCAmJiAhYm91bmRzLnggJiYgIWJvdW5kcy55ID8ge1xuICAgIHg6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieFwiLCBcImN4XCIsIFwieDFcIl0pIHx8IDAsXG4gICAgeTogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ5XCIsIFwiY3lcIiwgXCJ5MVwiXSkgfHwgMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSA6IGJvdW5kcztcbn0sXG4gICAgX2lzU1ZHID0gZnVuY3Rpb24gX2lzU1ZHKGUpIHtcbiAgcmV0dXJuICEhKGUuZ2V0Q1RNICYmICghZS5wYXJlbnROb2RlIHx8IGUub3duZXJTVkdFbGVtZW50KSAmJiBfZ2V0QkJveChlKSk7XG59LFxuICAgIC8vcmVwb3J0cyBpZiB0aGUgZWxlbWVudCBpcyBhbiBTVkcgb24gd2hpY2ggZ2V0QkJveCgpIGFjdHVhbGx5IHdvcmtzXG5fcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkpIHtcbiAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIGZpcnN0MkNoYXJzO1xuXG4gICAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3ApIHtcbiAgICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlLnJlbW92ZVByb3BlcnR5KSB7XG4gICAgICBmaXJzdDJDaGFycyA9IHByb3BlcnR5LnN1YnN0cigwLCAyKTtcblxuICAgICAgaWYgKGZpcnN0MkNoYXJzID09PSBcIm1zXCIgfHwgcHJvcGVydHkuc3Vic3RyKDAsIDYpID09PSBcIndlYmtpdFwiKSB7XG4gICAgICAgIC8vTWljcm9zb2Z0IGFuZCBzb21lIFdlYmtpdCBicm93c2VycyBkb24ndCBjb25mb3JtIHRvIHRoZSBzdGFuZGFyZCBvZiBjYXBpdGFsaXppbmcgdGhlIGZpcnN0IHByZWZpeCBjaGFyYWN0ZXIsIHNvIHdlIGFkanVzdCBzbyB0aGF0IHdoZW4gd2UgcHJlZml4IHRoZSBjYXBzIHdpdGggYSBkYXNoLCBpdCdzIGNvcnJlY3QgKG90aGVyd2lzZSBpdCdkIGJlIFwibXMtdHJhbnNmb3JtXCIgaW5zdGVhZCBvZiBcIi1tcy10cmFuc2Zvcm1cIiBmb3IgSUU5LCBmb3IgZXhhbXBsZSlcbiAgICAgICAgcHJvcGVydHkgPSBcIi1cIiArIHByb3BlcnR5O1xuICAgICAgfVxuXG4gICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShmaXJzdDJDaGFycyA9PT0gXCItLVwiID8gcHJvcGVydHkgOiBwcm9wZXJ0eS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9ub3RlOiBvbGQgdmVyc2lvbnMgb2YgSUUgdXNlIFwicmVtb3ZlQXR0cmlidXRlKClcIiBpbnN0ZWFkIG9mIFwicmVtb3ZlUHJvcGVydHkoKVwiXG4gICAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHkpO1xuICAgIH1cbiAgfVxufSxcbiAgICBfYWRkTm9uVHdlZW5pbmdQVCA9IGZ1bmN0aW9uIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgYmVnaW5uaW5nLCBlbmQsIG9ubHlTZXRBdEVuZCkge1xuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIG9ubHlTZXRBdEVuZCA/IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIDogX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUpO1xuICBwbHVnaW4uX3B0ID0gcHQ7XG4gIHB0LmIgPSBiZWdpbm5pbmc7XG4gIHB0LmUgPSBlbmQ7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9ub25Db252ZXJ0aWJsZVVuaXRzID0ge1xuICBkZWc6IDEsXG4gIHJhZDogMSxcbiAgdHVybjogMVxufSxcbiAgICBfbm9uU3RhbmRhcmRMYXlvdXRzID0ge1xuICBncmlkOiAxLFxuICBmbGV4OiAxXG59LFxuICAgIC8vdGFrZXMgYSBzaW5nbGUgdmFsdWUgbGlrZSAyMHB4IGFuZCBjb252ZXJ0cyBpdCB0byB0aGUgdW5pdCBzcGVjaWZpZWQsIGxpa2UgXCIlXCIsIHJldHVybmluZyBvbmx5IHRoZSBudW1lcmljIGFtb3VudC5cbl9jb252ZXJ0VG9Vbml0ID0gZnVuY3Rpb24gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpIHtcbiAgdmFyIGN1clZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCxcbiAgICAgIGN1clVuaXQgPSAodmFsdWUgKyBcIlwiKS50cmltKCkuc3Vic3RyKChjdXJWYWx1ZSArIFwiXCIpLmxlbmd0aCkgfHwgXCJweFwiLFxuICAgICAgLy8gc29tZSBicm93c2VycyBsZWF2ZSBleHRyYSB3aGl0ZXNwYWNlIGF0IHRoZSBiZWdpbm5pbmcgb2YgQ1NTIHZhcmlhYmxlcywgaGVuY2UgdGhlIG5lZWQgdG8gdHJpbSgpXG4gIHN0eWxlID0gX3RlbXBEaXYuc3R5bGUsXG4gICAgICBob3Jpem9udGFsID0gX2hvcml6b250YWxFeHAudGVzdChwcm9wZXJ0eSksXG4gICAgICBpc1Jvb3RTVkcgPSB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiLFxuICAgICAgbWVhc3VyZVByb3BlcnR5ID0gKGlzUm9vdFNWRyA/IFwiY2xpZW50XCIgOiBcIm9mZnNldFwiKSArIChob3Jpem9udGFsID8gXCJXaWR0aFwiIDogXCJIZWlnaHRcIiksXG4gICAgICBhbW91bnQgPSAxMDAsXG4gICAgICB0b1BpeGVscyA9IHVuaXQgPT09IFwicHhcIixcbiAgICAgIHRvUGVyY2VudCA9IHVuaXQgPT09IFwiJVwiLFxuICAgICAgcHgsXG4gICAgICBwYXJlbnQsXG4gICAgICBjYWNoZSxcbiAgICAgIGlzU1ZHO1xuXG4gIGlmICh1bml0ID09PSBjdXJVbml0IHx8ICFjdXJWYWx1ZSB8fCBfbm9uQ29udmVydGlibGVVbml0c1t1bml0XSB8fCBfbm9uQ29udmVydGlibGVVbml0c1tjdXJVbml0XSkge1xuICAgIHJldHVybiBjdXJWYWx1ZTtcbiAgfVxuXG4gIGN1clVuaXQgIT09IFwicHhcIiAmJiAhdG9QaXhlbHMgJiYgKGN1clZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIFwicHhcIikpO1xuICBpc1NWRyA9IHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCk7XG5cbiAgaWYgKCh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldIHx8IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikpKSB7XG4gICAgcHggPSBpc1NWRyA/IHRhcmdldC5nZXRCQm94KClbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdIDogdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgcmV0dXJuIF9yb3VuZCh0b1BlcmNlbnQgPyBjdXJWYWx1ZSAvIHB4ICogYW1vdW50IDogY3VyVmFsdWUgLyAxMDAgKiBweCk7XG4gIH1cblxuICBzdHlsZVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSBhbW91bnQgKyAodG9QaXhlbHMgPyBjdXJVbml0IDogdW5pdCk7XG4gIHBhcmVudCA9IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikgfHwgdW5pdCA9PT0gXCJlbVwiICYmIHRhcmdldC5hcHBlbmRDaGlsZCAmJiAhaXNSb290U1ZHID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgaWYgKGlzU1ZHKSB7XG4gICAgcGFyZW50ID0gKHRhcmdldC5vd25lclNWR0VsZW1lbnQgfHwge30pLnBhcmVudE5vZGU7XG4gIH1cblxuICBpZiAoIXBhcmVudCB8fCBwYXJlbnQgPT09IF9kb2MgfHwgIXBhcmVudC5hcHBlbmRDaGlsZCkge1xuICAgIHBhcmVudCA9IF9kb2MuYm9keTtcbiAgfVxuXG4gIGNhY2hlID0gcGFyZW50Ll9nc2FwO1xuXG4gIGlmIChjYWNoZSAmJiB0b1BlcmNlbnQgJiYgY2FjaGUud2lkdGggJiYgaG9yaXpvbnRhbCAmJiBjYWNoZS50aW1lID09PSBfdGlja2VyLnRpbWUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gX3JvdW5kKGN1clZhbHVlIC8gY2FjaGUud2lkdGggKiBhbW91bnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0b1BlcmNlbnQgJiYgKHByb3BlcnR5ID09PSBcImhlaWdodFwiIHx8IHByb3BlcnR5ID09PSBcIndpZHRoXCIpKSB7XG4gICAgICAvLyBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggd2lkdGgvaGVpZ2h0IHRoYXQncyBpbnNpZGUgYSBjb250YWluZXIgd2l0aCBwYWRkaW5nIGFuZC9vciBpdCdzIGEgZmxleGJveC9ncmlkIGNvbnRhaW5lciwgd2UgbXVzdCBhcHBseSBpdCB0byB0aGUgdGFyZ2V0IGl0c2VsZiByYXRoZXIgdGhhbiB0aGUgX3RlbXBEaXYgaW4gb3JkZXIgdG8gZW5zdXJlIGNvbXBsZXRlIGFjY3VyYWN5LCBmYWN0b3JpbmcgaW4gdGhlIHBhcmVudCdzIHBhZGRpbmcuXG4gICAgICB2YXIgdiA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG4gICAgICB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gYW1vdW50ICsgdW5pdDtcbiAgICAgIHB4ID0gdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgICB2ID8gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSA9IHYgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmICFfbm9uU3RhbmRhcmRMYXlvdXRzW19nZXRDb21wdXRlZFByb3BlcnR5KHBhcmVudCwgXCJkaXNwbGF5XCIpXSAmJiAoc3R5bGUucG9zaXRpb24gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwicG9zaXRpb25cIikpO1xuICAgICAgcGFyZW50ID09PSB0YXJnZXQgJiYgKHN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIik7IC8vIGxpa2UgZm9yIGJvcmRlclJhZGl1cywgaWYgaXQncyBhICUgd2UgbXVzdCBoYXZlIGl0IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQgaXRzZWxmIGJ1dCB0aGF0IG1heSBub3QgaGF2ZSBwb3NpdGlvbjogcmVsYXRpdmUgb3IgcG9zaXRpb246IGFic29sdXRlIGluIHdoaWNoIGNhc2UgaXQnZCBnbyB1cCB0aGUgY2hhaW4gdW50aWwgaXQgZmluZHMgaXRzIG9mZnNldFBhcmVudCAoYmFkKS4gcG9zaXRpb246IHN0YXRpYyBwcm90ZWN0cyBhZ2FpbnN0IHRoYXQuXG5cbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChfdGVtcERpdik7XG4gICAgICBweCA9IF90ZW1wRGl2W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX3RlbXBEaXYpO1xuICAgICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgfVxuXG4gICAgaWYgKGhvcml6b250YWwgJiYgdG9QZXJjZW50KSB7XG4gICAgICBjYWNoZSA9IF9nZXRDYWNoZShwYXJlbnQpO1xuICAgICAgY2FjaGUudGltZSA9IF90aWNrZXIudGltZTtcbiAgICAgIGNhY2hlLndpZHRoID0gcGFyZW50W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9yb3VuZCh0b1BpeGVscyA/IHB4ICogY3VyVmFsdWUgLyBhbW91bnQgOiBweCAmJiBjdXJWYWx1ZSA/IGFtb3VudCAvIHB4ICogY3VyVmFsdWUgOiAwKTtcbn0sXG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICB2YXIgdmFsdWU7XG4gIF9wbHVnaW5Jbml0dGVkIHx8IF9pbml0Q29yZSgpO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfcHJvcGVydHlBbGlhc2VzICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcblxuICAgIGlmICh+cHJvcGVydHkuaW5kZXhPZihcIixcIikpIHtcbiAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkuc3BsaXQoXCIsXCIpWzBdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgdmFsdWUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKTtcbiAgICB2YWx1ZSA9IHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybU9yaWdpblwiID8gdmFsdWVbcHJvcGVydHldIDogdmFsdWUuc3ZnID8gdmFsdWUub3JpZ2luIDogX2ZpcnN0VHdvT25seShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSkgKyBcIiBcIiArIHZhbHVlLnpPcmlnaW4gKyBcInB4XCI7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcGVydHldO1xuXG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PT0gXCJhdXRvXCIgfHwgdW5jYWNoZSB8fCB+KHZhbHVlICsgXCJcIikuaW5kZXhPZihcImNhbGMoXCIpKSB7XG4gICAgICB2YWx1ZSA9IF9zcGVjaWFsUHJvcHNbcHJvcGVydHldICYmIF9zcGVjaWFsUHJvcHNbcHJvcGVydHldKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHx8IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCAocHJvcGVydHkgPT09IFwib3BhY2l0eVwiID8gMSA6IDApOyAvLyBub3RlOiBzb21lIGJyb3dzZXJzLCBsaWtlIEZpcmVmb3gsIGRvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5ISBJbnN0ZWFkLCBpdCBvbmx5IHJlcG9ydHMgZXZlcnkgY29ybmVyIGxpa2UgIGJvcmRlclRvcExlZnRSYWRpdXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5pdCAmJiAhfih2YWx1ZSArIFwiXCIpLnRyaW0oKS5pbmRleE9mKFwiIFwiKSA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSArIHVuaXQgOiB2YWx1ZTtcbn0sXG4gICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZyA9IGZ1bmN0aW9uIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcodGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kKSB7XG4gIC8vIG5vdGU6IHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPT09IFwibm9uZVwiKSB7XG4gICAgLy8gc29tZSBicm93c2VycyBsaWtlIFNhZmFyaSBhY3R1YWxseSBQUkVGRVIgdGhlIHByZWZpeGVkIHByb3BlcnR5IGFuZCBtaXMtcmVwb3J0IHRoZSB1bnByZWZpeGVkIHZhbHVlIGxpa2UgY2xpcFBhdGggKEJVRykuIEluIG90aGVyIHdvcmRzLCBldmVuIHRob3VnaCBjbGlwUGF0aCBleGlzdHMgaW4gdGhlIHN0eWxlIChcImNsaXBQYXRoXCIgaW4gdGFyZ2V0LnN0eWxlKSBhbmQgaXQncyBzZXQgaW4gdGhlIENTUyBwcm9wZXJseSAoYWxvbmcgd2l0aCAtd2Via2l0LWNsaXAtcGF0aCksIFNhZmFyaSByZXBvcnRzIGNsaXBQYXRoIGFzIFwibm9uZVwiIHdoZXJlYXMgV2Via2l0Q2xpcFBhdGggcmVwb3J0cyBhY2N1cmF0ZWx5IGxpa2UgXCJlbGxpcHNlKDEwMCUgMCUgYXQgNTAlIDAlKVwiLCBzbyBpbiB0aGlzIGNhc2Ugd2UgbXVzdCBTV0lUQ0ggdG8gdXNpbmcgdGhlIHByZWZpeGVkIHByb3BlcnR5IGluc3RlYWQuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8xODMxMC1jbGlwcGF0aC1kb2VzbnQtd29yay1vbi1pb3MvXG4gICAgdmFyIHAgPSBfY2hlY2tQcm9wUHJlZml4KHByb3AsIHRhcmdldCwgMSksXG4gICAgICAgIHMgPSBwICYmIF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcCwgMSk7XG5cbiAgICBpZiAocyAmJiBzICE9PSBzdGFydCkge1xuICAgICAgcHJvcCA9IHA7XG4gICAgICBzdGFydCA9IHM7XG4gICAgfSBlbHNlIGlmIChwcm9wID09PSBcImJvcmRlckNvbG9yXCIpIHtcbiAgICAgIHN0YXJ0ID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcImJvcmRlclRvcENvbG9yXCIpOyAvLyBGaXJlZm94IGJ1ZzogYWx3YXlzIHJlcG9ydHMgXCJib3JkZXJDb2xvclwiIGFzIFwiXCIsIHNvIHdlIG11c3QgZmFsbCBiYWNrIHRvIGJvcmRlclRvcENvbG9yLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjQ1ODMtaG93LXRvLXJldHVybi1jb2xvcnMtdGhhdC1pLWhhZC1hZnRlci1yZXZlcnNlL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldC5zdHlsZSwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICBhLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBlbmRVbml0LFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVmFsdWVzO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vIGVuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoZW5kID09PSBcImF1dG9cIikge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcF07XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gZW5kO1xuICAgIGVuZCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcCkgfHwgZW5kO1xuICAgIHN0YXJ0VmFsdWUgPyB0YXJnZXQuc3R5bGVbcHJvcF0gPSBzdGFydFZhbHVlIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gIH1cblxuICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gIF9jb2xvclN0cmluZ0ZpbHRlcihhKTsgLy8gcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy4gSWYgY29sb3JzIGFyZSBmb3VuZCwgaXQgcmV0dXJucyB0cnVlIGFuZCB0aGVuIHdlIG11c3QgbWF0Y2ggd2hlcmUgdGhlIGNvbG9yIHNob3dzIHVwIG9yZGVyLXdpc2UgYmVjYXVzZSBmb3IgdGhpbmdzIGxpa2UgYm94U2hhZG93LCBzb21ldGltZXMgdGhlIGJyb3dzZXIgcHJvdmlkZXMgdGhlIGNvbXB1dGVkIHZhbHVlcyB3aXRoIHRoZSBjb2xvciBGSVJTVCwgYnV0IHRoZSB1c2VyIHByb3ZpZGVzIGl0IHdpdGggdGhlIGNvbG9yIExBU1QsIHNvIGZsaXAgdGhlbSBpZiBuZWNlc3NhcnkuIFNhbWUgZm9yIGRyb3Atc2hhZG93KCkuXG5cblxuICBzdGFydCA9IGFbMF07XG4gIGVuZCA9IGFbMV07XG4gIHN0YXJ0VmFsdWVzID0gc3RhcnQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgZW5kVmFsdWVzID0gZW5kLm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG5cbiAgaWYgKGVuZFZhbHVlcy5sZW5ndGgpIHtcbiAgICB3aGlsZSAocmVzdWx0ID0gX251bVdpdGhVbml0RXhwLmV4ZWMoZW5kKSkge1xuICAgICAgZW5kVmFsdWUgPSByZXN1bHRbMF07XG4gICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiIHx8IGNodW5rLnN1YnN0cigtNSkgPT09IFwiaHNsYShcIikge1xuICAgICAgICBjb2xvciA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmRWYWx1ZSAhPT0gKHN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlc1ttYXRjaEluZGV4KytdIHx8IFwiXCIpKSB7XG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKSB8fCAwO1xuICAgICAgICBzdGFydFVuaXQgPSBzdGFydFZhbHVlLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChlbmRWYWx1ZSA9IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmRWYWx1ZSkgKyBzdGFydFVuaXQpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgZW5kVW5pdCA9IGVuZFZhbHVlLnN1YnN0cigoZW5kTnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgaW5kZXggPSBfbnVtV2l0aFVuaXRFeHAubGFzdEluZGV4IC0gZW5kVW5pdC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFlbmRVbml0KSB7XG4gICAgICAgICAgLy9pZiBzb21ldGhpbmcgbGlrZSBcInBlcnNwZWN0aXZlOjMwMFwiIGlzIHBhc3NlZCBpbiBhbmQgd2UgbXVzdCBhZGQgYSB1bml0IHRvIHRoZSBlbmRcbiAgICAgICAgICBlbmRVbml0ID0gZW5kVW5pdCB8fCBfY29uZmlnLnVuaXRzW3Byb3BdIHx8IHN0YXJ0VW5pdDtcblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgZW5kICs9IGVuZFVuaXQ7XG4gICAgICAgICAgICBwdC5lICs9IGVuZFVuaXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCkge1xuICAgICAgICAgIHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wLCBzdGFydFZhbHVlLCBlbmRVbml0KSB8fCAwO1xuICAgICAgICB9IC8vIHRoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cblxuICAgICAgICBwdC5fcHQgPSB7XG4gICAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgICBwOiBjaHVuayB8fCBtYXRjaEluZGV4ID09PSAxID8gY2h1bmsgOiBcIixcIixcbiAgICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgICBjOiBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgfHwgcHJvcCA9PT0gXCJ6SW5kZXhcIiA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuICB9IGVsc2Uge1xuICAgIHB0LnIgPSBwcm9wID09PSBcImRpc3BsYXlcIiAmJiBlbmQgPT09IFwibm9uZVwiID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZTtcbiAgfVxuXG4gIF9yZWxFeHAudGVzdChlbmQpICYmIChwdC5lID0gMCk7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cblxuICB0aGlzLl9wdCA9IHB0OyAvL3N0YXJ0IHRoZSBsaW5rZWQgbGlzdCB3aXRoIHRoaXMgbmV3IFByb3BUd2Vlbi4gUmVtZW1iZXIsIHdlIGNhbGwgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHBsdWdpbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYW5vdGhlciBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgdG9wOiBcIjAlXCIsXG4gIGJvdHRvbTogXCIxMDAlXCIsXG4gIGxlZnQ6IFwiMCVcIixcbiAgcmlnaHQ6IFwiMTAwJVwiLFxuICBjZW50ZXI6IFwiNTAlXCJcbn0sXG4gICAgX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMgPSBmdW5jdGlvbiBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyh2YWx1ZSkge1xuICB2YXIgc3BsaXQgPSB2YWx1ZS5zcGxpdChcIiBcIiksXG4gICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICB5ID0gc3BsaXRbMV0gfHwgXCI1MCVcIjtcblxuICBpZiAoeCA9PT0gXCJ0b3BcIiB8fCB4ID09PSBcImJvdHRvbVwiIHx8IHkgPT09IFwibGVmdFwiIHx8IHkgPT09IFwicmlnaHRcIikge1xuICAgIC8vdGhlIHVzZXIgcHJvdmlkZWQgdGhlbSBpbiB0aGUgd3Jvbmcgb3JkZXIsIHNvIGZsaXAgdGhlbVxuICAgIHZhbHVlID0geDtcbiAgICB4ID0geTtcbiAgICB5ID0gdmFsdWU7XG4gIH1cblxuICBzcGxpdFswXSA9IF9rZXl3b3JkVG9QZXJjZW50W3hdIHx8IHg7XG4gIHNwbGl0WzFdID0gX2tleXdvcmRUb1BlcmNlbnRbeV0gfHwgeTtcbiAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xufSxcbiAgICBfcmVuZGVyQ2xlYXJQcm9wcyA9IGZ1bmN0aW9uIF9yZW5kZXJDbGVhclByb3BzKHJhdGlvLCBkYXRhKSB7XG4gIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgIHZhciB0YXJnZXQgPSBkYXRhLnQsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICAgIHByb3AsXG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgaTtcblxuICAgIGlmIChwcm9wcyA9PT0gXCJhbGxcIiB8fCBwcm9wcyA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wXSkge1xuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFyVHJhbnNmb3Jtcykge1xuICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGUuc3ZnICYmIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cbiAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7IC8vIGZvcmNlIGFsbCB0aGUgY2FjaGVkIHZhbHVlcyBiYWNrIHRvIFwibm9ybWFsXCIvaWRlbnRpdHksIG90aGVyd2lzZSBpZiB0aGVyZSdzIGFub3RoZXIgdHdlZW4gdGhhdCdzIGFscmVhZHkgc2V0IHRvIHJlbmRlciB0cmFuc2Zvcm1zIG9uIHRoaXMgZWxlbWVudCwgaXQgY291bGQgZGlzcGxheSB0aGUgd3JvbmcgdmFsdWVzLlxuXG5cbiAgICAgICAgY2FjaGUudW5jYWNoZSA9IDE7XG5cbiAgICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIC8vIG5vdGU6IHNwZWNpYWxQcm9wcyBzaG91bGQgcmV0dXJuIDEgaWYgKGFuZCBvbmx5IGlmKSB0aGV5IGhhdmUgYSBub24temVybyBwcmlvcml0eS4gSXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gc29ydCB0aGUgbGlua2VkIGxpc3QuXG5fc3BlY2lhbFByb3BzID0ge1xuICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgaWYgKHR3ZWVuLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikge1xuICAgICAgdmFyIHB0ID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMCwgX3JlbmRlckNsZWFyUHJvcHMpO1xuICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgcHQucHIgPSAtMTA7XG4gICAgICBwdC50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgLyogY2xhc3NOYW1lIGZlYXR1cmUgKGFib3V0IDAuNGtiIGd6aXBwZWQpLlxuICAsIGNsYXNzTmFtZShwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICBcdGxldCBfcmVuZGVyQ2xhc3NOYW1lID0gKHJhdGlvLCBkYXRhKSA9PiB7XG4gIFx0XHRcdGRhdGEuY3NzLnJlbmRlcihyYXRpbywgZGF0YS5jc3MpO1xuICBcdFx0XHRpZiAoIXJhdGlvIHx8IHJhdGlvID09PSAxKSB7XG4gIFx0XHRcdFx0bGV0IGlubGluZSA9IGRhdGEucm12LFxuICBcdFx0XHRcdFx0dGFyZ2V0ID0gZGF0YS50LFxuICBcdFx0XHRcdFx0cDtcbiAgXHRcdFx0XHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIpO1xuICBcdFx0XHRcdGZvciAocCBpbiBpbmxpbmUpIHtcbiAgXHRcdFx0XHRcdF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICBcdFx0XHRcdH1cbiAgXHRcdFx0fVxuICBcdFx0fSxcbiAgXHRcdF9nZXRBbGxTdHlsZXMgPSAodGFyZ2V0KSA9PiB7XG4gIFx0XHRcdGxldCBzdHlsZXMgPSB7fSxcbiAgXHRcdFx0XHRjb21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgXHRcdFx0XHRwO1xuICBcdFx0XHRmb3IgKHAgaW4gY29tcHV0ZWQpIHtcbiAgXHRcdFx0XHRpZiAoaXNOYU4ocCkgJiYgcCAhPT0gXCJjc3NUZXh0XCIgJiYgcCAhPT0gXCJsZW5ndGhcIikge1xuICBcdFx0XHRcdFx0c3R5bGVzW3BdID0gY29tcHV0ZWRbcF07XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHRcdF9zZXREZWZhdWx0cyhzdHlsZXMsIF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpKTtcbiAgXHRcdFx0cmV0dXJuIHN0eWxlcztcbiAgXHRcdH0sXG4gIFx0XHRzdGFydENsYXNzTGlzdCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgXHRcdHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICBcdFx0Y3NzVGV4dCA9IHN0eWxlLmNzc1RleHQsXG4gIFx0XHRjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgXHRcdGNsYXNzUFQgPSBjYWNoZS5jbGFzc1BULFxuICBcdFx0aW5saW5lVG9SZW1vdmVBdEVuZCA9IHt9LFxuICBcdFx0ZGF0YSA9IHt0OnRhcmdldCwgcGx1Z2luOnBsdWdpbiwgcm12OmlubGluZVRvUmVtb3ZlQXRFbmQsIGI6c3RhcnRDbGFzc0xpc3QsIGU6KGVuZFZhbHVlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZW5kVmFsdWUgOiBzdGFydENsYXNzTGlzdC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzpcXFxcc3xeKVwiICsgZW5kVmFsdWUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlbmRWYWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZW5kVmFsdWUuc3Vic3RyKDIpIDogXCJcIil9LFxuICBcdFx0Y2hhbmdpbmdWYXJzID0ge30sXG4gIFx0XHRzdGFydFZhcnMgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCksXG4gIFx0XHR0cmFuc2Zvcm1SZWxhdGVkID0gLyh0cmFuc2Zvcm18cGVyc3BlY3RpdmUpL2ksXG4gIFx0XHRlbmRWYXJzLCBwO1xuICBcdGlmIChjbGFzc1BUKSB7XG4gIFx0XHRjbGFzc1BULnIoMSwgY2xhc3NQVC5kKTtcbiAgXHRcdF9yZW1vdmVMaW5rZWRMaXN0SXRlbShjbGFzc1BULmQucGx1Z2luLCBjbGFzc1BULCBcIl9wdFwiKTtcbiAgXHR9XG4gIFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRhdGEuZSk7XG4gIFx0ZW5kVmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0LCB0cnVlKTtcbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgc3RhcnRDbGFzc0xpc3QpO1xuICBcdGZvciAocCBpbiBlbmRWYXJzKSB7XG4gIFx0XHRpZiAoZW5kVmFyc1twXSAhPT0gc3RhcnRWYXJzW3BdICYmICF0cmFuc2Zvcm1SZWxhdGVkLnRlc3QocCkpIHtcbiAgXHRcdFx0Y2hhbmdpbmdWYXJzW3BdID0gZW5kVmFyc1twXTtcbiAgXHRcdFx0aWYgKCFzdHlsZVtwXSAmJiBzdHlsZVtwXSAhPT0gXCIwXCIpIHtcbiAgXHRcdFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kW3BdID0gMTtcbiAgXHRcdFx0fVxuICBcdFx0fVxuICBcdH1cbiAgXHRjYWNoZS5jbGFzc1BUID0gcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBcImNsYXNzTmFtZVwiLCAwLCAwLCBfcmVuZGVyQ2xhc3NOYW1lLCBkYXRhLCAwLCAtMTEpO1xuICBcdGlmIChzdHlsZS5jc3NUZXh0ICE9PSBjc3NUZXh0KSB7IC8vb25seSBhcHBseSBpZiB0aGluZ3MgY2hhbmdlLiBPdGhlcndpc2UsIGluIGNhc2VzIGxpa2UgYSBiYWNrZ3JvdW5kLWltYWdlIHRoYXQncyBwdWxsZWQgZHluYW1pY2FsbHksIGl0IGNvdWxkIGNhdXNlIGEgcmVmcmVzaC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIwMzY4LXBvc3NpYmxlLWdzYXAtYnVnLXN3aXRjaGluZy1jbGFzc25hbWVzLWluLWNocm9tZS8uXG4gIFx0XHRzdHlsZS5jc3NUZXh0ID0gY3NzVGV4dDsgLy93ZSByZWNvcmRlZCBjc3NUZXh0IGJlZm9yZSB3ZSBzd2FwcGVkIGNsYXNzZXMgYW5kIHJhbiBfZ2V0QWxsU3R5bGVzKCkgYmVjYXVzZSBpbiBjYXNlcyB3aGVuIGEgY2xhc3NOYW1lIHR3ZWVuIGlzIG92ZXJ3cml0dGVuLCB3ZSByZW1vdmUgYWxsIHRoZSByZWxhdGVkIHR3ZWVuaW5nIHByb3BlcnRpZXMgZnJvbSB0aGF0IGNsYXNzIGNoYW5nZSAob3RoZXJ3aXNlIGNsYXNzLXNwZWNpZmljIHN0dWZmIGNhbid0IG92ZXJyaWRlIHByb3BlcnRpZXMgd2UndmUgZGlyZWN0bHkgc2V0IG9uIHRoZSB0YXJnZXQncyBzdHlsZSBvYmplY3QgZHVlIHRvIHNwZWNpZmljaXR5KS5cbiAgXHR9XG4gIFx0X3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdHJ1ZSk7IC8vdG8gY2xlYXIgdGhlIGNhY2hpbmcgb2YgdHJhbnNmb3Jtc1xuICBcdGRhdGEuY3NzID0gbmV3IGdzYXAucGx1Z2lucy5jc3MoKTtcbiAgXHRkYXRhLmNzcy5pbml0KHRhcmdldCwgY2hhbmdpbmdWYXJzLCB0d2Vlbik7XG4gIFx0cGx1Z2luLl9wcm9wcy5wdXNoKC4uLmRhdGEuY3NzLl9wcm9wcyk7XG4gIFx0cmV0dXJuIDE7XG4gIH1cbiAgKi9cblxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUUkFOU0ZPUk1TXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5faWRlbnRpdHkyRE1hdHJpeCA9IFsxLCAwLCAwLCAxLCAwLCAwXSxcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXMgPSB7fSxcbiAgICBfaXNOdWxsVHJhbnNmb3JtID0gZnVuY3Rpb24gX2lzTnVsbFRyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgfHwgdmFsdWUgPT09IFwibm9uZVwiIHx8ICF2YWx1ZTtcbn0sXG4gICAgX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSB7XG4gIHZhciBtYXRyaXhTdHJpbmcgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICByZXR1cm4gX2lzTnVsbFRyYW5zZm9ybShtYXRyaXhTdHJpbmcpID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXhTdHJpbmcuc3Vic3RyKDcpLm1hdGNoKF9udW1FeHApLm1hcChfcm91bmQpO1xufSxcbiAgICBfZ2V0TWF0cml4ID0gZnVuY3Rpb24gX2dldE1hdHJpeCh0YXJnZXQsIGZvcmNlMkQpIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCksXG4gICAgICBwYXJlbnQsXG4gICAgICBuZXh0U2libGluZyxcbiAgICAgIHRlbXAsXG4gICAgICBhZGRlZFRvRE9NO1xuXG4gIGlmIChjYWNoZS5zdmcgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSkge1xuICAgIHRlbXAgPSB0YXJnZXQudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKS5tYXRyaXg7IC8vZW5zdXJlcyB0aGF0IGV2ZW4gY29tcGxleCB2YWx1ZXMgbGlrZSBcInRyYW5zbGF0ZSg1MCw2MCkgcm90YXRlKDEzNSwwLDApXCIgYXJlIHBhcnNlZCBiZWNhdXNlIGl0IG1hc2hlcyBpdCBpbnRvIGEgbWF0cml4LlxuXG4gICAgbWF0cml4ID0gW3RlbXAuYSwgdGVtcC5iLCB0ZW1wLmMsIHRlbXAuZCwgdGVtcC5lLCB0ZW1wLmZdO1xuICAgIHJldHVybiBtYXRyaXguam9pbihcIixcIikgPT09IFwiMSwwLDAsMSwwLDBcIiA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4O1xuICB9IGVsc2UgaWYgKG1hdHJpeCA9PT0gX2lkZW50aXR5MkRNYXRyaXggJiYgIXRhcmdldC5vZmZzZXRQYXJlbnQgJiYgdGFyZ2V0ICE9PSBfZG9jRWxlbWVudCAmJiAhY2FjaGUuc3ZnKSB7XG4gICAgLy9ub3RlOiBpZiBvZmZzZXRQYXJlbnQgaXMgbnVsbCwgdGhhdCBtZWFucyB0aGUgZWxlbWVudCBpc24ndCBpbiB0aGUgbm9ybWFsIGRvY3VtZW50IGZsb3csIGxpa2UgaWYgaXQgaGFzIGRpc3BsYXk6bm9uZSBvciBvbmUgb2YgaXRzIGFuY2VzdG9ycyBoYXMgZGlzcGxheTpub25lKS4gRmlyZWZveCByZXR1cm5zIG51bGwgZm9yIGdldENvbXB1dGVkU3R5bGUoKSBpZiB0aGUgZWxlbWVudCBpcyBpbiBhbiBpZnJhbWUgdGhhdCBoYXMgZGlzcGxheTpub25lLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcbiAgICAvL2Jyb3dzZXJzIGRvbid0IHJlcG9ydCB0cmFuc2Zvcm1zIGFjY3VyYXRlbHkgdW5sZXNzIHRoZSBlbGVtZW50IGlzIGluIHRoZSBET00gYW5kIGhhcyBhIGRpc3BsYXkgdmFsdWUgdGhhdCdzIG5vdCBcIm5vbmVcIi4gRmlyZWZveCBhbmQgTWljcm9zb2Z0IGJyb3dzZXJzIGhhdmUgYSBwYXJ0aWFsIGJ1ZyB3aGVyZSB0aGV5J2xsIHJlcG9ydCB0cmFuc2Zvcm1zIGV2ZW4gaWYgZGlzcGxheTpub25lIEJVVCBub3QgYW55IHBlcmNlbnRhZ2UtYmFzZWQgdmFsdWVzIGxpa2UgdHJhbnNsYXRlKC01MCUsIDhweCkgd2lsbCBiZSByZXBvcnRlZCBhcyBpZiBpdCdzIHRyYW5zbGF0ZSgwLCA4cHgpLlxuICAgIHRlbXAgPSBzdHlsZS5kaXNwbGF5O1xuICAgIHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgICBpZiAoIXBhcmVudCB8fCAhdGFyZ2V0Lm9mZnNldFBhcmVudCkge1xuICAgICAgLy8gbm90ZTogaW4gMy4zLjAgd2Ugc3dpdGNoZWQgdGFyZ2V0Lm9mZnNldFBhcmVudCB0byBfZG9jLmJvZHkuY29udGFpbnModGFyZ2V0KSB0byBhdm9pZCBbc29tZXRpbWVzIHVubmVjZXNzYXJ5XSBNdXRhdGlvbk9ic2VydmVyIGNhbGxzIGJ1dCB0aGF0IHdhc24ndCBhZGVxdWF0ZSBiZWNhdXNlIHRoZXJlIGFyZSBlZGdlIGNhc2VzIHdoZXJlIG5lc3RlZCBwb3NpdGlvbjogZml4ZWQgZWxlbWVudHMgbmVlZCB0byBnZXQgcmVwYXJlbnRlZCB0byBhY2N1cmF0ZWx5IHNlbnNlIHRyYW5zZm9ybXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM4OCBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zNzVcbiAgICAgIGFkZGVkVG9ET00gPSAxOyAvL2ZsYWdcblxuICAgICAgbmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZCh0YXJnZXQpOyAvL3dlIG11c3QgYWRkIGl0IHRvIHRoZSBET00gaW4gb3JkZXIgdG8gZ2V0IHZhbHVlcyBwcm9wZXJseVxuXG4gICAgfVxuXG4gICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpO1xuICAgIHRlbXAgPyBzdHlsZS5kaXNwbGF5ID0gdGVtcCA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIFwiZGlzcGxheVwiKTtcblxuICAgIGlmIChhZGRlZFRvRE9NKSB7XG4gICAgICBuZXh0U2libGluZyA/IHBhcmVudC5pbnNlcnRCZWZvcmUodGFyZ2V0LCBuZXh0U2libGluZykgOiBwYXJlbnQgPyBwYXJlbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KSA6IF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcmNlMkQgJiYgbWF0cml4Lmxlbmd0aCA+IDYgPyBbbWF0cml4WzBdLCBtYXRyaXhbMV0sIG1hdHJpeFs0XSwgbWF0cml4WzVdLCBtYXRyaXhbMTJdLCBtYXRyaXhbMTNdXSA6IG1hdHJpeDtcbn0sXG4gICAgX2FwcGx5U1ZHT3JpZ2luID0gZnVuY3Rpb24gX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgb3JpZ2luLCBvcmlnaW5Jc0Fic29sdXRlLCBzbW9vdGgsIG1hdHJpeEFycmF5LCBwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBtYXRyaXggPSBtYXRyaXhBcnJheSB8fCBfZ2V0TWF0cml4KHRhcmdldCwgdHJ1ZSksXG4gICAgICB4T3JpZ2luT2xkID0gY2FjaGUueE9yaWdpbiB8fCAwLFxuICAgICAgeU9yaWdpbk9sZCA9IGNhY2hlLnlPcmlnaW4gfHwgMCxcbiAgICAgIHhPZmZzZXRPbGQgPSBjYWNoZS54T2Zmc2V0IHx8IDAsXG4gICAgICB5T2Zmc2V0T2xkID0gY2FjaGUueU9mZnNldCB8fCAwLFxuICAgICAgYSA9IG1hdHJpeFswXSxcbiAgICAgIGIgPSBtYXRyaXhbMV0sXG4gICAgICBjID0gbWF0cml4WzJdLFxuICAgICAgZCA9IG1hdHJpeFszXSxcbiAgICAgIHR4ID0gbWF0cml4WzRdLFxuICAgICAgdHkgPSBtYXRyaXhbNV0sXG4gICAgICBvcmlnaW5TcGxpdCA9IG9yaWdpbi5zcGxpdChcIiBcIiksXG4gICAgICB4T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFswXSkgfHwgMCxcbiAgICAgIHlPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzFdKSB8fCAwLFxuICAgICAgYm91bmRzLFxuICAgICAgZGV0ZXJtaW5hbnQsXG4gICAgICB4LFxuICAgICAgeTtcblxuICBpZiAoIW9yaWdpbklzQWJzb2x1dGUpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveCh0YXJnZXQpO1xuICAgIHhPcmlnaW4gPSBib3VuZHMueCArICh+b3JpZ2luU3BsaXRbMF0uaW5kZXhPZihcIiVcIikgPyB4T3JpZ2luIC8gMTAwICogYm91bmRzLndpZHRoIDogeE9yaWdpbik7XG4gICAgeU9yaWdpbiA9IGJvdW5kcy55ICsgKH4ob3JpZ2luU3BsaXRbMV0gfHwgb3JpZ2luU3BsaXRbMF0pLmluZGV4T2YoXCIlXCIpID8geU9yaWdpbiAvIDEwMCAqIGJvdW5kcy5oZWlnaHQgOiB5T3JpZ2luKTsgLy8gaWYgKCEoXCJ4T3JpZ2luXCIgaW4gY2FjaGUpICYmICh4T3JpZ2luIHx8IHlPcmlnaW4pKSB7IC8vIGFkZGVkIGluIDMuMTIuMywgcmV2ZXJ0ZWQgaW4gMy4xMi40OyByZXF1aXJlcyBtb3JlIGV4cGxvcmF0aW9uXG4gICAgLy8gXHR4T3JpZ2luIC09IGJvdW5kcy54O1xuICAgIC8vIFx0eU9yaWdpbiAtPSBib3VuZHMueTtcbiAgICAvLyB9XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7IC8vIHRoZW9yeTogd2Ugb25seSBoYWQgdG8gZG8gdGhpcyBmb3Igc21vb3RoaW5nIGFuZCBpdCBhc3N1bWVzIHRoYXQgdGhlIHByZXZpb3VzIG9uZSB3YXMgbm90IG9yaWdpbklzQWJzb2x1dGUuXG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcblxuICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgLy8gYWNjb21tb2RhdGUgaW5kZXBlbmRlbnQgdHJhbnNmb3JtcyBieSBjb21iaW5pbmcgdGhlbSBpbnRvIG5vcm1hbCBvbmVzLlxuICAgIGlmIChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiIHx8IGNzLnNjYWxlICE9PSBcIm5vbmVcIiB8fCBjcy5yb3RhdGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3NbX3RyYW5zZm9ybVByb3BdICE9PSBcIm5vbmVcIiA/IGNzW190cmFuc2Zvcm1Qcm9wXSA6IFwiXCIpO1xuICAgIH1cblxuICAgIHN0eWxlLnNjYWxlID0gc3R5bGUucm90YXRlID0gc3R5bGUudHJhbnNsYXRlID0gXCJub25lXCI7XG4gIH1cblxuICBtYXRyaXggPSBfZ2V0TWF0cml4KHRhcmdldCwgY2FjaGUuc3ZnKTtcblxuICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgaWYgKGNhY2hlLnVuY2FjaGUpIHtcbiAgICAgIC8vIGlmIGNhY2hlLnVuY2FjaGUgaXMgdHJ1ZSAoYW5kIG1heWJlIGlmIG9yaWdpbiBpcyAwLDApLCB3ZSBuZWVkIHRvIHNldCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IChjYWNoZS54T3JpZ2luIC0gYmJveC54KSArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIGJib3gueSkgKyBcInB4XCIuIFByZXZpb3VzbHkgd2UgbGV0IHRoZSBkYXRhLXN2Zy1vcmlnaW4gc3RheSBpbnN0ZWFkLCBidXQgd2hlbiBpbnRyb2R1Y2luZyByZXZlcnQoKSwgaXQgY29tcGxpY2F0ZWQgdGhpbmdzLlxuICAgICAgdDIgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgICAgb3JpZ2luID0gY2FjaGUueE9yaWdpbiAtIHQyLnggKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSB0Mi55KSArIFwicHhcIjtcbiAgICAgIHQxID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdDEgPSAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpOyAvLyAgUmVtZW1iZXIsIHRvIHdvcmsgYXJvdW5kIGJyb3dzZXIgaW5jb25zaXN0ZW5jaWVzIHdlIGFsd2F5cyBmb3JjZSBTVkcgZWxlbWVudHMnIHRyYW5zZm9ybU9yaWdpbiB0byAwLDAgYW5kIG9mZnNldCB0aGUgdHJhbnNsYXRpb24gYWNjb3JkaW5nbHkuXG4gICAgfVxuXG4gICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgdDEgfHwgb3JpZ2luLCAhIXQxIHx8IGNhY2hlLm9yaWdpbklzQWJzb2x1dGUsIGNhY2hlLnNtb290aCAhPT0gZmFsc2UsIG1hdHJpeCk7XG4gIH1cblxuICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICB5T3JpZ2luID0gY2FjaGUueU9yaWdpbiB8fCAwO1xuXG4gIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgYSA9IG1hdHJpeFswXTsgLy9hMTFcblxuICAgIGIgPSBtYXRyaXhbMV07IC8vYTIxXG5cbiAgICBjID0gbWF0cml4WzJdOyAvL2EzMVxuXG4gICAgZCA9IG1hdHJpeFszXTsgLy9hNDFcblxuICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgeSA9IGEyMiA9IG1hdHJpeFs1XTsgLy8yRCBtYXRyaXhcblxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG4gICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblxuICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgIH0gLy8zRCBtYXRyaXhcblxuICAgIH0gZWxzZSB7XG4gICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICBhMTMgPSBtYXRyaXhbOF07XG4gICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgYTQzID0gbWF0cml4WzExXTtcbiAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICB6ID0gbWF0cml4WzE0XTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7IC8vcm90YXRpb25YXG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGExMiAqIGNvcyArIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICBhMTMgPSBhMTIgKiAtc2luICsgYTEzICogY29zO1xuICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICBhNDMgPSBhNDIgKiAtc2luICsgYTQzICogY29zO1xuICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgYTIyID0gdDI7XG4gICAgICAgIGEzMiA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWVxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyAtIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgIGE0MyA9IGQgKiBzaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYiA9IHQyO1xuICAgICAgICBjID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25aXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zICsgYiAqIHNpbjtcbiAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgYTIyID0gYTIyICogY29zIC0gYTEyICogc2luO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGExMiA9IHQyO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgcm90YXRpb25YID0gcm90YXRpb24gPSAwO1xuICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICB9XG5cbiAgICAgIHNjYWxlWCA9IF9yb3VuZChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSk7XG4gICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgc2tld1ggPSBNYXRoLmFicyhhbmdsZSkgPiAwLjAwMDIgPyBhbmdsZSAqIF9SQUQyREVHIDogMDtcbiAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIC8vc2Vuc2UgaWYgdGhlcmUgYXJlIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb24gYW4gU1ZHIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHdoZW4gcmVuZGVyaW5nLiBUaGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpcyBtb3JlIHJlbGlhYmxlIGNyb3NzLWJyb3dzZXIsIGJ1dCB3ZSBjYW4ndCBqdXN0IHJlbW92ZSB0aGUgQ1NTIG9uZXMgYmVjYXVzZSB0aGV5IG1heSBiZSBhcHBsaWVkIGluIGEgQ1NTIHJ1bGUgc29tZXdoZXJlIChub3QganVzdCBpbmxpbmUpLlxuICAgICAgdDEgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICBpZiAoaW52ZXJ0ZWRTY2FsZVgpIHtcbiAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgcm90YXRpb24gKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHNrZXdYIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH1cbiAgfVxuXG4gIHVuY2FjaGUgPSB1bmNhY2hlIHx8IGNhY2hlLnVuY2FjaGU7XG4gIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKCF1bmNhY2hlICYmIGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKCF1bmNhY2hlICYmIGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAhdW5jYWNoZSAmJiBjYWNoZS56T3JpZ2luIHx8IDApIHtcbiAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBfZmlyc3RUd29Pbmx5KG9yaWdpbik7XG4gIH1cblxuICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIGNhY2hlLmZvcmNlM0QgPSBfY29uZmlnLmZvcmNlM0Q7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybSA9IGNhY2hlLnN2ZyA/IF9yZW5kZXJTVkdUcmFuc2Zvcm1zIDogX3N1cHBvcnRzM0QgPyBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA6IF9yZW5kZXJOb24zRFRyYW5zZm9ybXM7XG4gIGNhY2hlLnVuY2FjaGUgPSAwO1xuICByZXR1cm4gY2FjaGU7XG59LFxuICAgIF9maXJzdFR3b09ubHkgPSBmdW5jdGlvbiBfZmlyc3RUd29Pbmx5KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPSB2YWx1ZS5zcGxpdChcIiBcIikpWzBdICsgXCIgXCIgKyB2YWx1ZVsxXTtcbn0sXG4gICAgLy9mb3IgaGFuZGxpbmcgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcywgc3RyaXBwaW5nIG91dCB0aGUgM3JkIGRpbWVuc2lvblxuX2FkZFB4VHJhbnNsYXRlID0gZnVuY3Rpb24gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgc3RhcnQsIHZhbHVlKSB7XG4gIHZhciB1bml0ID0gZ2V0VW5pdChzdGFydCk7XG4gIHJldHVybiBfcm91bmQocGFyc2VGbG9hdChzdGFydCkgKyBwYXJzZUZsb2F0KF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHZhbHVlICsgXCJweFwiLCB1bml0KSkpICsgdW5pdDtcbn0sXG4gICAgX3JlbmRlck5vbjNEVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIGNhY2hlLnogPSBcIjBweFwiO1xuICBjYWNoZS5yb3RhdGlvblkgPSBjYWNoZS5yb3RhdGlvblggPSBcIjBkZWdcIjtcbiAgY2FjaGUuZm9yY2UzRCA9IDA7XG5cbiAgX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3plcm9EZWcgPSBcIjBkZWdcIixcbiAgICBfemVyb1B4ID0gXCIwcHhcIixcbiAgICBfZW5kUGFyZW50aGVzaXMgPSBcIikgXCIsXG4gICAgX3JlbmRlckNTU1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB6ID0gX3JlZi56LFxuICAgICAgcm90YXRpb24gPSBfcmVmLnJvdGF0aW9uLFxuICAgICAgcm90YXRpb25ZID0gX3JlZi5yb3RhdGlvblksXG4gICAgICByb3RhdGlvblggPSBfcmVmLnJvdGF0aW9uWCxcbiAgICAgIHNrZXdYID0gX3JlZi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IF9yZWYudHJhbnNmb3JtUGVyc3BlY3RpdmUsXG4gICAgICBmb3JjZTNEID0gX3JlZi5mb3JjZTNELFxuICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICB6T3JpZ2luID0gX3JlZi56T3JpZ2luLFxuICAgICAgdHJhbnNmb3JtcyA9IFwiXCIsXG4gICAgICB1c2UzRCA9IGZvcmNlM0QgPT09IFwiYXV0b1wiICYmIHJhdGlvICYmIHJhdGlvICE9PSAxIHx8IGZvcmNlM0QgPT09IHRydWU7IC8vIFNhZmFyaSBoYXMgYSBidWcgdGhhdCBjYXVzZXMgaXQgbm90IHRvIHJlbmRlciAzRCB0cmFuc2Zvcm0tb3JpZ2luIHZhbHVlcyBwcm9wZXJseSwgc28gd2UgZm9yY2UgdGhlIHogb3JpZ2luIHRvIDAsIHJlY29yZCBpdCBpbiB0aGUgY2FjaGUsIGFuZCB0aGVuIGRvIHRoZSBtYXRoIGhlcmUgdG8gb2Zmc2V0IHRoZSB0cmFuc2xhdGUgdmFsdWVzIGFjY29yZGluZ2x5IChiYXNpY2FsbHkgZG8gdGhlIDNEIHRyYW5zZm9ybS1vcmlnaW4gcGFydCBtYW51YWxseSlcblxuXG4gIGlmICh6T3JpZ2luICYmIChyb3RhdGlvblggIT09IF96ZXJvRGVnIHx8IHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpKSB7XG4gICAgdmFyIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblkpICogX0RFRzJSQUQsXG4gICAgICAgIGExMyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgYTMzID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjb3M7XG5cbiAgICBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25YKSAqIF9ERUcyUkFEO1xuICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICB4ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeCwgYTEzICogY29zICogLXpPcmlnaW4pO1xuICAgIHkgPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB5LCAtTWF0aC5zaW4oYW5nbGUpICogLXpPcmlnaW4pO1xuICAgIHogPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB6LCBhMzMgKiBjb3MgKiAtek9yaWdpbiArIHpPcmlnaW4pO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInBlcnNwZWN0aXZlKFwiICsgdHJhbnNmb3JtUGVyc3BlY3RpdmUgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwidHJhbnNsYXRlKFwiICsgeFBlcmNlbnQgKyBcIiUsIFwiICsgeVBlcmNlbnQgKyBcIiUpIFwiO1xuICB9XG5cbiAgaWYgKHVzZTNEIHx8IHggIT09IF96ZXJvUHggfHwgeSAhPT0gX3plcm9QeCB8fCB6ICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSB6ICE9PSBfemVyb1B4IHx8IHVzZTNEID8gXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIFwiICsgeiArIFwiKSBcIiA6IFwidHJhbnNsYXRlKFwiICsgeCArIFwiLCBcIiArIHkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb24gIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZShcIiArIHJvdGF0aW9uICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWShcIiArIHJvdGF0aW9uWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblggIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVgoXCIgKyByb3RhdGlvblggKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2tld1ggIT09IF96ZXJvRGVnIHx8IHNrZXdZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJza2V3KFwiICsgc2tld1ggKyBcIiwgXCIgKyBza2V3WSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNjYWxlKFwiICsgc2NhbGVYICsgXCIsIFwiICsgc2NhbGVZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXMgfHwgXCJ0cmFuc2xhdGUoMCwgMClcIjtcbn0sXG4gICAgX3JlbmRlclNWR1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYyID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZjIueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYyLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYyLngsXG4gICAgICB5ID0gX3JlZjIueSxcbiAgICAgIHJvdGF0aW9uID0gX3JlZjIucm90YXRpb24sXG4gICAgICBza2V3WCA9IF9yZWYyLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmMi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYyLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYyLnNjYWxlWSxcbiAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgIHhPcmlnaW4gPSBfcmVmMi54T3JpZ2luLFxuICAgICAgeU9yaWdpbiA9IF9yZWYyLnlPcmlnaW4sXG4gICAgICB4T2Zmc2V0ID0gX3JlZjIueE9mZnNldCxcbiAgICAgIHlPZmZzZXQgPSBfcmVmMi55T2Zmc2V0LFxuICAgICAgZm9yY2VDU1MgPSBfcmVmMi5mb3JjZUNTUyxcbiAgICAgIHR4ID0gcGFyc2VGbG9hdCh4KSxcbiAgICAgIHR5ID0gcGFyc2VGbG9hdCh5KSxcbiAgICAgIGExMSxcbiAgICAgIGEyMSxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHRlbXA7XG5cbiAgcm90YXRpb24gPSBwYXJzZUZsb2F0KHJvdGF0aW9uKTtcbiAgc2tld1ggPSBwYXJzZUZsb2F0KHNrZXdYKTtcbiAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcblxuICBpZiAoc2tld1kpIHtcbiAgICAvL2ZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAxMCBkZWdyZWVzLlxuICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG4gICAgc2tld1ggKz0gc2tld1k7XG4gICAgcm90YXRpb24gKz0gc2tld1k7XG4gIH1cblxuICBpZiAocm90YXRpb24gfHwgc2tld1gpIHtcbiAgICByb3RhdGlvbiAqPSBfREVHMlJBRDtcbiAgICBza2V3WCAqPSBfREVHMlJBRDtcbiAgICBhMTEgPSBNYXRoLmNvcyhyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTIxID0gTWF0aC5zaW4ocm90YXRpb24pICogc2NhbGVYO1xuICAgIGExMiA9IE1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogLXNjYWxlWTtcbiAgICBhMjIgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgIGlmIChza2V3WCkge1xuICAgICAgc2tld1kgKj0gX0RFRzJSQUQ7XG4gICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1ggLSBza2V3WSk7XG4gICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICBhMTIgKj0gdGVtcDtcbiAgICAgIGEyMiAqPSB0ZW1wO1xuXG4gICAgICBpZiAoc2tld1kpIHtcbiAgICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdZKTtcbiAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICBhMTEgKj0gdGVtcDtcbiAgICAgICAgYTIxICo9IHRlbXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYTExID0gX3JvdW5kKGExMSk7XG4gICAgYTIxID0gX3JvdW5kKGEyMSk7XG4gICAgYTEyID0gX3JvdW5kKGExMik7XG4gICAgYTIyID0gX3JvdW5kKGEyMik7XG4gIH0gZWxzZSB7XG4gICAgYTExID0gc2NhbGVYO1xuICAgIGEyMiA9IHNjYWxlWTtcbiAgICBhMjEgPSBhMTIgPSAwO1xuICB9XG5cbiAgaWYgKHR4ICYmICF+KHggKyBcIlwiKS5pbmRleE9mKFwicHhcIikgfHwgdHkgJiYgIX4oeSArIFwiXCIpLmluZGV4T2YoXCJweFwiKSkge1xuICAgIHR4ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgeCwgXCJweFwiKTtcbiAgICB0eSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ5XCIsIHksIFwicHhcIik7XG4gIH1cblxuICBpZiAoeE9yaWdpbiB8fCB5T3JpZ2luIHx8IHhPZmZzZXQgfHwgeU9mZnNldCkge1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeE9yaWdpbiAtICh4T3JpZ2luICogYTExICsgeU9yaWdpbiAqIGExMikgKyB4T2Zmc2V0KTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlPcmlnaW4gLSAoeE9yaWdpbiAqIGEyMSArIHlPcmlnaW4gKiBhMjIpICsgeU9mZnNldCk7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIHRyYW5zbGF0aW9uIHRvIHNpbXVsYXRlIGl0LlxuICAgIHRlbXAgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeFBlcmNlbnQgLyAxMDAgKiB0ZW1wLndpZHRoKTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlQZXJjZW50IC8gMTAwICogdGVtcC5oZWlnaHQpO1xuICB9XG5cbiAgdGVtcCA9IFwibWF0cml4KFwiICsgYTExICsgXCIsXCIgKyBhMjEgKyBcIixcIiArIGExMiArIFwiLFwiICsgYTIyICsgXCIsXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0ZW1wKTtcbiAgZm9yY2VDU1MgJiYgKHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0ZW1wKTsgLy9zb21lIGJyb3dzZXJzIHByaW9yaXRpemUgQ1NTIHRyYW5zZm9ybXMgb3ZlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gV2hlbiB3ZSBzZW5zZSB0aGF0IHRoZSB1c2VyIGhhcyBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkLCB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHRoaXMgd2F5IChvdGhlcndpc2Ugc29tZSBicm93c2VyIHNpbXBseSB3b24ndCByZW5kZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgY2hhbmdlcyEpXG59LFxuICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4ocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgZW5kVmFsdWUpIHtcbiAgdmFyIGNhcCA9IDM2MCxcbiAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpICogKGlzU3RyaW5nICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFkXCIpID8gX1JBRDJERUcgOiAxKSxcbiAgICAgIGNoYW5nZSA9IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHB0LnUgPSBcImRlZ1wiO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYXNzaWduID0gZnVuY3Rpb24gX2Fzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IGhhdmUgT2JqZWN0LmFzc2lnbigpLCBzbyB3ZSByZWNyZWF0ZSBpdCBoZXJlLlxuICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0YXJ0Q2FjaGUgPSBfYXNzaWduKHt9LCB0YXJnZXQuX2dzYXApLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGVuZENhY2hlLFxuICAgICAgcCxcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgZW5kTnVtLFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVW5pdDtcblxuICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICBzdGFydFZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gIH1cblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgcGx1Z2luLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG59OyAvLyBoYW5kbGUgc3BsaXR0aW5nIGFwYXJ0IHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyV2lkdGgsIGFuZCBib3JkZXJSYWRpdXMgaW50byB0aGVpciA0IGNvbXBvbmVudHMuIEZpcmVmb3gsIGZvciBleGFtcGxlLCB3b24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSAtIGl0IHdpbGwgb25seSBkbyBib3JkZXJUb3BMZWZ0UmFkaXVzIGFuZCB0aGUgb3RoZXIgY29ybmVycy4gV2UgYWxzbyB3YW50IHRvIGhhbmRsZSBwYWRkaW5nVG9wLCBtYXJnaW5MZWZ0LCBib3JkZXJSaWdodFdpZHRoLCBldGMuXG5cblxuX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICByID0gXCJSaWdodFwiLFxuICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICBwcm9wcyA9IChpbmRleCA8IDMgPyBbdCwgciwgYiwgbF0gOiBbdCArIGwsIHQgKyByLCBiICsgciwgYiArIGxdKS5tYXAoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gIH0pO1xuXG4gIF9zcGVjaWFsUHJvcHNbaW5kZXggPiAxID8gXCJib3JkZXJcIiArIG5hbWUgOiBuYW1lXSA9IGZ1bmN0aW9uIChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBhLCB2YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAvLyBnZXR0ZXIsIHBhc3NlZCB0YXJnZXQsIHByb3BlcnR5LCBhbmQgdW5pdCAoZnJvbSBfZ2V0KCkpXG4gICAgICBhID0gcHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgICB2YXJzID0gYS5qb2luKFwiIFwiKTtcbiAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgIH1cblxuICAgIGEgPSAoZW5kVmFsdWUgKyBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgdmFycyA9IHt9O1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgIHJldHVybiB2YXJzW3Byb3BdID0gYVtpXSA9IGFbaV0gfHwgYVsoaSAtIDEpIC8gMiB8IDBdO1xuICAgIH0pO1xuICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICB9O1xufSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0ge1xuICBuYW1lOiBcImNzc1wiLFxuICByZWdpc3RlcjogX2luaXRDb3JlLFxuICB0YXJnZXRUZXN0OiBmdW5jdGlvbiB0YXJnZXRUZXN0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBzdGFydEF0ID0gdHdlZW4udmFycy5zdGFydEF0LFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3BlY2lhbFByb3AsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgc21vb3RoLFxuICAgICAgICBoYXNQcmlvcml0eSxcbiAgICAgICAgaW5saW5lUHJvcHM7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7IC8vIHdlIG1heSBjYWxsIGluaXQoKSBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBwbHVnaW4gaW5zdGFuY2UsIGxpa2Ugd2hlbiBhZGRpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzLCBzbyBtYWtlIHN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSByZXZlcnQgZGF0YSBvciBpbmxpbmVQcm9wc1xuXG4gICAgdGhpcy5zdHlsZXMgPSB0aGlzLnN0eWxlcyB8fCBfZ2V0U3R5bGVTYXZlcih0YXJnZXQpO1xuICAgIGlubGluZVByb3BzID0gdGhpcy5zdHlsZXMucHJvcHM7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGlmIChwID09PSBcImF1dG9Sb3VuZFwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmRWYWx1ZSA9IHZhcnNbcF07XG5cbiAgICAgIGlmIChfcGx1Z2luc1twXSAmJiBfY2hlY2tQbHVnaW4ocCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKSB7XG4gICAgICAgIC8vIHBsdWdpbnNcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICBzcGVjaWFsUHJvcCA9IF9zcGVjaWFsUHJvcHNbcF07XG5cbiAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgIGVuZFZhbHVlID0gX3JlcGxhY2VSYW5kb20oZW5kVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlY2lhbFByb3ApIHtcbiAgICAgICAgc3BlY2lhbFByb3AodGhpcywgdGFyZ2V0LCBwLCBlbmRWYWx1ZSwgdHdlZW4pICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfSBlbHNlIGlmIChwLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiKSB7XG4gICAgICAgIC8vQ1NTIHZhcmlhYmxlXG4gICAgICAgIHN0YXJ0VmFsdWUgPSAoZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUocCkgKyBcIlwiKS50cmltKCk7XG4gICAgICAgIGVuZFZhbHVlICs9IFwiXCI7XG4gICAgICAgIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgIGlmICghX2NvbG9yRXhwLnRlc3Qoc3RhcnRWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBjb2xvcnMgZG9uJ3QgaGF2ZSB1bml0c1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kVW5pdCA/IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnRWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgKyBlbmRVbml0KSA6IHN0YXJ0VW5pdCAmJiAoZW5kVmFsdWUgKz0gc3RhcnRVbml0KTtcbiAgICAgICAgdGhpcy5hZGQoc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgICAgaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHN0YXJ0QXQgJiYgcCBpbiBzdGFydEF0KSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBzb21lb25lIGhhcmQtY29kZXMgYSBjb21wbGV4IHZhbHVlIGFzIHRoZSBzdGFydCwgbGlrZSB0b3A6IFwiY2FsYygydmggLyAyKVwiLiBXaXRob3V0IHRoaXMsIGl0J2QgdXNlIHRoZSBjb21wdXRlZCB2YWx1ZSAoYWx3YXlzIGluIHB4KVxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgX2lzU3RyaW5nKHN0YXJ0VmFsdWUpICYmIH5zdGFydFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpICYmIChzdGFydFZhbHVlID0gX3JlcGxhY2VSYW5kb20oc3RhcnRWYWx1ZSkpO1xuICAgICAgICAgIGdldFVuaXQoc3RhcnRWYWx1ZSArIFwiXCIpIHx8IHN0YXJ0VmFsdWUgPT09IFwiYXV0b1wiIHx8IChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0gfHwgZ2V0VW5pdChfZ2V0KHRhcmdldCwgcCkpIHx8IFwiXCIpOyAvLyBmb3IgY2FzZXMgd2hlbiBzb21lb25lIHBhc3NlcyBpbiBhIHVuaXRsZXNzIHZhbHVlIGxpa2Uge3g6IDEwMH07IGlmIHdlIHRyeSBzZXR0aW5nIHRyYW5zbGF0ZSgxMDAsIDBweCkgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICAgIChzdGFydFZhbHVlICsgXCJcIikuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKSk7IC8vIGNhbid0IHdvcmsgd2l0aCByZWxhdGl2ZSB2YWx1ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICByZWxhdGl2ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgJiYgZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiAmJiBlbmRWYWx1ZS5zdWJzdHIoMCwgMik7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKFwidmlzaWJpbGl0eVwiLCAwLCBzdHlsZS52aXNpYmlsaXR5KTtcblxuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgfnAuaW5kZXhPZihcIixcIikgJiYgKHAgPSBwLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkID0gcCBpbiBfdHJhbnNmb3JtUHJvcHM7IC8vLS0tIFRSQU5TRk9STS1SRUxBVEVEIC0tLVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlcy5zYXZlKHApO1xuXG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtICYmICF2YXJzLnBhcnNlVHJhbnNmb3JtIHx8IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHZhcnMucGFyc2VUcmFuc2Zvcm0pOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGdzYXAuc2V0KC4uLiB7dHJhbnNmb3JtOlwidHJhbnNsYXRlWCg1MHZ3KVwifSksIHRoZSBfZ2V0KCkgY2FsbCBkb2Vzbid0IHBhcnNlIHRoZSB0cmFuc2Zvcm0sIHRodXMgY2FjaGUucmVuZGVyVHJhbnNmb3JtIHdvbid0IGJlIHNldCB5ZXQgc28gZm9yY2UgdGhlIHBhcnNpbmcgb2YgdGhlIHRyYW5zZm9ybSBoZXJlLlxuXG4gICAgICAgICAgICBzbW9vdGggPSB2YXJzLnNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoO1xuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTsgLy90aGUgZmlyc3QgdGltZSB0aHJvdWdoLCBjcmVhdGUgdGhlIHJlbmRlcmluZyBQcm9wVHdlZW4gc28gdGhhdCBpdCBydW5zIExBU1QgKGluIHRoZSBsaW5rZWQgbGlzdCwgd2Uga2VlcCBhZGRpbmcgdG8gdGhlIGJlZ2lubmluZylcblxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7IC8vZmxhZyBpdCBhcyBkZXBlbmRlbnQgc28gdGhhdCBpZiB0aGluZ3MgZ2V0IGtpbGxlZC9vdmVyd3JpdHRlbiBhbmQgdGhpcyBpcyB0aGUgb25seSBQcm9wVHdlZW4gbGVmdCwgd2UgY2FuIHNhZmVseSBraWxsIHRoZSB3aG9sZSB0d2Vlbi5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGNhY2hlLCBcInNjYWxlWVwiLCBjYWNoZS5zY2FsZVksIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKGNhY2hlLnNjYWxlWSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIGNhY2hlLnNjYWxlWSB8fCAwLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICBwICs9IFwiWFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgMCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kVmFsdWUpIDogZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInNtb290aFwiLCBjYWNoZS5zbW9vdGgsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgY2FjaGVbcF0gPSBlbmRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyh0aGlzLCBlbmRWYWx1ZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAoZW5kTnVtIHx8IGVuZE51bSA9PT0gMCkgJiYgKHN0YXJ0TnVtIHx8IHN0YXJ0TnVtID09PSAwKSAmJiAhX2NvbXBsZXhFeHAudGVzdChlbmRWYWx1ZSkgJiYgcCBpbiBzdHlsZSkge1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTsgLy8gcHJvdGVjdCBhZ2FpbnN0IE5hTlxuXG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBpc1RyYW5zZm9ybVJlbGF0ZWQgPyBjYWNoZSA6IHN0eWxlLCBwLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSwgIWlzVHJhbnNmb3JtUmVsYXRlZCAmJiAoZW5kVW5pdCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpICYmIHZhcnMuYXV0b1JvdW5kICE9PSBmYWxzZSA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwICE9PSBcInBhcnNlVHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIF9taXNzaW5nUGx1Z2luKHAsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAocCBpbiBzdHlsZSA/IGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pIDogaW5saW5lUHJvcHMucHVzaChwLCAxLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSkpO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEudHdlZW4uX3RpbWUgfHwgIV9yZXZlcnRpbmcoKSkge1xuICAgICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5zdHlsZXMucmV2ZXJ0KCk7XG4gICAgfVxuICB9LFxuICBnZXQ6IF9nZXQsXG4gIGFsaWFzZXM6IF9wcm9wZXJ0eUFsaWFzZXMsXG4gIGdldFNldHRlcjogZnVuY3Rpb24gZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHBsdWdpbikge1xuICAgIC8vcmV0dXJucyBhIHNldHRlciBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUgYW5kIGFwcGxpZXMgaXQgYWNjb3JkaW5nbHkuIFJlbWVtYmVyLCBwcm9wZXJ0aWVzIGxpa2UgXCJ4XCIgYXJlbid0IGFzIHNpbXBsZSBhcyB0YXJnZXQuc3R5bGUucHJvcGVydHkgPSB2YWx1ZSBiZWNhdXNlIHRoZXkndmUgZ290IHRvIGJlIGFwcGxpZWQgdG8gYSBwcm94eSBvYmplY3QgYW5kIHRoZW4gbWVyZ2VkIGludG8gYSB0cmFuc2Zvcm0gc3RyaW5nIGluIGEgcmVuZGVyZXIuXG4gICAgdmFyIHAgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcbiAgICBwICYmIHAuaW5kZXhPZihcIixcIikgPCAwICYmIChwcm9wZXJ0eSA9IHApO1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0YXJnZXQuX2dzYXAueCB8fCBfZ2V0KHRhcmdldCwgXCJ4XCIpKSA/IHBsdWdpbiAmJiBfcmVjZW50U2V0dGVyUGx1Z2luID09PSBwbHVnaW4gPyBwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlIDogX3NldHRlclRyYW5zZm9ybSA6IChfcmVjZW50U2V0dGVyUGx1Z2luID0gcGx1Z2luIHx8IHt9KSAmJiAocHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgOiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcikgOiB0YXJnZXQuc3R5bGUgJiYgIV9pc1VuZGVmaW5lZCh0YXJnZXQuc3R5bGVbcHJvcGVydHldKSA/IF9zZXR0ZXJDU1NTdHlsZSA6IH5wcm9wZXJ0eS5pbmRleE9mKFwiLVwiKSA/IF9zZXR0ZXJDU1NQcm9wIDogX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgfSxcbiAgY29yZToge1xuICAgIF9yZW1vdmVQcm9wZXJ0eTogX3JlbW92ZVByb3BlcnR5LFxuICAgIF9nZXRNYXRyaXg6IF9nZXRNYXRyaXhcbiAgfVxufTtcbmdzYXAudXRpbHMuY2hlY2tQcmVmaXggPSBfY2hlY2tQcm9wUHJlZml4O1xuZ3NhcC5jb3JlLmdldFN0eWxlU2F2ZXIgPSBfZ2V0U3R5bGVTYXZlcjtcblxuKGZ1bmN0aW9uIChwb3NpdGlvbkFuZFNjYWxlLCByb3RhdGlvbiwgb3RoZXJzLCBhbGlhc2VzKSB7XG4gIHZhciBhbGwgPSBfZm9yRWFjaE5hbWUocG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb24gKyBcIixcIiArIG90aGVycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdHJhbnNmb3JtUHJvcHNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfZm9yRWFjaE5hbWUocm90YXRpb24sIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwiZGVnXCI7XG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX3Byb3BlcnR5QWxpYXNlc1thbGxbMTNdXSA9IHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uO1xuXG4gIF9mb3JFYWNoTmFtZShhbGlhc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzcGxpdCA9IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgIF9wcm9wZXJ0eUFsaWFzZXNbc3BsaXRbMV1dID0gYWxsW3NwbGl0WzBdXTtcbiAgfSk7XG59KShcIngseSx6LHNjYWxlLHNjYWxlWCxzY2FsZVkseFBlcmNlbnQseVBlcmNlbnRcIiwgXCJyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHNrZXdYLHNrZXdZXCIsIFwidHJhbnNmb3JtLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sZm9yY2UzRCxzbW9vdGhPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmVcIiwgXCIwOnRyYW5zbGF0ZVgsMTp0cmFuc2xhdGVZLDI6dHJhbnNsYXRlWiw4OnJvdGF0ZSw4OnJvdGF0aW9uWiw4OnJvdGF0ZVosOTpyb3RhdGVYLDEwOnJvdGF0ZVlcIik7XG5cbl9mb3JFYWNoTmFtZShcIngseSx6LHRvcCxyaWdodCxib3R0b20sbGVmdCx3aWR0aCxoZWlnaHQsZm9udFNpemUscGFkZGluZyxtYXJnaW4scGVyc3BlY3RpdmVcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwicHhcIjtcbn0pO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbik7XG5leHBvcnQgeyBDU1NQbHVnaW4gYXMgZGVmYXVsdCwgX2dldEJCb3gsIF9jcmVhdGVFbGVtZW50LCBfY2hlY2tQcm9wUHJlZml4IGFzIGNoZWNrUHJlZml4IH07IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKiFcbiAqIEdTQVAgMy4xMi41XG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyNCwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9jb25maWcgPSB7XG4gIGF1dG9TbGVlcDogMTIwLFxuICBmb3JjZTNEOiBcImF1dG9cIixcbiAgbnVsbFRhcmdldFdhcm46IDEsXG4gIHVuaXRzOiB7XG4gICAgbGluZUhlaWdodDogXCJcIlxuICB9XG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IC41LFxuICBvdmVyd3JpdGU6IGZhbHNlLFxuICBkZWxheTogMFxufSxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX2NvbnRleHQsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfdGlueU51bSA9IDEgLyBfYmlnTnVtLFxuICAgIF8yUEkgPSBNYXRoLlBJICogMixcbiAgICBfSEFMRl9QSSA9IF8yUEkgLyA0LFxuICAgIF9nc0lEID0gMCxcbiAgICBfc3FydCA9IE1hdGguc3FydCxcbiAgICBfY29zID0gTWF0aC5jb3MsXG4gICAgX3NpbiA9IE1hdGguc2luLFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIF9pc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2lzTm90RmFsc2UgPSBmdW5jdGlvbiBfaXNOb3RGYWxzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xufSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc0Z1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9pc0Z1bmNPclN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpIHx8IF9pc1N0cmluZyh2YWx1ZSk7XG59LFxuICAgIF9pc1R5cGVkQXJyYXkgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24gKCkge30sXG4gICAgLy8gbm90ZTogSUUxMCBoYXMgQXJyYXlCdWZmZXIsIGJ1dCBOT1QgQXJyYXlCdWZmZXIuaXNWaWV3KCkuXG5faXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgX3N0cmljdE51bUV4cCA9IC8oPzotP1xcLj9cXGR8XFwuKSsvZ2ksXG4gICAgLy9vbmx5IG51bWJlcnMgKGluY2x1ZGluZyBuZWdhdGl2ZXMgYW5kIGRlY2ltYWxzKSBidXQgTk9UIHJlbGF0aXZlIHZhbHVlcy5cbl9udW1FeHAgPSAvWy0rPS5dKlxcZCtbLmVcXC0rXSpcXGQqW2VcXC0rXSpcXGQqL2csXG4gICAgLy9maW5kcyBhbnkgbnVtYmVycywgaW5jbHVkaW5nIG9uZXMgdGhhdCBzdGFydCB3aXRoICs9IG9yIC09LCBuZWdhdGl2ZSBudW1iZXJzLCBhbmQgb25lcyBpbiBzY2llbnRpZmljIG5vdGF0aW9uIGxpa2UgMWUtOC5cbl9udW1XaXRoVW5pdEV4cCA9IC9bLSs9Ll0qXFxkK1suZS1dKlxcZCpbYS16JV0qL2csXG4gICAgX2NvbXBsZXhTdHJpbmdOdW1FeHAgPSAvWy0rPS5dKlxcZCtcXC4/XFxkKig/OmUtfGVcXCspP1xcZCovZ2ksXG4gICAgLy9kdXBsaWNhdGUgc28gdGhhdCB3aGlsZSB3ZSdyZSBsb29waW5nIHRocm91Z2ggbWF0Y2hlcyBmcm9tIGV4ZWMoKSwgaXQgZG9lc24ndCBjb250YW1pbmF0ZSB0aGUgbGFzdEluZGV4IG9mIF9udW1FeHAgd2hpY2ggd2UgdXNlIHRvIHNlYXJjaCBmb3IgY29sb3JzIHRvby5cbl9yZWxFeHAgPSAvWystXT0tP1suXFxkXSsvLFxuICAgIF9kZWxpbWl0ZWRWYWx1ZUV4cCA9IC9bXiwnXCJcXFtcXF1cXHNdKy9naSxcbiAgICAvLyBwcmV2aW91c2x5IC9bI1xcLSsuXSpcXGJbYS16XFxkXFwtPSslLl0rL2dpIGJ1dCBkaWRuJ3QgY2F0Y2ggc3BlY2lhbCBjaGFyYWN0ZXJzLlxuX3VuaXRFeHAgPSAvXlsrXFwtPWVcXHNcXGRdKlxcZCtbLlxcZF0qKFthLXpdKnwlKVxccyokL2ksXG4gICAgX2dsb2JhbFRpbWVsaW5lLFxuICAgIF93aW4sXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9kb2MsXG4gICAgX2dsb2JhbHMgPSB7fSxcbiAgICBfaW5zdGFsbFNjb3BlID0ge30sXG4gICAgX2NvcmVSZWFkeSxcbiAgICBfaW5zdGFsbCA9IGZ1bmN0aW9uIF9pbnN0YWxsKHNjb3BlKSB7XG4gIHJldHVybiAoX2luc3RhbGxTY29wZSA9IF9tZXJnZShzY29wZSwgX2dsb2JhbHMpKSAmJiBnc2FwO1xufSxcbiAgICBfbWlzc2luZ1BsdWdpbiA9IGZ1bmN0aW9uIF9taXNzaW5nUGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gY29uc29sZS53YXJuKFwiSW52YWxpZCBwcm9wZXJ0eVwiLCBwcm9wZXJ0eSwgXCJzZXQgdG9cIiwgdmFsdWUsIFwiTWlzc2luZyBwbHVnaW4/IGdzYXAucmVnaXN0ZXJQbHVnaW4oKVwiKTtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlLCBzdXBwcmVzcykge1xuICByZXR1cm4gIXN1cHByZXNzICYmIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn0sXG4gICAgX2FkZEdsb2JhbCA9IGZ1bmN0aW9uIF9hZGRHbG9iYWwobmFtZSwgb2JqKSB7XG4gIHJldHVybiBuYW1lICYmIChfZ2xvYmFsc1tuYW1lXSA9IG9iaikgJiYgX2luc3RhbGxTY29wZSAmJiAoX2luc3RhbGxTY29wZVtuYW1lXSA9IG9iaikgfHwgX2dsb2JhbHM7XG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICByZXR1cm4gMDtcbn0sXG4gICAgX3N0YXJ0QXRSZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBpc1N0YXJ0OiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnTm9LaWxsID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZSxcbiAga2lsbDogZmFsc2Vcbn0sXG4gICAgX3JldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWVcbn0sXG4gICAgX3Jlc2VydmVkUHJvcHMgPSB7fSxcbiAgICBfbGF6eVR3ZWVucyA9IFtdLFxuICAgIF9sYXp5TG9va3VwID0ge30sXG4gICAgX2xhc3RSZW5kZXJlZEZyYW1lLFxuICAgIF9wbHVnaW5zID0ge30sXG4gICAgX2VmZmVjdHMgPSB7fSxcbiAgICBfbmV4dEdDRnJhbWUgPSAzMCxcbiAgICBfaGFybmVzc1BsdWdpbnMgPSBbXSxcbiAgICBfY2FsbGJhY2tOYW1lcyA9IFwiXCIsXG4gICAgX2hhcm5lc3MgPSBmdW5jdGlvbiBfaGFybmVzcyh0YXJnZXRzKSB7XG4gIHZhciB0YXJnZXQgPSB0YXJnZXRzWzBdLFxuICAgICAgaGFybmVzc1BsdWdpbixcbiAgICAgIGk7XG4gIF9pc09iamVjdCh0YXJnZXQpIHx8IF9pc0Z1bmN0aW9uKHRhcmdldCkgfHwgKHRhcmdldHMgPSBbdGFyZ2V0c10pO1xuXG4gIGlmICghKGhhcm5lc3NQbHVnaW4gPSAodGFyZ2V0Ll9nc2FwIHx8IHt9KS5oYXJuZXNzKSkge1xuICAgIC8vIGZpbmQgdGhlIGZpcnN0IHRhcmdldCB3aXRoIGEgaGFybmVzcy4gV2UgYXNzdW1lIHRhcmdldHMgcGFzc2VkIGludG8gYW4gYW5pbWF0aW9uIHdpbGwgYmUgb2Ygc2ltaWxhciB0eXBlLCBtZWFuaW5nIHRoZSBzYW1lIGtpbmQgb2YgaGFybmVzcyBjYW4gYmUgdXNlZCBmb3IgdGhlbSBhbGwgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICBpID0gX2hhcm5lc3NQbHVnaW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0gJiYgIV9oYXJuZXNzUGx1Z2luc1tpXS50YXJnZXRUZXN0KHRhcmdldCkpIHt9XG5cbiAgICBoYXJuZXNzUGx1Z2luID0gX2hhcm5lc3NQbHVnaW5zW2ldO1xuICB9XG5cbiAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB0YXJnZXRzW2ldICYmICh0YXJnZXRzW2ldLl9nc2FwIHx8ICh0YXJnZXRzW2ldLl9nc2FwID0gbmV3IEdTQ2FjaGUodGFyZ2V0c1tpXSwgaGFybmVzc1BsdWdpbikpKSB8fCB0YXJnZXRzLnNwbGljZShpLCAxKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXRzO1xufSxcbiAgICBfZ2V0Q2FjaGUgPSBmdW5jdGlvbiBfZ2V0Q2FjaGUodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModG9BcnJheSh0YXJnZXQpKVswXS5fZ3NhcDtcbn0sXG4gICAgX2dldFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHYpIHtcbiAgcmV0dXJuICh2ID0gdGFyZ2V0W3Byb3BlcnR5XSkgJiYgX2lzRnVuY3Rpb24odikgPyB0YXJnZXRbcHJvcGVydHldKCkgOiBfaXNVbmRlZmluZWQodikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKHByb3BlcnR5KSB8fCB2O1xufSxcbiAgICBfZm9yRWFjaE5hbWUgPSBmdW5jdGlvbiBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmMpIHtcbiAgcmV0dXJuIChuYW1lcyA9IG5hbWVzLnNwbGl0KFwiLFwiKSkuZm9yRWFjaChmdW5jKSB8fCBuYW1lcztcbn0sXG4gICAgLy9zcGxpdCBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIG5hbWVzIGludG8gYW4gYXJyYXksIHRoZW4gcnVuIGEgZm9yRWFjaCgpIGZ1bmN0aW9uIGFuZCByZXR1cm4gdGhlIHNwbGl0IGFycmF5ICh0aGlzIGlzIGp1c3QgYSB3YXkgdG8gY29uc29saWRhdGUvc2hvcnRlbiBzb21lIGNvZGUpLlxuX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwKSAvIDEwMDAwMCB8fCAwO1xufSxcbiAgICBfcm91bmRQcmVjaXNlID0gZnVuY3Rpb24gX3JvdW5kUHJlY2lzZSh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMDAwKSAvIDEwMDAwMDAwIHx8IDA7XG59LFxuICAgIC8vIGluY3JlYXNlZCBwcmVjaXNpb24gbW9zdGx5IGZvciB0aW1pbmcgdmFsdWVzLlxuX3BhcnNlUmVsYXRpdmUgPSBmdW5jdGlvbiBfcGFyc2VSZWxhdGl2ZShzdGFydCwgdmFsdWUpIHtcbiAgdmFyIG9wZXJhdG9yID0gdmFsdWUuY2hhckF0KDApLFxuICAgICAgZW5kID0gcGFyc2VGbG9hdCh2YWx1ZS5zdWJzdHIoMikpO1xuICBzdGFydCA9IHBhcnNlRmxvYXQoc3RhcnQpO1xuICByZXR1cm4gb3BlcmF0b3IgPT09IFwiK1wiID8gc3RhcnQgKyBlbmQgOiBvcGVyYXRvciA9PT0gXCItXCIgPyBzdGFydCAtIGVuZCA6IG9wZXJhdG9yID09PSBcIipcIiA/IHN0YXJ0ICogZW5kIDogc3RhcnQgLyBlbmQ7XG59LFxuICAgIF9hcnJheUNvbnRhaW5zQW55ID0gZnVuY3Rpb24gX2FycmF5Q29udGFpbnNBbnkodG9TZWFyY2gsIHRvRmluZCkge1xuICAvL3NlYXJjaGVzIG9uZSBhcnJheSB0byBmaW5kIG1hdGNoZXMgZm9yIGFueSBvZiB0aGUgaXRlbXMgaW4gdGhlIHRvRmluZCBhcnJheS4gQXMgc29vbiBhcyBvbmUgaXMgZm91bmQsIGl0IHJldHVybnMgdHJ1ZS4gSXQgZG9lcyBOT1QgcmV0dXJuIGFsbCB0aGUgbWF0Y2hlczsgaXQncyBzaW1wbHkgYSBib29sZWFuIHNlYXJjaC5cbiAgdmFyIGwgPSB0b0ZpbmQubGVuZ3RoLFxuICAgICAgaSA9IDA7XG5cbiAgZm9yICg7IHRvU2VhcmNoLmluZGV4T2YodG9GaW5kW2ldKSA8IDAgJiYgKytpIDwgbDspIHt9XG5cbiAgcmV0dXJuIGkgPCBsO1xufSxcbiAgICBfbGF6eVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5UmVuZGVyKCkge1xuICB2YXIgbCA9IF9sYXp5VHdlZW5zLmxlbmd0aCxcbiAgICAgIGEgPSBfbGF6eVR3ZWVucy5zbGljZSgwKSxcbiAgICAgIGksXG4gICAgICB0d2VlbjtcblxuICBfbGF6eUxvb2t1cCA9IHt9O1xuICBfbGF6eVR3ZWVucy5sZW5ndGggPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICB0d2VlbiA9IGFbaV07XG4gICAgdHdlZW4gJiYgdHdlZW4uX2xhenkgJiYgKHR3ZWVuLnJlbmRlcih0d2Vlbi5fbGF6eVswXSwgdHdlZW4uX2xhenlbMV0sIHRydWUpLl9sYXp5ID0gMCk7XG4gIH1cbn0sXG4gICAgX2xhenlTYWZlUmVuZGVyID0gZnVuY3Rpb24gX2xhenlTYWZlUmVuZGVyKGFuaW1hdGlvbiwgdGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiAhX3JldmVydGluZyAmJiBfbGF6eVJlbmRlcigpO1xuICBhbmltYXRpb24ucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIHRpbWUgPCAwICYmIChhbmltYXRpb24uX2luaXR0ZWQgfHwgYW5pbWF0aW9uLl9zdGFydEF0KSk7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiAhX3JldmVydGluZyAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gc29tZW9uZSBjYWxscyBzZWVrKCkgb3IgdGltZSgpIG9yIHByb2dyZXNzKCksIHRoZXkgZXhwZWN0IGFuIGltbWVkaWF0ZSByZW5kZXIuXG59LFxuICAgIF9udW1lcmljSWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9udW1lcmljSWZQb3NzaWJsZSh2YWx1ZSkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICByZXR1cm4gKG4gfHwgbiA9PT0gMCkgJiYgKHZhbHVlICsgXCJcIikubWF0Y2goX2RlbGltaXRlZFZhbHVlRXhwKS5sZW5ndGggPCAyID8gbiA6IF9pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHApIHtcbiAgcmV0dXJuIHA7XG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3NldEtleWZyYW1lRGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhleGNsdWRlRHVyYXRpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGRlZmF1bHRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiICYmIGV4Y2x1ZGVEdXJhdGlvbiB8fCBwID09PSBcImVhc2VcIiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgIH1cbiAgfTtcbn0sXG4gICAgX21lcmdlID0gZnVuY3Rpb24gX21lcmdlKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX21lcmdlRGVlcCA9IGZ1bmN0aW9uIF9tZXJnZURlZXAoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBwICE9PSBcIl9fcHJvdG9fX1wiICYmIHAgIT09IFwiY29uc3RydWN0b3JcIiAmJiBwICE9PSBcInByb3RvdHlwZVwiICYmIChiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9jb3B5RXhjbHVkaW5nID0gZnVuY3Rpb24gX2NvcHlFeGNsdWRpbmcob2JqLCBleGNsdWRpbmcpIHtcbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIG9iaikge1xuICAgIHAgaW4gZXhjbHVkaW5nIHx8IChjb3B5W3BdID0gb2JqW3BdKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfaW5oZXJpdERlZmF1bHRzID0gZnVuY3Rpb24gX2luaGVyaXREZWZhdWx0cyh2YXJzKSB7XG4gIHZhciBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICBmdW5jID0gdmFycy5rZXlmcmFtZXMgPyBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhfaXNBcnJheSh2YXJzLmtleWZyYW1lcykpIDogX3NldERlZmF1bHRzO1xuXG4gIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcnM7XG59LFxuICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICBtYXRjaCA9IGkgPT09IGEyLmxlbmd0aDtcblxuICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICByZXR1cm4gaSA8IDA7XG59LFxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICB0O1xuXG4gIGlmIChzb3J0QnkpIHtcbiAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgIHdoaWxlIChwcmV2ICYmIHByZXZbc29ydEJ5XSA+IHQpIHtcbiAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgIHByZXYuX25leHQgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICBjaGlsZC5fbmV4dC5fcHJldiA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICByZXR1cm4gY2hpbGQ7XG59LFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBjaGlsZC5fcHJldixcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICBpZiAocHJldikge1xuICAgIHByZXYuX25leHQgPSBuZXh0O1xuICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5fcHJldiA9IHByZXY7XG4gIH0gZWxzZSBpZiAocGFyZW50W2xhc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgfVxuXG4gIGNoaWxkLl9uZXh0ID0gY2hpbGQuX3ByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsOyAvLyBkb24ndCBkZWxldGUgdGhlIF9kcCBqdXN0IHNvIHdlIGNhbiByZXZlcnQgaWYgbmVjZXNzYXJ5LiBCdXQgcGFyZW50IHNob3VsZCBiZSBudWxsIHRvIGluZGljYXRlIHRoZSBpdGVtIGlzbid0IGluIGEgbGlua2VkIGxpc3QuXG59LFxuICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlICYmIGNoaWxkLnBhcmVudC5yZW1vdmUoY2hpbGQpO1xuICBjaGlsZC5fYWN0ID0gMDtcbn0sXG4gICAgX3VuY2FjaGUgPSBmdW5jdGlvbiBfdW5jYWNoZShhbmltYXRpb24sIGNoaWxkKSB7XG4gIGlmIChhbmltYXRpb24gJiYgKCFjaGlsZCB8fCBjaGlsZC5fZW5kID4gYW5pbWF0aW9uLl9kdXIgfHwgY2hpbGQuX3N0YXJ0IDwgMCkpIHtcbiAgICAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IGlmIGEgY2hpbGQgYW5pbWF0aW9uIGlzIHBhc3NlZCBpbiB3ZSBzaG91bGQgb25seSB1bmNhY2hlIGlmIHRoYXQgY2hpbGQgRVhURU5EUyB0aGUgYW5pbWF0aW9uIChpdHMgZW5kIHRpbWUgaXMgYmV5b25kIHRoZSBlbmQpXG4gICAgdmFyIGEgPSBhbmltYXRpb247XG5cbiAgICB3aGlsZSAoYSkge1xuICAgICAgYS5fZGlydHkgPSAxO1xuICAgICAgYSA9IGEucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZWNhY2hlQW5jZXN0b3JzID0gZnVuY3Rpb24gX3JlY2FjaGVBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24ucGFyZW50O1xuXG4gIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgIC8vc29tZXRpbWVzIHdlIG11c3QgZm9yY2UgYSByZS1zb3J0IG9mIGFsbCBjaGlsZHJlbiBhbmQgdXBkYXRlIHRoZSBkdXJhdGlvbi90b3RhbER1cmF0aW9uIG9mIGFsbCBhbmNlc3RvciB0aW1lbGluZXMgaW1tZWRpYXRlbHkgaW4gY2FzZSwgZm9yIGV4YW1wbGUsIGluIHRoZSBtaWRkbGUgb2YgYSByZW5kZXIgbG9vcCwgb25lIHR3ZWVuIGFsdGVycyBhbm90aGVyIHR3ZWVuJ3MgdGltZVNjYWxlIHdoaWNoIHNob3ZlcyBpdHMgc3RhcnRUaW1lIGJlZm9yZSAwLCBmb3JjaW5nIHRoZSBwYXJlbnQgdGltZWxpbmUgdG8gc2hpZnQgYXJvdW5kIGFuZCBzaGlmdENoaWxkcmVuKCkgd2hpY2ggY291bGQgYWZmZWN0IHRoYXQgbmV4dCB0d2VlbidzIHJlbmRlciAoc3RhcnRUaW1lKS4gRG9lc24ndCBtYXR0ZXIgZm9yIHRoZSByb290IHRpbWVsaW5lIHRob3VnaC5cbiAgICBwYXJlbnQuX2RpcnR5ID0gMTtcbiAgICBwYXJlbnQudG90YWxEdXJhdGlvbigpO1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmV3aW5kU3RhcnRBdCA9IGZ1bmN0aW9uIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICByZXR1cm4gdHdlZW4uX3N0YXJ0QXQgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCkgOiB0d2Vlbi52YXJzLmltbWVkaWF0ZVJlbmRlciAmJiAhdHdlZW4udmFycy5hdXRvUmV2ZXJ0IHx8IHR3ZWVuLl9zdGFydEF0LnJlbmRlcih0b3RhbFRpbWUsIHRydWUsIGZvcmNlKSk7XG59LFxuICAgIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgcmV0dXJuICFhbmltYXRpb24gfHwgYW5pbWF0aW9uLl90cyAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uLnBhcmVudCk7XG59LFxuICAgIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbiA9IGZ1bmN0aW9uIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKGFuaW1hdGlvbi5fdFRpbWUsIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpICsgYW5pbWF0aW9uLl9yRGVsYXkpICogYW5pbWF0aW9uIDogMDtcbn0sXG4gICAgLy8gZmVlZCBpbiB0aGUgdG90YWxUaW1lIGFuZCBjeWNsZUR1cmF0aW9uIGFuZCBpdCdsbCByZXR1cm4gdGhlIGN5Y2xlIChpdGVyYXRpb24gbWludXMgMSkgYW5kIGlmIHRoZSBwbGF5aGVhZCBpcyBleGFjdGx5IGF0IHRoZSB2ZXJ5IEVORCwgaXQgd2lsbCBOT1QgYnVtcCB1cCB0byB0aGUgbmV4dCBjeWNsZS5cbl9hbmltYXRpb25DeWNsZSA9IGZ1bmN0aW9uIF9hbmltYXRpb25DeWNsZSh0VGltZSwgY3ljbGVEdXJhdGlvbikge1xuICB2YXIgd2hvbGUgPSBNYXRoLmZsb29yKHRUaW1lIC89IGN5Y2xlRHVyYXRpb24pO1xuICByZXR1cm4gdFRpbWUgJiYgd2hvbGUgPT09IHRUaW1lID8gd2hvbGUgLSAxIDogd2hvbGU7XG59LFxuICAgIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lID0gZnVuY3Rpb24gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50VGltZSwgY2hpbGQpIHtcbiAgcmV0dXJuIChwYXJlbnRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyArIChjaGlsZC5fdHMgPj0gMCA/IDAgOiBjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cik7XG59LFxuICAgIF9zZXRFbmQgPSBmdW5jdGlvbiBfc2V0RW5kKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9lbmQgPSBfcm91bmRQcmVjaXNlKGFuaW1hdGlvbi5fc3RhcnQgKyAoYW5pbWF0aW9uLl90RHVyIC8gTWF0aC5hYnMoYW5pbWF0aW9uLl90cyB8fCBhbmltYXRpb24uX3J0cyB8fCBfdGlueU51bSkgfHwgMCkpO1xufSxcbiAgICBfYWxpZ25QbGF5aGVhZCA9IGZ1bmN0aW9uIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgdG90YWxUaW1lKSB7XG4gIC8vIGFkanVzdHMgdGhlIGFuaW1hdGlvbidzIF9zdGFydCBhbmQgX2VuZCBhY2NvcmRpbmcgdG8gdGhlIHByb3ZpZGVkIHRvdGFsVGltZSAob25seSBpZiB0aGUgcGFyZW50J3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSBhbmQgdGhlIGFuaW1hdGlvbiBpc24ndCBwYXVzZWQpLiBJdCBkb2Vzbid0IGRvIGFueSByZW5kZXJpbmcgb3IgZm9yY2luZyB0aGluZ3MgYmFjayBpbnRvIHBhcmVudCB0aW1lbGluZXMsIGV0Yy4gLSB0aGF0J3Mgd2hhdCB0b3RhbFRpbWUoKSBpcyBmb3IuXG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24uX2RwO1xuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIGFuaW1hdGlvbi5fdHMpIHtcbiAgICBhbmltYXRpb24uX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUgLSAoYW5pbWF0aW9uLl90cyA+IDAgPyB0b3RhbFRpbWUgLyBhbmltYXRpb24uX3RzIDogKChhbmltYXRpb24uX2RpcnR5ID8gYW5pbWF0aW9uLnRvdGFsRHVyYXRpb24oKSA6IGFuaW1hdGlvbi5fdER1cikgLSB0b3RhbFRpbWUpIC8gLWFuaW1hdGlvbi5fdHMpKTtcblxuICAgIF9zZXRFbmQoYW5pbWF0aW9uKTtcblxuICAgIHBhcmVudC5fZGlydHkgfHwgX3VuY2FjaGUocGFyZW50LCBhbmltYXRpb24pOyAvL2ZvciBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudC4gSWYgdGhlIHBhcmVudCdzIGNhY2hlIGlzIGFscmVhZHkgZGlydHksIGl0IGFscmVhZHkgdG9vayBjYXJlIG9mIG1hcmtpbmcgdGhlIGFuY2VzdG9ycyBhcyBkaXJ0eSB0b28sIHNvIHNraXAgdGhlIGZ1bmN0aW9uIGNhbGwgaGVyZS5cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuXG4vKlxuX3RvdGFsVGltZVRvVGltZSA9IChjbGFtcGVkVG90YWxUaW1lLCBkdXJhdGlvbiwgcmVwZWF0LCByZXBlYXREZWxheSwgeW95bykgPT4ge1xuXHRsZXQgY3ljbGVEdXJhdGlvbiA9IGR1cmF0aW9uICsgcmVwZWF0RGVsYXksXG5cdFx0dGltZSA9IF9yb3VuZChjbGFtcGVkVG90YWxUaW1lICUgY3ljbGVEdXJhdGlvbik7XG5cdGlmICh0aW1lID4gZHVyYXRpb24pIHtcblx0XHR0aW1lID0gZHVyYXRpb247XG5cdH1cblx0cmV0dXJuICh5b3lvICYmICh+fihjbGFtcGVkVG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbikgJiAxKSkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xufSxcbiovXG5fcG9zdEFkZENoZWNrcyA9IGZ1bmN0aW9uIF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCkge1xuICB2YXIgdDtcblxuICBpZiAoY2hpbGQuX3RpbWUgfHwgIWNoaWxkLl9kdXIgJiYgY2hpbGQuX2luaXR0ZWQgfHwgY2hpbGQuX3N0YXJ0IDwgdGltZWxpbmUuX3RpbWUgJiYgKGNoaWxkLl9kdXIgfHwgIWNoaWxkLmFkZCkpIHtcbiAgICAvLyBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgdGhlIF9zdGFydCBpcyBtb3ZlZCBvbiBhIHR3ZWVuIHRoYXQgaGFzIGFscmVhZHkgcmVuZGVyZWQsIG9yIGlmIGl0J3MgYmVpbmcgaW5zZXJ0ZWQgaW50byBhIHRpbWVsaW5lIEJFRk9SRSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgY3VycmVudGx5LiBJbWFnaW5lIGl0J3MgYXQgaXRzIGVuZCBzdGF0ZSwgdGhlbiB0aGUgc3RhcnRUaW1lIGlzIG1vdmVkIFdBWSBsYXRlciAoYWZ0ZXIgdGhlIGVuZCBvZiB0aGlzIHRpbWVsaW5lKSwgaXQgc2hvdWxkIHJlbmRlciBhdCBpdHMgYmVnaW5uaW5nLiBTcGVjaWFsIGNhc2U6IGlmIGl0J3MgYSB0aW1lbGluZSAoaGFzIC5hZGQoKSBtZXRob2QpIGFuZCBubyBkdXJhdGlvbiwgd2UgY2FuIHNraXAgcmVuZGVyaW5nIGJlY2F1c2UgdGhlIHVzZXIgbWF5IGJlIHBvcHVsYXRpbmcgaXQgQUZURVIgYWRkaW5nIGl0IHRvIGEgcGFyZW50IHRpbWVsaW5lICh1bmNvbnZlbnRpb25hbCwgYnV0IHBvc3NpYmxlLCBhbmQgd2Ugd291bGRuJ3Qgd2FudCBpdCB0byBnZXQgcmVtb3ZlZCBpZiB0aGUgcGFyZW50J3MgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUpLlxuICAgIHQgPSBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lbGluZS5yYXdUaW1lKCksIGNoaWxkKTtcblxuICAgIGlmICghY2hpbGQuX2R1ciB8fCBfY2xhbXAoMCwgY2hpbGQudG90YWxEdXJhdGlvbigpLCB0KSAtIGNoaWxkLl90VGltZSA+IF90aW55TnVtKSB7XG4gICAgICBjaGlsZC5yZW5kZXIodCwgdHJ1ZSk7XG4gICAgfVxuICB9IC8vaWYgdGhlIHRpbWVsaW5lIGhhcyBhbHJlYWR5IGVuZGVkIGJ1dCB0aGUgaW5zZXJ0ZWQgdHdlZW4vdGltZWxpbmUgZXh0ZW5kcyB0aGUgZHVyYXRpb24sIHdlIHNob3VsZCBlbmFibGUgdGhpcyB0aW1lbGluZSBhZ2FpbiBzbyB0aGF0IGl0IHJlbmRlcnMgcHJvcGVybHkuIFdlIHNob3VsZCBhbHNvIGFsaWduIHRoZSBwbGF5aGVhZCB3aXRoIHRoZSBwYXJlbnQgdGltZWxpbmUncyB3aGVuIGFwcHJvcHJpYXRlLlxuXG5cbiAgaWYgKF91bmNhY2hlKHRpbWVsaW5lLCBjaGlsZCkuX2RwICYmIHRpbWVsaW5lLl9pbml0dGVkICYmIHRpbWVsaW5lLl90aW1lID49IHRpbWVsaW5lLl9kdXIgJiYgdGltZWxpbmUuX3RzKSB7XG4gICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3JzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZC4uLlxuICAgIGlmICh0aW1lbGluZS5fZHVyIDwgdGltZWxpbmUuZHVyYXRpb24oKSkge1xuICAgICAgdCA9IHRpbWVsaW5lO1xuXG4gICAgICB3aGlsZSAodC5fZHApIHtcbiAgICAgICAgdC5yYXdUaW1lKCkgPj0gMCAmJiB0LnRvdGFsVGltZSh0Ll90VGltZSk7IC8vbW92ZXMgdGhlIHRpbWVsaW5lIChzaGlmdHMgaXRzIHN0YXJ0VGltZSkgaWYgbmVjZXNzYXJ5LCBhbmQgYWxzbyBlbmFibGVzIGl0LiBJZiBpdCdzIGN1cnJlbnRseSB6ZXJvLCB0aG91Z2gsIGl0IG1heSBub3QgYmUgc2NoZWR1bGVkIHRvIHJlbmRlciB1bnRpbCBsYXRlciBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgaXQgdG8gYWxpZ24gd2l0aCB0aGUgY3VycmVudCBwbGF5aGVhZCBwb3NpdGlvbi4gT25seSBtb3ZlIHRvIGNhdGNoIHVwIHdpdGggdGhlIHBsYXloZWFkLlxuXG4gICAgICAgIHQgPSB0Ll9kcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aW1lbGluZS5felRpbWUgPSAtX3RpbnlOdW07IC8vIGhlbHBzIGVuc3VyZSB0aGF0IHRoZSBuZXh0IHJlbmRlcigpIHdpbGwgYmUgZm9yY2VkIChjcm9zc2luZ1N0YXJ0ID0gdHJ1ZSBpbiByZW5kZXIoKSksIGV2ZW4gaWYgdGhlIGR1cmF0aW9uIGhhc24ndCBjaGFuZ2VkICh3ZSdyZSBhZGRpbmcgYSBjaGlsZCB3aGljaCB3b3VsZCBuZWVkIHRvIGdldCByZW5kZXJlZCkuIERlZmluaXRlbHkgYW4gZWRnZSBjYXNlLiBOb3RlOiB3ZSBNVVNUIGRvIHRoaXMgQUZURVIgdGhlIGxvb3AgYWJvdmUgd2hlcmUgdGhlIHRvdGFsVGltZSgpIG1pZ2h0IHRyaWdnZXIgYSByZW5kZXIoKSBiZWNhdXNlIHRoaXMgX2FkZFRvVGltZWxpbmUoKSBtZXRob2QgZ2V0cyBjYWxsZWQgZnJvbSB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBCRUZPUkUgdHdlZW5zIGV2ZW4gcmVjb3JkIHRoZWlyIHRhcmdldHMsIGV0Yy4gc28gd2Ugd291bGRuJ3Qgd2FudCB0aGluZ3MgdG8gZ2V0IHRyaWdnZXJlZCBpbiB0aGUgd3Jvbmcgb3JkZXIuXG4gIH1cbn0sXG4gICAgX2FkZFRvVGltZWxpbmUgPSBmdW5jdGlvbiBfYWRkVG9UaW1lbGluZSh0aW1lbGluZSwgY2hpbGQsIHBvc2l0aW9uLCBza2lwQ2hlY2tzKSB7XG4gIGNoaWxkLnBhcmVudCAmJiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gIGNoaWxkLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoKF9pc051bWJlcihwb3NpdGlvbikgPyBwb3NpdGlvbiA6IHBvc2l0aW9uIHx8IHRpbWVsaW5lICE9PSBfZ2xvYmFsVGltZWxpbmUgPyBfcGFyc2VQb3NpdGlvbih0aW1lbGluZSwgcG9zaXRpb24sIGNoaWxkKSA6IHRpbWVsaW5lLl90aW1lKSArIGNoaWxkLl9kZWxheSk7XG4gIGNoaWxkLl9lbmQgPSBfcm91bmRQcmVjaXNlKGNoaWxkLl9zdGFydCArIChjaGlsZC50b3RhbER1cmF0aW9uKCkgLyBNYXRoLmFicyhjaGlsZC50aW1lU2NhbGUoKSkgfHwgMCkpO1xuXG4gIF9hZGRMaW5rZWRMaXN0SXRlbSh0aW1lbGluZSwgY2hpbGQsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGltZWxpbmUuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG5cbiAgX2lzRnJvbU9yRnJvbVN0YXJ0KGNoaWxkKSB8fCAodGltZWxpbmUuX3JlY2VudCA9IGNoaWxkKTtcbiAgc2tpcENoZWNrcyB8fCBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpO1xuICB0aW1lbGluZS5fdHMgPCAwICYmIF9hbGlnblBsYXloZWFkKHRpbWVsaW5lLCB0aW1lbGluZS5fdFRpbWUpOyAvLyBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBuZXcgY2hpbGQgbWFrZXMgaXQgbG9uZ2VyLCB3ZSBtYXkgbmVlZCB0byBhZGp1c3QgdGhlIHBhcmVudCdzIF9zdGFydCAocHVzaCBpdCBiYWNrKVxuXG4gIHJldHVybiB0aW1lbGluZTtcbn0sXG4gICAgX3Njcm9sbFRyaWdnZXIgPSBmdW5jdGlvbiBfc2Nyb2xsVHJpZ2dlcihhbmltYXRpb24sIHRyaWdnZXIpIHtcbiAgcmV0dXJuIChfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyIHx8IF9taXNzaW5nUGx1Z2luKFwic2Nyb2xsVHJpZ2dlclwiLCB0cmlnZ2VyKSkgJiYgX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlci5jcmVhdGUodHJpZ2dlciwgYW5pbWF0aW9uKTtcbn0sXG4gICAgX2F0dGVtcHRJbml0VHdlZW4gPSBmdW5jdGlvbiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkge1xuICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCB0VGltZSk7XG5cbiAgaWYgKCF0d2Vlbi5faW5pdHRlZCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgaWYgKCFmb3JjZSAmJiB0d2Vlbi5fcHQgJiYgIV9yZXZlcnRpbmcgJiYgKHR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5ICE9PSBmYWxzZSB8fCAhdHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkpICYmIF9sYXN0UmVuZGVyZWRGcmFtZSAhPT0gX3RpY2tlci5mcmFtZSkge1xuICAgIF9sYXp5VHdlZW5zLnB1c2godHdlZW4pO1xuXG4gICAgdHdlZW4uX2xhenkgPSBbdFRpbWUsIHN1cHByZXNzRXZlbnRzXTtcbiAgICByZXR1cm4gMTtcbiAgfVxufSxcbiAgICBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0ID0gZnVuY3Rpb24gX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChfcmVmKSB7XG4gIHZhciBwYXJlbnQgPSBfcmVmLnBhcmVudDtcbiAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQuX3RzICYmIHBhcmVudC5faW5pdHRlZCAmJiAhcGFyZW50Ll9sb2NrICYmIChwYXJlbnQucmF3VGltZSgpIDwgMCB8fCBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHBhcmVudCkpO1xufSxcbiAgICAvLyBjaGVjayBwYXJlbnQncyBfbG9jayBiZWNhdXNlIHdoZW4gYSB0aW1lbGluZSByZXBlYXRzL3lveW9zIGFuZCBkb2VzIGl0cyBhcnRpZmljaWFsIHdyYXBwaW5nLCB3ZSBzaG91bGRuJ3QgZm9yY2UgdGhlIHJhdGlvIGJhY2sgdG8gMFxuX2lzRnJvbU9yRnJvbVN0YXJ0ID0gZnVuY3Rpb24gX2lzRnJvbU9yRnJvbVN0YXJ0KF9yZWYyKSB7XG4gIHZhciBkYXRhID0gX3JlZjIuZGF0YTtcbiAgcmV0dXJuIGRhdGEgPT09IFwiaXNGcm9tU3RhcnRcIiB8fCBkYXRhID09PSBcImlzU3RhcnRcIjtcbn0sXG4gICAgX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuID0gZnVuY3Rpb24gX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICB2YXIgcHJldlJhdGlvID0gdHdlZW4ucmF0aW8sXG4gICAgICByYXRpbyA9IHRvdGFsVGltZSA8IDAgfHwgIXRvdGFsVGltZSAmJiAoIXR3ZWVuLl9zdGFydCAmJiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHR3ZWVuKSAmJiAhKCF0d2Vlbi5faW5pdHRlZCAmJiBfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSB8fCAodHdlZW4uX3RzIDwgMCB8fCB0d2Vlbi5fZHAuX3RzIDwgMCkgJiYgIV9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpID8gMCA6IDEsXG4gICAgICAvLyBpZiB0aGUgdHdlZW4gb3IgaXRzIHBhcmVudCBpcyByZXZlcnNlZCBhbmQgdGhlIHRvdGFsVGltZSBpcyAwLCB3ZSBzaG91bGQgZ28gdG8gYSByYXRpbyBvZiAwLiBFZGdlIGNhc2U6IGlmIGEgZnJvbSgpIG9yIGZyb21UbygpIHN0YWdnZXIgdHdlZW4gaXMgcGxhY2VkIGxhdGVyIGluIGEgdGltZWxpbmUsIHRoZSBcInN0YXJ0QXRcIiB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGNvdWxkIGluaXRpYWxseSByZW5kZXIgYXQgYSB0aW1lIHdoZW4gdGhlIHBhcmVudCB0aW1lbGluZSdzIHBsYXloZWFkIGlzIHRlY2huaWNhbGx5IEJFRk9SRSB3aGVyZSB0aGlzIHR3ZWVuIGlzLCBzbyBtYWtlIHN1cmUgdGhhdCBhbnkgXCJmcm9tXCIgYW5kIFwiZnJvbVRvXCIgc3RhcnRBdCB0d2VlbnMgYXJlIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lIGF0IGEgcmF0aW8gb2YgMS5cbiAgcmVwZWF0RGVsYXkgPSB0d2Vlbi5fckRlbGF5LFxuICAgICAgdFRpbWUgPSAwLFxuICAgICAgcHQsXG4gICAgICBpdGVyYXRpb24sXG4gICAgICBwcmV2SXRlcmF0aW9uO1xuXG4gIGlmIChyZXBlYXREZWxheSAmJiB0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy8gaW4gY2FzZSB0aGVyZSdzIGEgemVyby1kdXJhdGlvbiB0d2VlbiB0aGF0IGhhcyBhIHJlcGVhdCB3aXRoIGEgcmVwZWF0RGVsYXlcbiAgICB0VGltZSA9IF9jbGFtcCgwLCB0d2Vlbi5fdER1ciwgdG90YWxUaW1lKTtcbiAgICBpdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIHJlcGVhdERlbGF5KTtcbiAgICB0d2Vlbi5feW95byAmJiBpdGVyYXRpb24gJiAxICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG5cbiAgICBpZiAoaXRlcmF0aW9uICE9PSBfYW5pbWF0aW9uQ3ljbGUodHdlZW4uX3RUaW1lLCByZXBlYXREZWxheSkpIHtcbiAgICAgIC8vIGlmIGl0ZXJhdGlvbiBjaGFuZ2VkXG4gICAgICBwcmV2UmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB0d2Vlbi52YXJzLnJlcGVhdFJlZnJlc2ggJiYgdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyYXRpbyAhPT0gcHJldlJhdGlvIHx8IF9yZXZlcnRpbmcgfHwgZm9yY2UgfHwgdHdlZW4uX3pUaW1lID09PSBfdGlueU51bSB8fCAhdG90YWxUaW1lICYmIHR3ZWVuLl96VGltZSkge1xuICAgIGlmICghdHdlZW4uX2luaXR0ZWQgJiYgX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgIC8vIGlmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwcmV2SXRlcmF0aW9uID0gdHdlZW4uX3pUaW1lO1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZSB8fCAoc3VwcHJlc3NFdmVudHMgPyBfdGlueU51bSA6IDApOyAvLyB3aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgIHN1cHByZXNzRXZlbnRzIHx8IChzdXBwcmVzc0V2ZW50cyA9IHRvdGFsVGltZSAmJiAhcHJldkl0ZXJhdGlvbik7IC8vIGlmIGl0IHdhcyByZW5kZXJlZCBwcmV2aW91c2x5IGF0IGV4YWN0bHkgMCAoX3pUaW1lKSBhbmQgbm93IHRoZSBwbGF5aGVhZCBpcyBtb3ZpbmcgYXdheSwgRE9OJ1QgZmlyZSBjYWxsYmFja3Mgb3RoZXJ3aXNlIHRoZXknbGwgc2VlbSBsaWtlIGR1cGxpY2F0ZXMuXG5cbiAgICB0d2Vlbi5yYXRpbyA9IHJhdGlvO1xuICAgIHR3ZWVuLl9mcm9tICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG4gICAgdHdlZW4uX3RpbWUgPSAwO1xuICAgIHR3ZWVuLl90VGltZSA9IHRUaW1lO1xuICAgIHB0ID0gdHdlZW4uX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgdG90YWxUaW1lIDwgMCAmJiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgdHJ1ZSk7XG4gICAgdHdlZW4uX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25VcGRhdGVcIik7XG4gICAgdFRpbWUgJiYgdHdlZW4uX3JlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdHdlZW4ucGFyZW50ICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblJlcGVhdFwiKTtcblxuICAgIGlmICgodG90YWxUaW1lID49IHR3ZWVuLl90RHVyIHx8IHRvdGFsVGltZSA8IDApICYmIHR3ZWVuLnJhdGlvID09PSByYXRpbykge1xuICAgICAgcmF0aW8gJiYgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4sIDEpO1xuXG4gICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICFfcmV2ZXJ0aW5nKSB7XG4gICAgICAgIF9jYWxsYmFjayh0d2VlbiwgcmF0aW8gPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgdHdlZW4uX3Byb20gJiYgdHdlZW4uX3Byb20oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIXR3ZWVuLl96VGltZSkge1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZTtcbiAgfVxufSxcbiAgICBfZmluZE5leHRQYXVzZVR3ZWVuID0gZnVuY3Rpb24gX2ZpbmROZXh0UGF1c2VUd2VlbihhbmltYXRpb24sIHByZXZUaW1lLCB0aW1lKSB7XG4gIHZhciBjaGlsZDtcblxuICBpZiAodGltZSA+IHByZXZUaW1lKSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA8PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0ID4gcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fbGFzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPj0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA8IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fcHJldjtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3NldER1cmF0aW9uID0gZnVuY3Rpb24gX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgZHVyYXRpb24sIHNraXBVbmNhY2hlLCBsZWF2ZVBsYXloZWFkKSB7XG4gIHZhciByZXBlYXQgPSBhbmltYXRpb24uX3JlcGVhdCxcbiAgICAgIGR1ciA9IF9yb3VuZFByZWNpc2UoZHVyYXRpb24pIHx8IDAsXG4gICAgICB0b3RhbFByb2dyZXNzID0gYW5pbWF0aW9uLl90VGltZSAvIGFuaW1hdGlvbi5fdER1cjtcbiAgdG90YWxQcm9ncmVzcyAmJiAhbGVhdmVQbGF5aGVhZCAmJiAoYW5pbWF0aW9uLl90aW1lICo9IGR1ciAvIGFuaW1hdGlvbi5fZHVyKTtcbiAgYW5pbWF0aW9uLl9kdXIgPSBkdXI7XG4gIGFuaW1hdGlvbi5fdER1ciA9ICFyZXBlYXQgPyBkdXIgOiByZXBlYXQgPCAwID8gMWUxMCA6IF9yb3VuZFByZWNpc2UoZHVyICogKHJlcGVhdCArIDEpICsgYW5pbWF0aW9uLl9yRGVsYXkgKiByZXBlYXQpO1xuICB0b3RhbFByb2dyZXNzID4gMCAmJiAhbGVhdmVQbGF5aGVhZCAmJiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIGFuaW1hdGlvbi5fdFRpbWUgPSBhbmltYXRpb24uX3REdXIgKiB0b3RhbFByb2dyZXNzKTtcbiAgYW5pbWF0aW9uLnBhcmVudCAmJiBfc2V0RW5kKGFuaW1hdGlvbik7XG4gIHNraXBVbmNhY2hlIHx8IF91bmNhY2hlKGFuaW1hdGlvbi5wYXJlbnQsIGFuaW1hdGlvbik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uIGluc3RhbmNlb2YgVGltZWxpbmUgPyBfdW5jYWNoZShhbmltYXRpb24pIDogX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl9kdXIpO1xufSxcbiAgICBfemVyb1Bvc2l0aW9uID0ge1xuICBfc3RhcnQ6IDAsXG4gIGVuZFRpbWU6IF9lbXB0eUZ1bmMsXG4gIHRvdGFsRHVyYXRpb246IF9lbXB0eUZ1bmNcbn0sXG4gICAgX3BhcnNlUG9zaXRpb24gPSBmdW5jdGlvbiBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLCBwZXJjZW50QW5pbWF0aW9uKSB7XG4gIHZhciBsYWJlbHMgPSBhbmltYXRpb24ubGFiZWxzLFxuICAgICAgcmVjZW50ID0gYW5pbWF0aW9uLl9yZWNlbnQgfHwgX3plcm9Qb3NpdGlvbixcbiAgICAgIGNsaXBwZWREdXJhdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpID49IF9iaWdOdW0gPyByZWNlbnQuZW5kVGltZShmYWxzZSkgOiBhbmltYXRpb24uX2R1cixcbiAgICAgIC8vaW4gY2FzZSB0aGVyZSdzIGEgY2hpbGQgdGhhdCBpbmZpbml0ZWx5IHJlcGVhdHMsIHVzZXJzIGFsbW9zdCBuZXZlciBpbnRlbmQgZm9yIHRoZSBpbnNlcnRpb24gcG9pbnQgb2YgYSBuZXcgY2hpbGQgdG8gYmUgYmFzZWQgb24gYSBTVVBFUiBsb25nIHZhbHVlIGxpa2UgdGhhdCBzbyB3ZSBjbGlwIGl0IGFuZCBhc3N1bWUgdGhlIG1vc3QgcmVjZW50bHktYWRkZWQgY2hpbGQncyBlbmRUaW1lIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gIGksXG4gICAgICBvZmZzZXQsXG4gICAgICBpc1BlcmNlbnQ7XG5cbiAgaWYgKF9pc1N0cmluZyhwb3NpdGlvbikgJiYgKGlzTmFOKHBvc2l0aW9uKSB8fCBwb3NpdGlvbiBpbiBsYWJlbHMpKSB7XG4gICAgLy9pZiB0aGUgc3RyaW5nIGlzIGEgbnVtYmVyIGxpa2UgXCIxXCIsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgbGFiZWwgd2l0aCB0aGF0IG5hbWUsIG90aGVyd2lzZSBpbnRlcnByZXQgaXQgYXMgYSBudW1iZXIgKGFic29sdXRlIHZhbHVlKS5cbiAgICBvZmZzZXQgPSBwb3NpdGlvbi5jaGFyQXQoMCk7XG4gICAgaXNQZXJjZW50ID0gcG9zaXRpb24uc3Vic3RyKC0xKSA9PT0gXCIlXCI7XG4gICAgaSA9IHBvc2l0aW9uLmluZGV4T2YoXCI9XCIpO1xuXG4gICAgaWYgKG9mZnNldCA9PT0gXCI8XCIgfHwgb2Zmc2V0ID09PSBcIj5cIikge1xuICAgICAgaSA+PSAwICYmIChwb3NpdGlvbiA9IHBvc2l0aW9uLnJlcGxhY2UoLz0vLCBcIlwiKSk7XG4gICAgICByZXR1cm4gKG9mZnNldCA9PT0gXCI8XCIgPyByZWNlbnQuX3N0YXJ0IDogcmVjZW50LmVuZFRpbWUocmVjZW50Ll9yZXBlYXQgPj0gMCkpICsgKHBhcnNlRmxvYXQocG9zaXRpb24uc3Vic3RyKDEpKSB8fCAwKSAqIChpc1BlcmNlbnQgPyAoaSA8IDAgPyByZWNlbnQgOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCkgLyAxMDAgOiAxKTtcbiAgICB9XG5cbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHBvc2l0aW9uIGluIGxhYmVscyB8fCAobGFiZWxzW3Bvc2l0aW9uXSA9IGNsaXBwZWREdXJhdGlvbik7XG4gICAgICByZXR1cm4gbGFiZWxzW3Bvc2l0aW9uXTtcbiAgICB9XG5cbiAgICBvZmZzZXQgPSBwYXJzZUZsb2F0KHBvc2l0aW9uLmNoYXJBdChpIC0gMSkgKyBwb3NpdGlvbi5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChpc1BlcmNlbnQgJiYgcGVyY2VudEFuaW1hdGlvbikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IC8gMTAwICogKF9pc0FycmF5KHBlcmNlbnRBbmltYXRpb24pID8gcGVyY2VudEFuaW1hdGlvblswXSA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaSA+IDEgPyBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLnN1YnN0cigwLCBpIC0gMSksIHBlcmNlbnRBbmltYXRpb24pICsgb2Zmc2V0IDogY2xpcHBlZER1cmF0aW9uICsgb2Zmc2V0O1xuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9uID09IG51bGwgPyBjbGlwcGVkRHVyYXRpb24gOiArcG9zaXRpb247XG59LFxuICAgIF9jcmVhdGVUd2VlblR5cGUgPSBmdW5jdGlvbiBfY3JlYXRlVHdlZW5UeXBlKHR5cGUsIHBhcmFtcywgdGltZWxpbmUpIHtcbiAgdmFyIGlzTGVnYWN5ID0gX2lzTnVtYmVyKHBhcmFtc1sxXSksXG4gICAgICB2YXJzSW5kZXggPSAoaXNMZWdhY3kgPyAyIDogMSkgKyAodHlwZSA8IDIgPyAwIDogMSksXG4gICAgICB2YXJzID0gcGFyYW1zW3ZhcnNJbmRleF0sXG4gICAgICBpclZhcnMsXG4gICAgICBwYXJlbnQ7XG5cbiAgaXNMZWdhY3kgJiYgKHZhcnMuZHVyYXRpb24gPSBwYXJhbXNbMV0pO1xuICB2YXJzLnBhcmVudCA9IHRpbWVsaW5lO1xuXG4gIGlmICh0eXBlKSB7XG4gICAgaXJWYXJzID0gdmFycztcbiAgICBwYXJlbnQgPSB0aW1lbGluZTtcblxuICAgIHdoaWxlIChwYXJlbnQgJiYgIShcImltbWVkaWF0ZVJlbmRlclwiIGluIGlyVmFycykpIHtcbiAgICAgIC8vIGluaGVyaXRhbmNlIGhhc24ndCBoYXBwZW5lZCB5ZXQsIGJ1dCBzb21lb25lIG1heSBoYXZlIHNldCBhIGRlZmF1bHQgaW4gYW4gYW5jZXN0b3IgdGltZWxpbmUuIFdlIGNvdWxkIGRvIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIpIGJ1dCB0aGF0J2QgZXhhY3QgYSBzbGlnaHQgcGVyZm9ybWFuY2UgcGVuYWx0eSBiZWNhdXNlIF9pbmhlcml0RGVmYXVsdHMoKSBhbHNvIHJ1bnMgaW4gdGhlIFR3ZWVuIGNvbnN0cnVjdG9yLiBXZSdyZSBwYXlpbmcgYSBzbWFsbCBrYiBwcmljZSBoZXJlIHRvIGdhaW4gc3BlZWQuXG4gICAgICBpclZhcnMgPSBwYXJlbnQudmFycy5kZWZhdWx0cyB8fCB7fTtcbiAgICAgIHBhcmVudCA9IF9pc05vdEZhbHNlKHBhcmVudC52YXJzLmluaGVyaXQpICYmIHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShpclZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICB0eXBlIDwgMiA/IHZhcnMucnVuQmFja3dhcmRzID0gMSA6IHZhcnMuc3RhcnRBdCA9IHBhcmFtc1t2YXJzSW5kZXggLSAxXTsgLy8gXCJmcm9tXCIgdmFyc1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUd2VlbihwYXJhbXNbMF0sIHZhcnMsIHBhcmFtc1t2YXJzSW5kZXggKyAxXSk7XG59LFxuICAgIF9jb25kaXRpb25hbFJldHVybiA9IGZ1bmN0aW9uIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuYykge1xuICByZXR1cm4gdmFsdWUgfHwgdmFsdWUgPT09IDAgPyBmdW5jKHZhbHVlKSA6IGZ1bmM7XG59LFxuICAgIF9jbGFtcCA9IGZ1bmN0aW9uIF9jbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDwgbWluID8gbWluIDogdmFsdWUgPiBtYXggPyBtYXggOiB2YWx1ZTtcbn0sXG4gICAgZ2V0VW5pdCA9IGZ1bmN0aW9uIGdldFVuaXQodmFsdWUsIHYpIHtcbiAgcmV0dXJuICFfaXNTdHJpbmcodmFsdWUpIHx8ICEodiA9IF91bml0RXhwLmV4ZWModmFsdWUpKSA/IFwiXCIgOiB2WzFdO1xufSxcbiAgICAvLyBub3RlOiBwcm90ZWN0IGFnYWluc3QgcGFkZGVkIG51bWJlcnMgYXMgc3RyaW5ncywgbGlrZSBcIjEwMC4xMDBcIi4gVGhhdCBzaG91bGRuJ3QgcmV0dXJuIFwiMDBcIiBhcyB0aGUgdW5pdC4gSWYgaXQncyBudW1lcmljLCByZXR1cm4gbm8gdW5pdC5cbmNsYW1wID0gZnVuY3Rpb24gY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIF9jbGFtcChtaW4sIG1heCwgdik7XG4gIH0pO1xufSxcbiAgICBfc2xpY2UgPSBbXS5zbGljZSxcbiAgICBfaXNBcnJheUxpa2UgPSBmdW5jdGlvbiBfaXNBcnJheUxpa2UodmFsdWUsIG5vbkVtcHR5KSB7XG4gIHJldHVybiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWUpICYmIFwibGVuZ3RoXCIgaW4gdmFsdWUgJiYgKCFub25FbXB0eSAmJiAhdmFsdWUubGVuZ3RoIHx8IHZhbHVlLmxlbmd0aCAtIDEgaW4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlWzBdKSkgJiYgIXZhbHVlLm5vZGVUeXBlICYmIHZhbHVlICE9PSBfd2luO1xufSxcbiAgICBfZmxhdHRlbiA9IGZ1bmN0aW9uIF9mbGF0dGVuKGFyLCBsZWF2ZVN0cmluZ3MsIGFjY3VtdWxhdG9yKSB7XG4gIGlmIChhY2N1bXVsYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBhci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBfYWNjdW11bGF0b3I7XG5cbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzIHx8IF9pc0FycmF5TGlrZSh2YWx1ZSwgMSkgPyAoX2FjY3VtdWxhdG9yID0gYWNjdW11bGF0b3IpLnB1c2guYXBwbHkoX2FjY3VtdWxhdG9yLCB0b0FycmF5KHZhbHVlKSkgOiBhY2N1bXVsYXRvci5wdXNoKHZhbHVlKTtcbiAgfSkgfHwgYWNjdW11bGF0b3I7XG59LFxuICAgIC8vdGFrZXMgYW55IHZhbHVlIGFuZCByZXR1cm5zIGFuIGFycmF5LiBJZiBpdCdzIGEgc3RyaW5nIChhbmQgbGVhdmVTdHJpbmdzIGlzbid0IHRydWUpLCBpdCdsbCB1c2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgpIGFuZCBjb252ZXJ0IHRoYXQgdG8gYW4gYXJyYXkuIEl0J2xsIGFsc28gYWNjZXB0IGl0ZXJhYmxlcyBsaWtlIGpRdWVyeSBvYmplY3RzLlxudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUsIHNjb3BlLCBsZWF2ZVN0cmluZ3MpIHtcbiAgcmV0dXJuIF9jb250ZXh0ICYmICFzY29wZSAmJiBfY29udGV4dC5zZWxlY3RvciA/IF9jb250ZXh0LnNlbGVjdG9yKHZhbHVlKSA6IF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyAmJiAoX2NvcmVJbml0dGVkIHx8ICFfd2FrZSgpKSA/IF9zbGljZS5jYWxsKChzY29wZSB8fCBfZG9jKS5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSwgMCkgOiBfaXNBcnJheSh2YWx1ZSkgPyBfZmxhdHRlbih2YWx1ZSwgbGVhdmVTdHJpbmdzKSA6IF9pc0FycmF5TGlrZSh2YWx1ZSkgPyBfc2xpY2UuY2FsbCh2YWx1ZSwgMCkgOiB2YWx1ZSA/IFt2YWx1ZV0gOiBbXTtcbn0sXG4gICAgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3Rvcih2YWx1ZSkge1xuICB2YWx1ZSA9IHRvQXJyYXkodmFsdWUpWzBdIHx8IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGVsID0gdmFsdWUuY3VycmVudCB8fCB2YWx1ZS5uYXRpdmVFbGVtZW50IHx8IHZhbHVlO1xuICAgIHJldHVybiB0b0FycmF5KHYsIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgPyBlbCA6IGVsID09PSB2YWx1ZSA/IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgOiB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHNodWZmbGUgPSBmdW5jdGlvbiBzaHVmZmxlKGEpIHtcbiAgcmV0dXJuIGEuc29ydChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIC41IC0gTWF0aC5yYW5kb20oKTtcbiAgfSk7XG59LFxuICAgIC8vIGFsdGVybmF0aXZlIHRoYXQncyBhIGJpdCBmYXN0ZXIgYW5kIG1vcmUgcmVsaWFibHkgZGl2ZXJzZSBidXQgYmlnZ2VyOiAgIGZvciAobGV0IGosIHYsIGkgPSBhLmxlbmd0aDsgaTsgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGkpLCB2ID0gYVstLWldLCBhW2ldID0gYVtqXSwgYVtqXSA9IHYpOyByZXR1cm4gYTtcbi8vZm9yIGRpc3RyaWJ1dGluZyB2YWx1ZXMgYWNyb3NzIGFuIGFycmF5LiBDYW4gYWNjZXB0IGEgbnVtYmVyLCBhIGZ1bmN0aW9uIG9yIChtb3N0IGNvbW1vbmx5KSBhIGZ1bmN0aW9uIHdoaWNoIGNhbiBjb250YWluIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczoge2Jhc2UsIGFtb3VudCwgZnJvbSwgZWFzZSwgZ3JpZCwgYXhpcywgbGVuZ3RoLCBlYWNofS4gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZXhwZWN0cyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6IGluZGV4LCB0YXJnZXQsIGFycmF5LiBSZWNvZ25pemVzIHRoZSBmb2xsb3dpbmdcbmRpc3RyaWJ1dGUgPSBmdW5jdGlvbiBkaXN0cmlidXRlKHYpIHtcbiAgaWYgKF9pc0Z1bmN0aW9uKHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICB2YXIgdmFycyA9IF9pc09iamVjdCh2KSA/IHYgOiB7XG4gICAgZWFjaDogdlxuICB9LFxuICAgICAgLy9uOjEgaXMganVzdCB0byBpbmRpY2F0ZSB2IHdhcyBhIG51bWJlcjsgd2UgbGV2ZXJhZ2UgdGhhdCBsYXRlciB0byBzZXQgdiBhY2NvcmRpbmcgdG8gdGhlIGxlbmd0aCB3ZSBnZXQuIElmIGEgbnVtYmVyIGlzIHBhc3NlZCBpbiwgd2UgdHJlYXQgaXQgbGlrZSB0aGUgb2xkIHN0YWdnZXIgdmFsdWUgd2hlcmUgMC4xLCBmb3IgZXhhbXBsZSwgd291bGQgbWVhbiB0aGF0IHRoaW5ncyB3b3VsZCBiZSBkaXN0cmlidXRlZCB3aXRoIDAuMSBiZXR3ZWVuIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgcmF0aGVyIHRoYW4gYSB0b3RhbCBcImFtb3VudFwiIHRoYXQncyBjaHVua2VkIG91dCBhbW9uZyB0aGVtIGFsbC5cbiAgZWFzZSA9IF9wYXJzZUVhc2UodmFycy5lYXNlKSxcbiAgICAgIGZyb20gPSB2YXJzLmZyb20gfHwgMCxcbiAgICAgIGJhc2UgPSBwYXJzZUZsb2F0KHZhcnMuYmFzZSkgfHwgMCxcbiAgICAgIGNhY2hlID0ge30sXG4gICAgICBpc0RlY2ltYWwgPSBmcm9tID4gMCAmJiBmcm9tIDwgMSxcbiAgICAgIHJhdGlvcyA9IGlzTmFOKGZyb20pIHx8IGlzRGVjaW1hbCxcbiAgICAgIGF4aXMgPSB2YXJzLmF4aXMsXG4gICAgICByYXRpb1ggPSBmcm9tLFxuICAgICAgcmF0aW9ZID0gZnJvbTtcblxuICBpZiAoX2lzU3RyaW5nKGZyb20pKSB7XG4gICAgcmF0aW9YID0gcmF0aW9ZID0ge1xuICAgICAgY2VudGVyOiAuNSxcbiAgICAgIGVkZ2VzOiAuNSxcbiAgICAgIGVuZDogMVxuICAgIH1bZnJvbV0gfHwgMDtcbiAgfSBlbHNlIGlmICghaXNEZWNpbWFsICYmIHJhdGlvcykge1xuICAgIHJhdGlvWCA9IGZyb21bMF07XG4gICAgcmF0aW9ZID0gZnJvbVsxXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaSwgdGFyZ2V0LCBhKSB7XG4gICAgdmFyIGwgPSAoYSB8fCB2YXJzKS5sZW5ndGgsXG4gICAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdLFxuICAgICAgICBvcmlnaW5YLFxuICAgICAgICBvcmlnaW5ZLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBkLFxuICAgICAgICBqLFxuICAgICAgICBtYXgsXG4gICAgICAgIG1pbixcbiAgICAgICAgd3JhcEF0O1xuXG4gICAgaWYgKCFkaXN0YW5jZXMpIHtcbiAgICAgIHdyYXBBdCA9IHZhcnMuZ3JpZCA9PT0gXCJhdXRvXCIgPyAwIDogKHZhcnMuZ3JpZCB8fCBbMSwgX2JpZ051bV0pWzFdO1xuXG4gICAgICBpZiAoIXdyYXBBdCkge1xuICAgICAgICBtYXggPSAtX2JpZ051bTtcblxuICAgICAgICB3aGlsZSAobWF4IDwgKG1heCA9IGFbd3JhcEF0KytdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpICYmIHdyYXBBdCA8IGwpIHt9XG5cbiAgICAgICAgd3JhcEF0IDwgbCAmJiB3cmFwQXQtLTtcbiAgICAgIH1cblxuICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0gPSBbXTtcbiAgICAgIG9yaWdpblggPSByYXRpb3MgPyBNYXRoLm1pbih3cmFwQXQsIGwpICogcmF0aW9YIC0gLjUgOiBmcm9tICUgd3JhcEF0O1xuICAgICAgb3JpZ2luWSA9IHdyYXBBdCA9PT0gX2JpZ051bSA/IDAgOiByYXRpb3MgPyBsICogcmF0aW9ZIC8gd3JhcEF0IC0gLjUgOiBmcm9tIC8gd3JhcEF0IHwgMDtcbiAgICAgIG1heCA9IDA7XG4gICAgICBtaW4gPSBfYmlnTnVtO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG4gICAgICAgIHggPSBqICUgd3JhcEF0IC0gb3JpZ2luWDtcbiAgICAgICAgeSA9IG9yaWdpblkgLSAoaiAvIHdyYXBBdCB8IDApO1xuICAgICAgICBkaXN0YW5jZXNbal0gPSBkID0gIWF4aXMgPyBfc3FydCh4ICogeCArIHkgKiB5KSA6IE1hdGguYWJzKGF4aXMgPT09IFwieVwiID8geSA6IHgpO1xuICAgICAgICBkID4gbWF4ICYmIChtYXggPSBkKTtcbiAgICAgICAgZCA8IG1pbiAmJiAobWluID0gZCk7XG4gICAgICB9XG5cbiAgICAgIGZyb20gPT09IFwicmFuZG9tXCIgJiYgc2h1ZmZsZShkaXN0YW5jZXMpO1xuICAgICAgZGlzdGFuY2VzLm1heCA9IG1heCAtIG1pbjtcbiAgICAgIGRpc3RhbmNlcy5taW4gPSBtaW47XG4gICAgICBkaXN0YW5jZXMudiA9IGwgPSAocGFyc2VGbG9hdCh2YXJzLmFtb3VudCkgfHwgcGFyc2VGbG9hdCh2YXJzLmVhY2gpICogKHdyYXBBdCA+IGwgPyBsIC0gMSA6ICFheGlzID8gTWF0aC5tYXgod3JhcEF0LCBsIC8gd3JhcEF0KSA6IGF4aXMgPT09IFwieVwiID8gbCAvIHdyYXBBdCA6IHdyYXBBdCkgfHwgMCkgKiAoZnJvbSA9PT0gXCJlZGdlc1wiID8gLTEgOiAxKTtcbiAgICAgIGRpc3RhbmNlcy5iID0gbCA8IDAgPyBiYXNlIC0gbCA6IGJhc2U7XG4gICAgICBkaXN0YW5jZXMudSA9IGdldFVuaXQodmFycy5hbW91bnQgfHwgdmFycy5lYWNoKSB8fCAwOyAvL3VuaXRcblxuICAgICAgZWFzZSA9IGVhc2UgJiYgbCA8IDAgPyBfaW52ZXJ0RWFzZShlYXNlKSA6IGVhc2U7XG4gICAgfVxuXG4gICAgbCA9IChkaXN0YW5jZXNbaV0gLSBkaXN0YW5jZXMubWluKSAvIGRpc3RhbmNlcy5tYXggfHwgMDtcbiAgICByZXR1cm4gX3JvdW5kUHJlY2lzZShkaXN0YW5jZXMuYiArIChlYXNlID8gZWFzZShsKSA6IGwpICogZGlzdGFuY2VzLnYpICsgZGlzdGFuY2VzLnU7IC8vcm91bmQgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzXG4gIH07XG59LFxuICAgIF9yb3VuZE1vZGlmaWVyID0gZnVuY3Rpb24gX3JvdW5kTW9kaWZpZXIodikge1xuICAvL3Bhc3MgaW4gMC4xIGdldCBhIGZ1bmN0aW9uIHRoYXQnbGwgcm91bmQgdG8gdGhlIG5lYXJlc3QgdGVudGgsIG9yIDUgdG8gcm91bmQgdG8gdGhlIGNsb3Nlc3QgNSwgb3IgMC4wMDEgdG8gdGhlIGNsb3Nlc3QgMTAwMHRoLCBldGMuXG4gIHZhciBwID0gTWF0aC5wb3coMTAsICgodiArIFwiXCIpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGgpOyAvL3RvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChsaWtlIDI0ICogMC4xID09IDIuNDAwMDAwMDAwMDAwMDAwNCksIHdlIGNob3Agb2ZmIGF0IGEgc3BlY2lmaWMgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIChtdWNoIGZhc3RlciB0aGFuIHRvRml4ZWQoKSlcblxuICByZXR1cm4gZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciBuID0gX3JvdW5kUHJlY2lzZShNYXRoLnJvdW5kKHBhcnNlRmxvYXQocmF3KSAvIHYpICogdiAqIHApO1xuXG4gICAgcmV0dXJuIChuIC0gbiAlIDEpIC8gcCArIChfaXNOdW1iZXIocmF3KSA/IDAgOiBnZXRVbml0KHJhdykpOyAvLyBuIC0gbiAlIDEgcmVwbGFjZXMgTWF0aC5mbG9vcigpIGluIG9yZGVyIHRvIGhhbmRsZSBuZWdhdGl2ZSB2YWx1ZXMgcHJvcGVybHkuIEZvciBleGFtcGxlLCBNYXRoLmZsb29yKC0xNTAuMDAwMDAwMDAwMDAwMDMpIGlzIDE1MSFcbiAgfTtcbn0sXG4gICAgc25hcCA9IGZ1bmN0aW9uIHNuYXAoc25hcFRvLCB2YWx1ZSkge1xuICB2YXIgaXNBcnJheSA9IF9pc0FycmF5KHNuYXBUbyksXG4gICAgICByYWRpdXMsXG4gICAgICBpczJEO1xuXG4gIGlmICghaXNBcnJheSAmJiBfaXNPYmplY3Qoc25hcFRvKSkge1xuICAgIHJhZGl1cyA9IGlzQXJyYXkgPSBzbmFwVG8ucmFkaXVzIHx8IF9iaWdOdW07XG5cbiAgICBpZiAoc25hcFRvLnZhbHVlcykge1xuICAgICAgc25hcFRvID0gdG9BcnJheShzbmFwVG8udmFsdWVzKTtcblxuICAgICAgaWYgKGlzMkQgPSAhX2lzTnVtYmVyKHNuYXBUb1swXSkpIHtcbiAgICAgICAgcmFkaXVzICo9IHJhZGl1czsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gd2UgZG9uJ3QgaGF2ZSB0byBNYXRoLnNxcnQoKSBpbiB0aGUgbG9vcC5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc25hcFRvID0gX3JvdW5kTW9kaWZpZXIoc25hcFRvLmluY3JlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgIWlzQXJyYXkgPyBfcm91bmRNb2RpZmllcihzbmFwVG8pIDogX2lzRnVuY3Rpb24oc25hcFRvKSA/IGZ1bmN0aW9uIChyYXcpIHtcbiAgICBpczJEID0gc25hcFRvKHJhdyk7XG4gICAgcmV0dXJuIE1hdGguYWJzKGlzMkQgLSByYXcpIDw9IHJhZGl1cyA/IGlzMkQgOiByYXc7XG4gIH0gOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIHggPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueCA6IHJhdyksXG4gICAgICAgIHkgPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueSA6IDApLFxuICAgICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgICBjbG9zZXN0ID0gMCxcbiAgICAgICAgaSA9IHNuYXBUby5sZW5ndGgsXG4gICAgICAgIGR4LFxuICAgICAgICBkeTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChpczJEKSB7XG4gICAgICAgIGR4ID0gc25hcFRvW2ldLnggLSB4O1xuICAgICAgICBkeSA9IHNuYXBUb1tpXS55IC0geTtcbiAgICAgICAgZHggPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR4ID0gTWF0aC5hYnMoc25hcFRvW2ldIC0geCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkeCA8IG1pbikge1xuICAgICAgICBtaW4gPSBkeDtcbiAgICAgICAgY2xvc2VzdCA9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2VzdCA9ICFyYWRpdXMgfHwgbWluIDw9IHJhZGl1cyA/IHNuYXBUb1tjbG9zZXN0XSA6IHJhdztcbiAgICByZXR1cm4gaXMyRCB8fCBjbG9zZXN0ID09PSByYXcgfHwgX2lzTnVtYmVyKHJhdykgPyBjbG9zZXN0IDogY2xvc2VzdCArIGdldFVuaXQocmF3KTtcbiAgfSk7XG59LFxuICAgIHJhbmRvbSA9IGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgcm91bmRpbmdJbmNyZW1lbnQsIHJldHVybkZ1bmN0aW9uKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4oX2lzQXJyYXkobWluKSA/ICFtYXggOiByb3VuZGluZ0luY3JlbWVudCA9PT0gdHJ1ZSA/ICEhKHJvdW5kaW5nSW5jcmVtZW50ID0gMCkgOiAhcmV0dXJuRnVuY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzQXJyYXkobWluKSA/IG1pblt+fihNYXRoLnJhbmRvbSgpICogbWluLmxlbmd0aCldIDogKHJvdW5kaW5nSW5jcmVtZW50ID0gcm91bmRpbmdJbmNyZW1lbnQgfHwgMWUtNSkgJiYgKHJldHVybkZ1bmN0aW9uID0gcm91bmRpbmdJbmNyZW1lbnQgPCAxID8gTWF0aC5wb3coMTAsIChyb3VuZGluZ0luY3JlbWVudCArIFwiXCIpLmxlbmd0aCAtIDIpIDogMSkgJiYgTWF0aC5mbG9vcihNYXRoLnJvdW5kKChtaW4gLSByb3VuZGluZ0luY3JlbWVudCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIHJvdW5kaW5nSW5jcmVtZW50ICogLjk5KSkgLyByb3VuZGluZ0luY3JlbWVudCkgKiByb3VuZGluZ0luY3JlbWVudCAqIHJldHVybkZ1bmN0aW9uKSAvIHJldHVybkZ1bmN0aW9uO1xuICB9KTtcbn0sXG4gICAgcGlwZSA9IGZ1bmN0aW9uIHBpcGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3Rpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbnMucmVkdWNlKGZ1bmN0aW9uICh2LCBmKSB7XG4gICAgICByZXR1cm4gZih2KTtcbiAgICB9LCB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHVuaXRpemUgPSBmdW5jdGlvbiB1bml0aXplKGZ1bmMsIHVuaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHBhcnNlRmxvYXQodmFsdWUpKSArICh1bml0IHx8IGdldFVuaXQodmFsdWUpKTtcbiAgfTtcbn0sXG4gICAgbm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gbWFwUmFuZ2UobWluLCBtYXgsIDAsIDEsIHZhbHVlKTtcbn0sXG4gICAgX3dyYXBBcnJheSA9IGZ1bmN0aW9uIF93cmFwQXJyYXkoYSwgd3JhcHBlciwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgcmV0dXJuIGFbfn53cmFwcGVyKGluZGV4KV07XG4gIH0pO1xufSxcbiAgICB3cmFwID0gZnVuY3Rpb24gd3JhcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgLy8gTk9URTogd3JhcCgpIENBTk5PVCBiZSBhbiBhcnJvdyBmdW5jdGlvbiEgQSB2ZXJ5IG9kZCBjb21waWxpbmcgYnVnIGNhdXNlcyBwcm9ibGVtcyAodW5yZWxhdGVkIHRvIEdTQVApLlxuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW47XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXAoMCwgbWluLmxlbmd0aCksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAocmFuZ2UgKyAodmFsdWUgLSBtaW4pICUgcmFuZ2UpICUgcmFuZ2UgKyBtaW47XG4gIH0pO1xufSxcbiAgICB3cmFwWW95byA9IGZ1bmN0aW9uIHdyYXBZb3lvKG1pbiwgbWF4LCB2YWx1ZSkge1xuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW4sXG4gICAgICB0b3RhbCA9IHJhbmdlICogMjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcFlveW8oMCwgbWluLmxlbmd0aCAtIDEpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YWx1ZSA9ICh0b3RhbCArICh2YWx1ZSAtIG1pbikgJSB0b3RhbCkgJSB0b3RhbCB8fCAwO1xuICAgIHJldHVybiBtaW4gKyAodmFsdWUgPiByYW5nZSA/IHRvdGFsIC0gdmFsdWUgOiB2YWx1ZSk7XG4gIH0pO1xufSxcbiAgICBfcmVwbGFjZVJhbmRvbSA9IGZ1bmN0aW9uIF9yZXBsYWNlUmFuZG9tKHZhbHVlKSB7XG4gIC8vcmVwbGFjZXMgYWxsIG9jY3VycmVuY2VzIG9mIHJhbmRvbSguLi4pIGluIGEgc3RyaW5nIHdpdGggdGhlIGNhbGN1bGF0ZWQgcmFuZG9tIHZhbHVlLiBjYW4gYmUgYSByYW5nZSBsaWtlIHJhbmRvbSgtMTAwLCAxMDAsIDUpIG9yIGFuIGFycmF5IGxpa2UgcmFuZG9tKFswLCAxMDAsIDUwMF0pXG4gIHZhciBwcmV2ID0gMCxcbiAgICAgIHMgPSBcIlwiLFxuICAgICAgaSxcbiAgICAgIG51bXMsXG4gICAgICBlbmQsXG4gICAgICBpc0FycmF5O1xuXG4gIHdoaWxlICh+KGkgPSB2YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiLCBwcmV2KSkpIHtcbiAgICBlbmQgPSB2YWx1ZS5pbmRleE9mKFwiKVwiLCBpKTtcbiAgICBpc0FycmF5ID0gdmFsdWUuY2hhckF0KGkgKyA3KSA9PT0gXCJbXCI7XG4gICAgbnVtcyA9IHZhbHVlLnN1YnN0cihpICsgNywgZW5kIC0gaSAtIDcpLm1hdGNoKGlzQXJyYXkgPyBfZGVsaW1pdGVkVmFsdWVFeHAgOiBfc3RyaWN0TnVtRXhwKTtcbiAgICBzICs9IHZhbHVlLnN1YnN0cihwcmV2LCBpIC0gcHJldikgKyByYW5kb20oaXNBcnJheSA/IG51bXMgOiArbnVtc1swXSwgaXNBcnJheSA/IDAgOiArbnVtc1sxXSwgK251bXNbMl0gfHwgMWUtNSk7XG4gICAgcHJldiA9IGVuZCArIDE7XG4gIH1cblxuICByZXR1cm4gcyArIHZhbHVlLnN1YnN0cihwcmV2LCB2YWx1ZS5sZW5ndGggLSBwcmV2KTtcbn0sXG4gICAgbWFwUmFuZ2UgPSBmdW5jdGlvbiBtYXBSYW5nZShpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4LCB2YWx1ZSkge1xuICB2YXIgaW5SYW5nZSA9IGluTWF4IC0gaW5NaW4sXG4gICAgICBvdXRSYW5nZSA9IG91dE1heCAtIG91dE1pbjtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIG91dE1pbiArICgodmFsdWUgLSBpbk1pbikgLyBpblJhbmdlICogb3V0UmFuZ2UgfHwgMCk7XG4gIH0pO1xufSxcbiAgICBpbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHN0YXJ0LCBlbmQsIHByb2dyZXNzLCBtdXRhdGUpIHtcbiAgdmFyIGZ1bmMgPSBpc05hTihzdGFydCArIGVuZCkgPyAwIDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gKDEgLSBwKSAqIHN0YXJ0ICsgcCAqIGVuZDtcbiAgfTtcblxuICBpZiAoIWZ1bmMpIHtcbiAgICB2YXIgaXNTdHJpbmcgPSBfaXNTdHJpbmcoc3RhcnQpLFxuICAgICAgICBtYXN0ZXIgPSB7fSxcbiAgICAgICAgcCxcbiAgICAgICAgaSxcbiAgICAgICAgaW50ZXJwb2xhdG9ycyxcbiAgICAgICAgbCxcbiAgICAgICAgaWw7XG5cbiAgICBwcm9ncmVzcyA9PT0gdHJ1ZSAmJiAobXV0YXRlID0gMSkgJiYgKHByb2dyZXNzID0gbnVsbCk7XG5cbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHN0YXJ0ID0ge1xuICAgICAgICBwOiBzdGFydFxuICAgICAgfTtcbiAgICAgIGVuZCA9IHtcbiAgICAgICAgcDogZW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoX2lzQXJyYXkoc3RhcnQpICYmICFfaXNBcnJheShlbmQpKSB7XG4gICAgICBpbnRlcnBvbGF0b3JzID0gW107XG4gICAgICBsID0gc3RhcnQubGVuZ3RoO1xuICAgICAgaWwgPSBsIC0gMjtcblxuICAgICAgZm9yIChpID0gMTsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnRlcnBvbGF0b3JzLnB1c2goaW50ZXJwb2xhdGUoc3RhcnRbaSAtIDFdLCBzdGFydFtpXSkpOyAvL2J1aWxkIHRoZSBpbnRlcnBvbGF0b3JzIHVwIGZyb250IGFzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHRoYXQgd2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIG1hbnkgdGltZXMsIGl0IGNhbiBqdXN0IHJldXNlIHRoZW0uXG4gICAgICB9XG5cbiAgICAgIGwtLTtcblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICBwICo9IGw7XG4gICAgICAgIHZhciBpID0gTWF0aC5taW4oaWwsIH5+cCk7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0b3JzW2ldKHAgLSBpKTtcbiAgICAgIH07XG5cbiAgICAgIHByb2dyZXNzID0gZW5kO1xuICAgIH0gZWxzZSBpZiAoIW11dGF0ZSkge1xuICAgICAgc3RhcnQgPSBfbWVyZ2UoX2lzQXJyYXkoc3RhcnQpID8gW10gOiB7fSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmICghaW50ZXJwb2xhdG9ycykge1xuICAgICAgZm9yIChwIGluIGVuZCkge1xuICAgICAgICBfYWRkUHJvcFR3ZWVuLmNhbGwobWFzdGVyLCBzdGFydCwgcCwgXCJnZXRcIiwgZW5kW3BdKTtcbiAgICAgIH1cblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICByZXR1cm4gX3JlbmRlclByb3BUd2VlbnMocCwgbWFzdGVyKSB8fCAoaXNTdHJpbmcgPyBzdGFydC5wIDogc3RhcnQpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHByb2dyZXNzLCBmdW5jKTtcbn0sXG4gICAgX2dldExhYmVsSW5EaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aW1lbGluZSwgZnJvbVRpbWUsIGJhY2t3YXJkKSB7XG4gIC8vdXNlZCBmb3IgbmV4dExhYmVsKCkgYW5kIHByZXZpb3VzTGFiZWwoKVxuICB2YXIgbGFiZWxzID0gdGltZWxpbmUubGFiZWxzLFxuICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgIHAsXG4gICAgICBkaXN0YW5jZSxcbiAgICAgIGxhYmVsO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBkaXN0YW5jZSA9IGxhYmVsc1twXSAtIGZyb21UaW1lO1xuXG4gICAgaWYgKGRpc3RhbmNlIDwgMCA9PT0gISFiYWNrd2FyZCAmJiBkaXN0YW5jZSAmJiBtaW4gPiAoZGlzdGFuY2UgPSBNYXRoLmFicyhkaXN0YW5jZSkpKSB7XG4gICAgICBsYWJlbCA9IHA7XG4gICAgICBtaW4gPSBkaXN0YW5jZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGFiZWw7XG59LFxuICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhhbmltYXRpb24sIHR5cGUsIGV4ZWN1dGVMYXp5Rmlyc3QpIHtcbiAgdmFyIHYgPSBhbmltYXRpb24udmFycyxcbiAgICAgIGNhbGxiYWNrID0gdlt0eXBlXSxcbiAgICAgIHByZXZDb250ZXh0ID0gX2NvbnRleHQsXG4gICAgICBjb250ZXh0ID0gYW5pbWF0aW9uLl9jdHgsXG4gICAgICBwYXJhbXMsXG4gICAgICBzY29wZSxcbiAgICAgIHJlc3VsdDtcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyYW1zID0gdlt0eXBlICsgXCJQYXJhbXNcIl07XG4gIHNjb3BlID0gdi5jYWxsYmFja1Njb3BlIHx8IGFuaW1hdGlvbjtcbiAgZXhlY3V0ZUxhenlGaXJzdCAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cbiAgY29udGV4dCAmJiAoX2NvbnRleHQgPSBjb250ZXh0KTtcbiAgcmVzdWx0ID0gcGFyYW1zID8gY2FsbGJhY2suYXBwbHkoc2NvcGUsIHBhcmFtcykgOiBjYWxsYmFjay5jYWxsKHNjb3BlKTtcbiAgX2NvbnRleHQgPSBwcmV2Q29udGV4dDtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sXG4gICAgX2ludGVycnVwdCA9IGZ1bmN0aW9uIF9pbnRlcnJ1cHQoYW5pbWF0aW9uKSB7XG4gIF9yZW1vdmVGcm9tUGFyZW50KGFuaW1hdGlvbik7XG5cbiAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgJiYgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIua2lsbCghIV9yZXZlcnRpbmcpO1xuICBhbmltYXRpb24ucHJvZ3Jlc3MoKSA8IDEgJiYgX2NhbGxiYWNrKGFuaW1hdGlvbiwgXCJvbkludGVycnVwdFwiKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3F1aWNrVHdlZW4sXG4gICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUgPSBbXSxcbiAgICBfY3JlYXRlUGx1Z2luID0gZnVuY3Rpb24gX2NyZWF0ZVBsdWdpbihjb25maWcpIHtcbiAgaWYgKCFjb25maWcpIHJldHVybjtcbiAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnOyAvLyBVTUQgcGFja2FnaW5nIHdyYXBzIHRoaW5ncyBvZGRseSwgc28gZm9yIGV4YW1wbGUgTW90aW9uUGF0aEhlbHBlciBiZWNvbWVzIHtNb3Rpb25QYXRoSGVscGVyOk1vdGlvblBhdGhIZWxwZXIsIGRlZmF1bHQ6TW90aW9uUGF0aEhlbHBlcn0uXG5cbiAgaWYgKF93aW5kb3dFeGlzdHMoKSB8fCBjb25maWcuaGVhZGxlc3MpIHtcbiAgICAvLyBlZGdlIGNhc2U6IHNvbWUgYnVpbGQgdG9vbHMgbWF5IHBhc3MgaW4gYSBudWxsL3VuZGVmaW5lZCB2YWx1ZVxuICAgIHZhciBuYW1lID0gY29uZmlnLm5hbWUsXG4gICAgICAgIGlzRnVuYyA9IF9pc0Z1bmN0aW9uKGNvbmZpZyksXG4gICAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX3Byb3BzID0gW107XG4gICAgfSA6IGNvbmZpZyxcbiAgICAgICAgLy9pbiBjYXNlIHNvbWVvbmUgcGFzc2VzIGluIGFuIG9iamVjdCB0aGF0J3Mgbm90IGEgcGx1Z2luLCBsaWtlIEN1c3RvbUVhc2VcbiAgICBpbnN0YW5jZURlZmF1bHRzID0ge1xuICAgICAgaW5pdDogX2VtcHR5RnVuYyxcbiAgICAgIHJlbmRlcjogX3JlbmRlclByb3BUd2VlbnMsXG4gICAgICBhZGQ6IF9hZGRQcm9wVHdlZW4sXG4gICAgICBraWxsOiBfa2lsbFByb3BUd2VlbnNPZixcbiAgICAgIG1vZGlmaWVyOiBfYWRkUGx1Z2luTW9kaWZpZXIsXG4gICAgICByYXdWYXJzOiAwXG4gICAgfSxcbiAgICAgICAgc3RhdGljcyA9IHtcbiAgICAgIHRhcmdldFRlc3Q6IDAsXG4gICAgICBnZXQ6IDAsXG4gICAgICBnZXRTZXR0ZXI6IF9nZXRTZXR0ZXIsXG4gICAgICBhbGlhc2VzOiB7fSxcbiAgICAgIHJlZ2lzdGVyOiAwXG4gICAgfTtcblxuICAgIF93YWtlKCk7XG5cbiAgICBpZiAoY29uZmlnICE9PSBQbHVnaW4pIHtcbiAgICAgIGlmIChfcGx1Z2luc1tuYW1lXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9zZXREZWZhdWx0cyhQbHVnaW4sIF9zZXREZWZhdWx0cyhfY29weUV4Y2x1ZGluZyhjb25maWcsIGluc3RhbmNlRGVmYXVsdHMpLCBzdGF0aWNzKSk7IC8vc3RhdGljIG1ldGhvZHNcblxuXG4gICAgICBfbWVyZ2UoUGx1Z2luLnByb3RvdHlwZSwgX21lcmdlKGluc3RhbmNlRGVmYXVsdHMsIF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgc3RhdGljcykpKTsgLy9pbnN0YW5jZSBtZXRob2RzXG5cblxuICAgICAgX3BsdWdpbnNbUGx1Z2luLnByb3AgPSBuYW1lXSA9IFBsdWdpbjtcblxuICAgICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICAgIF9oYXJuZXNzUGx1Z2lucy5wdXNoKFBsdWdpbik7XG5cbiAgICAgICAgX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xuICAgICAgfVxuXG4gICAgICBuYW1lID0gKG5hbWUgPT09IFwiY3NzXCIgPyBcIkNTU1wiIDogbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpKSArIFwiUGx1Z2luXCI7IC8vZm9yIHRoZSBnbG9iYWwgbmFtZS4gXCJtb3Rpb25QYXRoXCIgc2hvdWxkIGJlY29tZSBNb3Rpb25QYXRoUGx1Z2luXG4gICAgfVxuXG4gICAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gICAgY29uZmlnLnJlZ2lzdGVyICYmIGNvbmZpZy5yZWdpc3Rlcihnc2FwLCBQbHVnaW4sIFByb3BUd2Vlbik7XG4gIH0gZWxzZSB7XG4gICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUucHVzaChjb25maWcpO1xuICB9XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENPTE9SU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXzI1NSA9IDI1NSxcbiAgICBfY29sb3JMb29rdXAgPSB7XG4gIGFxdWE6IFswLCBfMjU1LCBfMjU1XSxcbiAgbGltZTogWzAsIF8yNTUsIDBdLFxuICBzaWx2ZXI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgYmxhY2s6IFswLCAwLCAwXSxcbiAgbWFyb29uOiBbMTI4LCAwLCAwXSxcbiAgdGVhbDogWzAsIDEyOCwgMTI4XSxcbiAgYmx1ZTogWzAsIDAsIF8yNTVdLFxuICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgd2hpdGU6IFtfMjU1LCBfMjU1LCBfMjU1XSxcbiAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gIHllbGxvdzogW18yNTUsIF8yNTUsIDBdLFxuICBvcmFuZ2U6IFtfMjU1LCAxNjUsIDBdLFxuICBncmF5OiBbMTI4LCAxMjgsIDEyOF0sXG4gIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgZ3JlZW46IFswLCAxMjgsIDBdLFxuICByZWQ6IFtfMjU1LCAwLCAwXSxcbiAgcGluazogW18yNTUsIDE5MiwgMjAzXSxcbiAgY3lhbjogWzAsIF8yNTUsIF8yNTVdLFxuICB0cmFuc3BhcmVudDogW18yNTUsIF8yNTUsIF8yNTUsIDBdXG59LFxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBpZGVhIHRvIHJlcGxhY2UgdGhlIGhhcmQtY29kZWQgY29sb3IgbmFtZSB2YWx1ZXMgLSBwdXQgdGhpcyBpbiB0aGUgdGlja2VyLndha2UoKSB3aGVyZSB3ZSBzZXQgdGhlIF9kb2M6XG4vLyBsZXQgY3R4ID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiKTtcbi8vIF9mb3JFYWNoTmFtZShcImFxdWEsbGltZSxzaWx2ZXIsYmxhY2ssbWFyb29uLHRlYWwsYmx1ZSxuYXZ5LHdoaXRlLG9saXZlLHllbGxvdyxvcmFuZ2UsZ3JheSxwdXJwbGUsZ3JlZW4scmVkLHBpbmssY3lhblwiLCBjb2xvciA9PiB7Y3R4LmZpbGxTdHlsZSA9IGNvbG9yOyBfY29sb3JMb29rdXBbY29sb3JdID0gc3BsaXRDb2xvcihjdHguZmlsbFN0eWxlKX0pO1xuX2h1ZSA9IGZ1bmN0aW9uIF9odWUoaCwgbTEsIG0yKSB7XG4gIGggKz0gaCA8IDAgPyAxIDogaCA+IDEgPyAtMSA6IDA7XG4gIHJldHVybiAoaCAqIDYgPCAxID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IGggPCAuNSA/IG0yIDogaCAqIDMgPCAyID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiBfMjU1ICsgLjUgfCAwO1xufSxcbiAgICBzcGxpdENvbG9yID0gZnVuY3Rpb24gc3BsaXRDb2xvcih2LCB0b0hTTCwgZm9yY2VBbHBoYSkge1xuICB2YXIgYSA9ICF2ID8gX2NvbG9yTG9va3VwLmJsYWNrIDogX2lzTnVtYmVyKHYpID8gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XSA6IDAsXG4gICAgICByLFxuICAgICAgZyxcbiAgICAgIGIsXG4gICAgICBoLFxuICAgICAgcyxcbiAgICAgIGwsXG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICBkLFxuICAgICAgd2FzSFNMO1xuXG4gIGlmICghYSkge1xuICAgIGlmICh2LnN1YnN0cigtMSkgPT09IFwiLFwiKSB7XG4gICAgICAvL3NvbWV0aW1lcyBhIHRyYWlsaW5nIGNvbW1hIGlzIGluY2x1ZGVkIGFuZCB3ZSBzaG91bGQgY2hvcCBpdCBvZmYgKHR5cGljYWxseSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIGxpa2UgYSB0ZXh0U2hhZG93OlwiMnB4IDJweCAycHggYmx1ZSwgNXB4IDVweCA1cHggcmdiKDI1NSwwLDApXCIgLSBpbiB0aGlzIGV4YW1wbGUgXCJibHVlLFwiIGhhcyBhIHRyYWlsaW5nIGNvbW1hLiBXZSBjb3VsZCBzdHJpcCBpdCBvdXQgaW5zaWRlIHBhcnNlQ29tcGxleCgpIGJ1dCB3ZSdkIG5lZWQgdG8gZG8gaXQgdG8gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBwbHVzIGl0IHdvdWxkbid0IHByb3ZpZGUgcHJvdGVjdGlvbiBmcm9tIG90aGVyIHBvdGVudGlhbCBzY2VuYXJpb3MgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBzaW1pbGFyIHZhbHVlLlxuICAgICAgdiA9IHYuc3Vic3RyKDAsIHYubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb2xvckxvb2t1cFt2XSkge1xuICAgICAgYSA9IF9jb2xvckxvb2t1cFt2XTtcbiAgICB9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgaWYgKHYubGVuZ3RoIDwgNikge1xuICAgICAgICAvL2ZvciBzaG9ydGhhbmQgbGlrZSAjOUYwIG9yICM5RjBGIChjb3VsZCBoYXZlIGFscGhhKVxuICAgICAgICByID0gdi5jaGFyQXQoMSk7XG4gICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICB2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGIgKyAodi5sZW5ndGggPT09IDUgPyB2LmNoYXJBdCg0KSArIHYuY2hhckF0KDQpIDogXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAvLyBoZXggd2l0aCBhbHBoYSwgbGlrZSAjZmQ1ZTUzZmZcbiAgICAgICAgYSA9IHBhcnNlSW50KHYuc3Vic3RyKDEsIDYpLCAxNik7XG4gICAgICAgIHJldHVybiBbYSA+PiAxNiwgYSA+PiA4ICYgXzI1NSwgYSAmIF8yNTUsIHBhcnNlSW50KHYuc3Vic3RyKDcpLCAxNikgLyAyNTVdO1xuICAgICAgfVxuXG4gICAgICB2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcbiAgICAgIGEgPSBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdO1xuICAgIH0gZWxzZSBpZiAodi5zdWJzdHIoMCwgMykgPT09IFwiaHNsXCIpIHtcbiAgICAgIGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApO1xuXG4gICAgICBpZiAoIXRvSFNMKSB7XG4gICAgICAgIGggPSArYVswXSAlIDM2MCAvIDM2MDtcbiAgICAgICAgcyA9ICthWzFdIC8gMTAwO1xuICAgICAgICBsID0gK2FbMl0gLyAxMDA7XG4gICAgICAgIGcgPSBsIDw9IC41ID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICByID0gbCAqIDIgLSBnO1xuICAgICAgICBhLmxlbmd0aCA+IDMgJiYgKGFbM10gKj0gMSk7IC8vY2FzdCBhcyBudW1iZXJcblxuICAgICAgICBhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuICAgICAgICBhWzFdID0gX2h1ZShoLCByLCBnKTtcbiAgICAgICAgYVsyXSA9IF9odWUoaCAtIDEgLyAzLCByLCBnKTtcbiAgICAgIH0gZWxzZSBpZiAofnYuaW5kZXhPZihcIj1cIikpIHtcbiAgICAgICAgLy9pZiByZWxhdGl2ZSB2YWx1ZXMgYXJlIGZvdW5kLCBqdXN0IHJldHVybiB0aGUgcmF3IHN0cmluZ3Mgd2l0aCB0aGUgcmVsYXRpdmUgcHJlZml4ZXMgaW4gcGxhY2UuXG4gICAgICAgIGEgPSB2Lm1hdGNoKF9udW1FeHApO1xuICAgICAgICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHYubWF0Y2goX3N0cmljdE51bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIGEgPSBhLm1hcChOdW1iZXIpO1xuICB9XG5cbiAgaWYgKHRvSFNMICYmICF3YXNIU0wpIHtcbiAgICByID0gYVswXSAvIF8yNTU7XG4gICAgZyA9IGFbMV0gLyBfMjU1O1xuICAgIGIgPSBhWzJdIC8gXzI1NTtcbiAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICBoID0gcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSBtYXggLSBtaW47XG4gICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICBoID0gbWF4ID09PSByID8gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCkgOiBtYXggPT09IGcgPyAoYiAtIHIpIC8gZCArIDIgOiAociAtIGcpIC8gZCArIDQ7XG4gICAgICBoICo9IDYwO1xuICAgIH1cblxuICAgIGFbMF0gPSB+fihoICsgLjUpO1xuICAgIGFbMV0gPSB+fihzICogMTAwICsgLjUpO1xuICAgIGFbMl0gPSB+fihsICogMTAwICsgLjUpO1xuICB9XG5cbiAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgcmV0dXJuIGE7XG59LFxuICAgIF9jb2xvck9yZGVyRGF0YSA9IGZ1bmN0aW9uIF9jb2xvck9yZGVyRGF0YSh2KSB7XG4gIC8vIHN0cmlwcyBvdXQgdGhlIGNvbG9ycyBmcm9tIHRoZSBzdHJpbmcsIGZpbmRzIGFsbCB0aGUgbnVtZXJpYyBzbG90cyAod2l0aCB1bml0cykgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhvc2UuIFRoZSBBcnJheSBhbHNvIGhhcyBhIFwiY1wiIHByb3BlcnR5IHdoaWNoIGlzIGFuIEFycmF5IG9mIHRoZSBpbmRleCB2YWx1ZXMgd2hlcmUgdGhlIGNvbG9ycyBiZWxvbmcuIFRoaXMgaXMgdG8gaGVscCB3b3JrIGFyb3VuZCBpc3N1ZXMgd2hlcmUgdGhlcmUncyBhIG1pcy1tYXRjaGVkIG9yZGVyIG9mIGNvbG9yL251bWVyaWMgZGF0YSBsaWtlIGRyb3Atc2hhZG93KCNmMDAgMHB4IDFweCAycHgpIGFuZCBkcm9wLXNoYWRvdygweCAxcHggMnB4ICNmMDApLiBUaGlzIGlzIGJhc2ljYWxseSBhIGhlbHBlciBmdW5jdGlvbiB1c2VkIGluIF9mb3JtYXRDb2xvcnMoKVxuICB2YXIgdmFsdWVzID0gW10sXG4gICAgICBjID0gW10sXG4gICAgICBpID0gLTE7XG4gIHYuc3BsaXQoX2NvbG9yRXhwKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGEgPSB2Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCBhKTtcbiAgICBjLnB1c2goaSArPSBhLmxlbmd0aCArIDEpO1xuICB9KTtcbiAgdmFsdWVzLmMgPSBjO1xuICByZXR1cm4gdmFsdWVzO1xufSxcbiAgICBfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24gX2Zvcm1hdENvbG9ycyhzLCB0b0hTTCwgb3JkZXJNYXRjaERhdGEpIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBjb2xvcnMgPSAocyArIHJlc3VsdCkubWF0Y2goX2NvbG9yRXhwKSxcbiAgICAgIHR5cGUgPSB0b0hTTCA/IFwiaHNsYShcIiA6IFwicmdiYShcIixcbiAgICAgIGkgPSAwLFxuICAgICAgYyxcbiAgICAgIHNoZWxsLFxuICAgICAgZCxcbiAgICAgIGw7XG5cbiAgaWYgKCFjb2xvcnMpIHtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIChjb2xvciA9IHNwbGl0Q29sb3IoY29sb3IsIHRvSFNMLCAxKSkgJiYgdHlwZSArICh0b0hTTCA/IGNvbG9yWzBdICsgXCIsXCIgKyBjb2xvclsxXSArIFwiJSxcIiArIGNvbG9yWzJdICsgXCIlLFwiICsgY29sb3JbM10gOiBjb2xvci5qb2luKFwiLFwiKSkgKyBcIilcIjtcbiAgfSk7XG5cbiAgaWYgKG9yZGVyTWF0Y2hEYXRhKSB7XG4gICAgZCA9IF9jb2xvck9yZGVyRGF0YShzKTtcbiAgICBjID0gb3JkZXJNYXRjaERhdGEuYztcblxuICAgIGlmIChjLmpvaW4ocmVzdWx0KSAhPT0gZC5jLmpvaW4ocmVzdWx0KSkge1xuICAgICAgc2hlbGwgPSBzLnJlcGxhY2UoX2NvbG9yRXhwLCBcIjFcIikuc3BsaXQoX251bVdpdGhVbml0RXhwKTtcbiAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyAofmMuaW5kZXhPZihpKSA/IGNvbG9ycy5zaGlmdCgpIHx8IHR5cGUgKyBcIjAsMCwwLDApXCIgOiAoZC5sZW5ndGggPyBkIDogY29sb3JzLmxlbmd0aCA/IGNvbG9ycyA6IG9yZGVyTWF0Y2hEYXRhKS5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXNoZWxsKSB7XG4gICAgc2hlbGwgPSBzLnNwbGl0KF9jb2xvckV4cCk7XG4gICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgY29sb3JzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzaGVsbFtsXTtcbn0sXG4gICAgX2NvbG9yRXhwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcyA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszLDR9KXsxLDJ9XFxcXGJcIixcbiAgICAgIC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy4sXG4gIHA7XG5cbiAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xufSgpLFxuICAgIF9oc2xFeHAgPSAvaHNsW2FdP1xcKC8sXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgIHRvSFNMO1xuICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgdG9IU0wgPSBfaHNsRXhwLnRlc3QoY29tYmluZWQpO1xuICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTsgLy8gbWFrZSBzdXJlIHRoZSBvcmRlciBvZiBudW1iZXJzL2NvbG9ycyBtYXRjaCB3aXRoIHRoZSBFTkQgdmFsdWUuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSUNLRVJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl90aWNrZXJBY3RpdmUsXG4gICAgX3RpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgX2FkanVzdGVkTGFnID0gMzMsXG4gICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgIF9nYXAgPSAxMDAwIC8gMjQwLFxuICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgIF9pZCxcbiAgICAgIF9yZXEsXG4gICAgICBfcmFmLFxuICAgICAgX3NlbGYsXG4gICAgICBfZGVsdGEsXG4gICAgICBfaSxcbiAgICAgIF90aWNrID0gZnVuY3Rpb24gX3RpY2sodikge1xuICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZnJhbWU7XG5cbiAgICAoZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQgfHwgZWxhcHNlZCA8IDApICYmIChfc3RhcnRUaW1lICs9IGVsYXBzZWQgLSBfYWRqdXN0ZWRMYWcpO1xuICAgIF9sYXN0VXBkYXRlICs9IGVsYXBzZWQ7XG4gICAgdGltZSA9IF9sYXN0VXBkYXRlIC0gX3N0YXJ0VGltZTtcbiAgICBvdmVybGFwID0gdGltZSAtIF9uZXh0VGltZTtcblxuICAgIGlmIChvdmVybGFwID4gMCB8fCBtYW51YWwpIHtcbiAgICAgIGZyYW1lID0gKytfc2VsZi5mcmFtZTtcbiAgICAgIF9kZWx0YSA9IHRpbWUgLSBfc2VsZi50aW1lICogMTAwMDtcbiAgICAgIF9zZWxmLnRpbWUgPSB0aW1lID0gdGltZSAvIDEwMDA7XG4gICAgICBfbmV4dFRpbWUgKz0gb3ZlcmxhcCArIChvdmVybGFwID49IF9nYXAgPyA0IDogX2dhcCAtIG92ZXJsYXApO1xuICAgICAgZGlzcGF0Y2ggPSAxO1xuICAgIH1cblxuICAgIG1hbnVhbCB8fCAoX2lkID0gX3JlcShfdGljaykpOyAvL21ha2Ugc3VyZSB0aGUgcmVxdWVzdCBpcyBtYWRlIGJlZm9yZSB3ZSBkaXNwYXRjaCB0aGUgXCJ0aWNrXCIgZXZlbnQgc28gdGhhdCB0aW1pbmcgaXMgbWFpbnRhaW5lZC4gT3RoZXJ3aXNlLCBpZiBwcm9jZXNzaW5nIHRoZSBcInRpY2tcIiByZXF1aXJlcyBhIGJ1bmNoIG9mIHRpbWUgKGxpa2UgMTVtcykgYW5kIHdlJ3JlIHVzaW5nIGEgc2V0VGltZW91dCgpIHRoYXQncyBiYXNlZCBvbiAxNi43bXMsIGl0J2QgdGVjaG5pY2FsbHkgdGFrZSAzMS43bXMgYmV0d2VlbiBmcmFtZXMgb3RoZXJ3aXNlLlxuXG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICBmb3IgKF9pID0gMDsgX2kgPCBfbGlzdGVuZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAvLyB1c2UgX2kgYW5kIGNoZWNrIF9saXN0ZW5lcnMubGVuZ3RoIGluc3RlYWQgb2YgYSB2YXJpYWJsZSBiZWNhdXNlIGEgbGlzdGVuZXIgY291bGQgZ2V0IHJlbW92ZWQgZHVyaW5nIHRoZSBsb29wLCBhbmQgaWYgdGhhdCBoYXBwZW5zIHRvIGFuIGVsZW1lbnQgbGVzcyB0aGFuIHRoZSBjdXJyZW50IGluZGV4LCBpdCdkIHRocm93IHRoaW5ncyBvZmYgaW4gdGhlIGxvb3AuXG4gICAgICAgIF9saXN0ZW5lcnNbX2ldKHRpbWUsIF9kZWx0YSwgZnJhbWUsIHYpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfc2VsZiA9IHtcbiAgICB0aW1lOiAwLFxuICAgIGZyYW1lOiAwLFxuICAgIHRpY2s6IGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICBfdGljayh0cnVlKTtcbiAgICB9LFxuICAgIGRlbHRhUmF0aW86IGZ1bmN0aW9uIGRlbHRhUmF0aW8oZnBzKSB7XG4gICAgICByZXR1cm4gX2RlbHRhIC8gKDEwMDAgLyAoZnBzIHx8IDYwKSk7XG4gICAgfSxcbiAgICB3YWtlOiBmdW5jdGlvbiB3YWtlKCkge1xuICAgICAgaWYgKF9jb3JlUmVhZHkpIHtcbiAgICAgICAgaWYgKCFfY29yZUluaXR0ZWQgJiYgX3dpbmRvd0V4aXN0cygpKSB7XG4gICAgICAgICAgX3dpbiA9IF9jb3JlSW5pdHRlZCA9IHdpbmRvdztcbiAgICAgICAgICBfZG9jID0gX3dpbi5kb2N1bWVudCB8fCB7fTtcbiAgICAgICAgICBfZ2xvYmFscy5nc2FwID0gZ3NhcDtcbiAgICAgICAgICAoX3dpbi5nc2FwVmVyc2lvbnMgfHwgKF93aW4uZ3NhcFZlcnNpb25zID0gW10pKS5wdXNoKGdzYXAudmVyc2lvbik7XG5cbiAgICAgICAgICBfaW5zdGFsbChfaW5zdGFsbFNjb3BlIHx8IF93aW4uR3JlZW5Tb2NrR2xvYmFscyB8fCAhX3dpbi5nc2FwICYmIF93aW4gfHwge30pO1xuXG4gICAgICAgICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUuZm9yRWFjaChfY3JlYXRlUGx1Z2luKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yYWYgPSB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgX2lkICYmIF9zZWxmLnNsZWVwKCk7XG5cbiAgICAgICAgX3JlcSA9IF9yYWYgfHwgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmLCBfbmV4dFRpbWUgLSBfc2VsZi50aW1lICogMTAwMCArIDEgfCAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGlja2VyQWN0aXZlID0gMTtcblxuICAgICAgICBfdGljaygyKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsZWVwOiBmdW5jdGlvbiBzbGVlcCgpIHtcbiAgICAgIChfcmFmID8gY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgIF9yZXEgPSBfZW1wdHlGdW5jO1xuICAgIH0sXG4gICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgX2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCBJbmZpbml0eTsgLy8gemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXG4gICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZyB8fCAzMywgX2xhZ1RocmVzaG9sZCk7XG4gICAgfSxcbiAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICBfbmV4dFRpbWUgPSBfc2VsZi50aW1lICogMTAwMCArIF9nYXA7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaywgb25jZSwgcHJpb3JpdGl6ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBvbmNlID8gZnVuY3Rpb24gKHQsIGQsIGYsIHYpIHtcbiAgICAgICAgY2FsbGJhY2sodCwgZCwgZiwgdik7XG5cbiAgICAgICAgX3NlbGYucmVtb3ZlKGZ1bmMpO1xuICAgICAgfSA6IGNhbGxiYWNrO1xuXG4gICAgICBfc2VsZi5yZW1vdmUoY2FsbGJhY2spO1xuXG4gICAgICBfbGlzdGVuZXJzW3ByaW9yaXRpemUgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShmdW5jKTtcblxuICAgICAgX3dha2UoKTtcblxuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShjYWxsYmFjaywgaSkge1xuICAgICAgfihpID0gX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSkgJiYgX2xpc3RlbmVycy5zcGxpY2UoaSwgMSkgJiYgX2kgPj0gaSAmJiBfaS0tO1xuICAgIH0sXG4gICAgX2xpc3RlbmVyczogX2xpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gX3NlbGY7XG59KCksXG4gICAgX3dha2UgPSBmdW5jdGlvbiBfd2FrZSgpIHtcbiAgcmV0dXJuICFfdGlja2VyQWN0aXZlICYmIF90aWNrZXIud2FrZSgpO1xufSxcbiAgICAvL2Fsc28gZW5zdXJlcyB0aGUgY29yZSBjbGFzc2VzIGFyZSBpbml0aWFsaXplZC5cblxuLypcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBFQVNJTkdcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbl9lYXNlTWFwID0ge30sXG4gICAgX2N1c3RvbUVhc2VFeHAgPSAvXltcXGQuXFwtTV1bXFxkLlxcLSxcXHNdLyxcbiAgICBfcXVvdGVzRXhwID0gL1tcIiddL2csXG4gICAgX3BhcnNlT2JqZWN0SW5TdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VPYmplY3RJblN0cmluZyh2YWx1ZSkge1xuICAvL3Rha2VzIGEgc3RyaW5nIGxpa2UgXCJ7d2lnZ2xlczoxMCwgdHlwZTphbnRpY2lwYXRlfSlcIiBhbmQgdHVybnMgaXQgaW50byBhIHJlYWwgb2JqZWN0LiBOb3RpY2UgaXQgZW5kcyBpbiBcIilcIiBhbmQgaW5jbHVkZXMgdGhlIHt9IHdyYXBwZXJzLiBUaGlzIGlzIGJlY2F1c2Ugd2Ugb25seSB1c2UgdGhpcyBmdW5jdGlvbiBmb3IgcGFyc2luZyBlYXNlIGNvbmZpZ3MgYW5kIHByaW9yaXRpemVkIG9wdGltaXphdGlvbiByYXRoZXIgdGhhbiByZXVzYWJpbGl0eS5cbiAgdmFyIG9iaiA9IHt9LFxuICAgICAgc3BsaXQgPSB2YWx1ZS5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMykuc3BsaXQoXCI6XCIpLFxuICAgICAga2V5ID0gc3BsaXRbMF0sXG4gICAgICBpID0gMSxcbiAgICAgIGwgPSBzcGxpdC5sZW5ndGgsXG4gICAgICBpbmRleCxcbiAgICAgIHZhbCxcbiAgICAgIHBhcnNlZFZhbDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHZhbCA9IHNwbGl0W2ldO1xuICAgIGluZGV4ID0gaSAhPT0gbCAtIDEgPyB2YWwubGFzdEluZGV4T2YoXCIsXCIpIDogdmFsLmxlbmd0aDtcbiAgICBwYXJzZWRWYWwgPSB2YWwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICBvYmpba2V5XSA9IGlzTmFOKHBhcnNlZFZhbCkgPyBwYXJzZWRWYWwucmVwbGFjZShfcXVvdGVzRXhwLCBcIlwiKS50cmltKCkgOiArcGFyc2VkVmFsO1xuICAgIGtleSA9IHZhbC5zdWJzdHIoaW5kZXggKyAxKS50cmltKCk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfdmFsdWVJblBhcmVudGhlc2VzID0gZnVuY3Rpb24gX3ZhbHVlSW5QYXJlbnRoZXNlcyh2YWx1ZSkge1xuICB2YXIgb3BlbiA9IHZhbHVlLmluZGV4T2YoXCIoXCIpICsgMSxcbiAgICAgIGNsb3NlID0gdmFsdWUuaW5kZXhPZihcIilcIiksXG4gICAgICBuZXN0ZWQgPSB2YWx1ZS5pbmRleE9mKFwiKFwiLCBvcGVuKTtcbiAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhvcGVuLCB+bmVzdGVkICYmIG5lc3RlZCA8IGNsb3NlID8gdmFsdWUuaW5kZXhPZihcIilcIiwgY2xvc2UgKyAxKSA6IGNsb3NlKTtcbn0sXG4gICAgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKG5hbWUpIHtcbiAgLy9uYW1lIGNhbiBiZSBhIHN0cmluZyBsaWtlIFwiZWxhc3RpYy5vdXQoMSwwLjUpXCIsIGFuZCBwYXNzIGluIF9lYXNlTWFwIGFzIG9iaiBhbmQgaXQnbGwgcGFyc2UgaXQgb3V0IGFuZCBjYWxsIHRoZSBhY3R1YWwgZnVuY3Rpb24gbGlrZSBfZWFzZU1hcC5FbGFzdGljLmVhc2VPdXQuY29uZmlnKDEsMC41KS4gSXQgd2lsbCBhbHNvIHBhcnNlIGN1c3RvbSBlYXNlIHN0cmluZ3MgYXMgbG9uZyBhcyBDdXN0b21FYXNlIGlzIGxvYWRlZCBhbmQgcmVnaXN0ZXJlZCAoaW50ZXJuYWxseSBhcyBfZWFzZU1hcC5fQ0UpLlxuICB2YXIgc3BsaXQgPSAobmFtZSArIFwiXCIpLnNwbGl0KFwiKFwiKSxcbiAgICAgIGVhc2UgPSBfZWFzZU1hcFtzcGxpdFswXV07XG4gIHJldHVybiBlYXNlICYmIHNwbGl0Lmxlbmd0aCA+IDEgJiYgZWFzZS5jb25maWcgPyBlYXNlLmNvbmZpZy5hcHBseShudWxsLCB+bmFtZS5pbmRleE9mKFwie1wiKSA/IFtfcGFyc2VPYmplY3RJblN0cmluZyhzcGxpdFsxXSldIDogX3ZhbHVlSW5QYXJlbnRoZXNlcyhuYW1lKS5zcGxpdChcIixcIikubWFwKF9udW1lcmljSWZQb3NzaWJsZSkpIDogX2Vhc2VNYXAuX0NFICYmIF9jdXN0b21FYXNlRXhwLnRlc3QobmFtZSkgPyBfZWFzZU1hcC5fQ0UoXCJcIiwgbmFtZSkgOiBlYXNlO1xufSxcbiAgICBfaW52ZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnZlcnRFYXNlKGVhc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlKDEgLSBwKTtcbiAgfTtcbn0sXG4gICAgLy8gYWxsb3cgeW95b0Vhc2UgdG8gYmUgc2V0IGluIGNoaWxkcmVuIGFuZCBoYXZlIHRob3NlIGFmZmVjdGVkIHdoZW4gdGhlIHBhcmVudC9hbmNlc3RvciB0aW1lbGluZSB5b3lvcy5cbl9wcm9wYWdhdGVZb3lvRWFzZSA9IGZ1bmN0aW9uIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKSB7XG4gIHZhciBjaGlsZCA9IHRpbWVsaW5lLl9maXJzdCxcbiAgICAgIGVhc2U7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZCwgaXNZb3lvKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnZhcnMueW95b0Vhc2UgJiYgKCFjaGlsZC5feW95byB8fCAhY2hpbGQuX3JlcGVhdCkgJiYgY2hpbGQuX3lveW8gIT09IGlzWW95bykge1xuICAgICAgaWYgKGNoaWxkLnRpbWVsaW5lKSB7XG4gICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZC50aW1lbGluZSwgaXNZb3lvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhc2UgPSBjaGlsZC5fZWFzZTtcbiAgICAgICAgY2hpbGQuX2Vhc2UgPSBjaGlsZC5feUVhc2U7XG4gICAgICAgIGNoaWxkLl95RWFzZSA9IGVhc2U7XG4gICAgICAgIGNoaWxkLl95b3lvID0gaXNZb3lvO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gIH1cbn0sXG4gICAgX3BhcnNlRWFzZSA9IGZ1bmN0aW9uIF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgcmV0dXJuICFlYXNlID8gZGVmYXVsdEVhc2UgOiAoX2lzRnVuY3Rpb24oZWFzZSkgPyBlYXNlIDogX2Vhc2VNYXBbZWFzZV0gfHwgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKGVhc2UpKSB8fCBkZWZhdWx0RWFzZTtcbn0sXG4gICAgX2luc2VydEVhc2UgPSBmdW5jdGlvbiBfaW5zZXJ0RWFzZShuYW1lcywgZWFzZUluLCBlYXNlT3V0LCBlYXNlSW5PdXQpIHtcbiAgaWYgKGVhc2VPdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZUluKDEgLSBwKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVhc2VJbk91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZUluT3V0ID0gZnVuY3Rpb24gZWFzZUluT3V0KHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyBlYXNlSW4ocCAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwKSAqIDIpIC8gMjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVhc2UgPSB7XG4gICAgZWFzZUluOiBlYXNlSW4sXG4gICAgZWFzZU91dDogZWFzZU91dCxcbiAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dFxuICB9LFxuICAgICAgbG93ZXJjYXNlTmFtZTtcblxuICBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfZ2xvYmFsc1tuYW1lXSA9IGVhc2U7XG4gICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKV0gPSBlYXNlT3V0O1xuXG4gICAgZm9yICh2YXIgcCBpbiBlYXNlKSB7XG4gICAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lICsgKHAgPT09IFwiZWFzZUluXCIgPyBcIi5pblwiIDogcCA9PT0gXCJlYXNlT3V0XCIgPyBcIi5vdXRcIiA6IFwiLmluT3V0XCIpXSA9IF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHBdID0gZWFzZVtwXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfZWFzZUluT3V0RnJvbU91dCA9IGZ1bmN0aW9uIF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/ICgxIC0gZWFzZU91dCgxIC0gcCAqIDIpKSAvIDIgOiAuNSArIGVhc2VPdXQoKHAgLSAuNSkgKiAyKSAvIDI7XG4gIH07XG59LFxuICAgIF9jb25maWdFbGFzdGljID0gZnVuY3Rpb24gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgdmFyIHAxID0gYW1wbGl0dWRlID49IDEgPyBhbXBsaXR1ZGUgOiAxLFxuICAgICAgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cbiAgcDIgPSAocGVyaW9kIHx8ICh0eXBlID8gLjMgOiAuNDUpKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSksXG4gICAgICBwMyA9IHAyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHAxKSB8fCAwKSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA9PT0gMSA/IDEgOiBwMSAqIE1hdGgucG93KDIsIC0xMCAqIHApICogX3NpbigocCAtIHAzKSAqIHAyKSArIDE7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBwMiA9IF8yUEkgLyBwMjsgLy9wcmVjYWxjdWxhdGUgdG8gb3B0aW1pemVcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgIHJldHVybiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9jb25maWdCYWNrID0gZnVuY3Rpb24gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KSB7XG4gIGlmIChvdmVyc2hvb3QgPT09IHZvaWQgMCkge1xuICAgIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gIH1cblxuICB2YXIgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID8gLS1wICogcCAqICgob3ZlcnNob290ICsgMSkgKiBwICsgb3ZlcnNob290KSArIDEgOiAwO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAob3ZlcnNob290KSB7XG4gICAgcmV0dXJuIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59OyAvLyBhIGNoZWFwZXIgKGtiIGFuZCBjcHUpIGJ1dCBtb3JlIG1pbGQgd2F5IHRvIGdldCBhIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSBieSBmZWVkaW5nIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlID0gcmF0aW8gPT4ge1xuLy8gXHRsZXQgeSA9IDAuNSArIHJhdGlvIC8gMjtcbi8vIFx0cmV0dXJuIHAgPT4gKDIgKiAoMSAtIHApICogcCAqIHkgKyBwICogcCk7XG4vLyB9LFxuLy8gYSBzdHJvbmdlciAoYnV0IG1vcmUgZXhwZW5zaXZlIGtiL2NwdSkgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIHRoYXQgbGV0cyB5b3UgZmVlZCBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZVN0cm9uZyA9IHJhdGlvID0+IHtcbi8vIFx0cmF0aW8gPSAuNSArIHJhdGlvIC8gMjtcbi8vIFx0bGV0IG8gPSAxIC8gMyAqIChyYXRpbyA8IC41ID8gcmF0aW8gOiAxIC0gcmF0aW8pLFxuLy8gXHRcdGIgPSByYXRpbyAtIG8sXG4vLyBcdFx0YyA9IHJhdGlvICsgbztcbi8vIFx0cmV0dXJuIHAgPT4gcCA9PT0gMSA/IHAgOiAzICogYiAqICgxIC0gcCkgKiAoMSAtIHApICogcCArIDMgKiBjICogKDEgLSBwKSAqIHAgKiBwICsgcCAqIHAgKiBwO1xuLy8gfTtcblxuXG5fZm9yRWFjaE5hbWUoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIiwgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgdmFyIHBvd2VyID0gaSA8IDUgPyBpICsgMSA6IGk7XG5cbiAgX2luc2VydEVhc2UobmFtZSArIFwiLFBvd2VyXCIgKyAocG93ZXIgLSAxKSwgaSA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTtcbiAgfSA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHA7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gcCwgcG93ZXIpO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyBNYXRoLnBvdyhwICogMiwgcG93ZXIpIC8gMiA6IDEgLSBNYXRoLnBvdygoMSAtIHApICogMiwgcG93ZXIpIC8gMjtcbiAgfSk7XG59KTtcblxuX2Vhc2VNYXAuTGluZWFyLmVhc2VOb25lID0gX2Vhc2VNYXAubm9uZSA9IF9lYXNlTWFwLkxpbmVhci5lYXNlSW47XG5cbl9pbnNlcnRFYXNlKFwiRWxhc3RpY1wiLCBfY29uZmlnRWxhc3RpYyhcImluXCIpLCBfY29uZmlnRWxhc3RpYyhcIm91dFwiKSwgX2NvbmZpZ0VsYXN0aWMoKSk7XG5cbihmdW5jdGlvbiAobiwgYykge1xuICB2YXIgbjEgPSAxIC8gYyxcbiAgICAgIG4yID0gMiAqIG4xLFxuICAgICAgbjMgPSAyLjUgKiBuMSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA8IG4xID8gbiAqIHAgKiBwIDogcCA8IG4yID8gbiAqIE1hdGgucG93KHAgLSAxLjUgLyBjLCAyKSArIC43NSA6IHAgPCBuMyA/IG4gKiAocCAtPSAyLjI1IC8gYykgKiBwICsgLjkzNzUgOiBuICogTWF0aC5wb3cocCAtIDIuNjI1IC8gYywgMikgKyAuOTg0Mzc1O1xuICB9O1xuXG4gIF9pbnNlcnRFYXNlKFwiQm91bmNlXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSwgZWFzZU91dCk7XG59KSg3LjU2MjUsIDIuNzUpO1xuXG5faW5zZXJ0RWFzZShcIkV4cG9cIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPyBNYXRoLnBvdygyLCAxMCAqIChwIC0gMSkpIDogMDtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkNpcmNcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIC0oX3NxcnQoMSAtIHAgKiBwKSAtIDEpO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiU2luZVwiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA9PT0gMSA/IDEgOiAtX2NvcyhwICogX0hBTEZfUEkpICsgMTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkJhY2tcIiwgX2NvbmZpZ0JhY2soXCJpblwiKSwgX2NvbmZpZ0JhY2soXCJvdXRcIiksIF9jb25maWdCYWNrKCkpO1xuXG5fZWFzZU1hcC5TdGVwcGVkRWFzZSA9IF9lYXNlTWFwLnN0ZXBzID0gX2dsb2JhbHMuU3RlcHBlZEVhc2UgPSB7XG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGVwcyA9IDE7XG4gICAgfVxuXG4gICAgdmFyIHAxID0gMSAvIHN0ZXBzLFxuICAgICAgICBwMiA9IHN0ZXBzICsgKGltbWVkaWF0ZVN0YXJ0ID8gMCA6IDEpLFxuICAgICAgICBwMyA9IGltbWVkaWF0ZVN0YXJ0ID8gMSA6IDAsXG4gICAgICAgIG1heCA9IDEgLSBfdGlueU51bTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAoKHAyICogX2NsYW1wKDAsIG1heCwgcCkgfCAwKSArIHAzKSAqIHAxO1xuICAgIH07XG4gIH1cbn07XG5fZGVmYXVsdHMuZWFzZSA9IF9lYXNlTWFwW1wicXVhZC5vdXRcIl07XG5cbl9mb3JFYWNoTmFtZShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2NhbGxiYWNrTmFtZXMgKz0gbmFtZSArIFwiLFwiICsgbmFtZSArIFwiUGFyYW1zLFwiO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENBQ0hFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBHU0NhY2hlID0gZnVuY3Rpb24gR1NDYWNoZSh0YXJnZXQsIGhhcm5lc3MpIHtcbiAgdGhpcy5pZCA9IF9nc0lEKys7XG4gIHRhcmdldC5fZ3NhcCA9IHRoaXM7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLmhhcm5lc3MgPSBoYXJuZXNzO1xuICB0aGlzLmdldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldCA6IF9nZXRQcm9wZXJ0eTtcbiAgdGhpcy5zZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXRTZXR0ZXIgOiBfZ2V0U2V0dGVyO1xufTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQU5JTUFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCB2YXIgQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5pbWF0aW9uKHZhcnMpIHtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgIGlmICh0aGlzLl9yZXBlYXQgPSB2YXJzLnJlcGVhdCA9PT0gSW5maW5pdHkgPyAtMiA6IHZhcnMucmVwZWF0IHx8IDApIHtcbiAgICAgIC8vIFRPRE86IHJlcGVhdDogSW5maW5pdHkgb24gYSB0aW1lbGluZSdzIGNoaWxkcmVuIG11c3QgZmxhZyB0aGF0IHRpbWVsaW5lIGludGVybmFsbHkgYW5kIGFmZmVjdCBpdHMgdG90YWxEdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHN0b3AgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiB3aGVuIHJlYWNoaW5nIHRoZSBzdGFydC5cbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhcnMucmVwZWF0RGVsYXkgfHwgMDtcbiAgICAgIHRoaXMuX3lveW8gPSAhIXZhcnMueW95byB8fCAhIXZhcnMueW95b0Vhc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fdHMgPSAxO1xuXG4gICAgX3NldER1cmF0aW9uKHRoaXMsICt2YXJzLmR1cmF0aW9uLCAxLCAxKTtcblxuICAgIHRoaXMuZGF0YSA9IHZhcnMuZGF0YTtcblxuICAgIGlmIChfY29udGV4dCkge1xuICAgICAgdGhpcy5fY3R4ID0gX2NvbnRleHQ7XG5cbiAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0aGlzKTtcbiAgICB9XG5cbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9O1xuXG4gIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgfTtcblxuICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90RHVyO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICByZXR1cm4gX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX3JlcGVhdCA8IDAgPyB2YWx1ZSA6ICh2YWx1ZSAtIHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JEZWxheSkgLyAodGhpcy5fcmVwZWF0ICsgMSkpO1xuICB9O1xuXG4gIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIF90b3RhbFRpbWUpO1xuXG4gICAgICAhcGFyZW50Ll9kcCB8fCBwYXJlbnQucGFyZW50IHx8IF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgdGhpcyk7IC8vIGVkZ2UgY2FzZTogaWYgdGhpcyBpcyBhIGNoaWxkIG9mIGEgdGltZWxpbmUgdGhhdCBhbHJlYWR5IGNvbXBsZXRlZCwgZm9yIGV4YW1wbGUsIHdlIG11c3QgcmUtYWN0aXZhdGUgdGhlIHBhcmVudC5cbiAgICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydCBvZiB0aGF0IGNoaWxkIHdvdWxkIGdldCBwdXNoZWQgb3V0LCBidXQgb25lIG9mIHRoZSBhbmNlc3RvcnMgbWF5IGhhdmUgY29tcGxldGVkLlxuXG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnQgJiYgdGhpcy5fZHAuYXV0b1JlbW92ZUNoaWxkcmVuICYmICh0aGlzLl90cyA+IDAgJiYgX3RvdGFsVGltZSA8IHRoaXMuX3REdXIgfHwgdGhpcy5fdHMgPCAwICYmIF90b3RhbFRpbWUgPiAwIHx8ICF0aGlzLl90RHVyICYmICFfdG90YWxUaW1lKSkge1xuICAgICAgICAvL2lmIHRoZSBhbmltYXRpb24gZG9lc24ndCBoYXZlIGEgcGFyZW50LCBwdXQgaXQgYmFjayBpbnRvIGl0cyBsYXN0IHBhcmVudCAocmVjb3JkZWQgYXMgX2RwIGZvciBleGFjdGx5IGNhc2VzIGxpa2UgdGhpcykuIExpbWl0IHRvIHBhcmVudHMgd2l0aCBhdXRvUmVtb3ZlQ2hpbGRyZW4gKGxpa2UgZ2xvYmFsVGltZWxpbmUpIHNvIHRoYXQgaWYgdGhlIHVzZXIgbWFudWFsbHkgcmVtb3ZlcyBhbiBhbmltYXRpb24gZnJvbSBhIHRpbWVsaW5lIGFuZCB0aGVuIGFsdGVycyBpdHMgcGxheWhlYWQsIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIGJhY2sgaW4uXG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRoaXMuX2RwLCB0aGlzLCB0aGlzLl9zdGFydCAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdFRpbWUgIT09IF90b3RhbFRpbWUgfHwgIXRoaXMuX2R1ciAmJiAhc3VwcHJlc3NFdmVudHMgfHwgdGhpcy5faW5pdHRlZCAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgPT09IF90aW55TnVtIHx8ICFfdG90YWxUaW1lICYmICF0aGlzLl9pbml0dGVkICYmICh0aGlzLmFkZCB8fCB0aGlzLl9wdExvb2t1cCkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciBfcHRMb29rdXAgb24gYSBUd2VlbiBpbnN0YW5jZSB0byBlbnN1cmUgaXQgaGFzIGFjdHVhbGx5IGZpbmlzaGVkIGJlaW5nIGluc3RhbnRpYXRlZCwgb3RoZXJ3aXNlIGlmIHRoaXMucmV2ZXJzZSgpIGdldHMgY2FsbGVkIGluIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIGl0IGNvdWxkIHRyaWdnZXIgYSByZW5kZXIoKSBoZXJlIGV2ZW4gdGhvdWdoIHRoZSBfdGFyZ2V0cyB3ZXJlbid0IHBvcHVsYXRlZCwgdGh1cyB3aGVuIF9pbml0KCkgaXMgY2FsbGVkIHRoZXJlIHdvbid0IGJlIGFueSBQcm9wVHdlZW5zIChpdCdsbCBhY3QgbGlrZSB0aGUgdHdlZW4gaXMgbm9uLWZ1bmN0aW9uYWwpXG4gICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTsgLy8gb3RoZXJ3aXNlLCBpZiBhbiBhbmltYXRpb24gaXMgcGF1c2VkLCB0aGVuIHRoZSBwbGF5aGVhZCBpcyBtb3ZlZCBiYWNrIHRvIHplcm8sIHRoZW4gcmVzdW1lZCwgaXQnZCByZXZlcnQgYmFjayB0byB0aGUgb3JpZ2luYWwgdGltZSBhdCB0aGUgcGF1c2VcbiAgICAgIC8vaWYgKCF0aGlzLl9sb2NrKSB7IC8vIGF2b2lkIGVuZGxlc3MgcmVjdXJzaW9uIChub3Qgc3VyZSB3ZSBuZWVkIHRoaXMgeWV0IG9yIGlmIGl0J3Mgd29ydGggdGhlIHBlcmZvcm1hbmNlIGhpdClcbiAgICAgIC8vICAgdGhpcy5fbG9jayA9IDE7XG5cbiAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7IC8vICAgdGhpcy5fbG9jayA9IDA7XG4gICAgICAvL31cblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTsgLy8gbm90ZTogaWYgdGhlIG1vZHVsdXMgcmVzdWx0cyBpbiAwLCB0aGUgcGxheWhlYWQgY291bGQgYmUgZXhhY3RseSBhdCB0aGUgZW5kIG9yIHRoZSBiZWdpbm5pbmcsIGFuZCB3ZSBhbHdheXMgZGVmZXIgdG8gdGhlIEVORCB3aXRoIGEgbm9uLXplcm8gdmFsdWUsIG90aGVyd2lzZSBpZiB5b3Ugc2V0IHRoZSB0aW1lKCkgdG8gdGhlIHZlcnkgZW5kIChkdXJhdGlvbigpKSwgaXQgd291bGQgcmVuZGVyIGF0IHRoZSBTVEFSVCFcbiAgfTtcblxuICBfcHJvdG8udG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhd1RpbWUoKSA+IDAgPyAxIDogMDtcbiAgfTtcblxuICBfcHJvdG8ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSAqICh0aGlzLl95b3lvICYmICEodGhpcy5pdGVyYXRpb24oKSAmIDEpID8gMSAtIHZhbHVlIDogdmFsdWUpICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLmR1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90aW1lIC8gdGhpcy5fZHVyKSA6IHRoaXMucmF3VGltZSgpID4gMCA/IDEgOiAwO1xuICB9O1xuXG4gIF9wcm90by5pdGVyYXRpb24gPSBmdW5jdGlvbiBpdGVyYXRpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgdmFyIGN5Y2xlRHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCkgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuX3RpbWUgKyAodmFsdWUgLSAxKSAqIGN5Y2xlRHVyYXRpb24sIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbikgKyAxIDogMTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGFkZGl0aW9uOlxuICAvLyBpc1BsYXlpbmdCYWNrd2FyZHMoKSB7XG4gIC8vIFx0bGV0IGFuaW1hdGlvbiA9IHRoaXMsXG4gIC8vIFx0XHRvcmllbnRhdGlvbiA9IDE7IC8vIDEgPSBmb3J3YXJkLCAtMSA9IGJhY2t3YXJkXG4gIC8vIFx0d2hpbGUgKGFuaW1hdGlvbikge1xuICAvLyBcdFx0b3JpZW50YXRpb24gKj0gYW5pbWF0aW9uLnJldmVyc2VkKCkgfHwgKGFuaW1hdGlvbi5yZXBlYXQoKSAmJiAhKGFuaW1hdGlvbi5pdGVyYXRpb24oKSAmIDEpKSA/IC0xIDogMTtcbiAgLy8gXHRcdGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5wYXJlbnQ7XG4gIC8vIFx0fVxuICAvLyBcdHJldHVybiBvcmllbnRhdGlvbiA8IDA7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90by50aW1lU2NhbGUgPSBmdW5jdGlvbiB0aW1lU2NhbGUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICB0aGlzLnRvdGFsVGltZShfY2xhbXAoLU1hdGguYWJzKHRoaXMuX2RlbGF5KSwgdGhpcy5fdER1ciwgdFRpbWUpLCBzdXBwcmVzc0V2ZW50cyAhPT0gZmFsc2UpO1xuXG4gICAgX3NldEVuZCh0aGlzKTsgLy8gaWYgcGFyZW50LnNtb290aENoaWxkVGltaW5nIHdhcyBmYWxzZSwgdGhlIGVuZCB0aW1lIGRpZG4ndCBnZXQgdXBkYXRlZCBpbiB0aGUgX2FsaWduUGxheWhlYWQoKSBtZXRob2QsIHNvIGRvIGl0IGhlcmUuXG5cblxuICAgIHJldHVybiBfcmVjYWNoZUFuY2VzdG9ycyh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2VkID0gZnVuY3Rpb24gcGF1c2VkKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BzICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcHMgPSB2YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BUaW1lID0gdGhpcy5fdFRpbWUgfHwgTWF0aC5tYXgoLXRoaXMuX2RlbGF5LCB0aGlzLnJhd1RpbWUoKSk7IC8vIGlmIHRoZSBwYXVzZSBvY2N1cnMgZHVyaW5nIHRoZSBkZWxheSBwaGFzZSwgbWFrZSBzdXJlIHRoYXQncyBmYWN0b3JlZCBpbiB3aGVuIHJlc3VtaW5nLlxuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fYWN0ID0gMDsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSwgc28gYSBwYXVzZWQgdHdlZW4gd291bGQgZWZmZWN0aXZlbHkgaGF2ZSBhIHRpbWVTY2FsZSBvZiAwLiBXZSByZWNvcmQgdGhlIFwicmVhbFwiIHRpbWVTY2FsZSBhcyBfcnRzIChyZWNvcmRlZCB0aW1lIHNjYWxlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3dha2UoKTtcblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX3J0czsgLy9vbmx5IGRlZmVyIHRvIF9wVGltZSAocGF1c2VUaW1lKSBpZiB0VGltZSBpcyB6ZXJvLiBSZW1lbWJlciwgc29tZW9uZSBjb3VsZCBwYXVzZSgpIGFuIGFuaW1hdGlvbiwgdGhlbiBzY3J1YiB0aGUgcGxheWhlYWQgYW5kIHJlc3VtZSgpLiBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBzbW9vdGhDaGlsZFRpbWluZywgd2UgcmVuZGVyIGF0IHRoZSByYXdUaW1lKCkgYmVjYXVzZSB0aGUgc3RhcnRUaW1lIHdvbid0IGdldCB1cGRhdGVkLlxuXG4gICAgICAgIHRoaXMudG90YWxUaW1lKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyA/IHRoaXMucmF3VGltZSgpIDogdGhpcy5fdFRpbWUgfHwgdGhpcy5fcFRpbWUsIHRoaXMucHJvZ3Jlc3MoKSA9PT0gMSAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgIT09IF90aW55TnVtICYmICh0aGlzLl90VGltZSAtPSBfdGlueU51bSkpOyAvLyBlZGdlIGNhc2U6IGFuaW1hdGlvbi5wcm9ncmVzcygxKS5wYXVzZSgpLnBsYXkoKSB3b3VsZG4ndCByZW5kZXIgYWdhaW4gYmVjYXVzZSB0aGUgcGxheWhlYWQgaXMgYWxyZWFkeSBhdCB0aGUgZW5kLCBidXQgdGhlIGNhbGwgdG8gdG90YWxUaW1lKCkgYmVsb3cgd2lsbCBhZGQgaXQgYmFjayB0byBpdHMgcGFyZW50Li4uYW5kIG5vdCByZW1vdmUgaXQgYWdhaW4gKHNpbmNlIHJlbW92aW5nIG9ubHkgaGFwcGVucyB1cG9uIHJlbmRlcmluZyBhdCBhIG5ldyB0aW1lKS4gT2Zmc2V0dGluZyB0aGUgX3RUaW1lIHNsaWdodGx5IGlzIGRvbmUgc2ltcGx5IHRvIGNhdXNlIHRoZSBmaW5hbCByZW5kZXIgaW4gdG90YWxUaW1lKCkgdGhhdCdsbCBwb3AgaXQgb2ZmIGl0cyB0aW1lbGluZSAoaWYgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUsIG9mIGNvdXJzZSkuIENoZWNrIHRvIG1ha2Ugc3VyZSBfelRpbWUgaXNuJ3QgLV90aW55TnVtIHRvIGF2b2lkIGFuIGVkZ2UgY2FzZSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgcHVzaGVkIHRvIHRoZSBlbmQgYnV0IElOU0lERSBhIHR3ZWVuL2NhbGxiYWNrLCB0aGUgdGltZWxpbmUgaXRzZWxmIGlzIHBhdXNlZCB0aHVzIGhhbHRpbmcgcmVuZGVyaW5nIGFuZCBsZWF2aW5nIGEgZmV3IHVucmVuZGVyZWQuIFdoZW4gcmVzdW1pbmcsIGl0IHdvdWxkbid0IHJlbmRlciB0aG9zZSBvdGhlcndpc2UuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0VGltZSA9IGZ1bmN0aW9uIHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHZhbHVlO1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwO1xuICAgICAgcGFyZW50ICYmIChwYXJlbnQuX3NvcnQgfHwgIXRoaXMucGFyZW50KSAmJiBfYWRkVG9UaW1lbGluZShwYXJlbnQsIHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0O1xuICB9O1xuXG4gIF9wcm90by5lbmRUaW1lID0gZnVuY3Rpb24gZW5kVGltZShpbmNsdWRlUmVwZWF0cykge1xuICAgIHJldHVybiB0aGlzLl9zdGFydCArIChfaXNOb3RGYWxzZShpbmNsdWRlUmVwZWF0cykgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuZHVyYXRpb24oKSkgLyBNYXRoLmFicyh0aGlzLl90cyB8fCAxKTtcbiAgfTtcblxuICBfcHJvdG8ucmF3VGltZSA9IGZ1bmN0aW9uIHJhd1RpbWUod3JhcFJlcGVhdHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7IC8vIF9kcCA9IGRldGFjaGVkIHBhcmVudFxuXG4gICAgcmV0dXJuICFwYXJlbnQgPyB0aGlzLl90VGltZSA6IHdyYXBSZXBlYXRzICYmICghdGhpcy5fdHMgfHwgdGhpcy5fcmVwZWF0ICYmIHRoaXMuX3RpbWUgJiYgdGhpcy50b3RhbFByb2dyZXNzKCkgPCAxKSA/IHRoaXMuX3RUaW1lICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgOiAhdGhpcy5fdHMgPyB0aGlzLl90VGltZSA6IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudC5yYXdUaW1lKHdyYXBSZXBlYXRzKSwgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIGNvbmZpZyA9IF9yZXZlcnRDb25maWc7XG4gICAgfVxuXG4gICAgdmFyIHByZXZJc1JldmVydGluZyA9IF9yZXZlcnRpbmc7XG4gICAgX3JldmVydGluZyA9IGNvbmZpZztcblxuICAgIGlmICh0aGlzLl9pbml0dGVkIHx8IHRoaXMuX3N0YXJ0QXQpIHtcbiAgICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5yZXZlcnQoY29uZmlnKTtcbiAgICAgIHRoaXMudG90YWxUaW1lKC0wLjAxLCBjb25maWcuc3VwcHJlc3NFdmVudHMpO1xuICAgIH1cblxuICAgIHRoaXMuZGF0YSAhPT0gXCJuZXN0ZWRcIiAmJiBjb25maWcua2lsbCAhPT0gZmFsc2UgJiYgdGhpcy5raWxsKCk7XG4gICAgX3JldmVydGluZyA9IHByZXZJc1JldmVydGluZztcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZ2xvYmFsVGltZSA9IGZ1bmN0aW9uIGdsb2JhbFRpbWUocmF3VGltZSkge1xuICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA/IHJhd1RpbWUgOiBhbmltYXRpb24ucmF3VGltZSgpO1xuXG4gICAgd2hpbGUgKGFuaW1hdGlvbikge1xuICAgICAgdGltZSA9IGFuaW1hdGlvbi5fc3RhcnQgKyB0aW1lIC8gKE1hdGguYWJzKGFuaW1hdGlvbi5fdHMpIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMucGFyZW50ICYmIHRoaXMuX3NhdCA/IHRoaXMuX3NhdC5nbG9iYWxUaW1lKHJhd1RpbWUpIDogdGltZTsgLy8gdGhlIF9zdGFydEF0IHR3ZWVucyBmb3IgLmZyb21UbygpIGFuZCAuZnJvbSgpIHRoYXQgaGF2ZSBpbW1lZGlhdGVSZW5kZXIgc2hvdWxkIGFsd2F5cyBiZSBGSVJTVCBpbiB0aGUgdGltZWxpbmUgKGltcG9ydGFudCBmb3IgY29udGV4dC5yZXZlcnQoKSkuIFwiX3NhdFwiIHN0YW5kcyBmb3IgX3N0YXJ0QXRUd2VlbiwgcmVmZXJyaW5nIHRvIHRoZSBwYXJlbnQgdHdlZW4gdGhhdCBjcmVhdGVkIHRoZSBfc3RhcnRBdC4gV2UgbXVzdCBkaXNjZXJuIGlmIHRoYXQgdHdlZW4gaGFkIGltbWVkaWF0ZVJlbmRlciBzbyB0aGF0IHdlIGNhbiBrbm93IHdoZXRoZXIgb3Igbm90IHRvIHByaW9yaXRpemUgaXQgaW4gcmV2ZXJ0KCkuXG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdCA9IGZ1bmN0aW9uIHJlcGVhdCh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9yZXBlYXQgPSB2YWx1ZSA9PT0gSW5maW5pdHkgPyAtMiA6IHZhbHVlO1xuICAgICAgcmV0dXJuIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlcGVhdCA9PT0gLTIgPyBJbmZpbml0eSA6IHRoaXMuX3JlcGVhdDtcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0RGVsYXkgPSBmdW5jdGlvbiByZXBlYXREZWxheSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgdGltZSA9IHRoaXMuX3RpbWU7XG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YWx1ZTtcblxuICAgICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcblxuICAgICAgcmV0dXJuIHRpbWUgPyB0aGlzLnRpbWUodGltZSkgOiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yRGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLnlveW8gPSBmdW5jdGlvbiB5b3lvKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3lveW8gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl95b3lvO1xuICB9O1xuXG4gIF9wcm90by5zZWVrID0gZnVuY3Rpb24gc2Vlayhwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5yZXN0YXJ0ID0gZnVuY3Rpb24gcmVzdGFydChpbmNsdWRlRGVsYXksIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMucGxheSgpLnRvdGFsVGltZShpbmNsdWRlRGVsYXkgPyAtdGhpcy5fZGVsYXkgOiAwLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICB9O1xuXG4gIF9wcm90by5wbGF5ID0gZnVuY3Rpb24gcGxheShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKGZhbHNlKS5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGZyb20gIT0gbnVsbCAmJiB0aGlzLnNlZWsoZnJvbSB8fCB0aGlzLnRvdGFsRHVyYXRpb24oKSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnJldmVyc2VkKHRydWUpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGF0VGltZSAhPSBudWxsICYmIHRoaXMuc2VlayhhdFRpbWUsIHN1cHByZXNzRXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3VtZSA9IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnNlZCA9IGZ1bmN0aW9uIHJldmVyc2VkKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICEhdmFsdWUgIT09IHRoaXMucmV2ZXJzZWQoKSAmJiB0aGlzLnRpbWVTY2FsZSgtdGhpcy5fcnRzIHx8ICh2YWx1ZSA/IC1fdGlueU51bSA6IDApKTsgLy8gaW4gY2FzZSB0aW1lU2NhbGUgaXMgemVybywgcmV2ZXJzaW5nIHdvdWxkIGhhdmUgbm8gZWZmZWN0IHNvIHdlIHVzZSBfdGlueU51bS5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3J0cyA8IDA7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX2luaXR0ZWQgPSB0aGlzLl9hY3QgPSAwO1xuICAgIHRoaXMuX3pUaW1lID0gLV90aW55TnVtO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pc0FjdGl2ZSA9IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcCxcbiAgICAgICAgc3RhcnQgPSB0aGlzLl9zdGFydCxcbiAgICAgICAgcmF3VGltZTtcbiAgICByZXR1cm4gISEoIXBhcmVudCB8fCB0aGlzLl90cyAmJiB0aGlzLl9pbml0dGVkICYmIHBhcmVudC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gcGFyZW50LnJhd1RpbWUodHJ1ZSkpID49IHN0YXJ0ICYmIHJhd1RpbWUgPCB0aGlzLmVuZFRpbWUodHJ1ZSkgLSBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbiBldmVudENhbGxiYWNrKHR5cGUsIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdmFycyA9IHRoaXMudmFycztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICBkZWxldGUgdmFyc1t0eXBlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhcnNbdHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgcGFyYW1zICYmICh2YXJzW3R5cGUgKyBcIlBhcmFtc1wiXSA9IHBhcmFtcyk7XG4gICAgICAgIHR5cGUgPT09IFwib25VcGRhdGVcIiAmJiAodGhpcy5fb25VcGRhdGUgPSBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB2YXJzW3R5cGVdO1xuICB9O1xuXG4gIF9wcm90by50aGVuID0gZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBmID0gX2lzRnVuY3Rpb24ob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiBfcGFzc1Rocm91Z2gsXG4gICAgICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbiBfcmVzb2x2ZSgpIHtcbiAgICAgICAgdmFyIF90aGVuID0gc2VsZi50aGVuO1xuICAgICAgICBzZWxmLnRoZW4gPSBudWxsOyAvLyB0ZW1wb3JhcmlseSBudWxsIHRoZSB0aGVuKCkgbWV0aG9kIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3AgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzMyMilcblxuICAgICAgICBfaXNGdW5jdGlvbihmKSAmJiAoZiA9IGYoc2VsZikpICYmIChmLnRoZW4gfHwgZiA9PT0gc2VsZikgJiYgKHNlbGYudGhlbiA9IF90aGVuKTtcbiAgICAgICAgcmVzb2x2ZShmKTtcbiAgICAgICAgc2VsZi50aGVuID0gX3RoZW47XG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VsZi5faW5pdHRlZCAmJiBzZWxmLnRvdGFsUHJvZ3Jlc3MoKSA9PT0gMSAmJiBzZWxmLl90cyA+PSAwIHx8ICFzZWxmLl90VGltZSAmJiBzZWxmLl90cyA8IDApIHtcbiAgICAgICAgX3Jlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuX3Byb20gPSBfcmVzb2x2ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ua2lsbCA9IGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgX2ludGVycnVwdCh0aGlzKTtcbiAgfTtcblxuICByZXR1cm4gQW5pbWF0aW9uO1xufSgpO1xuXG5fc2V0RGVmYXVsdHMoQW5pbWF0aW9uLnByb3RvdHlwZSwge1xuICBfdGltZTogMCxcbiAgX3N0YXJ0OiAwLFxuICBfZW5kOiAwLFxuICBfdFRpbWU6IDAsXG4gIF90RHVyOiAwLFxuICBfZGlydHk6IDAsXG4gIF9yZXBlYXQ6IDAsXG4gIF95b3lvOiBmYWxzZSxcbiAgcGFyZW50OiBudWxsLFxuICBfaW5pdHRlZDogZmFsc2UsXG4gIF9yRGVsYXk6IDAsXG4gIF90czogMSxcbiAgX2RwOiAwLFxuICByYXRpbzogMCxcbiAgX3pUaW1lOiAtX3RpbnlOdW0sXG4gIF9wcm9tOiAwLFxuICBfcHM6IGZhbHNlLFxuICBfcnRzOiAxXG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSU1FTElORVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUaW1lbGluZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbikge1xuICBfaW5oZXJpdHNMb29zZShUaW1lbGluZSwgX0FuaW1hdGlvbik7XG5cbiAgZnVuY3Rpb24gVGltZWxpbmUodmFycywgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQW5pbWF0aW9uLmNhbGwodGhpcywgdmFycykgfHwgdGhpcztcbiAgICBfdGhpcy5sYWJlbHMgPSB7fTtcbiAgICBfdGhpcy5zbW9vdGhDaGlsZFRpbWluZyA9ICEhdmFycy5zbW9vdGhDaGlsZFRpbWluZztcbiAgICBfdGhpcy5hdXRvUmVtb3ZlQ2hpbGRyZW4gPSAhIXZhcnMuYXV0b1JlbW92ZUNoaWxkcmVuO1xuICAgIF90aGlzLl9zb3J0ID0gX2lzTm90RmFsc2UodmFycy5zb3J0Q2hpbGRyZW4pO1xuICAgIF9nbG9iYWxUaW1lbGluZSAmJiBfYWRkVG9UaW1lbGluZSh2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBwb3NpdGlvbik7XG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpcy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMucGF1c2VkKHRydWUpO1xuICAgIHZhcnMuc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgdmFycy5zY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IFRpbWVsaW5lLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDAsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gISF2YXJzLmltbWVkaWF0ZVJlbmRlcjtcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pLCAxKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmNhbGwgPSBmdW5jdGlvbiBjYWxsKGNhbGxiYWNrLCBwYXJhbXMsIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrLCBwYXJhbXMpLCBwb3NpdGlvbik7XG4gIH0gLy9PTkxZIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5ISBNYXliZSBkZWxldGU/XG4gIDtcblxuICBfcHJvdG8yLnN0YWdnZXJUbyA9IGZ1bmN0aW9uIHN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgdmFycy5zdGFnZ2VyID0gdmFycy5zdGFnZ2VyIHx8IHN0YWdnZXI7XG4gICAgdmFycy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZUFsbDtcbiAgICB2YXJzLm9uQ29tcGxldGVQYXJhbXMgPSBvbkNvbXBsZXRlQWxsUGFyYW1zO1xuICAgIHZhcnMucGFyZW50ID0gdGhpcztcbiAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnN0YWdnZXJGcm9tID0gZnVuY3Rpb24gc3RhZ2dlckZyb20odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdmFycy5ydW5CYWNrd2FyZHMgPSAxO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb21UbyA9IGZ1bmN0aW9uIHN0YWdnZXJGcm9tVG8odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgdG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcbiAgICBfaW5oZXJpdERlZmF1bHRzKHRvVmFycykuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UodG9WYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl9kaXJ0eSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA8PSAwID8gMCA6IF9yb3VuZFByZWNpc2UodG90YWxUaW1lKSxcbiAgICAgICAgLy8gaWYgYSBwYXVzZWQgdGltZWxpbmUgaXMgcmVzdW1lZCAob3IgaXRzIF9zdGFydCBpcyB1cGRhdGVkIGZvciBhbm90aGVyIHJlYXNvbi4uLndoaWNoIHJvdW5kcyBpdCksIHRoYXQgY291bGQgcmVzdWx0IGluIHRoZSBwbGF5aGVhZCBzaGlmdGluZyBhICoqdGlueSoqIGFtb3VudCBhbmQgYSB6ZXJvLWR1cmF0aW9uIGNoaWxkIGF0IHRoYXQgc3BvdCBtYXkgZ2V0IHJlbmRlcmVkIGF0IGEgZGlmZmVyZW50IHJhdGlvLCBsaWtlIGl0cyB0b3RhbFRpbWUgaW4gcmVuZGVyKCkgbWF5IGJlIDFlLTE3IGluc3RlYWQgb2YgMCwgZm9yIGV4YW1wbGUuXG4gICAgY3Jvc3NpbmdTdGFydCA9IHRoaXMuX3pUaW1lIDwgMCAhPT0gdG90YWxUaW1lIDwgMCAmJiAodGhpcy5faW5pdHRlZCB8fCAhZHVyKSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldlBhdXNlZCxcbiAgICAgICAgcGF1c2VUd2VlbixcbiAgICAgICAgdGltZVNjYWxlLFxuICAgICAgICBwcmV2U3RhcnQsXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIHlveW8sXG4gICAgICAgIGlzWW95bztcbiAgICB0aGlzICE9PSBfZ2xvYmFsVGltZWxpbmUgJiYgdFRpbWUgPiB0RHVyICYmIHRvdGFsVGltZSA+PSAwICYmICh0VGltZSA9IHREdXIpO1xuXG4gICAgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCBmb3JjZSB8fCBjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgZHVyKSB7XG4gICAgICAgIC8vaWYgdG90YWxEdXJhdGlvbigpIGZpbmRzIGEgY2hpbGQgd2l0aCBhIG5lZ2F0aXZlIHN0YXJ0VGltZSBhbmQgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgdGhpbmdzIGdldCBzaGlmdGVkIGFyb3VuZCBpbnRlcm5hbGx5IHNvIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSB0aW1lIGFjY29yZGluZ2x5LiBGb3IgZXhhbXBsZSwgaWYgYSB0d2VlbiBzdGFydHMgYXQgLTMwIHdlIG11c3Qgc2hpZnQgRVZFUllUSElORyBmb3J3YXJkIDMwIHNlY29uZHMgYW5kIG1vdmUgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSBiYWNrd2FyZCBieSAzMCBzZWNvbmRzIHNvIHRoYXQgdGhpbmdzIGFsaWduIHdpdGggdGhlIHBsYXloZWFkIChubyBqdW1wKS5cbiAgICAgICAgdFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgICB0b3RhbFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgfVxuXG4gICAgICB0aW1lID0gdFRpbWU7XG4gICAgICBwcmV2U3RhcnQgPSB0aGlzLl9zdGFydDtcbiAgICAgIHRpbWVTY2FsZSA9IHRoaXMuX3RzO1xuICAgICAgcHJldlBhdXNlZCA9ICF0aW1lU2NhbGU7XG5cbiAgICAgIGlmIChjcm9zc2luZ1N0YXJ0KSB7XG4gICAgICAgIGR1ciB8fCAocHJldlRpbWUgPSB0aGlzLl96VGltZSk7IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUsIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICAgICAgKHRvdGFsVGltZSB8fCAhc3VwcHJlc3NFdmVudHMpICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgLy9hZGp1c3QgdGhlIHRpbWUgZm9yIHJlcGVhdHMgYW5kIHlveW9zXG4gICAgICAgIHlveW8gPSB0aGlzLl95b3lvO1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiB0b3RhbFRpbWUgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuICAgICAgICAhcHJldlRpbWUgJiYgdGhpcy5fdFRpbWUgJiYgcHJldkl0ZXJhdGlvbiAhPT0gaXRlcmF0aW9uICYmIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCAmJiAocHJldkl0ZXJhdGlvbiA9IGl0ZXJhdGlvbik7IC8vIGVkZ2UgY2FzZSAtIGlmIHNvbWVvbmUgZG9lcyBhZGRQYXVzZSgpIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiBhIHJlcGVhdGluZyB0aW1lbGluZSwgdGhhdCBwYXVzZSBpcyB0ZWNobmljYWxseSBhdCB0aGUgc2FtZSBzcG90IGFzIHRoZSBlbmQgd2hpY2ggY2F1c2VzIHRoaXMuX3RpbWUgdG8gZ2V0IHNldCB0byAwIHdoZW4gdGhlIHRvdGFsVGltZSB3b3VsZCBub3JtYWxseSBwbGFjZSB0aGUgcGxheWhlYWQgYXQgdGhlIGVuZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1IGFsc28sIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCBqdXN0IGNoZWNrcyB0byBtYWtlIHN1cmUgaXQgd2Fzbid0IHByZXZpb3VzbHkgaW4gdGhlIFwicmVwZWF0RGVsYXlcIiBwb3J0aW9uXG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiB0VGltZSAlIGR1ciA/IGR1ciA6IHRUaW1lOyAvLyBpZiB0aGUgcGxheWhlYWQgaXMgbGFuZGluZyBleGFjdGx5IGF0IHRoZSBlbmQgb2YgYW4gaXRlcmF0aW9uLCB1c2UgdGhhdCB0b3RhbFRpbWUgcmF0aGVyIHRoYW4gb25seSB0aGUgZHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBza2lwIHRoZSAybmQgcmVuZGVyIHNpbmNlIGl0J3MgZWZmZWN0aXZlbHkgYXQgdGhlIHNhbWUgdGltZS5cblxuICAgICAgICAgIHRoaXMuX2xvY2sgPSAxO1xuICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lIHx8IChpc1lveW8gPyAwIDogX3JvdW5kUHJlY2lzZShpdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uKSksIHN1cHByZXNzRXZlbnRzLCAhZHVyKS5fbG9jayA9IDA7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTsgLy8gaWYgYSB1c2VyIGdldHMgdGhlIGl0ZXJhdGlvbigpIGluc2lkZSB0aGUgb25SZXBlYXQsIGZvciBleGFtcGxlLCBpdCBzaG91bGQgYmUgYWNjdXJhdGUuXG5cbiAgICAgICAgICAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG4gICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAodGhpcy5pbnZhbGlkYXRlKCkuX2xvY2sgPSAxKTtcblxuICAgICAgICAgIGlmIChwcmV2VGltZSAmJiBwcmV2VGltZSAhPT0gdGhpcy5fdGltZSB8fCBwcmV2UGF1c2VkICE9PSAhdGhpcy5fdHMgfHwgdGhpcy52YXJzLm9uUmVwZWF0ICYmICF0aGlzLnBhcmVudCAmJiAhdGhpcy5fYWN0KSB7XG4gICAgICAgICAgICAvLyBpZiBwcmV2VGltZSBpcyAwIGFuZCB3ZSByZW5kZXIgYXQgdGhlIHZlcnkgZW5kLCBfdGltZSB3aWxsIGJlIHRoZSBlbmQsIHRodXMgd29uJ3QgbWF0Y2guIFNvIGluIHRoaXMgZWRnZSBjYXNlLCBwcmV2VGltZSB3b24ndCBtYXRjaCBfdGltZSBidXQgdGhhdCdzIG9rYXkuIElmIGl0IGdldHMga2lsbGVkIGluIHRoZSBvblJlcGVhdCwgZWplY3QgYXMgd2VsbC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGR1ciA9IHRoaXMuX2R1cjsgLy8gaW4gY2FzZSB0aGUgZHVyYXRpb24gY2hhbmdlZCBpbiB0aGUgb25SZXBlYXRcblxuICAgICAgICAgIHREdXIgPSB0aGlzLl90RHVyO1xuXG4gICAgICAgICAgaWYgKGRvZXNXcmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gMjtcbiAgICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gZHVyIDogLTAuMDAwMTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IC8vaW4gb3JkZXIgZm9yIHlveW9FYXNlIHRvIHdvcmsgcHJvcGVybHkgd2hlbiB0aGVyZSdzIGEgc3RhZ2dlciwgd2UgbXVzdCBzd2FwIG91dCB0aGUgZWFzZSBpbiBlYWNoIHN1Yi10d2Vlbi5cblxuXG4gICAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKHRoaXMsIGlzWW95byk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2hhc1BhdXNlICYmICF0aGlzLl9mb3JjaW5nICYmIHRoaXMuX2xvY2sgPCAyKSB7XG4gICAgICAgIHBhdXNlVHdlZW4gPSBfZmluZE5leHRQYXVzZVR3ZWVuKHRoaXMsIF9yb3VuZFByZWNpc2UocHJldlRpbWUpLCBfcm91bmRQcmVjaXNlKHRpbWUpKTtcblxuICAgICAgICBpZiAocGF1c2VUd2Vlbikge1xuICAgICAgICAgIHRUaW1lIC09IHRpbWUgLSAodGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgICB0aGlzLl9hY3QgPSAhdGltZVNjYWxlOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuICAgICAgICB0aGlzLl9pbml0dGVkID0gMTtcbiAgICAgICAgdGhpcy5felRpbWUgPSB0b3RhbFRpbWU7XG4gICAgICAgIHByZXZUaW1lID0gMDsgLy8gdXBvbiBpbml0LCB0aGUgcGxheWhlYWQgc2hvdWxkIGFsd2F5cyBnbyBmb3J3YXJkOyBzb21lb25lIGNvdWxkIGludmFsaWRhdGUoKSBhIGNvbXBsZXRlZCB0aW1lbGluZSBhbmQgdGhlbiBpZiB0aGV5IHJlc3RhcnQoKSwgdGhhdCB3b3VsZCBtYWtlIGNoaWxkIHR3ZWVucyByZW5kZXIgaW4gcmV2ZXJzZSBvcmRlciB3aGljaCBjb3VsZCBsb2NrIGluIHRoZSB3cm9uZyBzdGFydGluZyB2YWx1ZXMgaWYgdGhleSBidWlsZCBvbiBlYWNoIG90aGVyLCBsaWtlIHRsLnRvKG9iaiwge3g6IDEwMH0pLnRvKG9iaiwge3g6IDB9KS5cbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2VGltZSAmJiB0aW1lICYmICFzdXBwcmVzc0V2ZW50cyAmJiAhaXRlcmF0aW9uKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZTsgLy93aGVuIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhpcyB0aW1lbGluZSwgd2UgbXVzdCBwYXNzIHRoYXQgaW5mb3JtYXRpb24gZG93biB0byB0aGUgY2hpbGQgYW5pbWF0aW9ucyBzbyB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGtub3cgd2hldGhlciB0byByZW5kZXIgdGhlaXIgc3RhcnRpbmcgb3IgZW5kaW5nIHZhbHVlcy5cblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX3ByZXY7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgYWRqdXN0ZWRUaW1lIDw9IGNoaWxkLl9lbmQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIChjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnRBdCkpOyAvLyBpZiByZXZlcnRpbmcsIHdlIHNob3VsZCBhbHdheXMgZm9yY2UgcmVuZGVycyBvZiBpbml0dGVkIHR3ZWVucyAoYnV0IHJlbWVtYmVyIHRoYXQgLmZyb21UbygpIG9yIC5mcm9tKCkgbWF5IGhhdmUgYSBfc3RhcnRBdCBidXQgbm90IF9pbml0dGVkIHlldCkuIElmLCBmb3IgZXhhbXBsZSwgYSAuZnJvbVRvKCkgdHdlZW4gd2l0aCBhIHN0YWdnZXIgKHdoaWNoIGNyZWF0ZXMgYW4gaW50ZXJuYWwgdGltZWxpbmUpIGdldHMgcmV2ZXJ0ZWQgQkVGT1JFIHNvbWUgb2YgaXRzIGNoaWxkIHR3ZWVucyByZW5kZXIgZm9yIHRoZSBmaXJzdCB0aW1lLCBpdCBtYXkgbm90IHByb3Blcmx5IHRyaWdnZXIgdGhlbSB0byByZXZlcnQuXG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IGFkanVzdGVkVGltZSA/IC1fdGlueU51bSA6IF90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGFkanVzdCB6VGltZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhdXNlVHdlZW4gJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgcGF1c2VUd2Vlbi5yZW5kZXIodGltZSA+PSBwcmV2VGltZSA/IDAgOiAtX3RpbnlOdW0pLl96VGltZSA9IHRpbWUgPj0gcHJldlRpbWUgPyAxIDogLTE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RzKSB7XG4gICAgICAgICAgLy90aGUgY2FsbGJhY2sgcmVzdW1lZCBwbGF5YmFjayEgU28gc2luY2Ugd2UgbWF5IGhhdmUgaGVsZCBiYWNrIHRoZSBwbGF5aGVhZCBkdWUgdG8gd2hlcmUgdGhlIHBhdXNlIGlzIHBvc2l0aW9uZWQsIGdvIGFoZWFkIGFuZCBqdW1wIHRvIHdoZXJlIGl0J3MgU1VQUE9TRUQgdG8gYmUgKGlmIG5vIHBhdXNlIGhhcHBlbmVkKS5cbiAgICAgICAgICB0aGlzLl9zdGFydCA9IHByZXZTdGFydDsgLy9pZiB0aGUgcGF1c2Ugd2FzIGF0IGFuIGVhcmxpZXIgdGltZSBhbmQgdGhlIHVzZXIgcmVzdW1lZCBpbiB0aGUgY2FsbGJhY2ssIGl0IGNvdWxkIHJlcG9zaXRpb24gdGhlIHRpbWVsaW5lIChjaGFuZ2luZyBpdHMgc3RhcnRUaW1lKSwgdGhyb3dpbmcgdGhpbmdzIG9mZiBzbGlnaHRseSwgc28gd2UgbWFrZSBzdXJlIHRoZSBfc3RhcnQgZG9lc24ndCBzaGlmdC5cblxuICAgICAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiLCB0cnVlKTtcbiAgICAgIGlmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90VGltZSA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSB8fCAhdFRpbWUgJiYgcHJldlRpbWUpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0IHx8IE1hdGguYWJzKHRpbWVTY2FsZSkgIT09IE1hdGguYWJzKHRoaXMuX3RzKSkgaWYgKCF0aGlzLl9sb2NrKSB7XG4gICAgICAgIC8vIHJlbWVtYmVyLCBhIGNoaWxkJ3MgY2FsbGJhY2sgbWF5IGFsdGVyIHRoaXMgdGltZWxpbmUncyBwbGF5aGVhZCBvciB0aW1lU2NhbGUgd2hpY2ggaXMgd2h5IHdlIG5lZWQgdG8gYWRkIHNvbWUgb2YgdGhlc2UgY2hlY2tzLlxuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgISh0b3RhbFRpbWUgPCAwICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8ICF0RHVyKSkge1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHRoaXMuX3Byb20gJiYgISh0VGltZSA8IHREdXIgJiYgdGhpcy50aW1lU2NhbGUoKSA+IDApICYmIHRoaXMuX3Byb20oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkID0gZnVuY3Rpb24gYWRkKGNoaWxkLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX2lzTnVtYmVyKHBvc2l0aW9uKSB8fCAocG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiwgY2hpbGQpKTtcblxuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgQW5pbWF0aW9uKSkge1xuICAgICAgaWYgKF9pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICBjaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZChvYmosIHBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRMYWJlbChjaGlsZCwgcG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMgIT09IGNoaWxkID8gX2FkZFRvVGltZWxpbmUodGhpcywgY2hpbGQsIHBvc2l0aW9uKSA6IHRoaXM7IC8vZG9uJ3QgYWxsb3cgYSB0aW1lbGluZSB0byBiZSBhZGRlZCB0byBpdHNlbGYgYXMgYSBjaGlsZCFcbiAgfTtcblxuICBfcHJvdG8yLmdldENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChuZXN0ZWQgPT09IHZvaWQgMCkge1xuICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHdlZW5zID09PSB2b2lkIDApIHtcbiAgICAgIHR3ZWVucyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVsaW5lcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aW1lbGluZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAtX2JpZ051bTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgICB0d2VlbnMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lbGluZXMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBuZXN0ZWQgJiYgYS5wdXNoLmFwcGx5KGEsIGNoaWxkLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG8yLmdldEJ5SWQgPSBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLmdldENoaWxkcmVuKDEsIDEsIDEpLFxuICAgICAgICBpID0gYW5pbWF0aW9ucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uc1tpXS52YXJzLmlkID09PSBpZCkge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoY2hpbGQpIHtcbiAgICBpZiAoX2lzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtpbGxUd2VlbnNPZihjaGlsZCk7XG4gICAgfVxuXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIGNoaWxkKTtcblxuICAgIGlmIChjaGlsZCA9PT0gdGhpcy5fcmVjZW50KSB7XG4gICAgICB0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMTtcblxuICAgIGlmICghdGhpcy5fZHAgJiYgdGhpcy5fdHMpIHtcbiAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciB0aGUgZ2xvYmFsIHRpbWVsaW5lIChvciBhbnkgb3RoZXIgdGhhdCBoYXMgbm8gcGFyZW50IG9yIGRldGFjaGVkIHBhcmVudCkuXG4gICAgICB0aGlzLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoX3RpY2tlci50aW1lIC0gKHRoaXMuX3RzID4gMCA/IF90b3RhbFRpbWUyIC8gdGhpcy5fdHMgOiAodGhpcy50b3RhbER1cmF0aW9uKCkgLSBfdG90YWxUaW1lMikgLyAtdGhpcy5fdHMpKTtcbiAgICB9XG5cbiAgICBfQW5pbWF0aW9uLnByb3RvdHlwZS50b3RhbFRpbWUuY2FsbCh0aGlzLCBfdG90YWxUaW1lMiwgc3VwcHJlc3NFdmVudHMpO1xuXG4gICAgdGhpcy5fZm9yY2luZyA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRMYWJlbCA9IGZ1bmN0aW9uIGFkZExhYmVsKGxhYmVsLCBwb3NpdGlvbikge1xuICAgIHRoaXMubGFiZWxzW2xhYmVsXSA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwobGFiZWwpIHtcbiAgICBkZWxldGUgdGhpcy5sYWJlbHNbbGFiZWxdO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkUGF1c2UgPSBmdW5jdGlvbiBhZGRQYXVzZShwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB0ID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2sgfHwgX2VtcHR5RnVuYywgcGFyYW1zKTtcbiAgICB0LmRhdGEgPSBcImlzUGF1c2VcIjtcbiAgICB0aGlzLl9oYXNQYXVzZSA9IDE7XG4gICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIHQsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVQYXVzZSA9IGZ1bmN0aW9uIHJlbW92ZVBhdXNlKHBvc2l0aW9uKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgcG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPT09IHBvc2l0aW9uICYmIGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgdHdlZW5zID0gdGhpcy5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSxcbiAgICAgICAgaSA9IHR3ZWVucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiAhPT0gdHdlZW5zW2ldICYmIHR3ZWVuc1tpXS5raWxsKHRhcmdldHMsIHByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmdldFR3ZWVuc09mID0gZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHZhciBhID0gW10sXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBpc0dsb2JhbFRpbWUgPSBfaXNOdW1iZXIob25seUFjdGl2ZSksXG4gICAgICAgIC8vIGEgbnVtYmVyIGlzIGludGVycHJldGVkIGFzIGEgZ2xvYmFsIHRpbWUuIElmIHRoZSBhbmltYXRpb24gc3BhbnNcbiAgICBjaGlsZHJlbjtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVHdlZW4pIHtcbiAgICAgICAgaWYgKF9hcnJheUNvbnRhaW5zQW55KGNoaWxkLl90YXJnZXRzLCBwYXJzZWRUYXJnZXRzKSAmJiAoaXNHbG9iYWxUaW1lID8gKCFfb3ZlcndyaXRpbmdUd2VlbiB8fCBjaGlsZC5faW5pdHRlZCAmJiBjaGlsZC5fdHMpICYmIGNoaWxkLmdsb2JhbFRpbWUoMCkgPD0gb25seUFjdGl2ZSAmJiBjaGlsZC5nbG9iYWxUaW1lKGNoaWxkLnRvdGFsRHVyYXRpb24oKSkgPiBvbmx5QWN0aXZlIDogIW9ubHlBY3RpdmUgfHwgY2hpbGQuaXNBY3RpdmUoKSkpIHtcbiAgICAgICAgICAvLyBub3RlOiBpZiB0aGlzIGlzIGZvciBvdmVyd3JpdGluZywgaXQgc2hvdWxkIG9ubHkgYmUgZm9yIHR3ZWVucyB0aGF0IGFyZW4ndCBwYXVzZWQgYW5kIGFyZSBpbml0dGVkLlxuICAgICAgICAgIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKGNoaWxkcmVuID0gY2hpbGQuZ2V0VHdlZW5zT2YocGFyc2VkVGFyZ2V0cywgb25seUFjdGl2ZSkpLmxlbmd0aCkge1xuICAgICAgICBhLnB1c2guYXBwbHkoYSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZSAtIHRhcmdldHMoKSBvbiB0aW1lbGluZXNcbiAgLy8gdGFyZ2V0cygpIHtcbiAgLy8gXHRsZXQgcmVzdWx0ID0gW107XG4gIC8vIFx0dGhpcy5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaCh0ID0+IHJlc3VsdC5wdXNoKC4uLnQudGFyZ2V0cygpKSk7XG4gIC8vIFx0cmV0dXJuIHJlc3VsdC5maWx0ZXIoKHYsIGkpID0+IHJlc3VsdC5pbmRleE9mKHYpID09PSBpKTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvMi50d2VlblRvID0gZnVuY3Rpb24gdHdlZW5Ubyhwb3NpdGlvbiwgdmFycykge1xuICAgIHZhcnMgPSB2YXJzIHx8IHt9O1xuXG4gICAgdmFyIHRsID0gdGhpcyxcbiAgICAgICAgZW5kVGltZSA9IF9wYXJzZVBvc2l0aW9uKHRsLCBwb3NpdGlvbiksXG4gICAgICAgIF92YXJzID0gdmFycyxcbiAgICAgICAgc3RhcnRBdCA9IF92YXJzLnN0YXJ0QXQsXG4gICAgICAgIF9vblN0YXJ0ID0gX3ZhcnMub25TdGFydCxcbiAgICAgICAgb25TdGFydFBhcmFtcyA9IF92YXJzLm9uU3RhcnRQYXJhbXMsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF92YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgdHdlZW4gPSBUd2Vlbi50byh0bCwgX3NldERlZmF1bHRzKHtcbiAgICAgIGVhc2U6IHZhcnMuZWFzZSB8fCBcIm5vbmVcIixcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIHRpbWU6IGVuZFRpbWUsXG4gICAgICBvdmVyd3JpdGU6IFwiYXV0b1wiLFxuICAgICAgZHVyYXRpb246IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKSB8fCBfdGlueU51bSxcbiAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgIHRsLnBhdXNlKCk7XG5cbiAgICAgICAgaWYgKCFpbml0dGVkKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpO1xuICAgICAgICAgIHR3ZWVuLl9kdXIgIT09IGR1cmF0aW9uICYmIF9zZXREdXJhdGlvbih0d2VlbiwgZHVyYXRpb24sIDAsIDEpLnJlbmRlcih0d2Vlbi5fdGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBfb25TdGFydCAmJiBfb25TdGFydC5hcHBseSh0d2Vlbiwgb25TdGFydFBhcmFtcyB8fCBbXSk7IC8vaW4gY2FzZSB0aGUgdXNlciBoYWQgYW4gb25TdGFydCBpbiB0aGUgdmFycyAtIHdlIGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIGl0LlxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcblxuICAgIHJldHVybiBpbW1lZGlhdGVSZW5kZXIgPyB0d2Vlbi5yZW5kZXIoMCkgOiB0d2VlbjtcbiAgfTtcblxuICBfcHJvdG8yLnR3ZWVuRnJvbVRvID0gZnVuY3Rpb24gdHdlZW5Gcm9tVG8oZnJvbVBvc2l0aW9uLCB0b1Bvc2l0aW9uLCB2YXJzKSB7XG4gICAgcmV0dXJuIHRoaXMudHdlZW5Ubyh0b1Bvc2l0aW9uLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgc3RhcnRBdDoge1xuICAgICAgICB0aW1lOiBfcGFyc2VQb3NpdGlvbih0aGlzLCBmcm9tUG9zaXRpb24pXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuICB9O1xuXG4gIF9wcm90bzIucmVjZW50ID0gZnVuY3Rpb24gcmVjZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNlbnQ7XG4gIH07XG5cbiAgX3Byb3RvMi5uZXh0TGFiZWwgPSBmdW5jdGlvbiBuZXh0TGFiZWwoYWZ0ZXJUaW1lKSB7XG4gICAgaWYgKGFmdGVyVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBhZnRlclRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBhZnRlclRpbWUpKTtcbiAgfTtcblxuICBfcHJvdG8yLnByZXZpb3VzTGFiZWwgPSBmdW5jdGlvbiBwcmV2aW91c0xhYmVsKGJlZm9yZVRpbWUpIHtcbiAgICBpZiAoYmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBiZWZvcmVUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYmVmb3JlVGltZSksIDEpO1xuICB9O1xuXG4gIF9wcm90bzIuY3VycmVudExhYmVsID0gZnVuY3Rpb24gY3VycmVudExhYmVsKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnNlZWsodmFsdWUsIHRydWUpIDogdGhpcy5wcmV2aW91c0xhYmVsKHRoaXMuX3RpbWUgKyBfdGlueU51bSk7XG4gIH07XG5cbiAgX3Byb3RvMi5zaGlmdENoaWxkcmVuID0gZnVuY3Rpb24gc2hpZnRDaGlsZHJlbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGlnbm9yZUJlZm9yZVRpbWUgPSAwO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBsYWJlbHMgPSB0aGlzLmxhYmVscyxcbiAgICAgICAgcDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGNoaWxkLl9zdGFydCArPSBhbW91bnQ7XG4gICAgICAgIGNoaWxkLl9lbmQgKz0gYW1vdW50O1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChhZGp1c3RMYWJlbHMpIHtcbiAgICAgIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICAgICAgaWYgKGxhYmVsc1twXSA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgICAgbGFiZWxzW3BdICs9IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgY2hpbGQuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8yLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoaW5jbHVkZUxhYmVscykge1xuICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAvLyB0byBhdm9pZCBpc05hTiwgbGlrZSBpZiBzb21lb25lIHBhc3NlcyBpbiBhIHZhbHVlIGxpa2UgXCIhPSB3aGF0ZXZlclwiXG4gICAgICAgIGVuZCA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9uYWwgfHwgcGFyc2VkU3RhcnQgIT09IGVuZCB8fCBfZm9yY2VBbGxQcm9wVHdlZW5zKSB7XG4gICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAvLyBmdW4gZmFjdDogYW55IG51bWJlciBtdWx0aXBsaWVkIGJ5IFwiXCIgaXMgZXZhbHVhdGVkIGFzIHRoZSBudW1iZXIgMCFcbiAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICBtb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdGhpcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgIH1cblxuICAgICFjdXJyZW50VmFsdWUgJiYgIShwcm9wIGluIHRhcmdldCkgJiYgX21pc3NpbmdQbHVnaW4ocHJvcCwgZW5kKTtcbiAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICB9XG59LFxuICAgIC8vY3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZhcnMgb2JqZWN0IGFuZCBwcm9jZXNzZXMgYW55IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyAocHV0dGluZyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBkaXJlY3RseSBpbnRvIHRoZSBjb3B5KSBhcyB3ZWxsIGFzIHN0cmluZ3Mgd2l0aCBcInJhbmRvbSgpXCIgaW4gdGhlbS4gSXQgZG9lcyBOT1QgcHJvY2VzcyByZWxhdGl2ZSB2YWx1ZXMuXG5fcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgX2lzRnVuY3Rpb24odmFycykgJiYgKHZhcnMgPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgfVxuXG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICB2YXIgcGx1Z2luLCBwdCwgcHRMb29rdXAsIGk7XG5cbiAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgIGlmICh0d2VlbiAhPT0gX3F1aWNrVHdlZW4pIHtcbiAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07IC8vbm90ZTogd2UgY2FuJ3QgdXNlIHR3ZWVuLl9wdExvb2t1cFtpbmRleF0gYmVjYXVzZSBmb3Igc3RhZ2dlcmVkIHR3ZWVucywgdGhlIGluZGV4IGZyb20gdGhlIGZ1bGxUYXJnZXRzIGFycmF5IHdvbid0IG1hdGNoIHdoYXQgaXQgaXMgaW4gZWFjaCBpbmRpdmlkdWFsIHR3ZWVuIHRoYXQgc3Bhd25zIGZyb20gdGhlIHN0YWdnZXIuXG5cbiAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwdExvb2t1cFtwbHVnaW4uX3Byb3BzW2ldXSA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59LFxuICAgIF9vdmVyd3JpdGluZ1R3ZWVuLFxuICAgIC8vc3RvcmUgYSByZWZlcmVuY2UgdGVtcG9yYXJpbHkgc28gd2UgY2FuIGF2b2lkIG92ZXJ3cml0aW5nIGl0c2VsZi5cbl9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKSB7XG4gIHZhciB2YXJzID0gdHdlZW4udmFycyxcbiAgICAgIGVhc2UgPSB2YXJzLmVhc2UsXG4gICAgICBzdGFydEF0ID0gdmFycy5zdGFydEF0LFxuICAgICAgaW1tZWRpYXRlUmVuZGVyID0gdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICBsYXp5ID0gdmFycy5sYXp5LFxuICAgICAgb25VcGRhdGUgPSB2YXJzLm9uVXBkYXRlLFxuICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICBrZXlmcmFtZXMgPSB2YXJzLmtleWZyYW1lcyxcbiAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgcHJldlN0YXJ0QXQgPSB0d2Vlbi5fc3RhcnRBdCxcbiAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgIGZ1bGxUYXJnZXRzID0gcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnZhcnMudGFyZ2V0cyA6IHRhcmdldHMsXG4gICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgY2xlYW5WYXJzLFxuICAgICAgaSxcbiAgICAgIHAsXG4gICAgICBwdCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgZ3NEYXRhLFxuICAgICAgaGFybmVzcyxcbiAgICAgIHBsdWdpbixcbiAgICAgIHB0TG9va3VwLFxuICAgICAgaW5kZXgsXG4gICAgICBoYXJuZXNzVmFycyxcbiAgICAgIG92ZXJ3cml0dGVuO1xuICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gIHR3ZWVuLl95RWFzZSA9IHlveW9FYXNlID8gX2ludmVydEVhc2UoX3BhcnNlRWFzZSh5b3lvRWFzZSA9PT0gdHJ1ZSA/IGVhc2UgOiB5b3lvRWFzZSwgX2RlZmF1bHRzLmVhc2UpKSA6IDA7XG5cbiAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy90aGVyZSBtdXN0IGhhdmUgYmVlbiBhIHBhcmVudCB0aW1lbGluZSB3aXRoIHlveW86dHJ1ZSB0aGF0IGlzIGN1cnJlbnRseSBpbiBpdHMgeW95byBwaGFzZSwgc28gZmxpcCB0aGUgZWFzZXMuXG4gICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgdHdlZW4uX3lFYXNlID0gdHdlZW4uX2Vhc2U7XG4gICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgfVxuXG4gIHR3ZWVuLl9mcm9tID0gIXRsICYmICEhdmFycy5ydW5CYWNrd2FyZHM7IC8vbmVzdGVkIHRpbWVsaW5lcyBzaG91bGQgbmV2ZXIgcnVuIGJhY2t3YXJkcyAtIHRoZSBiYWNrd2FyZHMtbmVzcyBpcyBpbiB0aGUgY2hpbGQgdHdlZW5zLlxuXG4gIGlmICghdGwgfHwga2V5ZnJhbWVzICYmICF2YXJzLnN0YWdnZXIpIHtcbiAgICAvL2lmIHRoZXJlJ3MgYW4gaW50ZXJuYWwgdGltZWxpbmUsIHNraXAgYWxsIHRoZSBwYXJzaW5nIGJlY2F1c2Ugd2UgcGFzc2VkIHRoYXQgdGFzayBkb3duIHRoZSBjaGFpbi5cbiAgICBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMDtcbiAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdOyAvL3NvbWVvbmUgbWF5IG5lZWQgdG8gc3BlY2lmeSBDU1Mtc3BlY2lmaWMgdmFsdWVzIEFORCBub24tQ1NTIHZhbHVlcywgbGlrZSBpZiB0aGUgZWxlbWVudCBoYXMgYW4gXCJ4XCIgcHJvcGVydHkgcGx1cyBpdCdzIGEgc3RhbmRhcmQgRE9NIGVsZW1lbnQuIFdlIGFsbG93IHBlb3BsZSB0byBkaXN0aW5ndWlzaCBieSB3cmFwcGluZyBwbHVnaW4tc3BlY2lmaWMgc3R1ZmYgaW4gYSBjc3M6e30gb2JqZWN0IGZvciBleGFtcGxlLlxuXG4gICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuXG4gICAgaWYgKHByZXZTdGFydEF0KSB7XG4gICAgICBwcmV2U3RhcnRBdC5felRpbWUgPCAwICYmIHByZXZTdGFydEF0LnByb2dyZXNzKDEpOyAvLyBpbiBjYXNlIGl0J3MgYSBsYXp5IHN0YXJ0QXQgdGhhdCBoYXNuJ3QgcmVuZGVyZWQgeWV0LlxuXG4gICAgICB0aW1lIDwgMCAmJiBydW5CYWNrd2FyZHMgJiYgaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0ID8gcHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSA6IHByZXZTdGFydEF0LnJldmVydChydW5CYWNrd2FyZHMgJiYgZHVyID8gX3JldmVydENvbmZpZ05vS2lsbCA6IF9zdGFydEF0UmV2ZXJ0Q29uZmlnKTsgLy8gaWYgaXQncyBhIFwic3RhcnRBdFwiIChub3QgXCJmcm9tKClcIiBvciBydW5CYWNrd2FyZHM6IHRydWUpLCB3ZSBvbmx5IG5lZWQgdG8gZG8gYSBzaGFsbG93IHJldmVydCAoa2VlcCB0cmFuc2Zvcm1zIGNhY2hlZCBpbiBDU1NQbHVnaW4pXG4gICAgICAvLyBkb24ndCBqdXN0IF9yZW1vdmVGcm9tUGFyZW50KHByZXZTdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpIGJlY2F1c2UgdGhhdCdsbCBsZWF2ZSBpbmxpbmUgc3R5bGVzLiBXZSdyZSBjcmVhdGluZyBhIG5ldyBfc3RhcnRBdCBmb3IgXCJzdGFydEF0XCIgdHdlZW5zIHRoYXQgcmUtY2FwdHVyZSB0aGluZ3MgdG8gZW5zdXJlIHRoYXQgaWYgdGhlIHByZS10d2VlbiB2YWx1ZXMgY2hhbmdlZCBzaW5jZSB0aGUgdHdlZW4gd2FzIGNyZWF0ZWQsIHRoZXkncmUgcmVjb3JkZWQuXG5cbiAgICAgIHByZXZTdGFydEF0Ll9sYXp5ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnRBdCkge1xuICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgX3NldERlZmF1bHRzKHtcbiAgICAgICAgZGF0YTogXCJpc1N0YXJ0XCIsXG4gICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IHRydWUsXG4gICAgICAgIGxhenk6ICFwcmV2U3RhcnRBdCAmJiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIG9uVXBkYXRlOiBvblVwZGF0ZSAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhZ2dlcjogMFxuICAgICAgfSwgc3RhcnRBdCkpKTsgLy9jb3B5IHRoZSBwcm9wZXJ0aWVzL3ZhbHVlcyBpbnRvIGEgbmV3IG9iamVjdCB0byBhdm9pZCBjb2xsaXNpb25zLCBsaWtlIHZhciB0byA9IHt4OjB9LCBmcm9tID0ge3g6NTAwfTsgdGltZWxpbmUuZnJvbVRvKGUsIGZyb20sIHRvKS5mcm9tVG8oZSwgdG8sIGZyb20pO1xuXG5cbiAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhIExpa2Ugd2hlbiByZXZlcnQoKSBpcyBjYWxsZWQgYW5kIHRvdGFsVGltZSgpIGdldHMgc2V0LlxuXG4gICAgICB0d2Vlbi5fc3RhcnRBdC5fc2F0ID0gdHdlZW47IC8vIHVzZWQgaW4gZ2xvYmFsVGltZSgpLiBfc2F0IHN0YW5kcyBmb3IgX3N0YXJ0QXRUd2VlblxuXG4gICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyB8fCAhaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0KSAmJiB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCk7IC8vIHJhcmUgZWRnZSBjYXNlLCBsaWtlIGlmIGEgcmVuZGVyIGlzIGZvcmNlZCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIG9mIGEgbm9uLWluaXR0ZWQgdHdlZW4uXG5cbiAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgaWYgKGR1ciAmJiB0aW1lIDw9IDAgJiYgdFRpbWUgPD0gMCkge1xuICAgICAgICAgIC8vIGNoZWNrIHRUaW1lIGhlcmUgYmVjYXVzZSBpbiB0aGUgY2FzZSBvZiBhIHlveW8gdHdlZW4gd2hvc2UgcGxheWhlYWQgZ2V0cyBwdXNoZWQgdG8gdGhlIGVuZCBsaWtlIHR3ZWVuLnByb2dyZXNzKDEpLCB3ZSBzaG91bGQgYWxsb3cgaXQgdGhyb3VnaCBzbyB0aGF0IHRoZSBvbkNvbXBsZXRlIGdldHMgZmlyZWQgcHJvcGVybHkuXG4gICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgcmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lLCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydW5CYWNrd2FyZHMgJiYgZHVyKSB7XG4gICAgICAvL2Zyb20oKSB0d2VlbnMgbXVzdCBiZSBoYW5kbGVkIHVuaXF1ZWx5OiB0aGVpciBiZWdpbm5pbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQgYnV0IHdlIGRvbid0IHdhbnQgb3ZlcndyaXRpbmcgdG8gb2NjdXIgeWV0ICh3aGVuIHRpbWUgaXMgc3RpbGwgMCkuIFdhaXQgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucyBiZWZvcmUgZG9pbmcgYWxsIHRoZSByb3V0aW5lcyBsaWtlIG92ZXJ3cml0aW5nLiBBdCB0aGF0IHRpbWUsIHdlIHNob3VsZCByZW5kZXIgYXQgdGhlIEVORCBvZiB0aGUgdHdlZW4gdG8gZW5zdXJlIHRoYXQgdGhpbmdzIGluaXRpYWxpemUgY29ycmVjdGx5IChyZW1lbWJlciwgZnJvbSgpIHR3ZWVucyBnbyBiYWNrd2FyZHMpXG4gICAgICBpZiAoIXByZXZTdGFydEF0KSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgIXByZXZTdGFydEF0ICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICAgIGltbWVkaWF0ZVJlbmRlcjogaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICAgIC8vemVyby1kdXJhdGlvbiB0d2VlbnMgcmVuZGVyIGltbWVkaWF0ZWx5IGJ5IGRlZmF1bHQsIGJ1dCBpZiB3ZSdyZSBub3Qgc3BlY2lmaWNhbGx5IGluc3RydWN0ZWQgdG8gcmVuZGVyIHRoaXMgdHdlZW4gaW1tZWRpYXRlbHksIHdlIHNob3VsZCBza2lwIHRoaXMgYW5kIG1lcmVseSBfaW5pdCgpIHRvIHJlY29yZCB0aGUgc3RhcnRpbmcgdmFsdWVzIChyZW5kZXJpbmcgdGhlbSBpbW1lZGlhdGVseSB3b3VsZCBwdXNoIHRoZW0gdG8gY29tcGxldGlvbiB3aGljaCBpcyB3YXN0ZWZ1bCBpbiB0aGF0IGNhc2UgLSB3ZSdkIGhhdmUgdG8gcmVuZGVyKC0xKSBpbW1lZGlhdGVseSBhZnRlcilcbiAgICAgICAgICBzdGFnZ2VyOiAwLFxuICAgICAgICAgIHBhcmVudDogcGFyZW50IC8vZW5zdXJlcyB0aGF0IG5lc3RlZCB0d2VlbnMgdGhhdCBoYWQgYSBzdGFnZ2VyIGFyZSBoYW5kbGVkIHByb3Blcmx5LCBsaWtlIGdzYXAuZnJvbShcIi5jbGFzc1wiLCB7eTogZ3NhcC51dGlscy53cmFwKFstMTAwLDEwMF0pLCBzdGFnZ2VyOiAwLjV9KVxuXG4gICAgICAgIH0sIGNsZWFuVmFycyk7XG4gICAgICAgIGhhcm5lc3NWYXJzICYmIChwW2hhcm5lc3MucHJvcF0gPSBoYXJuZXNzVmFycyk7IC8vIGluIGNhc2Ugc29tZW9uZSBkb2VzIHNvbWV0aGluZyBsaWtlIC5mcm9tKC4uLiwge2Nzczp7fX0pXG5cbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgcCkpO1xuXG4gICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9kcCA9IDA7IC8vIGRvbid0IGFsbG93IGl0IHRvIGdldCBwdXQgYmFjayBpbnRvIHJvb3QgdGltZWxpbmUhXG5cbiAgICAgICAgdHdlZW4uX3N0YXJ0QXQuX3NhdCA9IHR3ZWVuOyAvLyB1c2VkIGluIGdsb2JhbFRpbWUoKVxuXG4gICAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWdOb0tpbGwpIDogdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSk7XG4gICAgICAgIHR3ZWVuLl96VGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSwgX3RpbnlOdW0pOyAvL2Vuc3VyZXMgdGhhdCB0aGUgaW5pdGlhbCB2YWx1ZXMgYXJlIHJlY29yZGVkXG5cbiAgICAgICAgfSBlbHNlIGlmICghdGltZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHR3ZWVuLl9wdCA9IHR3ZWVuLl9wdENhY2hlID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSh0aW1lKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3ZlcndyaXRpbmcgZG9lc24ndCBvdmVyd3JpdGUgVEhJUyB0d2VlbiEhIVxuXG5cbiAgICAgICAgb3ZlcndyaXR0ZW4gPSAhdHdlZW4ucGFyZW50O1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9wdCAmJiBsYXp5ICYmIChfbGF6eUxvb2t1cFtnc0RhdGEuaWRdID0gMSk7XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0d2Vlbik7XG4gICAgdHdlZW4uX29uSW5pdCAmJiB0d2Vlbi5fb25Jbml0KHR3ZWVuKTsgLy9wbHVnaW5zIGxpa2UgUm91bmRQcm9wcyBtdXN0IHdhaXQgdW50aWwgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIGFyZSBpbnN0YW50aWF0ZWQuIEluIHRoZSBwbHVnaW4ncyBpbml0KCkgZnVuY3Rpb24sIGl0IHNldHMgdGhlIF9vbkluaXQgb24gdGhlIHR3ZWVuIGluc3RhbmNlLiBNYXkgbm90IGJlIHByZXR0eS9pbnR1aXRpdmUsIGJ1dCBpdCdzIGZhc3QgYW5kIGtlZXBzIGZpbGUgc2l6ZSBkb3duLlxuICB9XG5cbiAgdHdlZW4uX29uVXBkYXRlID0gb25VcGRhdGU7XG4gIHR3ZWVuLl9pbml0dGVkID0gKCF0d2Vlbi5fb3AgfHwgdHdlZW4uX3B0KSAmJiAhb3ZlcndyaXR0ZW47IC8vIGlmIG92ZXJ3cml0dGVuUHJvcHMgcmVzdWx0ZWQgaW4gdGhlIGVudGlyZSB0d2VlbiBiZWluZyBraWxsZWQsIGRvIE5PVCBmbGFnIGl0IGFzIGluaXR0ZWQgb3IgZWxzZSBpdCBtYXkgcmVuZGVyIGZvciBvbmUgdGljay5cblxuICBrZXlmcmFtZXMgJiYgdGltZSA8PSAwICYmIHRsLnJlbmRlcihfYmlnTnVtLCB0cnVlLCB0cnVlKTsgLy8gaWYgdGhlcmUncyBhIDAlIGtleWZyYW1lLCBpdCdsbCByZW5kZXIgaW4gdGhlIFwiYmVmb3JlXCIgc3RhdGUgZm9yIGFueSBzdGFnZ2VyZWQvZGVsYXllZCBhbmltYXRpb25zIHRodXMgd2hlbiB0aGUgZm9sbG93aW5nIHR3ZWVuIGluaXRpYWxpemVzLCBpdCdsbCB1c2UgdGhlIFwiYmVmb3JlXCIgc3RhdGUgaW5zdGVhZCBvZiB0aGUgXCJhZnRlclwiIHN0YXRlIGFzIHRoZSBpbml0aWFsIHZhbHVlcy5cbn0sXG4gICAgX3VwZGF0ZVByb3BUd2VlbnMgPSBmdW5jdGlvbiBfdXBkYXRlUHJvcFR3ZWVucyh0d2VlbiwgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSwgc2tpcFJlY3Vyc2lvbikge1xuICB2YXIgcHRDYWNoZSA9ICh0d2Vlbi5fcHQgJiYgdHdlZW4uX3B0Q2FjaGUgfHwgKHR3ZWVuLl9wdENhY2hlID0ge30pKVtwcm9wZXJ0eV0sXG4gICAgICBwdCxcbiAgICAgIHJvb3RQVCxcbiAgICAgIGxvb2t1cCxcbiAgICAgIGk7XG5cbiAgaWYgKCFwdENhY2hlKSB7XG4gICAgcHRDYWNoZSA9IHR3ZWVuLl9wdENhY2hlW3Byb3BlcnR5XSA9IFtdO1xuICAgIGxvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cDtcbiAgICBpID0gdHdlZW4uX3RhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSBsb29rdXBbaV1bcHJvcGVydHldO1xuXG4gICAgICBpZiAocHQgJiYgcHQuZCAmJiBwdC5kLl9wdCkge1xuICAgICAgICAvLyBpdCdzIGEgcGx1Z2luLCBzbyBmaW5kIHRoZSBuZXN0ZWQgUHJvcFR3ZWVuXG4gICAgICAgIHB0ID0gcHQuZC5fcHQ7XG5cbiAgICAgICAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3BlcnR5ICYmIHB0LmZwICE9PSBwcm9wZXJ0eSkge1xuICAgICAgICAgIC8vIFwiZnBcIiBpcyBmdW5jdGlvblBhcmFtIGZvciB0aGluZ3MgbGlrZSBzZXR0aW5nIENTUyB2YXJpYWJsZXMgd2hpY2ggcmVxdWlyZSAuc2V0UHJvcGVydHkoXCItLXZhci1uYW1lXCIsIHZhbHVlKVxuICAgICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFwdCkge1xuICAgICAgICAvLyB0aGVyZSBpcyBubyBQcm9wVHdlZW4gYXNzb2NpYXRlZCB3aXRoIHRoYXQgcHJvcGVydHksIHNvIHdlIG11c3QgRk9SQ0Ugb25lIHRvIGJlIGNyZWF0ZWQgYW5kIGRpdGNoIG91dCBvZiB0aGlzXG4gICAgICAgIC8vIGlmIHRoZSB0d2VlbiBoYXMgb3RoZXIgcHJvcGVydGllcyB0aGF0IGFscmVhZHkgcmVuZGVyZWQgYXQgbmV3IHBvc2l0aW9ucywgd2UnZCBub3JtYWxseSBoYXZlIHRvIHJld2luZCB0byBwdXQgdGhlbSBiYWNrIGxpa2UgdHdlZW4ucmVuZGVyKDAsIHRydWUpIGJlZm9yZSBmb3JjaW5nIGFuIF9pbml0VHdlZW4oKSwgYnV0IHRoYXQgY2FuIGNyZWF0ZSBhbm90aGVyIGVkZ2UgY2FzZSBsaWtlIHR3ZWVuaW5nIGEgdGltZWxpbmUncyBwcm9ncmVzcyB3b3VsZCB0cmlnZ2VyIG9uVXBkYXRlcyB0byBmaXJlIHdoaWNoIGNvdWxkIG1vdmUgb3RoZXIgdGhpbmdzIGFyb3VuZC4gSXQncyBiZXR0ZXIgdG8ganVzdCBpbmZvcm0gdXNlcnMgdGhhdCAucmVzZXRUbygpIHNob3VsZCBPTkxZIGJlIHVzZWQgZm9yIHR3ZWVucyB0aGF0IGFscmVhZHkgaGF2ZSB0aGF0IHByb3BlcnR5LiBGb3IgZXhhbXBsZSwgeW91IGNhbid0IGdzYXAudG8oLi4ueyB5OiAwIH0pIGFuZCB0aGVuIHR3ZWVuLnJlc3RUbyhcInhcIiwgMjAwKSBmb3IgZXhhbXBsZS5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDE7IC8vIG90aGVyd2lzZSwgd2hlbiB3ZSBfYWRkUHJvcFR3ZWVuKCkgYW5kIGl0IGZpbmRzIG5vIGNoYW5nZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcywgaXQgc2tpcHMgY3JlYXRpbmcgYSBQcm9wVHdlZW4gKGZvciBlZmZpY2llbmN5Li4ud2h5IHR3ZWVuIHdoZW4gdGhlcmUncyBubyBkaWZmZXJlbmNlPykgYnV0IGluIHRoaXMgY2FzZSB3ZSBORUVEIHRoYXQgUHJvcFR3ZWVuIGNyZWF0ZWQgc28gd2UgY2FuIGVkaXQgaXQuXG5cbiAgICAgICAgdHdlZW4udmFyc1twcm9wZXJ0eV0gPSBcIis9MFwiO1xuXG4gICAgICAgIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpO1xuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAwO1xuICAgICAgICByZXR1cm4gc2tpcFJlY3Vyc2lvbiA/IF93YXJuKHByb3BlcnR5ICsgXCIgbm90IGVsaWdpYmxlIGZvciByZXNldFwiKSA6IDE7IC8vIGlmIHNvbWVvbmUgdHJpZXMgdG8gZG8gYSBxdWlja1RvKCkgb24gYSBzcGVjaWFsIHByb3BlcnR5IGxpa2UgYm9yZGVyUmFkaXVzIHdoaWNoIG11c3QgZ2V0IHNwbGl0IGludG8gNCBkaWZmZXJlbnQgcHJvcGVydGllcywgdGhhdCdzIG5vdCBlbGlnaWJsZSBmb3IgLnJlc2V0VG8oKS5cbiAgICAgIH1cblxuICAgICAgcHRDYWNoZS5wdXNoKHB0KTtcbiAgICB9XG4gIH1cblxuICBpID0gcHRDYWNoZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHJvb3RQVCA9IHB0Q2FjaGVbaV07XG4gICAgcHQgPSByb290UFQuX3B0IHx8IHJvb3RQVDsgLy8gY29tcGxleCB2YWx1ZXMgbWF5IGhhdmUgbmVzdGVkIFByb3BUd2VlbnMuIFdlIG9ubHkgYWNjb21tb2RhdGUgdGhlIEZJUlNUIHZhbHVlLlxuXG4gICAgcHQucyA9IChzdGFydCB8fCBzdGFydCA9PT0gMCkgJiYgIXN0YXJ0SXNSZWxhdGl2ZSA/IHN0YXJ0IDogcHQucyArIChzdGFydCB8fCAwKSArIHJhdGlvICogcHQuYztcbiAgICBwdC5jID0gdmFsdWUgLSBwdC5zO1xuICAgIHJvb3RQVC5lICYmIChyb290UFQuZSA9IF9yb3VuZCh2YWx1ZSkgKyBnZXRVbml0KHJvb3RQVC5lKSk7IC8vIG1haW5seSBmb3IgQ1NTUGx1Z2luIChlbmQgdmFsdWUpXG5cbiAgICByb290UFQuYiAmJiAocm9vdFBULmIgPSBwdC5zICsgZ2V0VW5pdChyb290UFQuYikpOyAvLyAoYmVnaW5uaW5nIHZhbHVlKVxuICB9XG59LFxuICAgIF9hZGRBbGlhc2VzVG9WYXJzID0gZnVuY3Rpb24gX2FkZEFsaWFzZXNUb1ZhcnModGFyZ2V0cywgdmFycykge1xuICB2YXIgaGFybmVzcyA9IHRhcmdldHNbMF0gPyBfZ2V0Q2FjaGUodGFyZ2V0c1swXSkuaGFybmVzcyA6IDAsXG4gICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgIGNvcHksXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIGFsaWFzZXM7XG5cbiAgaWYgKCFwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICByZXR1cm4gdmFycztcbiAgfVxuXG4gIGNvcHkgPSBfbWVyZ2Uoe30sIHZhcnMpO1xuXG4gIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICBpZiAocCBpbiBjb3B5KSB7XG4gICAgICBhbGlhc2VzID0gcHJvcGVydHlBbGlhc2VzW3BdLnNwbGl0KFwiLFwiKTtcbiAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb3B5W2FsaWFzZXNbaV1dID0gY29weVtwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgLy8gcGFyc2VzIG11bHRpcGxlIGZvcm1hdHMsIGxpa2Uge1wiMCVcIjoge3g6IDEwMH0sIHtcIjUwJVwiOiB7eDogLTIwfX0gYW5kIHsgeDoge1wiMCVcIjogMTAwLCBcIjUwJVwiOiAtMjB9IH0sIGFuZCBhbiBcImVhc2VcIiBjYW4gYmUgc2V0IG9uIGFueSBvYmplY3QuIFdlIHBvcHVsYXRlIGFuIFwiYWxsUHJvcHNcIiBvYmplY3Qgd2l0aCBhbiBBcnJheSBmb3IgZWFjaCBwcm9wZXJ0eSwgbGlrZSB7eDogW3t9LCB7fV0sIHk6W3t9LCB7fV19IHdpdGggZGF0YSBmb3IgZWFjaCBwcm9wZXJ0eSB0d2Vlbi4gVGhlIG9iamVjdHMgaGF2ZSBhIFwidFwiICh0aW1lKSwgXCJ2XCIsICh2YWx1ZSksIGFuZCBcImVcIiAoZWFzZSkgcHJvcGVydHkuIFRoaXMgYWxsb3dzIHVzIHRvIHBpZWNlIHRvZ2V0aGVyIGEgdGltZWxpbmUgbGF0ZXIuXG5fcGFyc2VLZXlmcmFtZSA9IGZ1bmN0aW9uIF9wYXJzZUtleWZyYW1lKHByb3AsIG9iaiwgYWxsUHJvcHMsIGVhc2VFYWNoKSB7XG4gIHZhciBlYXNlID0gb2JqLmVhc2UgfHwgZWFzZUVhY2ggfHwgXCJwb3dlcjEuaW5PdXRcIixcbiAgICAgIHAsXG4gICAgICBhO1xuXG4gIGlmIChfaXNBcnJheShvYmopKSB7XG4gICAgYSA9IGFsbFByb3BzW3Byb3BdIHx8IChhbGxQcm9wc1twcm9wXSA9IFtdKTsgLy8gdCA9IHRpbWUgKG91dCBvZiAxMDApLCB2ID0gdmFsdWUsIGUgPSBlYXNlXG5cbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgIHJldHVybiBhLnB1c2goe1xuICAgICAgICB0OiBpIC8gKG9iai5sZW5ndGggLSAxKSAqIDEwMCxcbiAgICAgICAgdjogdmFsdWUsXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvciAocCBpbiBvYmopIHtcbiAgICAgIGEgPSBhbGxQcm9wc1twXSB8fCAoYWxsUHJvcHNbcF0gPSBbXSk7XG4gICAgICBwID09PSBcImVhc2VcIiB8fCBhLnB1c2goe1xuICAgICAgICB0OiBwYXJzZUZsb2F0KHByb3ApLFxuICAgICAgICB2OiBvYmpbcF0sXG4gICAgICAgIGU6IGVhc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcGFyc2VGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VGdW5jT3JTdHJpbmcodmFsdWUsIHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwodHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykgOiBfaXNTdHJpbmcodmFsdWUpICYmIH52YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSA/IF9yZXBsYWNlUmFuZG9tKHZhbHVlKSA6IHZhbHVlO1xufSxcbiAgICBfc3RhZ2dlclR3ZWVuUHJvcHMgPSBfY2FsbGJhY2tOYW1lcyArIFwicmVwZWF0LHJlcGVhdERlbGF5LHlveW8scmVwZWF0UmVmcmVzaCx5b3lvRWFzZSxhdXRvUmV2ZXJ0XCIsXG4gICAgX3N0YWdnZXJQcm9wc1RvU2tpcCA9IHt9O1xuXG5fZm9yRWFjaE5hbWUoX3N0YWdnZXJUd2VlblByb3BzICsgXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3N0YWdnZXJQcm9wc1RvU2tpcFtuYW1lXSA9IDE7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uMikge1xuICBfaW5oZXJpdHNMb29zZShUd2VlbiwgX0FuaW1hdGlvbjIpO1xuXG4gIGZ1bmN0aW9uIFR3ZWVuKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uLCBza2lwSW5oZXJpdCkge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICBpZiAodHlwZW9mIHZhcnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHBvc2l0aW9uLmR1cmF0aW9uID0gdmFycztcbiAgICAgIHZhcnMgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBfdGhpczMgPSBfQW5pbWF0aW9uMi5jYWxsKHRoaXMsIHNraXBJbmhlcml0ID8gdmFycyA6IF9pbmhlcml0RGVmYXVsdHModmFycykpIHx8IHRoaXM7XG4gICAgdmFyIF90aGlzMyR2YXJzID0gX3RoaXMzLnZhcnMsXG4gICAgICAgIGR1cmF0aW9uID0gX3RoaXMzJHZhcnMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX3RoaXMzJHZhcnMuZGVsYXksXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF90aGlzMyR2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgc3RhZ2dlciA9IF90aGlzMyR2YXJzLnN0YWdnZXIsXG4gICAgICAgIG92ZXJ3cml0ZSA9IF90aGlzMyR2YXJzLm92ZXJ3cml0ZSxcbiAgICAgICAga2V5ZnJhbWVzID0gX3RoaXMzJHZhcnMua2V5ZnJhbWVzLFxuICAgICAgICBkZWZhdWx0cyA9IF90aGlzMyR2YXJzLmRlZmF1bHRzLFxuICAgICAgICBzY3JvbGxUcmlnZ2VyID0gX3RoaXMzJHZhcnMuc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgeW95b0Vhc2UgPSBfdGhpczMkdmFycy55b3lvRWFzZSxcbiAgICAgICAgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gKF9pc0FycmF5KHRhcmdldHMpIHx8IF9pc1R5cGVkQXJyYXkodGFyZ2V0cykgPyBfaXNOdW1iZXIodGFyZ2V0c1swXSkgOiBcImxlbmd0aFwiIGluIHZhcnMpID8gW3RhcmdldHNdIDogdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgdGwsXG4gICAgICAgIGksXG4gICAgICAgIGNvcHksXG4gICAgICAgIGwsXG4gICAgICAgIHAsXG4gICAgICAgIGN1clRhcmdldCxcbiAgICAgICAgc3RhZ2dlckZ1bmMsXG4gICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZTtcbiAgICBfdGhpczMuX3RhcmdldHMgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aCA/IF9oYXJuZXNzKHBhcnNlZFRhcmdldHMpIDogX3dhcm4oXCJHU0FQIHRhcmdldCBcIiArIHRhcmdldHMgKyBcIiBub3QgZm91bmQuIGh0dHBzOi8vZ3NhcC5jb21cIiwgIV9jb25maWcubnVsbFRhcmdldFdhcm4pIHx8IFtdO1xuICAgIF90aGlzMy5fcHRMb29rdXAgPSBbXTsgLy9Qcm9wVHdlZW4gbG9va3VwLiBBbiBhcnJheSBjb250YWluaW5nIGFuIG9iamVjdCBmb3IgZWFjaCB0YXJnZXQsIGhhdmluZyBrZXlzIGZvciBlYWNoIHR3ZWVuaW5nIHByb3BlcnR5XG5cbiAgICBfdGhpczMuX292ZXJ3cml0ZSA9IG92ZXJ3cml0ZTtcblxuICAgIGlmIChrZXlmcmFtZXMgfHwgc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgIHZhcnMgPSBfdGhpczMudmFycztcbiAgICAgIHRsID0gX3RoaXMzLnRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgICAgICAgZGF0YTogXCJuZXN0ZWRcIixcbiAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzIHx8IHt9LFxuICAgICAgICB0YXJnZXRzOiBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogcGFyc2VkVGFyZ2V0c1xuICAgICAgfSk7IC8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIHRhcmdldHMgYmVjYXVzZSBmb3Igc3RhZ2dlcnMgYW5kIGtleWZyYW1lcywgd2UgZW5kIHVwIGNyZWF0aW5nIGFuIGluZGl2aWR1YWwgdHdlZW4gZm9yIGVhY2ggYnV0IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBuZWVkIHRvIGtub3cgdGhlIGluZGV4IGFuZCB0aGUgd2hvbGUgQXJyYXkgb2YgdGFyZ2V0cy5cblxuICAgICAgdGwua2lsbCgpO1xuICAgICAgdGwucGFyZW50ID0gdGwuX2RwID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuICAgICAgdGwuX3N0YXJ0ID0gMDtcblxuICAgICAgaWYgKHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGwgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcbiAgICAgICAgc3RhZ2dlckZ1bmMgPSBzdGFnZ2VyICYmIGRpc3RyaWJ1dGUoc3RhZ2dlcik7XG5cbiAgICAgICAgaWYgKF9pc09iamVjdChzdGFnZ2VyKSkge1xuICAgICAgICAgIC8vdXNlcnMgY2FuIHBhc3MgaW4gY2FsbGJhY2tzIGxpa2Ugb25TdGFydC9vbkNvbXBsZXRlIGluIHRoZSBzdGFnZ2VyIG9iamVjdC4gVGhlc2Ugc2hvdWxkIGZpcmUgd2l0aCBlYWNoIGluZGl2aWR1YWwgdHdlZW4uXG4gICAgICAgICAgZm9yIChwIGluIHN0YWdnZXIpIHtcbiAgICAgICAgICAgIGlmICh+X3N0YWdnZXJUd2VlblByb3BzLmluZGV4T2YocCkpIHtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlIHx8IChzdGFnZ2VyVmFyc1RvTWVyZ2UgPSB7fSk7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZVtwXSA9IHN0YWdnZXJbcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGNvcHkgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfc3RhZ2dlclByb3BzVG9Ta2lwKTtcbiAgICAgICAgICBjb3B5LnN0YWdnZXIgPSAwO1xuICAgICAgICAgIHlveW9FYXNlICYmIChjb3B5LnlveW9FYXNlID0geW95b0Vhc2UpO1xuICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSAmJiBfbWVyZ2UoY29weSwgc3RhZ2dlclZhcnNUb01lcmdlKTtcbiAgICAgICAgICBjdXJUYXJnZXQgPSBwYXJzZWRUYXJnZXRzW2ldOyAvL2Rvbid0IGp1c3QgY29weSBkdXJhdGlvbiBvciBkZWxheSBiZWNhdXNlIGlmIHRoZXkncmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24sIHdlJ2QgZW5kIHVwIGluIGFuIGluZmluaXRlIGxvb3AgYmVjYXVzZSBfaXNGdW5jT3JTdHJpbmcoKSB3b3VsZCBldmFsdWF0ZSBhcyB0cnVlIGluIHRoZSBjaGlsZCB0d2VlbnMsIGVudGVyaW5nIHRoaXMgbG9vcCwgZXRjLiBTbyB3ZSBwYXJzZSB0aGUgdmFsdWUgc3RyYWlnaHQgZnJvbSB2YXJzIGFuZCBkZWZhdWx0IHRvIDAuXG5cbiAgICAgICAgICBjb3B5LmR1cmF0aW9uID0gK19wYXJzZUZ1bmNPclN0cmluZyhkdXJhdGlvbiwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpO1xuICAgICAgICAgIGNvcHkuZGVsYXkgPSAoK19wYXJzZUZ1bmNPclN0cmluZyhkZWxheSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIHx8IDApIC0gX3RoaXMzLl9kZWxheTtcblxuICAgICAgICAgIGlmICghc3RhZ2dlciAmJiBsID09PSAxICYmIGNvcHkuZGVsYXkpIHtcbiAgICAgICAgICAgIC8vIGlmIHNvbWVvbmUgZG9lcyBkZWxheTpcInJhbmRvbSgxLCA1KVwiLCByZXBlYXQ6LTEsIGZvciBleGFtcGxlLCB0aGUgZGVsYXkgc2hvdWxkbid0IGJlIGluc2lkZSB0aGUgcmVwZWF0LlxuICAgICAgICAgICAgX3RoaXMzLl9kZWxheSA9IGRlbGF5ID0gY29weS5kZWxheTtcbiAgICAgICAgICAgIF90aGlzMy5fc3RhcnQgKz0gZGVsYXk7XG4gICAgICAgICAgICBjb3B5LmRlbGF5ID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC50byhjdXJUYXJnZXQsIGNvcHksIHN0YWdnZXJGdW5jID8gc3RhZ2dlckZ1bmMoaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSA6IDApO1xuICAgICAgICAgIHRsLl9lYXNlID0gX2Vhc2VNYXAubm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRsLmR1cmF0aW9uKCkgPyBkdXJhdGlvbiA9IGRlbGF5ID0gMCA6IF90aGlzMy50aW1lbGluZSA9IDA7IC8vIGlmIHRoZSB0aW1lbGluZSdzIGR1cmF0aW9uIGlzIDAsIHdlIGRvbid0IG5lZWQgYSB0aW1lbGluZSBpbnRlcm5hbGx5IVxuICAgICAgfSBlbHNlIGlmIChrZXlmcmFtZXMpIHtcbiAgICAgICAgX2luaGVyaXREZWZhdWx0cyhfc2V0RGVmYXVsdHModGwudmFycy5kZWZhdWx0cywge1xuICAgICAgICAgIGVhc2U6IFwibm9uZVwiXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0bC5fZWFzZSA9IF9wYXJzZUVhc2Uoa2V5ZnJhbWVzLmVhc2UgfHwgdmFycy5lYXNlIHx8IFwibm9uZVwiKTtcbiAgICAgICAgdmFyIHRpbWUgPSAwLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGtmLFxuICAgICAgICAgICAgdjtcblxuICAgICAgICBpZiAoX2lzQXJyYXkoa2V5ZnJhbWVzKSkge1xuICAgICAgICAgIGtleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRsLnRvKHBhcnNlZFRhcmdldHMsIGZyYW1lLCBcIj5cIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGwuZHVyYXRpb24oKTsgLy8gdG8gZW5zdXJlIHRsLl9kdXIgaXMgY2FjaGVkIGJlY2F1c2Ugd2UgdGFwIGludG8gaXQgZm9yIHBlcmZvcm1hbmNlIHB1cnBvc2VzIGluIHRoZSByZW5kZXIoKSBtZXRob2QuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29weSA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIGtleWZyYW1lcykge1xuICAgICAgICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgcCA9PT0gXCJlYXNlRWFjaFwiIHx8IF9wYXJzZUtleWZyYW1lKHAsIGtleWZyYW1lc1twXSwgY29weSwga2V5ZnJhbWVzLmVhc2VFYWNoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHAgaW4gY29weSkge1xuICAgICAgICAgICAgYSA9IGNvcHlbcF0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICByZXR1cm4gYS50IC0gYi50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aW1lID0gMDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAga2YgPSBhW2ldO1xuICAgICAgICAgICAgICB2ID0ge1xuICAgICAgICAgICAgICAgIGVhc2U6IGtmLmUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IChrZi50IC0gKGkgPyBhW2kgLSAxXS50IDogMCkpIC8gMTAwICogZHVyYXRpb25cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgdltwXSA9IGtmLnY7XG4gICAgICAgICAgICAgIHRsLnRvKHBhcnNlZFRhcmdldHMsIHYsIHRpbWUpO1xuICAgICAgICAgICAgICB0aW1lICs9IHYuZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwuZHVyYXRpb24oKSA8IGR1cmF0aW9uICYmIHRsLnRvKHt9LCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLSB0bC5kdXJhdGlvbigpXG4gICAgICAgICAgfSk7IC8vIGluIGNhc2Uga2V5ZnJhbWVzIGRpZG4ndCBnbyB0byAxMDAlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZHVyYXRpb24gfHwgX3RoaXMzLmR1cmF0aW9uKGR1cmF0aW9uID0gdGwuZHVyYXRpb24oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzMy50aW1lbGluZSA9IDA7IC8vc3BlZWQgb3B0aW1pemF0aW9uLCBmYXN0ZXIgbG9va3VwcyAobm8gZ29pbmcgdXAgdGhlIHByb3RvdHlwZSBjaGFpbilcbiAgICB9XG5cbiAgICBpZiAob3ZlcndyaXRlID09PSB0cnVlICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcblxuICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZihwYXJzZWRUYXJnZXRzKTtcblxuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBwb3NpdGlvbik7XG5cbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzMy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMzLnBhdXNlZCh0cnVlKTtcblxuICAgIGlmIChpbW1lZGlhdGVSZW5kZXIgfHwgIWR1cmF0aW9uICYmICFrZXlmcmFtZXMgJiYgX3RoaXMzLl9zdGFydCA9PT0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUpICYmIF9pc05vdEZhbHNlKGltbWVkaWF0ZVJlbmRlcikgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSkgJiYgcGFyZW50LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgIF90aGlzMy5fdFRpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXG4gICAgICBfdGhpczMucmVuZGVyKE1hdGgubWF4KDAsIC1kZWxheSkgfHwgMCk7IC8vaW4gY2FzZSBkZWxheSBpcyBuZWdhdGl2ZVxuXG4gICAgfVxuXG4gICAgc2Nyb2xsVHJpZ2dlciAmJiBfc2Nyb2xsVHJpZ2dlcihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpczM7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG4gICAgICAgIHREdXIgPSB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIGlzTmVnYXRpdmUgPSB0b3RhbFRpbWUgPCAwLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiAhaXNOZWdhdGl2ZSA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIGlzWW95byxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHRpbWVsaW5lLFxuICAgICAgICB5b3lvRWFzZTtcblxuICAgIGlmICghZHVyKSB7XG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IGlzTmVnYXRpdmUpIHtcbiAgICAgIC8vdGhpcyBzZW5zZXMgaWYgd2UncmUgY3Jvc3Npbmcgb3ZlciB0aGUgc3RhcnQgdGltZSwgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IHJlY29yZCBfelRpbWUgYW5kIGZvcmNlIHRoZSByZW5kZXIsIGJ1dCB3ZSBkbyBpdCBpbiB0aGlzIGxlbmd0aHkgY29uZGl0aW9uYWwgd2F5IGZvciBwZXJmb3JtYW5jZSByZWFzb25zICh1c3VhbGx5IHdlIGNhbiBza2lwIHRoZSBjYWxjdWxhdGlvbnMpOiB0aGlzLl9pbml0dGVkICYmICh0aGlzLl96VGltZSA8IDApICE9PSAodG90YWxUaW1lIDwgMClcbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHRpbWVsaW5lID0gdGhpcy50aW1lbGluZTtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgaXNOZWdhdGl2ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gX3JvdW5kUHJlY2lzZSh0VGltZSAvIGN5Y2xlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBpc1lveW8gPSB0aGlzLl95b3lvICYmIGl0ZXJhdGlvbiAmIDE7XG5cbiAgICAgICAgaWYgKGlzWW95bykge1xuICAgICAgICAgIHlveW9FYXNlID0gdGhpcy5feUVhc2U7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAodGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlICYmIHRoaXMuX2luaXR0ZWQgJiYgaXRlcmF0aW9uID09PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgLy9jb3VsZCBiZSBkdXJpbmcgdGhlIHJlcGVhdERlbGF5IHBhcnQuIE5vIG5lZWQgdG8gcmVuZGVyIGFuZCBmaXJlIGNhbGxiYWNrcy5cbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgIHRpbWVsaW5lICYmIHRoaXMuX3lFYXNlICYmIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKTsgLy9yZXBlYXRSZWZyZXNoIGZ1bmN0aW9uYWxpdHlcblxuICAgICAgICAgIGlmICh0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICF0aGlzLl9sb2NrICYmIHRoaXMuX3RpbWUgIT09IGN5Y2xlRHVyYXRpb24gJiYgdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgICAgLy8gdGhpcy5fdGltZSB3aWxsID09PSBjeWNsZUR1cmF0aW9uIHdoZW4gd2UgcmVuZGVyIGF0IEVYQUNUTFkgdGhlIGVuZCBvZiBhbiBpdGVyYXRpb24uIFdpdGhvdXQgdGhpcyBjb25kaXRpb24sIGl0J2Qgb2Z0ZW4gZG8gdGhlIHJlcGVhdFJlZnJlc2ggcmVuZGVyIFRXSUNFIChhZ2FpbiBvbiB0aGUgdmVyeSBuZXh0IHRpY2spLlxuICAgICAgICAgICAgdGhpcy5fbG9jayA9IGZvcmNlID0gMTsgLy9mb3JjZSwgb3RoZXJ3aXNlIGlmIGxhenkgaXMgdHJ1ZSwgdGhlIF9hdHRlbXB0SW5pdFR3ZWVuKCkgd2lsbCByZXR1cm4gYW5kIHdlJ2xsIGp1bXAgb3V0IGFuZCBnZXQgY2F1Z2h0IGJvdW5jaW5nIG9uIGVhY2ggdGljay5cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoX3JvdW5kUHJlY2lzZShjeWNsZUR1cmF0aW9uICogaXRlcmF0aW9uKSwgdHJ1ZSkuaW52YWxpZGF0ZSgpLl9sb2NrID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIGlmIChfYXR0ZW1wdEluaXRUd2Vlbih0aGlzLCBpc05lZ2F0aXZlID8gdG90YWxUaW1lIDogdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IDA7IC8vIGluIGNvbnN0cnVjdG9yIGlmIGltbWVkaWF0ZVJlbmRlciBpcyB0cnVlLCB3ZSBzZXQgX3RUaW1lIHRvIC1fdGlueU51bSB0byBoYXZlIHRoZSBwbGF5aGVhZCBjcm9zcyB0aGUgc3RhcnRpbmcgcG9pbnQgYnV0IHdlIGNhbid0IGxlYXZlIF90VGltZSBhcyBhIG5lZ2F0aXZlIG51bWJlci5cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZUaW1lICE9PSB0aGlzLl90aW1lICYmICEoZm9yY2UgJiYgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSkge1xuICAgICAgICAgIC8vIHJhcmUgZWRnZSBjYXNlIC0gZHVyaW5nIGluaXRpYWxpemF0aW9uLCBhbiBvblVwZGF0ZSBpbiB0aGUgX3N0YXJ0QXQgKC5mcm9tVG8oKSkgbWlnaHQgZm9yY2UgdGhpcyB0d2VlbiB0byByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBkaXRjaCB0aGlzIHJlbmRlcigpIGNhbGwgc28gdGhhdCBpdCBkb2Vzbid0IHJldmVydCB0aGUgdmFsdWVzLiBCdXQgd2UgYWxzbyBkb24ndCB3YW50IHRvIGR1bXAgaWYgd2UncmUgZG9pbmcgYSByZXBlYXRSZWZyZXNoIHJlbmRlciFcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXIgIT09IHRoaXMuX2R1cikge1xuICAgICAgICAgIC8vIHdoaWxlIGluaXR0aW5nLCBhIHBsdWdpbiBsaWtlIEluZXJ0aWFQbHVnaW4gbWlnaHQgYWx0ZXIgdGhlIGR1cmF0aW9uLCBzbyByZXJ1biBmcm9tIHRoZSBzdGFydCB0byBlbnN1cmUgZXZlcnl0aGluZyByZW5kZXJzIGFzIGl0IHNob3VsZC5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcblxuICAgICAgaWYgKCF0aGlzLl9hY3QgJiYgdGhpcy5fdHMpIHtcbiAgICAgICAgdGhpcy5fYWN0ID0gMTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgICAgdGhpcy5fbGF6eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9ICh5b3lvRWFzZSB8fCB0aGlzLl9lYXNlKSh0aW1lIC8gZHVyKTtcblxuICAgICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZSAmJiAhcHJldlRpbWUgJiYgIXN1cHByZXNzRXZlbnRzICYmICFpdGVyYXRpb24pIHtcbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb25TdGFydCB0cmlnZ2VyZWQgYSByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCwgZWplY3QuIExpa2UgaWYgc29tZW9uZSBkaWQgYW5pbWF0aW9uLnBhdXNlKDAuNSkgb3Igc29tZXRoaW5nIGluc2lkZSB0aGUgb25TdGFydC5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwdCA9IHRoaXMuX3B0O1xuXG4gICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIHRpbWVsaW5lICYmIHRpbWVsaW5lLnJlbmRlcih0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZWxpbmUuX2R1ciAqIHRpbWVsaW5lLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHx8IHRoaXMuX3N0YXJ0QXQgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcblxuICAgICAgaWYgKHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBpc05lZ2F0aXZlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblxuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVwZWF0ICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgICBpZiAoKHRUaW1lID09PSB0aGlzLl90RHVyIHx8ICF0VGltZSkgJiYgdGhpcy5fdFRpbWUgPT09IHRUaW1lKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgIXRoaXMuX29uVXBkYXRlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0aGlzLl90RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHdlJ3JlIHJlbmRlcmluZyBhdCBleGFjdGx5IGEgdGltZSBvZiAwLCBhcyB0aGVyZSBjb3VsZCBiZSBhdXRvUmV2ZXJ0IHZhbHVlcyB0aGF0IHNob3VsZCBnZXQgc2V0IG9uIHRoZSBuZXh0IHRpY2sgKGlmIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnRUaW1lLCBuZWdhdGl2ZSB0b3RhbFRpbWUpLiBEb24ndCByZW1vdmUgaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgcGxheWhlYWQgaXNuJ3QgYXQgMCwgb3RoZXJ3aXNlIHRsLnByb2dyZXNzKDEpLnJldmVyc2UoKSB3b24ndCB3b3JrLiBPbmx5IHJlbW92ZSBpZiB0aGUgcGxheWhlYWQgaXMgYXQgdGhlIGVuZCBhbmQgdGltZVNjYWxlIGlzIHBvc2l0aXZlLCBvciBpZiB0aGUgcGxheWhlYWQgaXMgYXQgMCBhbmQgdGhlIHRpbWVTY2FsZSBpcyBuZWdhdGl2ZS5cblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEoaXNOZWdhdGl2ZSAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCBpc1lveW8pKSB7XG4gICAgICAgICAgLy8gaWYgcHJldlRpbWUgYW5kIHRUaW1lIGFyZSB6ZXJvLCB3ZSBzaG91bGRuJ3QgZmlyZSB0aGUgb25SZXZlcnNlQ29tcGxldGUuIFRoaXMgY291bGQgaGFwcGVuIGlmIHlvdSBnc2FwLnRvKC4uLiB7cGF1c2VkOnRydWV9KS5wbGF5KCk7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMy50YXJnZXRzID0gZnVuY3Rpb24gdGFyZ2V0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cztcbiAgfTtcblxuICBfcHJvdG8zLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICAvLyBcInNvZnRcIiBnaXZlcyB1cyBhIHdheSB0byBjbGVhciBvdXQgZXZlcnl0aGluZyBFWENFUFQgdGhlIHJlY29yZGVkIHByZS1cImZyb21cIiBwb3J0aW9uIG9mIGZyb20oKSB0d2VlbnMuIE90aGVyd2lzZSwgZm9yIGV4YW1wbGUsIGlmIHlvdSB0d2Vlbi5wcm9ncmVzcygxKS5yZW5kZXIoMCwgdHJ1ZSB0cnVlKS5pbnZhbGlkYXRlKCksIHRoZSBcImZyb21cIiB2YWx1ZXMgd291bGQgcGVyc2lzdCBhbmQgdGhlbiBvbiB0aGUgbmV4dCByZW5kZXIsIHRoZSBmcm9tKCkgdHdlZW5zIHdvdWxkIGluaXRpYWxpemUgYW5kIHRoZSBjdXJyZW50IHZhbHVlIHdvdWxkIG1hdGNoIHRoZSBcImZyb21cIiB2YWx1ZXMsIHRodXMgYW5pbWF0ZSBmcm9tIHRoZSBzYW1lIHZhbHVlIHRvIHRoZSBzYW1lIHZhbHVlIChubyBhbmltYXRpb24pLiBXZSB0YXAgaW50byB0aGlzIGluIFNjcm9sbFRyaWdnZXIncyByZWZyZXNoKCkgd2hlcmUgd2UgbXVzdCBwdXNoIGEgdHdlZW4gdG8gY29tcGxldGlvbiBhbmQgdGhlbiBiYWNrIGFnYWluIGJ1dCBob25vciBpdHMgaW5pdCBzdGF0ZSBpbiBjYXNlIHRoZSB0d2VlbiBpcyBkZXBlbmRlbnQgb24gYW5vdGhlciB0d2VlbiBmdXJ0aGVyIHVwIG9uIHRoZSBwYWdlLlxuICAgICghc29mdCB8fCAhdGhpcy52YXJzLnJ1bkJhY2t3YXJkcykgJiYgKHRoaXMuX3N0YXJ0QXQgPSAwKTtcbiAgICB0aGlzLl9wdCA9IHRoaXMuX29wID0gdGhpcy5fb25VcGRhdGUgPSB0aGlzLl9sYXp5ID0gdGhpcy5yYXRpbyA9IDA7XG4gICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICByZXR1cm4gX0FuaW1hdGlvbjIucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzLCBzb2Z0KTtcbiAgfTtcblxuICBfcHJvdG8zLnJlc2V0VG8gPSBmdW5jdGlvbiByZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgc2tpcFJlY3Vyc2lvbikge1xuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gICAgdGhpcy5fdHMgfHwgdGhpcy5wbGF5KCk7XG4gICAgdmFyIHRpbWUgPSBNYXRoLm1pbih0aGlzLl9kdXIsICh0aGlzLl9kcC5fdGltZSAtIHRoaXMuX3N0YXJ0KSAqIHRoaXMuX3RzKSxcbiAgICAgICAgcmF0aW87XG4gICAgdGhpcy5faW5pdHRlZCB8fCBfaW5pdFR3ZWVuKHRoaXMsIHRpbWUpO1xuICAgIHJhdGlvID0gdGhpcy5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKTsgLy8gZG9uJ3QganVzdCBnZXQgdHdlZW4ucmF0aW8gYmVjYXVzZSBpdCBtYXkgbm90IGhhdmUgcmVuZGVyZWQgeWV0LlxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiB0byBhbGxvdyBhbiBvYmplY3Qgd2l0aCBtdWx0aXBsZSB2YWx1ZXMgdG8gdXBkYXRlLCBsaWtlIHR3ZWVuLnJlc2V0VG8oe3g6IDEwMCwgeTogMjAwfSk7IEF0IHRoaXMgcG9pbnQsIGl0IGRvZXNuJ3Qgc2VlbSB3b3J0aCB0aGUgYWRkZWQga2IgZ2l2ZW4gdGhlIGZhY3QgdGhhdCBtb3N0IHVzZXJzIHdpbGwgbGlrZWx5IG9wdCBmb3IgdGhlIGNvbnZlbmllbnQgZ3NhcC5xdWlja1RvKCkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggdGhpcyBtZXRob2QuXG4gICAgLy8gaWYgKF9pc09iamVjdChwcm9wZXJ0eSkpIHsgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXG4gICAgLy8gXHRmb3IgKHAgaW4gcHJvcGVydHkpIHtcbiAgICAvLyBcdFx0aWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHAsIHByb3BlcnR5W3BdLCB2YWx1ZSA/IHZhbHVlW3BdIDogbnVsbCwgc3RhcnQsIHJhdGlvLCB0aW1lKSkge1xuICAgIC8vIFx0XHRcdHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgLy8gXHRcdH1cbiAgICAvLyBcdH1cbiAgICAvLyB9IGVsc2Uge1xuXG4gICAgaWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUsIHNraXBSZWN1cnNpb24pKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgMSk7IC8vIGlmIGEgUHJvcFR3ZWVuIHdhc24ndCBmb3VuZCBmb3IgdGhlIHByb3BlcnR5LCBpdCdsbCBnZXQgZm9yY2VkIHdpdGggYSByZS1pbml0aWFsaXphdGlvbiBzbyB3ZSBuZWVkIHRvIGp1bXAgb3V0IGFuZCBzdGFydCBvdmVyIGFnYWluLlxuICAgIH0gLy99XG5cblxuICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIDApO1xuXG4gICAgdGhpcy5wYXJlbnQgfHwgX2FkZExpbmtlZExpc3RJdGVtKHRoaXMuX2RwLCB0aGlzLCBcIl9maXJzdFwiLCBcIl9sYXN0XCIsIHRoaXMuX2RwLl9zb3J0ID8gXCJfc3RhcnRcIiA6IDApO1xuICAgIHJldHVybiB0aGlzLnJlbmRlcigwKTtcbiAgfTtcblxuICBfcHJvdG8zLmtpbGwgPSBmdW5jdGlvbiBraWxsKHRhcmdldHMsIHZhcnMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0gXCJhbGxcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldHMgJiYgKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpKSB7XG4gICAgICB0aGlzLl9sYXp5ID0gdGhpcy5fcHQgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gX2ludGVycnVwdCh0aGlzKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGltZWxpbmUpIHtcbiAgICAgIHZhciB0RHVyID0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCk7XG4gICAgICB0aGlzLnRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCB2YXJzLCBfb3ZlcndyaXRpbmdUd2VlbiAmJiBfb3ZlcndyaXRpbmdUd2Vlbi52YXJzLm92ZXJ3cml0ZSAhPT0gdHJ1ZSkuX2ZpcnN0IHx8IF9pbnRlcnJ1cHQodGhpcyk7IC8vIGlmIG5vdGhpbmcgaXMgbGVmdCB0d2VlbmluZywgaW50ZXJydXB0LlxuXG4gICAgICB0aGlzLnBhcmVudCAmJiB0RHVyICE9PSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKSAmJiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fZHVyICogdGhpcy50aW1lbGluZS5fdER1ciAvIHREdXIsIDAsIDEpOyAvLyBpZiBhIG5lc3RlZCB0d2VlbiBpcyBraWxsZWQgdGhhdCBjaGFuZ2VzIHRoZSBkdXJhdGlvbiwgaXQgc2hvdWxkIGFmZmVjdCB0aGlzIHR3ZWVuJ3MgZHVyYXRpb24uIFdlIG11c3QgdXNlIHRoZSByYXRpbywgdGhvdWdoLCBiZWNhdXNlIHNvbWV0aW1lcyB0aGUgaW50ZXJuYWwgdGltZWxpbmUgaXMgc3RyZXRjaGVkIGxpa2UgZm9yIGtleWZyYW1lcyB3aGVyZSB0aGV5IGRvbid0IGFsbCBhZGQgdXAgdG8gd2hhdGV2ZXIgdGhlIHBhcmVudCB0d2VlbidzIGR1cmF0aW9uIHdhcyBzZXQgdG8uXG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBwYXJzZWRUYXJnZXRzID0gdGhpcy5fdGFyZ2V0cyxcbiAgICAgICAga2lsbGluZ1RhcmdldHMgPSB0YXJnZXRzID8gdG9BcnJheSh0YXJnZXRzKSA6IHBhcnNlZFRhcmdldHMsXG4gICAgICAgIHByb3BUd2Vlbkxvb2t1cCA9IHRoaXMuX3B0TG9va3VwLFxuICAgICAgICBmaXJzdFBUID0gdGhpcy5fcHQsXG4gICAgICAgIG92ZXJ3cml0dGVuUHJvcHMsXG4gICAgICAgIGN1ckxvb2t1cCxcbiAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMsXG4gICAgICAgIHByb3BzLFxuICAgICAgICBwLFxuICAgICAgICBwdCxcbiAgICAgICAgaTtcblxuICAgIGlmICgoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikgJiYgX2FycmF5c01hdGNoKHBhcnNlZFRhcmdldHMsIGtpbGxpbmdUYXJnZXRzKSkge1xuICAgICAgdmFycyA9PT0gXCJhbGxcIiAmJiAodGhpcy5fcHQgPSAwKTtcbiAgICAgIHJldHVybiBfaW50ZXJydXB0KHRoaXMpO1xuICAgIH1cblxuICAgIG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vcCA9IHRoaXMuX29wIHx8IFtdO1xuXG4gICAgaWYgKHZhcnMgIT09IFwiYWxsXCIpIHtcbiAgICAgIC8vc28gcGVvcGxlIGNhbiBwYXNzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXNcbiAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgcCA9IHt9O1xuXG4gICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiBwW25hbWVdID0gMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFycyA9IHA7XG4gICAgICB9XG5cbiAgICAgIHZhcnMgPSBfYWRkQWxpYXNlc1RvVmFycyhwYXJzZWRUYXJnZXRzLCB2YXJzKTtcbiAgICB9XG5cbiAgICBpID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAofmtpbGxpbmdUYXJnZXRzLmluZGV4T2YocGFyc2VkVGFyZ2V0c1tpXSkpIHtcbiAgICAgICAgY3VyTG9va3VwID0gcHJvcFR3ZWVuTG9va3VwW2ldO1xuXG4gICAgICAgIGlmICh2YXJzID09PSBcImFsbFwiKSB7XG4gICAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IHZhcnM7XG4gICAgICAgICAgcHJvcHMgPSBjdXJMb29rdXA7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSB7fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gPSBvdmVyd3JpdHRlblByb3BzW2ldIHx8IHt9O1xuICAgICAgICAgIHByb3BzID0gdmFycztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocCBpbiBwcm9wcykge1xuICAgICAgICAgIHB0ID0gY3VyTG9va3VwICYmIGN1ckxvb2t1cFtwXTtcblxuICAgICAgICAgIGlmIChwdCkge1xuICAgICAgICAgICAgaWYgKCEoXCJraWxsXCIgaW4gcHQuZCkgfHwgcHQuZC5raWxsKHApID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBjdXJMb29rdXBbcF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGN1ck92ZXJ3cml0ZVByb3BzICE9PSBcImFsbFwiKSB7XG4gICAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wc1twXSA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdHRlZCAmJiAhdGhpcy5fcHQgJiYgZmlyc3RQVCAmJiBfaW50ZXJydXB0KHRoaXMpOyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGFyZSBraWxsZWQsIGtpbGwgdGhlIHR3ZWVuLiBXaXRob3V0IHRoaXMgbGluZSwgaWYgdGhlcmUncyBhIHR3ZWVuIHdpdGggbXVsdGlwbGUgdGFyZ2V0cyBhbmQgdGhlbiB5b3Uga2lsbFR3ZWVuc09mKCkgZWFjaCB0YXJnZXQgaW5kaXZpZHVhbGx5LCB0aGUgdHdlZW4gd291bGQgdGVjaG5pY2FsbHkgc3RpbGwgcmVtYWluIGFjdGl2ZSBhbmQgZmlyZSBpdHMgb25Db21wbGV0ZSBldmVuIHRob3VnaCB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgcHJvcGVydGllcyB0d2VlbmluZy5cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIFR3ZWVuLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgYXJndW1lbnRzWzJdKTtcbiAgfTtcblxuICBUd2Vlbi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uIGRlbGF5ZWRDYWxsKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuICAgIHJldHVybiBuZXcgVHdlZW4oY2FsbGJhY2ssIDAsIHtcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICBkZWxheTogZGVsYXksXG4gICAgICBvbkNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgIG9uQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlOiBzY29wZVxuICAgIH0pOyAvLyB3ZSBtdXN0IHVzZSBvblJldmVyc2VDb21wbGV0ZSB0b28gZm9yIHRoaW5ncyBsaWtlIHRpbWVsaW5lLmFkZCgoKSA9PiB7Li4ufSkgd2hpY2ggc2hvdWxkIGJlIHRyaWdnZXJlZCBpbiBCT1RIIGRpcmVjdGlvbnMgKGZvcndhcmQgYW5kIHJldmVyc2UpXG4gIH07XG5cbiAgVHdlZW4uZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMpO1xuICB9O1xuXG4gIFR3ZWVuLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKTtcbiAgfTtcblxuICByZXR1cm4gVHdlZW47XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUd2Vlbi5wcm90b3R5cGUsIHtcbiAgX3RhcmdldHM6IFtdLFxuICBfbGF6eTogMCxcbiAgX3N0YXJ0QXQ6IDAsXG4gIF9vcDogMCxcbiAgX29uSW5pdDogMFxufSk7IC8vYWRkIHRoZSBwZXJ0aW5lbnQgdGltZWxpbmUgbWV0aG9kcyB0byBUd2VlbiBpbnN0YW5jZXMgc28gdGhhdCB1c2VycyBjYW4gY2hhaW4gY29udmVuaWVudGx5IGFuZCBjcmVhdGUgYSB0aW1lbGluZSBhdXRvbWF0aWNhbGx5LiAocmVtb3ZlZCBkdWUgdG8gY29uY2VybnMgdGhhdCBpdCdkIHVsdGltYXRlbHkgYWRkIHRvIG1vcmUgY29uZnVzaW9uIGVzcGVjaWFsbHkgZm9yIGJlZ2lubmVycylcbi8vIF9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLHNldCxjYWxsLGFkZCxhZGRMYWJlbCxhZGRQYXVzZVwiLCBuYW1lID0+IHtcbi8vIFx0VHdlZW4ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4vLyBcdFx0bGV0IHRsID0gbmV3IFRpbWVsaW5lKCk7XG4vLyBcdFx0cmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRsLCB0aGlzKVtuYW1lXS5hcHBseSh0bCwgdG9BcnJheShhcmd1bWVudHMpKTtcbi8vIFx0fVxuLy8gfSk7XG4vL2ZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LiBMZXZlcmFnZSB0aGUgdGltZWxpbmUgY2FsbHMuXG5cblxuX2ZvckVhY2hOYW1lKFwic3RhZ2dlclRvLHN0YWdnZXJGcm9tLHN0YWdnZXJGcm9tVG9cIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgVHdlZW5bbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKCksXG4gICAgICAgIHBhcmFtcyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICBwYXJhbXMuc3BsaWNlKG5hbWUgPT09IFwic3RhZ2dlckZyb21Ub1wiID8gNSA6IDQsIDAsIDApO1xuICAgIHJldHVybiB0bFtuYW1lXS5hcHBseSh0bCwgcGFyYW1zKTtcbiAgfTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQUk9QVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX3NldHRlclBsYWluID0gZnVuY3Rpb24gX3NldHRlclBsYWluKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJGdW5jID0gZnVuY3Rpb24gX3NldHRlckZ1bmModGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0odmFsdWUpO1xufSxcbiAgICBfc2V0dGVyRnVuY1dpdGhQYXJhbSA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jV2l0aFBhcmFtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKGRhdGEuZnAsIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uIF9zZXR0ZXJBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zZXRBdHRyaWJ1dGUocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX2dldFNldHRlciA9IGZ1bmN0aW9uIF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odGFyZ2V0W3Byb3BlcnR5XSkgPyBfc2V0dGVyRnVuYyA6IF9pc1VuZGVmaW5lZCh0YXJnZXRbcHJvcGVydHldKSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlID8gX3NldHRlckF0dHJpYnV0ZSA6IF9zZXR0ZXJQbGFpbjtcbn0sXG4gICAgX3JlbmRlclBsYWluID0gZnVuY3Rpb24gX3JlbmRlclBsYWluKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDAwMCkgLyAxMDAwMDAwLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckJvb2xlYW4gPSBmdW5jdGlvbiBfcmVuZGVyQm9vbGVhbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsICEhKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDb21wbGV4U3RyaW5nID0gZnVuY3Rpb24gX3JlbmRlckNvbXBsZXhTdHJpbmcocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQsXG4gICAgICBzID0gXCJcIjtcblxuICBpZiAoIXJhdGlvICYmIGRhdGEuYikge1xuICAgIC8vYiA9IGJlZ2lubmluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5iO1xuICB9IGVsc2UgaWYgKHJhdGlvID09PSAxICYmIGRhdGEuZSkge1xuICAgIC8vZSA9IGVuZGluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5lO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChwdCkge1xuICAgICAgcyA9IHB0LnAgKyAocHQubSA/IHB0Lm0ocHQucyArIHB0LmMgKiByYXRpbykgOiBNYXRoLnJvdW5kKChwdC5zICsgcHQuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwKSArIHM7IC8vd2UgdXNlIHRoZSBcInBcIiBwcm9wZXJ0eSBmb3IgdGhlIHRleHQgaW5iZXR3ZWVuIChsaWtlIGEgc3VmZml4KS4gQW5kIGluIHRoZSBjb250ZXh0IG9mIGEgY29tcGxleCBzdHJpbmcsIHRoZSBtb2RpZmllciAobSkgaXMgdHlwaWNhbGx5IGp1c3QgTWF0aC5yb3VuZCgpLCBsaWtlIGZvciBSR0IgY29sb3JzLlxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHMgKz0gZGF0YS5jOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgY2h1bmsgb2Ygbm9uLW51bWVyaWMgdGV4dC5cbiAgfVxuXG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBzLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BUd2VlbnMgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFR3ZWVucyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG59LFxuICAgIF9hZGRQbHVnaW5Nb2RpZmllciA9IGZ1bmN0aW9uIF9hZGRQbHVnaW5Nb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdC5wID09PSBwcm9wZXJ0eSAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCk7XG4gICAgcHQgPSBuZXh0O1xuICB9XG59LFxuICAgIF9raWxsUHJvcFR3ZWVuc09mID0gZnVuY3Rpb24gX2tpbGxQcm9wVHdlZW5zT2YocHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcblxuICAgIGlmIChwdC5wID09PSBwcm9wZXJ0eSAmJiAhcHQub3AgfHwgcHQub3AgPT09IHByb3BlcnR5KSB7XG4gICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgIH0gZWxzZSBpZiAoIXB0LmRlcCkge1xuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nID0gMTtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gIWhhc05vbkRlcGVuZGVudFJlbWFpbmluZztcbn0sXG4gICAgX3NldHRlcldpdGhNb2RpZmllciA9IGZ1bmN0aW9uIF9zZXR0ZXJXaXRoTW9kaWZpZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgZGF0YS5tU2V0KHRhcmdldCwgcHJvcGVydHksIGRhdGEubS5jYWxsKGRhdGEudHdlZW4sIHZhbHVlLCBkYXRhLm10KSwgZGF0YSk7XG59LFxuICAgIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkgPSBmdW5jdGlvbiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHBhcmVudCkge1xuICB2YXIgcHQgPSBwYXJlbnQuX3B0LFxuICAgICAgbmV4dCxcbiAgICAgIHB0MixcbiAgICAgIGZpcnN0LFxuICAgICAgbGFzdDsgLy9zb3J0cyB0aGUgUHJvcFR3ZWVuIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByaW9yaXR5IGJlY2F1c2Ugc29tZSBwbHVnaW5zIG5lZWQgdG8gZG8gdGhlaXIgd29yayBhZnRlciBBTEwgb2YgdGhlIFByb3BUd2VlbnMgd2VyZSBjcmVhdGVkIChsaWtlIFJvdW5kUHJvcHNQbHVnaW4gYW5kIE1vZGlmaWVyc1BsdWdpbilcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQyID0gZmlyc3Q7XG5cbiAgICB3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG4gICAgICBwdDIgPSBwdDIuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkge1xuICAgICAgcHQuX3ByZXYuX25leHQgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlyc3QgPSBwdDtcbiAgICB9XG5cbiAgICBpZiAocHQuX25leHQgPSBwdDIpIHtcbiAgICAgIHB0Mi5fcHJldiA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gcHQ7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcGFyZW50Ll9wdCA9IGZpcnN0O1xufTsgLy9Qcm9wVHdlZW4ga2V5OiB0ID0gdGFyZ2V0LCBwID0gcHJvcCwgciA9IHJlbmRlcmVyLCBkID0gZGF0YSwgcyA9IHN0YXJ0LCBjID0gY2hhbmdlLCBvcCA9IG92ZXJ3cml0ZVByb3BlcnR5IChPTkxZIHBvcHVsYXRlZCB3aGVuIGl0J3MgZGlmZmVyZW50IHRoYW4gcCksIHByID0gcHJpb3JpdHksIF9uZXh0L19wcmV2IGZvciB0aGUgbGlua2VkIGxpc3Qgc2libGluZ3MsIHNldCA9IHNldHRlciwgbSA9IG1vZGlmaWVyLCBtU2V0ID0gbW9kaWZpZXJTZXR0ZXIgKHRoZSBvcmlnaW5hbCBzZXR0ZXIsIGJlZm9yZSBhIG1vZGlmaWVyIHdhcyBhZGRlZClcblxuXG5leHBvcnQgdmFyIFByb3BUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb3BUd2VlbihuZXh0LCB0YXJnZXQsIHByb3AsIHN0YXJ0LCBjaGFuZ2UsIHJlbmRlcmVyLCBkYXRhLCBzZXR0ZXIsIHByaW9yaXR5KSB7XG4gICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIHRoaXMucyA9IHN0YXJ0O1xuICAgIHRoaXMuYyA9IGNoYW5nZTtcbiAgICB0aGlzLnAgPSBwcm9wO1xuICAgIHRoaXMuciA9IHJlbmRlcmVyIHx8IF9yZW5kZXJQbGFpbjtcbiAgICB0aGlzLmQgPSBkYXRhIHx8IHRoaXM7XG4gICAgdGhpcy5zZXQgPSBzZXR0ZXIgfHwgX3NldHRlclBsYWluO1xuICAgIHRoaXMucHIgPSBwcmlvcml0eSB8fCAwO1xuICAgIHRoaXMuX25leHQgPSBuZXh0O1xuXG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQuX3ByZXYgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gUHJvcFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG80Lm1vZGlmaWVyID0gZnVuY3Rpb24gbW9kaWZpZXIoZnVuYywgdHdlZW4sIHRhcmdldCkge1xuICAgIHRoaXMubVNldCA9IHRoaXMubVNldCB8fCB0aGlzLnNldDsgLy9pbiBjYXNlIGl0IHdhcyBhbHJlYWR5IHNldCAoYSBQcm9wVHdlZW4gY2FuIG9ubHkgaGF2ZSBvbmUgbW9kaWZpZXIpXG5cbiAgICB0aGlzLnNldCA9IF9zZXR0ZXJXaXRoTW9kaWZpZXI7XG4gICAgdGhpcy5tID0gZnVuYztcbiAgICB0aGlzLm10ID0gdGFyZ2V0OyAvL21vZGlmaWVyIHRhcmdldFxuXG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuICB9O1xuXG4gIHJldHVybiBQcm9wVHdlZW47XG59KCk7IC8vSW5pdGlhbGl6YXRpb24gdGFza3NcblxuX2ZvckVhY2hOYW1lKF9jYWxsYmFja05hbWVzICsgXCJwYXJlbnQsZHVyYXRpb24sZWFzZSxkZWxheSxvdmVyd3JpdGUscnVuQmFja3dhcmRzLHN0YXJ0QXQseW95byxpbW1lZGlhdGVSZW5kZXIscmVwZWF0LHJlcGVhdERlbGF5LGRhdGEscGF1c2VkLHJldmVyc2VkLGxhenksY2FsbGJhY2tTY29wZSxzdHJpbmdGaWx0ZXIsaWQseW95b0Vhc2Usc3RhZ2dlcixpbmhlcml0LHJlcGVhdFJlZnJlc2gsa2V5ZnJhbWVzLGF1dG9SZXZlcnQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xufSk7XG5cbl9nbG9iYWxzLlR3ZWVuTWF4ID0gX2dsb2JhbHMuVHdlZW5MaXRlID0gVHdlZW47XG5fZ2xvYmFscy5UaW1lbGluZUxpdGUgPSBfZ2xvYmFscy5UaW1lbGluZU1heCA9IFRpbWVsaW5lO1xuX2dsb2JhbFRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgc29ydENoaWxkcmVuOiBmYWxzZSxcbiAgZGVmYXVsdHM6IF9kZWZhdWx0cyxcbiAgYXV0b1JlbW92ZUNoaWxkcmVuOiB0cnVlLFxuICBpZDogXCJyb290XCIsXG4gIHNtb290aENoaWxkVGltaW5nOiB0cnVlXG59KTtcbl9jb25maWcuc3RyaW5nRmlsdGVyID0gX2NvbG9yU3RyaW5nRmlsdGVyO1xuXG52YXIgX21lZGlhID0gW10sXG4gICAgX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX2xhc3RNZWRpYVRpbWUgPSAwLFxuICAgIF9jb250ZXh0SUQgPSAwLFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiAoX2xpc3RlbmVyc1t0eXBlXSB8fCBfZW1wdHlBcnJheSkubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSk7XG59LFxuICAgIF9vbk1lZGlhQ2hhbmdlID0gZnVuY3Rpb24gX29uTWVkaWFDaGFuZ2UoKSB7XG4gIHZhciB0aW1lID0gRGF0ZS5ub3coKSxcbiAgICAgIG1hdGNoZXMgPSBbXTtcblxuICBpZiAodGltZSAtIF9sYXN0TWVkaWFUaW1lID4gMikge1xuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFJbml0XCIpO1xuXG4gICAgX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBxdWVyaWVzID0gYy5xdWVyaWVzLFxuICAgICAgICAgIGNvbmRpdGlvbnMgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBhbnlNYXRjaCxcbiAgICAgICAgICB0b2dnbGVkO1xuXG4gICAgICBmb3IgKHAgaW4gcXVlcmllcykge1xuICAgICAgICBtYXRjaCA9IF93aW4ubWF0Y2hNZWRpYShxdWVyaWVzW3BdKS5tYXRjaGVzOyAvLyBGaXJlZm94IGRvZXNuJ3QgdXBkYXRlIHRoZSBcIm1hdGNoZXNcIiBwcm9wZXJ0eSBvZiB0aGUgTWVkaWFRdWVyeUxpc3Qgb2JqZWN0IGNvcnJlY3RseSAtIGl0IG9ubHkgZG9lcyBzbyBhcyBpdCBjYWxscyBpdHMgY2hhbmdlIGhhbmRsZXIgLSBzbyB3ZSBtdXN0IHJlLWNyZWF0ZSBhIG1lZGlhIHF1ZXJ5IGhlcmUgdG8gZW5zdXJlIGl0J3MgYWNjdXJhdGUuXG5cbiAgICAgICAgbWF0Y2ggJiYgKGFueU1hdGNoID0gMSk7XG5cbiAgICAgICAgaWYgKG1hdGNoICE9PSBjb25kaXRpb25zW3BdKSB7XG4gICAgICAgICAgY29uZGl0aW9uc1twXSA9IG1hdGNoO1xuICAgICAgICAgIHRvZ2dsZWQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2dnbGVkKSB7XG4gICAgICAgIGMucmV2ZXJ0KCk7XG4gICAgICAgIGFueU1hdGNoICYmIG1hdGNoZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFSZXZlcnRcIik7XG5cbiAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLm9uTWF0Y2goYywgZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIGMuYWRkKG51bGwsIGZ1bmMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgX2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgfVxufTtcblxudmFyIENvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgdGhpcy5zZWxlY3RvciA9IHNjb3BlICYmIHNlbGVjdG9yKHNjb3BlKTtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLl9yID0gW107IC8vIHJldHVybmVkL2NsZWFudXAgZnVuY3Rpb25zXG5cbiAgICB0aGlzLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlkID0gX2NvbnRleHRJRCsrOyAvLyB0byB3b3JrIGFyb3VuZCBpc3N1ZXMgdGhhdCBmcmFtZXdvcmtzIGxpa2UgVnVlIGNhdXNlIGJ5IG1ha2luZyB0aGluZ3MgaW50byBQcm94aWVzIHdoaWNoIG1ha2UgaXQgaW1wb3NzaWJsZSB0byBkbyBzb21ldGhpbmcgbGlrZSBfbWVkaWEuaW5kZXhPZih0aGlzKSBiZWNhdXNlIFwidGhpc1wiIHdvdWxkIG5vIGxvbmdlciByZWZlciB0byB0aGUgQ29udGV4dCBpbnN0YW5jZSBpdHNlbGYgLSBpdCdkIHJlZmVyIHRvIGEgUHJveHkhIFdlIG5lZWRlZCBhIHdheSB0byBpZGVudGlmeSB0aGUgY29udGV4dCB1bmlxdWVseVxuXG4gICAgZnVuYyAmJiB0aGlzLmFkZChmdW5jKTtcbiAgfVxuXG4gIHZhciBfcHJvdG81ID0gQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNS5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZnVuYywgc2NvcGUpIHtcbiAgICAvLyBwb3NzaWJsZSBmdXR1cmUgYWRkaXRpb24gaWYgd2UgbmVlZCB0aGUgYWJpbGl0eSB0byBhZGQoKSBhbiBhbmltYXRpb24gdG8gYSBjb250ZXh0IGFuZCBmb3Igd2hhdGV2ZXIgcmVhc29uIGNhbm5vdCBjcmVhdGUgdGhhdCBhbmltYXRpb24gaW5zaWRlIG9mIGEgY29udGV4dC5hZGQoKCkgPT4gey4uLn0pIGZ1bmN0aW9uLlxuICAgIC8vIGlmIChuYW1lICYmIF9pc0Z1bmN0aW9uKG5hbWUucmV2ZXJ0KSkge1xuICAgIC8vIFx0dGhpcy5kYXRhLnB1c2gobmFtZSk7XG4gICAgLy8gXHRyZXR1cm4gKG5hbWUuX2N0eCA9IHRoaXMpO1xuICAgIC8vIH1cbiAgICBpZiAoX2lzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgIHNjb3BlID0gZnVuYztcbiAgICAgIGZ1bmMgPSBuYW1lO1xuICAgICAgbmFtZSA9IF9pc0Z1bmN0aW9uO1xuICAgIH1cblxuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgZiA9IGZ1bmN0aW9uIGYoKSB7XG4gICAgICB2YXIgcHJldiA9IF9jb250ZXh0LFxuICAgICAgICAgIHByZXZTZWxlY3RvciA9IHNlbGYuc2VsZWN0b3IsXG4gICAgICAgICAgcmVzdWx0O1xuICAgICAgcHJldiAmJiBwcmV2ICE9PSBzZWxmICYmIHByZXYuZGF0YS5wdXNoKHNlbGYpO1xuICAgICAgc2NvcGUgJiYgKHNlbGYuc2VsZWN0b3IgPSBzZWxlY3RvcihzY29wZSkpO1xuICAgICAgX2NvbnRleHQgPSBzZWxmO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgX2lzRnVuY3Rpb24ocmVzdWx0KSAmJiBzZWxmLl9yLnB1c2gocmVzdWx0KTtcbiAgICAgIF9jb250ZXh0ID0gcHJldjtcbiAgICAgIHNlbGYuc2VsZWN0b3IgPSBwcmV2U2VsZWN0b3I7XG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHNlbGYubGFzdCA9IGY7XG4gICAgcmV0dXJuIG5hbWUgPT09IF9pc0Z1bmN0aW9uID8gZihzZWxmLCBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgcmV0dXJuIHNlbGYuYWRkKG51bGwsIGZ1bmMpO1xuICAgIH0pIDogbmFtZSA/IHNlbGZbbmFtZV0gPSBmIDogZjtcbiAgfTtcblxuICBfcHJvdG81Lmlnbm9yZSA9IGZ1bmN0aW9uIGlnbm9yZShmdW5jKSB7XG4gICAgdmFyIHByZXYgPSBfY29udGV4dDtcbiAgICBfY29udGV4dCA9IG51bGw7XG4gICAgZnVuYyh0aGlzKTtcbiAgICBfY29udGV4dCA9IHByZXY7XG4gIH07XG5cbiAgX3Byb3RvNS5nZXRUd2VlbnMgPSBmdW5jdGlvbiBnZXRUd2VlbnMoKSB7XG4gICAgdmFyIGEgPSBbXTtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBDb250ZXh0ID8gYS5wdXNoLmFwcGx5KGEsIGUuZ2V0VHdlZW5zKCkpIDogZSBpbnN0YW5jZW9mIFR3ZWVuICYmICEoZS5wYXJlbnQgJiYgZS5wYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIikgJiYgYS5wdXNoKGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLl9yLmxlbmd0aCA9IHRoaXMuZGF0YS5sZW5ndGggPSAwO1xuICB9O1xuXG4gIF9wcm90bzUua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0LCBtYXRjaE1lZGlhKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBpZiAocmV2ZXJ0KSB7XG4gICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdHdlZW5zID0gX3RoaXM0LmdldFR3ZWVucygpLFxuICAgICAgICAgICAgaSA9IF90aGlzNC5kYXRhLmxlbmd0aCxcbiAgICAgICAgICAgIHQ7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIC8vIEZsaXAgcGx1Z2luIHR3ZWVucyBhcmUgdmVyeSBkaWZmZXJlbnQgaW4gdGhhdCB0aGV5IHNob3VsZCBhY3R1YWxseSBiZSBwdXNoZWQgdG8gdGhlaXIgZW5kLiBUaGUgcGx1Z2luIHJlcGxhY2VzIHRoZSB0aW1lbGluZSdzIC5yZXZlcnQoKSBtZXRob2QgdG8gZG8gZXhhY3RseSB0aGF0LiBCdXQgd2UgYWxzbyBuZWVkIHRvIHJlbW92ZSBhbnkgb2YgdGhvc2UgbmVzdGVkIHR3ZWVucyBpbnNpZGUgdGhlIGZsaXAgdGltZWxpbmUgc28gdGhhdCB0aGV5IGRvbid0IGdldCBpbmRpdmlkdWFsbHkgcmV2ZXJ0ZWQuXG4gICAgICAgICAgdCA9IF90aGlzNC5kYXRhW2ldO1xuXG4gICAgICAgICAgaWYgKHQuZGF0YSA9PT0gXCJpc0ZsaXBcIikge1xuICAgICAgICAgICAgdC5yZXZlcnQoKTtcbiAgICAgICAgICAgIHQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpLmZvckVhY2goZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0d2VlbnMuc3BsaWNlKHR3ZWVucy5pbmRleE9mKHR3ZWVuKSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gc2F2ZSBhcyBhbiBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gY2FjaGUgdGhlIGdsb2JhbFRpbWUgZm9yIGVhY2ggdHdlZW4gdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgZHVyaW5nIHRoZSBzb3J0XG5cblxuICAgICAgICB0d2VlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGc6IHQuX2R1ciB8fCB0Ll9kZWxheSB8fCB0Ll9zYXQgJiYgIXQuX3NhdC52YXJzLmltbWVkaWF0ZVJlbmRlciA/IHQuZ2xvYmFsVGltZSgwKSA6IC1JbmZpbml0eSxcbiAgICAgICAgICAgIHQ6IHRcbiAgICAgICAgICB9O1xuICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIGIuZyAtIGEuZyB8fCAtSW5maW5pdHk7XG4gICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICByZXR1cm4gby50LnJldmVydChyZXZlcnQpO1xuICAgICAgICB9KTsgLy8gbm90ZTogYWxsIG9mIHRoZSBfc3RhcnRBdCB0d2VlbnMgc2hvdWxkIGJlIHJldmVydGVkIGluIHJldmVyc2Ugb3JkZXIgdGhhdCB0aGV5IHdlcmUgY3JlYXRlZCwgYW5kIHRoZXknbGwgYWxsIGhhdmUgdGhlIHNhbWUgZ2xvYmFsVGltZSAoLTEpIHNvIHRoZSBcIiB8fCAtMVwiIGluIHRoZSBzb3J0IGtlZXBzIHRoZSBvcmRlciBwcm9wZXJseS5cblxuICAgICAgICBpID0gX3RoaXM0LmRhdGEubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgd2UgbG9vcCBiYWNrd2FyZHMgc28gdGhhdCwgZm9yIGV4YW1wbGUsIFNwbGl0VGV4dHMgdGhhdCB3ZXJlIGNyZWF0ZWQgbGF0ZXIgb24gdGhlIHNhbWUgZWxlbWVudCBnZXQgcmV2ZXJ0ZWQgZmlyc3RcbiAgICAgICAgICB0ID0gX3RoaXM0LmRhdGFbaV07XG5cbiAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIFRpbWVsaW5lKSB7XG4gICAgICAgICAgICBpZiAodC5kYXRhICE9PSBcIm5lc3RlZFwiKSB7XG4gICAgICAgICAgICAgIHQuc2Nyb2xsVHJpZ2dlciAmJiB0LnNjcm9sbFRyaWdnZXIucmV2ZXJ0KCk7XG4gICAgICAgICAgICAgIHQua2lsbCgpOyAvLyBkb24ndCByZXZlcnQoKSB0aGUgdGltZWxpbmUgYmVjYXVzZSB0aGF0J3MgZHVwbGljYXRpbmcgZWZmb3J0cyBzaW5jZSB3ZSBhbHJlYWR5IHJldmVydGVkIGFsbCB0aGUgdHdlZW5zXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICEodCBpbnN0YW5jZW9mIFR3ZWVuKSAmJiB0LnJldmVydCAmJiB0LnJldmVydChyZXZlcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNC5fci5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIGYocmV2ZXJ0LCBfdGhpczQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpczQuaXNSZXZlcnRlZCA9IHRydWU7XG4gICAgICB9KSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZS5raWxsICYmIGUua2lsbCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhcigpO1xuXG4gICAgaWYgKG1hdGNoTWVkaWEpIHtcbiAgICAgIHZhciBpID0gX21lZGlhLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAvLyBwcmV2aW91c2x5LCB3ZSBjaGVja2VkIF9tZWRpYS5pbmRleE9mKHRoaXMpLCBidXQgc29tZSBmcmFtZXdvcmtzIGxpa2UgVnVlIGVuZm9yY2UgUHJveHkgb2JqZWN0cyB0aGF0IG1ha2UgaXQgaW1wb3NzaWJsZSB0byBnZXQgdGhlIHByb3BlciByZXN1bHQgdGhhdCB3YXksIHNvIHdlIG11c3QgdXNlIGEgdW5pcXVlIElEIG51bWJlciBpbnN0ZWFkLlxuICAgICAgICBfbWVkaWFbaV0uaWQgPT09IHRoaXMuaWQgJiYgX21lZGlhLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvNS5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgdGhpcy5raWxsKGNvbmZpZyB8fCB7fSk7XG4gIH07XG5cbiAgcmV0dXJuIENvbnRleHQ7XG59KCk7XG5cbnZhciBNYXRjaE1lZGlhID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWF0Y2hNZWRpYShzY29wZSkge1xuICAgIHRoaXMuY29udGV4dHMgPSBbXTtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgX2NvbnRleHQgJiYgX2NvbnRleHQuZGF0YS5wdXNoKHRoaXMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBNYXRjaE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG82LmFkZCA9IGZ1bmN0aW9uIGFkZChjb25kaXRpb25zLCBmdW5jLCBzY29wZSkge1xuICAgIF9pc09iamVjdChjb25kaXRpb25zKSB8fCAoY29uZGl0aW9ucyA9IHtcbiAgICAgIG1hdGNoZXM6IGNvbmRpdGlvbnNcbiAgICB9KTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KDAsIHNjb3BlIHx8IHRoaXMuc2NvcGUpLFxuICAgICAgICBjb25kID0gY29udGV4dC5jb25kaXRpb25zID0ge30sXG4gICAgICAgIG1xLFxuICAgICAgICBwLFxuICAgICAgICBhY3RpdmU7XG4gICAgX2NvbnRleHQgJiYgIWNvbnRleHQuc2VsZWN0b3IgJiYgKGNvbnRleHQuc2VsZWN0b3IgPSBfY29udGV4dC5zZWxlY3Rvcik7IC8vIGluIGNhc2UgYSBjb250ZXh0IGlzIGNyZWF0ZWQgaW5zaWRlIGEgY29udGV4dC4gTGlrZSBhIGdzYXAubWF0Y2hNZWRpYSgpIHRoYXQncyBpbnNpZGUgYSBzY29wZWQgZ3NhcC5jb250ZXh0KClcblxuICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICBmdW5jID0gY29udGV4dC5hZGQoXCJvbk1hdGNoXCIsIGZ1bmMpO1xuICAgIGNvbnRleHQucXVlcmllcyA9IGNvbmRpdGlvbnM7XG5cbiAgICBmb3IgKHAgaW4gY29uZGl0aW9ucykge1xuICAgICAgaWYgKHAgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgYWN0aXZlID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1xID0gX3dpbi5tYXRjaE1lZGlhKGNvbmRpdGlvbnNbcF0pO1xuXG4gICAgICAgIGlmIChtcSkge1xuICAgICAgICAgIF9tZWRpYS5pbmRleE9mKGNvbnRleHQpIDwgMCAmJiBfbWVkaWEucHVzaChjb250ZXh0KTtcbiAgICAgICAgICAoY29uZFtwXSA9IG1xLm1hdGNoZXMpICYmIChhY3RpdmUgPSAxKTtcbiAgICAgICAgICBtcS5hZGRMaXN0ZW5lciA/IG1xLmFkZExpc3RlbmVyKF9vbk1lZGlhQ2hhbmdlKSA6IG1xLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgX29uTWVkaWFDaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWN0aXZlICYmIGZ1bmMoY29udGV4dCwgZnVuY3Rpb24gKGYpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmFkZChudWxsLCBmKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyByZWZyZXNoKCkge1xuICAvLyBcdGxldCB0aW1lID0gX2xhc3RNZWRpYVRpbWUsXG4gIC8vIFx0XHRtZWRpYSA9IF9tZWRpYTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IC0xO1xuICAvLyBcdF9tZWRpYSA9IHRoaXMuY29udGV4dHM7XG4gIC8vIFx0X29uTWVkaWFDaGFuZ2UoKTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG4gIC8vIFx0X21lZGlhID0gbWVkaWE7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzYucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIF9wcm90bzYua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0KSB7XG4gICAgdGhpcy5jb250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5raWxsKHJldmVydCwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1hdGNoTWVkaWE7XG59KCk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEdTQVBcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX2dzYXAgPSB7XG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVsaW5lKHZhcnMpO1xuICB9LFxuICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSk7XG4gIH0sXG4gIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgX2lzU3RyaW5nKHRhcmdldCkgJiYgKHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KVswXSk7IC8vaW4gY2FzZSBzZWxlY3RvciB0ZXh0IG9yIGFuIGFycmF5IGlzIHBhc3NlZCBpblxuXG4gICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgZm9ybWF0ID0gdW5pdCA/IF9wYXNzVGhyb3VnaCA6IF9udW1lcmljSWZQb3NzaWJsZTtcblxuICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gIH0sXG4gIHF1aWNrU2V0dGVyOiBmdW5jdGlvbiBxdWlja1NldHRlcih0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB7XG4gICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc2V0dGVycyA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IHNldHRlcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgIHZhciBQbHVnaW4gPSBfcGx1Z2luc1twcm9wZXJ0eV0sXG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIGFuIGFsaWFzLCBsaWtlIFwicm90YXRlXCIgZm9yIFwicm90YXRpb25cIi5cbiAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwID0gbmV3IFBsdWdpbigpO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgIHAucmVuZGVyKDEsIHApO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICByZXR1cm4gUGx1Z2luID8gc2V0dGVyIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgfTtcbiAgfSxcbiAgcXVpY2tUbzogZnVuY3Rpb24gcXVpY2tUbyh0YXJnZXQsIHByb3BlcnR5LCB2YXJzKSB7XG4gICAgdmFyIF9tZXJnZTI7XG5cbiAgICB2YXIgdHdlZW4gPSBnc2FwLnRvKHRhcmdldCwgX21lcmdlKChfbWVyZ2UyID0ge30sIF9tZXJnZTJbcHJvcGVydHldID0gXCIrPTAuMVwiLCBfbWVyZ2UyLnBhdXNlZCA9IHRydWUsIF9tZXJnZTIpLCB2YXJzIHx8IHt9KSksXG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICByZXR1cm4gdHdlZW4ucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgIH07XG5cbiAgICBmdW5jLnR3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG4gIGlzVHdlZW5pbmc6IGZ1bmN0aW9uIGlzVHdlZW5pbmcodGFyZ2V0cykge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgdHJ1ZSkubGVuZ3RoID4gMDtcbiAgfSxcbiAgZGVmYXVsdHM6IGZ1bmN0aW9uIGRlZmF1bHRzKHZhbHVlKSB7XG4gICAgdmFsdWUgJiYgdmFsdWUuZWFzZSAmJiAodmFsdWUuZWFzZSA9IF9wYXJzZUVhc2UodmFsdWUuZWFzZSwgX2RlZmF1bHRzLmVhc2UpKTtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfZGVmYXVsdHMsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcodmFsdWUpIHtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfY29uZmlnLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIHJlZ2lzdGVyRWZmZWN0OiBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChfcmVmMykge1xuICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0LFxuICAgICAgICBwbHVnaW5zID0gX3JlZjMucGx1Z2lucyxcbiAgICAgICAgZGVmYXVsdHMgPSBfcmVmMy5kZWZhdWx0cyxcbiAgICAgICAgZXh0ZW5kVGltZWxpbmUgPSBfcmVmMy5leHRlbmRUaW1lbGluZTtcbiAgICAocGx1Z2lucyB8fCBcIlwiKS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICAgICAgcmV0dXJuIHBsdWdpbk5hbWUgJiYgIV9wbHVnaW5zW3BsdWdpbk5hbWVdICYmICFfZ2xvYmFsc1twbHVnaW5OYW1lXSAmJiBfd2FybihuYW1lICsgXCIgZWZmZWN0IHJlcXVpcmVzIFwiICsgcGx1Z2luTmFtZSArIFwiIHBsdWdpbi5cIik7XG4gICAgfSk7XG5cbiAgICBfZWZmZWN0c1tuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCB0bCkge1xuICAgICAgcmV0dXJuIGVmZmVjdCh0b0FycmF5KHRhcmdldHMpLCBfc2V0RGVmYXVsdHModmFycyB8fCB7fSwgZGVmYXVsdHMpLCB0bCk7XG4gICAgfTtcblxuICAgIGlmIChleHRlbmRUaW1lbGluZSkge1xuICAgICAgVGltZWxpbmUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChfZWZmZWN0c1tuYW1lXSh0YXJnZXRzLCBfaXNPYmplY3QodmFycykgPyB2YXJzIDogKHBvc2l0aW9uID0gdmFycykgJiYge30sIHRoaXMpLCBwb3NpdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgcmVnaXN0ZXJFYXNlOiBmdW5jdGlvbiByZWdpc3RlckVhc2UobmFtZSwgZWFzZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX3BhcnNlRWFzZShlYXNlKTtcbiAgfSxcbiAgcGFyc2VFYXNlOiBmdW5jdGlvbiBwYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIDogX2Vhc2VNYXA7XG4gIH0sXG4gIGdldEJ5SWQ6IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldEJ5SWQoaWQpO1xuICB9LFxuICBleHBvcnRSb290OiBmdW5jdGlvbiBleHBvcnRSb290KHZhcnMsIGluY2x1ZGVEZWxheWVkQ2FsbHMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKHZhcnMpLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dDtcbiAgICB0bC5zbW9vdGhDaGlsZFRpbWluZyA9IF9pc05vdEZhbHNlKHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcpO1xuXG4gICAgX2dsb2JhbFRpbWVsaW5lLnJlbW92ZSh0bCk7XG5cbiAgICB0bC5fZHAgPSAwOyAvL290aGVyd2lzZSBpdCdsbCBnZXQgcmUtYWN0aXZhdGVkIHdoZW4gYWRkaW5nIGNoaWxkcmVuIGFuZCBiZSByZS1pbnRyb2R1Y2VkIGludG8gX2dsb2JhbFRpbWVsaW5lJ3MgbGlua2VkIGxpc3QgKHRoZW4gYWRkZWQgdG8gaXRzZWxmKS5cblxuICAgIHRsLl90aW1lID0gdGwuX3RUaW1lID0gX2dsb2JhbFRpbWVsaW5lLl90aW1lO1xuICAgIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICBpZiAoaW5jbHVkZURlbGF5ZWRDYWxscyB8fCAhKCFjaGlsZC5fZHVyICYmIGNoaWxkIGluc3RhbmNlb2YgVHdlZW4gJiYgY2hpbGQudmFycy5vbkNvbXBsZXRlID09PSBjaGlsZC5fdGFyZ2V0c1swXSkpIHtcbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGwsIGNoaWxkLCBjaGlsZC5fc3RhcnQgLSBjaGlsZC5fZGVsYXkpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUoX2dsb2JhbFRpbWVsaW5lLCB0bCwgMCk7XG5cbiAgICByZXR1cm4gdGw7XG4gIH0sXG4gIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuYyA/IG5ldyBDb250ZXh0KGZ1bmMsIHNjb3BlKSA6IF9jb250ZXh0O1xuICB9LFxuICBtYXRjaE1lZGlhOiBmdW5jdGlvbiBtYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaE1lZGlhKHNjb3BlKTtcbiAgfSxcbiAgbWF0Y2hNZWRpYVJlZnJlc2g6IGZ1bmN0aW9uIG1hdGNoTWVkaWFSZWZyZXNoKCkge1xuICAgIHJldHVybiBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIGNvbmQgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgZm91bmQsXG4gICAgICAgICAgcDtcblxuICAgICAgZm9yIChwIGluIGNvbmQpIHtcbiAgICAgICAgaWYgKGNvbmRbcF0pIHtcbiAgICAgICAgICBjb25kW3BdID0gZmFsc2U7XG4gICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvdW5kICYmIGMucmV2ZXJ0KCk7XG4gICAgfSkgfHwgX29uTWVkaWFDaGFuZ2UoKTtcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICB9LFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbiAgfSxcbiAgdXRpbHM6IHtcbiAgICB3cmFwOiB3cmFwLFxuICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNuYXA6IHNuYXAsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgZ2V0VW5pdDogZ2V0VW5pdCxcbiAgICBjbGFtcDogY2xhbXAsXG4gICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgcGlwZTogcGlwZSxcbiAgICB1bml0aXplOiB1bml0aXplLFxuICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH0sXG4gIGluc3RhbGw6IF9pbnN0YWxsLFxuICBlZmZlY3RzOiBfZWZmZWN0cyxcbiAgdGlja2VyOiBfdGlja2VyLFxuICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICBwbHVnaW5zOiBfcGx1Z2lucyxcbiAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgY29yZToge1xuICAgIFByb3BUd2VlbjogUHJvcFR3ZWVuLFxuICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgVHdlZW46IFR3ZWVuLFxuICAgIFRpbWVsaW5lOiBUaW1lbGluZSxcbiAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbTogX3JlbW92ZUxpbmtlZExpc3RJdGVtLFxuICAgIHJldmVydGluZzogZnVuY3Rpb24gcmV2ZXJ0aW5nKCkge1xuICAgICAgcmV0dXJuIF9yZXZlcnRpbmc7XG4gICAgfSxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KHRvQWRkKSB7XG4gICAgICBpZiAodG9BZGQgJiYgX2NvbnRleHQpIHtcbiAgICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRvQWRkKTtcblxuICAgICAgICB0b0FkZC5fY3R4ID0gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfY29udGV4dDtcbiAgICB9LFxuICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3N1cHByZXNzT3ZlcndyaXRlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbn0pO1xuXG5fdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICBkdXJhdGlvbjogMFxufSk7IC8vIC0tLS0gRVhUUkEgUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgX2dldFBsdWdpblByb3BUd2VlbiA9IGZ1bmN0aW9uIF9nZXRQbHVnaW5Qcm9wVHdlZW4ocGx1Z2luLCBwcm9wKSB7XG4gIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIHB0O1xuXG4gIGZvciAocCBpbiBtb2RpZmllcnMpIHtcbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IHR3ZWVuLl9wdExvb2t1cFtpXVtwXTtcblxuICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAvLyBpcyBhIHBsdWdpblxuICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2J1aWxkTW9kaWZpZXJQbHVnaW4gPSBmdW5jdGlvbiBfYnVpbGRNb2RpZmllclBsdWdpbihuYW1lLCBtb2RpZmllcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3VmFyczogMSxcbiAgICAvL2Rvbid0IHByZS1wcm9jZXNzIGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBvciBcInJhbmRvbSgpXCIgc3RyaW5ncy5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgdmFyIHRlbXAsIHA7XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pOyAvL2lmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIHJvdW5kUHJvcHMsIGxpa2UgXCJ4LHlcIiwgd2Ugcm91bmQgdG8gd2hvbGUgbnVtYmVycy5cblxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZE1vZGlmaWVycyh0d2VlbiwgdmFycyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IC8vcmVnaXN0ZXIgY29yZSBwbHVnaW5zXG5cblxuZXhwb3J0IHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICBuYW1lOiBcImF0dHJcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwLCBwdCwgdjtcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgdiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgXCJcIjtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodiB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0Lm9wID0gcDtcbiAgICAgIHB0LmIgPSB2OyAvLyByZWNvcmQgdGhlIGJlZ2lubmluZyB2YWx1ZSBzbyB3ZSBjYW4gcmV2ZXJ0KClcblxuICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIF9yZXZlcnRpbmcgPyBwdC5zZXQocHQudCwgcHQucCwgcHQuYiwgcHQpIDogcHQucihyYXRpbywgcHQuZCk7IC8vIGlmIHJldmVydGluZywgZ28gYmFjayB0byB0aGUgb3JpZ2luYWwgKHB0LmIpXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuICB9XG59LCB7XG4gIG5hbWU6IFwiZW5kQXJyYXlcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmFkZCh0YXJnZXQsIGksIHRhcmdldFtpXSB8fCAwLCB2YWx1ZVtpXSwgMCwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuICB9XG59LCBfYnVpbGRNb2RpZmllclBsdWdpbihcInJvdW5kUHJvcHNcIiwgX3JvdW5kTW9kaWZpZXIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcIm1vZGlmaWVyc1wiKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJzbmFwXCIsIHNuYXApKSB8fCBfZ3NhcDsgLy90byBwcmV2ZW50IHRoZSBjb3JlIHBsdWdpbnMgZnJvbSBiZWluZyBkcm9wcGVkIHZpYSBhZ2dyZXNzaXZlIHRyZWUgc2hha2luZywgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIHRoaXMgd2F5LlxuXG5Ud2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMi41XCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlIH07IiwiaW1wb3J0IHsgZ3NhcCwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmltcG9ydCB7IENTU1BsdWdpbiB9IGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsXG4gICAgLy8gdG8gcHJvdGVjdCBmcm9tIHRyZWUgc2hha2luZ1xuVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcbmV4cG9ydCB7IGdzYXBXaXRoQ1NTIGFzIGdzYXAsIGdzYXBXaXRoQ1NTIGFzIGRlZmF1bHQsIENTU1BsdWdpbiwgVHdlZW5NYXhXaXRoQ1NTIGFzIFR3ZWVuTWF4LCBUd2VlbkxpdGUsIFRpbWVsaW5lTWF4LCBUaW1lbGluZUxpdGUsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9OyIsbnVsbCxudWxsLG51bGwsbnVsbCwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVmlldztcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXQ7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpLFxuICAgIHNldENhY2hlQWRkID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVBZGQnKSxcbiAgICBzZXRDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX3NldENhY2hlSGFzJyk7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxubW9kdWxlLmV4cG9ydHMgPSBTZXRDYWNoZTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWFrTWFwO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RWFjaDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIGJhc2VGb3JPd24gPSByZXF1aXJlKCcuL19iYXNlRm9yT3duJyksXG4gICAgY3JlYXRlQmFzZUVhY2ggPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICovXG52YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRWFjaDtcbiIsInZhciBjcmVhdGVCYXNlRm9yID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUZvcicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvcjtcbiIsInZhciBiYXNlRm9yID0gcmVxdWlyZSgnLi9fYmFzZUZvcicpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3JPd247XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICB9XG4gIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0O1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRBbGxLZXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXNJbjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hdGNoO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNUeXBlZEFycmF5O1xuIiwidmFyIGJhc2VNYXRjaGVzID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXMnKSxcbiAgICBiYXNlTWF0Y2hlc1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBwcm9wZXJ0eSA9IHJlcXVpcmUoJy4vcHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXRlcmF0ZWU7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eTtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHlEZWVwO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FjaGVIYXM7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdEZ1bmN0aW9uO1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9QYXRoJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFBhdGg7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VFYWNoO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxBcnJheXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgbWFwVG9BcnJheSA9IHJlcXVpcmUoJy4vX21hcFRvQXJyYXknKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQnlUYWc7XG4iLCJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9scztcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1BhdGg7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIiwidmFyIGNvcmVKc0RhdGEgPSByZXF1aXJlKCcuL19jb3JlSnNEYXRhJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXNrZWQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmljdENvbXBhcmFibGU7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgSGFzaCA9IHJlcXVpcmUoJy4vX0hhc2gnKSxcbiAgICBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlQ2xlYXI7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBUb0FycmF5O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCIvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUhhcztcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9BcnJheTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrU2V0O1xuIiwidmFyIG1lbW9pemVDYXBwZWQgPSByZXF1aXJlKCcuL19tZW1vaXplQ2FwcGVkJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdUb1BhdGg7XG4iLCJ2YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvS2V5O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZvckVhY2gnKTtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBjYXN0RnVuY3Rpb24gPSByZXF1aXJlKCcuL19jYXN0RnVuY3Rpb24nKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGFsaWFzIGVhY2hcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICogQHNlZSBfLmZvckVhY2hSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICpcbiAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgY29uc29sZS5sb2coa2V5KTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGNhc3RGdW5jdGlvbihpdGVyYXRlZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2g7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldDtcbiIsInZhciBiYXNlSGFzSW4gPSByZXF1aXJlKCcuL19iYXNlSGFzSW4nKSxcbiAgICBoYXNQYXRoID0gcmVxdWlyZSgnLi9faGFzUGF0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzSW47XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VNYXAgPSByZXF1aXJlKCcuL19iYXNlTWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICpcbiAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAqICAgcmV0dXJuIG4gKiBuO1xuICogfVxuICpcbiAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdXG4gKlxuICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAqIF07XG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICovXG5mdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXA7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZTtcbiIsInZhciBiYXNlUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHknKSxcbiAgICBiYXNlUHJvcGVydHlEZWVwID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5RGVlcCcpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9wZXJ0eTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJGYWxzZTtcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuLypcbiAgZXNsaW50LWRpc2FibGVcbiAgbm8tY29uc29sZSxcbiAgZnVuYy1uYW1lc1xuKi9cblxuLyoqIEB0eXBlZGVmIHthbnl9IFRPRE8gKi9cblxudmFyIG5vcm1hbGl6ZVVybCA9IHJlcXVpcmUoXCIuL25vcm1hbGl6ZS11cmxcIik7XG52YXIgc3JjQnlNb2R1bGVJZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG52YXIgbm9Eb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIjtcbnZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gKiBAcmV0dXJucyB7KGZ1bmN0aW9uKCk6IHZvaWQpfCp9XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCB0aW1lKSB7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgZnVuY3Rpb25DYWxsID0gZnVuY3Rpb24gZnVuY3Rpb25DYWxsKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH07XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uQ2FsbCwgdGltZSk7XG4gIH07XG59XG5mdW5jdGlvbiBub29wKCkge31cblxuLyoqXG4gKiBAcGFyYW0ge1RPRE99IG1vZHVsZUlkXG4gKiBAcmV0dXJucyB7VE9ET31cbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCkge1xuICB2YXIgc3JjID0gc3JjQnlNb2R1bGVJZFttb2R1bGVJZF07XG4gIGlmICghc3JjKSB7XG4gICAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICAgIHNyYyA9ICggLyoqIEB0eXBlIHtIVE1MU2NyaXB0RWxlbWVudH0gKi9kb2N1bWVudC5jdXJyZW50U2NyaXB0KS5zcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG4gICAgICB2YXIgbGFzdFNjcmlwdFRhZyA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChsYXN0U2NyaXB0VGFnKSB7XG4gICAgICAgIHNyYyA9IGxhc3RTY3JpcHRUYWcuc3JjO1xuICAgICAgfVxuICAgIH1cbiAgICBzcmNCeU1vZHVsZUlkW21vZHVsZUlkXSA9IHNyYztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZU1hcFxuICAgKiBAcmV0dXJucyB7bnVsbCB8IHN0cmluZ1tdfVxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlTWFwKSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgc3BsaXRSZXN1bHQgPSBzcmMuc3BsaXQoLyhbXlxcXFwvXSspXFwuanMkLyk7XG4gICAgdmFyIGZpbGVuYW1lID0gc3BsaXRSZXN1bHQgJiYgc3BsaXRSZXN1bHRbMV07XG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZShcIi5qc1wiLCBcIi5jc3NcIildO1xuICAgIH1cbiAgICBpZiAoIWZpbGVNYXApIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoXCIuanNcIiwgXCIuY3NzXCIpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbGVNYXAuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbiAobWFwUnVsZSkge1xuICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQoZmlsZW5hbWUsIFwiXFxcXC5qcyRcIiksIFwiZ1wiKTtcbiAgICAgIHJldHVybiBub3JtYWxpemVVcmwoc3JjLnJlcGxhY2UocmVnLCBcIlwiLmNvbmNhdChtYXBSdWxlLnJlcGxhY2UoL3tmaWxlTmFtZX0vZywgZmlsZW5hbWUpLCBcIi5jc3NcIikpKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RPRE99IGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VybF1cbiAqL1xuZnVuY3Rpb24gdXBkYXRlQ3NzKGVsLCB1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB1cmwgPSBlbC5ocmVmLnNwbGl0KFwiP1wiKVswXTtcbiAgfVxuICBpZiAoIWlzVXJsUmVxdWVzdCggLyoqIEB0eXBlIHtzdHJpbmd9ICovdXJsKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZWwuaXNMb2FkZWQgPT09IGZhbHNlKSB7XG4gICAgLy8gV2Ugc2VlbSB0byBiZSBhYm91dCB0byByZXBsYWNlIGEgY3NzIGxpbmsgdGhhdCBoYXNuJ3QgbG9hZGVkIHlldC5cbiAgICAvLyBXZSdyZSBwcm9iYWJseSBjaGFuZ2luZyB0aGUgc2FtZSBmaWxlIG1vcmUgdGhhbiBvbmNlLlxuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXVybCB8fCAhKHVybC5pbmRleE9mKFwiLmNzc1wiKSA+IC0xKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBlbC52aXNpdGVkID0gdHJ1ZTtcbiAgdmFyIG5ld0VsID0gZWwuY2xvbmVOb2RlKCk7XG4gIG5ld0VsLmlzTG9hZGVkID0gZmFsc2U7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobmV3RWwuaXNMb2FkZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbmV3RWwuaXNMb2FkZWQgPSB0cnVlO1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9KTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobmV3RWwuaXNMb2FkZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbmV3RWwuaXNMb2FkZWQgPSB0cnVlO1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9KTtcbiAgbmV3RWwuaHJlZiA9IFwiXCIuY29uY2F0KHVybCwgXCI/XCIpLmNvbmNhdChEYXRlLm5vdygpKTtcbiAgaWYgKGVsLm5leHRTaWJsaW5nKSB7XG4gICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3RWwsIGVsLm5leHRTaWJsaW5nKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld0VsKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBocmVmXG4gKiBAcGFyYW0ge1RPRE99IHNyY1xuICogQHJldHVybnMge1RPRE99XG4gKi9cbmZ1bmN0aW9uIGdldFJlbG9hZFVybChocmVmLCBzcmMpIHtcbiAgdmFyIHJldDtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgaHJlZiA9IG5vcm1hbGl6ZVVybChocmVmKTtcbiAgc3JjLnNvbWUoXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYXJyYXktY2FsbGJhY2stcmV0dXJuXG4gIGZ1bmN0aW9uICh1cmwpIHtcbiAgICBpZiAoaHJlZi5pbmRleE9mKHNyYykgPiAtMSkge1xuICAgICAgcmV0ID0gdXJsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IFtzcmNdXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gcmVsb2FkU3R5bGUoc3JjKSB7XG4gIGlmICghc3JjKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaW5rXCIpO1xuICB2YXIgbG9hZGVkID0gZmFsc2U7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB1cmwgPSBnZXRSZWxvYWRVcmwoZWwuaHJlZiwgc3JjKTtcbiAgICBpZiAoIWlzVXJsUmVxdWVzdCh1cmwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh1cmwpIHtcbiAgICAgIHVwZGF0ZUNzcyhlbCwgdXJsKTtcbiAgICAgIGxvYWRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxvYWRlZDtcbn1cbmZ1bmN0aW9uIHJlbG9hZEFsbCgpIHtcbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdXBkYXRlQ3NzKGVsKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVXJsUmVxdWVzdCh1cmwpIHtcbiAgLy8gQW4gVVJMIGlzIG5vdCBhbiByZXF1ZXN0IGlmXG5cbiAgLy8gSXQgaXMgbm90IGh0dHAgb3IgaHR0cHNcbiAgaWYgKCEvXlthLXpBLVpdW2EtekEtWlxcZCtcXC0uXSo6Ly50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtUT0RPfSBtb2R1bGVJZFxuICogQHBhcmFtIHtUT0RPfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7VE9ET31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlSWQsIG9wdGlvbnMpIHtcbiAgaWYgKG5vRG9jdW1lbnQpIHtcbiAgICBjb25zb2xlLmxvZyhcIm5vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTU1wiKTtcbiAgICByZXR1cm4gbm9vcDtcbiAgfVxuICB2YXIgZ2V0U2NyaXB0U3JjID0gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCk7XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgc3JjID0gZ2V0U2NyaXB0U3JjKG9wdGlvbnMuZmlsZW5hbWUpO1xuICAgIHZhciByZWxvYWRlZCA9IHJlbG9hZFN0eWxlKHNyYyk7XG4gICAgaWYgKG9wdGlvbnMubG9jYWxzKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIltITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzc1wiKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocmVsb2FkZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiW0hNUl0gY3NzIHJlbG9hZCAlc1wiLCBzcmMuam9pbihcIiBcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhcIltITVJdIFJlbG9hZCBhbGwgY3NzXCIpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJvdW5jZSh1cGRhdGUsIDUwKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aENvbXBvbmVudHNcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVybChwYXRoQ29tcG9uZW50cykge1xuICByZXR1cm4gcGF0aENvbXBvbmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgaXRlbSkge1xuICAgIHN3aXRjaCAoaXRlbSkge1xuICAgICAgY2FzZSBcIi4uXCI6XG4gICAgICAgIGFjY3VtdWxhdG9yLnBvcCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCIuXCI6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYWNjdW11bGF0b3IucHVzaChpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9LCAvKiogQHR5cGUge3N0cmluZ1tdfSAqL1tdKS5qb2luKFwiL1wiKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsU3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmxTdHJpbmcpIHtcbiAgdXJsU3RyaW5nID0gdXJsU3RyaW5nLnRyaW0oKTtcbiAgaWYgKC9eZGF0YTovaS50ZXN0KHVybFN0cmluZykpIHtcbiAgICByZXR1cm4gdXJsU3RyaW5nO1xuICB9XG4gIHZhciBwcm90b2NvbCA9IHVybFN0cmluZy5pbmRleE9mKFwiLy9cIikgIT09IC0xID8gdXJsU3RyaW5nLnNwbGl0KFwiLy9cIilbMF0gKyBcIi8vXCIgOiBcIlwiO1xuICB2YXIgY29tcG9uZW50cyA9IHVybFN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAocHJvdG9jb2wsIFwiaVwiKSwgXCJcIikuc3BsaXQoXCIvXCIpO1xuICB2YXIgaG9zdCA9IGNvbXBvbmVudHNbMF0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXC4kLywgXCJcIik7XG4gIGNvbXBvbmVudHNbMF0gPSBcIlwiO1xuICB2YXIgcGF0aCA9IG5vcm1hbGl6ZVVybChjb21wb25lbnRzKTtcbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGg7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvbm9ybWFsaXplV2hlZWwuanMnKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV4ZWN1dGlvbkVudmlyb25tZW50XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhIShcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgd2luZG93LmRvY3VtZW50ICYmXG4gIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG4pO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG4gICAgY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMDQtcHJlc2VudCBGYWNlYm9vay4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVXNlckFnZW50X0RFUFJFQ0FURURcbiAqL1xuXG4vKipcbiAqICBQcm92aWRlcyBlbnRpcmVseSBjbGllbnQtc2lkZSBVc2VyIEFnZW50IGFuZCBPUyBkZXRlY3Rpb24uIFlvdSBzaG91bGQgcHJlZmVyXG4gKiAgdGhlIG5vbi1kZXByZWNhdGVkIFVzZXJBZ2VudCBtb2R1bGUgd2hlbiBwb3NzaWJsZSwgd2hpY2ggZXhwb3NlcyBvdXJcbiAqICBhdXRob3JpdGF0aXZlIHNlcnZlci1zaWRlIFBIUC1iYXNlZCBkZXRlY3Rpb24gdG8gdGhlIGNsaWVudC5cbiAqXG4gKiAgVXNhZ2UgaXMgc3RyYWlnaHRmb3J3YXJkOlxuICpcbiAqICAgIGlmIChVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpKSB7XG4gKiAgICAgIC8vICBJRVxuICogICAgfVxuICpcbiAqICBZb3UgY2FuIGFsc28gZG8gdmVyc2lvbiBjaGVja3M6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgPj0gNykge1xuICogICAgICAvLyAgSUU3IG9yIGJldHRlclxuICogICAgfVxuICpcbiAqICBUaGUgYnJvd3NlciBmdW5jdGlvbnMgd2lsbCByZXR1cm4gTmFOIGlmIHRoZSBicm93c2VyIGRvZXMgbm90IG1hdGNoLCBzb1xuICogIHlvdSBjYW4gYWxzbyBkbyB2ZXJzaW9uIGNvbXBhcmVzIHRoZSBvdGhlciB3YXk6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgPCA3KSB7XG4gKiAgICAgIC8vICBJRTYgb3Igd29yc2VcbiAqICAgIH1cbiAqXG4gKiAgTm90ZSB0aGF0IHRoZSB2ZXJzaW9uIGlzIGEgZmxvYXQgYW5kIG1heSBpbmNsdWRlIGEgbWlub3IgdmVyc2lvbiBudW1iZXIsXG4gKiAgc28geW91IHNob3VsZCBhbHdheXMgdXNlIHJhbmdlIG9wZXJhdG9ycyB0byBwZXJmb3JtIGNvbXBhcmlzb25zLCBub3RcbiAqICBzdHJpY3QgZXF1YWxpdHkuXG4gKlxuICogICoqTm90ZToqKiBZb3Ugc2hvdWxkICoqc3Ryb25nbHkqKiBwcmVmZXIgY2FwYWJpbGl0eSBkZXRlY3Rpb24gdG8gYnJvd3NlclxuICogIHZlcnNpb24gZGV0ZWN0aW9uIHdoZXJlIGl0J3MgcmVhc29uYWJsZTpcbiAqXG4gKiAgICBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL3N1cHBvcnQuaHRtbFxuICpcbiAqICBGdXJ0aGVyLCB3ZSBoYXZlIGEgbGFyZ2UgbnVtYmVyIG9mIG1hdHVyZSB3cmFwcGVyIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlc1xuICogIHdoaWNoIGFic3RyYWN0IGF3YXkgbWFueSBicm93c2VyIGlycmVndWxhcml0aWVzLiBDaGVjayB0aGUgZG9jdW1lbnRhdGlvbixcbiAqICBncmVwIGZvciB0aGluZ3MsIG9yIGFzayBvbiBqYXZhc2NyaXB0QGxpc3RzLmZhY2Vib29rLmNvbSBiZWZvcmUgd3JpdGluZyB5ZXRcbiAqICBhbm90aGVyIGNvcHkgb2YgXCJldmVudCB8fCB3aW5kb3cuZXZlbnRcIi5cbiAqXG4gKi9cblxudmFyIF9wb3B1bGF0ZWQgPSBmYWxzZTtcblxuLy8gQnJvd3NlcnNcbnZhciBfaWUsIF9maXJlZm94LCBfb3BlcmEsIF93ZWJraXQsIF9jaHJvbWU7XG5cbi8vIEFjdHVhbCBJRSBicm93c2VyIGZvciBjb21wYXRpYmlsaXR5IG1vZGVcbnZhciBfaWVfcmVhbF92ZXJzaW9uO1xuXG4vLyBQbGF0Zm9ybXNcbnZhciBfb3N4LCBfd2luZG93cywgX2xpbnV4LCBfYW5kcm9pZDtcblxuLy8gQXJjaGl0ZWN0dXJlc1xudmFyIF93aW42NDtcblxuLy8gRGV2aWNlc1xudmFyIF9pcGhvbmUsIF9pcGFkLCBfbmF0aXZlO1xuXG52YXIgX21vYmlsZTtcblxuZnVuY3Rpb24gX3BvcHVsYXRlKCkge1xuICBpZiAoX3BvcHVsYXRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIF9wb3B1bGF0ZWQgPSB0cnVlO1xuXG4gIC8vIFRvIHdvcmsgYXJvdW5kIGJ1Z2d5IEpTIGxpYnJhcmllcyB0aGF0IGNhbid0IGhhbmRsZSBtdWx0aS1kaWdpdFxuICAvLyB2ZXJzaW9uIG51bWJlcnMsIE9wZXJhIDEwJ3MgdXNlciBhZ2VudCBzdHJpbmcgY2xhaW1zIGl0J3MgT3BlcmFcbiAgLy8gOSwgdGhlbiBsYXRlciBpbmNsdWRlcyBhIFZlcnNpb24vWC5ZIGZpZWxkOlxuICAvL1xuICAvLyBPcGVyYS85LjgwIChmb28pIFByZXN0by8yLjIuMTUgVmVyc2lvbi8xMC4xMFxuICB2YXIgdWFzID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgdmFyIGFnZW50ID0gLyg/Ok1TSUUuKFxcZCtcXC5cXGQrKSl8KD86KD86RmlyZWZveHxHcmFuUGFyYWRpc298SWNld2Vhc2VsKS4oXFxkK1xcLlxcZCspKXwoPzpPcGVyYSg/Oi4rVmVyc2lvbi58LikoXFxkK1xcLlxcZCspKXwoPzpBcHBsZVdlYktpdC4oXFxkKyg/OlxcLlxcZCspPykpfCg/OlRyaWRlbnRcXC9cXGQrXFwuXFxkKy4qcnY6KFxcZCtcXC5cXGQrKSkvLmV4ZWModWFzKTtcbiAgdmFyIG9zICAgID0gLyhNYWMgT1MgWCl8KFdpbmRvd3MpfChMaW51eCkvLmV4ZWModWFzKTtcblxuICBfaXBob25lID0gL1xcYihpUGhvbmV8aVBbYW9dZCkvLmV4ZWModWFzKTtcbiAgX2lwYWQgPSAvXFxiKGlQW2FvXWQpLy5leGVjKHVhcyk7XG4gIF9hbmRyb2lkID0gL0FuZHJvaWQvaS5leGVjKHVhcyk7XG4gIF9uYXRpdmUgPSAvRkJBTlxcL1xcdys7L2kuZXhlYyh1YXMpO1xuICBfbW9iaWxlID0gL01vYmlsZS9pLmV4ZWModWFzKTtcblxuICAvLyBOb3RlIHRoYXQgdGhlIElFIHRlYW0gYmxvZyB3b3VsZCBoYXZlIHlvdSBiZWxpZXZlIHlvdSBzaG91bGQgYmUgY2hlY2tpbmdcbiAgLy8gZm9yICdXaW42NDsgeDY0Jy4gIEJ1dCBNU0ROIHRoZW4gcmV2ZWFscyB0aGF0IHlvdSBjYW4gYWN0dWFsbHkgYmUgY29taW5nXG4gIC8vIGZyb20gZWl0aGVyIHg2NCBvciBpYTY0OyAgc28gdWx0aW1hdGVseSwgeW91IHNob3VsZCBqdXN0IGNoZWNrIGZvciBXaW42NFxuICAvLyBhcyBpbiBpbmRpY2F0b3Igb2Ygd2hldGhlciB5b3UncmUgaW4gNjQtYml0IElFLiAgMzItYml0IElFIG9uIDY0LWJpdFxuICAvLyBXaW5kb3dzIHdpbGwgc2VuZCAnV09XNjQnIGluc3RlYWQuXG4gIF93aW42NCA9ICEhKC9XaW42NC8uZXhlYyh1YXMpKTtcblxuICBpZiAoYWdlbnQpIHtcbiAgICBfaWUgPSBhZ2VudFsxXSA/IHBhcnNlRmxvYXQoYWdlbnRbMV0pIDogKFxuICAgICAgICAgIGFnZW50WzVdID8gcGFyc2VGbG9hdChhZ2VudFs1XSkgOiBOYU4pO1xuICAgIC8vIElFIGNvbXBhdGliaWxpdHkgbW9kZVxuICAgIGlmIChfaWUgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSB7XG4gICAgICBfaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG4gICAgfVxuICAgIC8vIGdyYWIgdGhlIFwidHJ1ZVwiIGllIHZlcnNpb24gZnJvbSB0aGUgdHJpZGVudCB0b2tlbiBpZiBhdmFpbGFibGVcbiAgICB2YXIgdHJpZGVudCA9IC8oPzpUcmlkZW50XFwvKFxcZCsuXFxkKykpLy5leGVjKHVhcyk7XG4gICAgX2llX3JlYWxfdmVyc2lvbiA9IHRyaWRlbnQgPyBwYXJzZUZsb2F0KHRyaWRlbnRbMV0pICsgNCA6IF9pZTtcblxuICAgIF9maXJlZm94ID0gYWdlbnRbMl0gPyBwYXJzZUZsb2F0KGFnZW50WzJdKSA6IE5hTjtcbiAgICBfb3BlcmEgICA9IGFnZW50WzNdID8gcGFyc2VGbG9hdChhZ2VudFszXSkgOiBOYU47XG4gICAgX3dlYmtpdCAgPSBhZ2VudFs0XSA/IHBhcnNlRmxvYXQoYWdlbnRbNF0pIDogTmFOO1xuICAgIGlmIChfd2Via2l0KSB7XG4gICAgICAvLyBXZSBkbyBub3QgYWRkIHRoZSByZWdleHAgdG8gdGhlIGFib3ZlIHRlc3QsIGJlY2F1c2UgaXQgd2lsbCBhbHdheXNcbiAgICAgIC8vIG1hdGNoICdzYWZhcmknIG9ubHkgc2luY2UgJ0FwcGxlV2ViS2l0JyBhcHBlYXJzIGJlZm9yZSAnQ2hyb21lJyBpblxuICAgICAgLy8gdGhlIHVzZXJBZ2VudCBzdHJpbmcuXG4gICAgICBhZ2VudCA9IC8oPzpDaHJvbWVcXC8oXFxkK1xcLlxcZCspKS8uZXhlYyh1YXMpO1xuICAgICAgX2Nocm9tZSA9IGFnZW50ICYmIGFnZW50WzFdID8gcGFyc2VGbG9hdChhZ2VudFsxXSkgOiBOYU47XG4gICAgfSBlbHNlIHtcbiAgICAgIF9jaHJvbWUgPSBOYU47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIF9pZSA9IF9maXJlZm94ID0gX29wZXJhID0gX2Nocm9tZSA9IF93ZWJraXQgPSBOYU47XG4gIH1cblxuICBpZiAob3MpIHtcbiAgICBpZiAob3NbMV0pIHtcbiAgICAgIC8vIERldGVjdCBPUyBYIHZlcnNpb24uICBJZiBubyB2ZXJzaW9uIG51bWJlciBtYXRjaGVzLCBzZXQgX29zeCB0byB0cnVlLlxuICAgICAgLy8gVmVyc2lvbiBleGFtcGxlczogIDEwLCAxMF82XzEsIDEwLjdcbiAgICAgIC8vIFBhcnNlcyB2ZXJzaW9uIG51bWJlciBhcyBhIGZsb2F0LCB0YWtpbmcgb25seSBmaXJzdCB0d28gc2V0cyBvZlxuICAgICAgLy8gZGlnaXRzLiAgSWYgb25seSBvbmUgc2V0IG9mIGRpZ2l0cyBpcyBmb3VuZCwgcmV0dXJucyBqdXN0IHRoZSBtYWpvclxuICAgICAgLy8gdmVyc2lvbiBudW1iZXIuXG4gICAgICB2YXIgdmVyID0gLyg/Ok1hYyBPUyBYIChcXGQrKD86Wy5fXVxcZCspPykpLy5leGVjKHVhcyk7XG5cbiAgICAgIF9vc3ggPSB2ZXIgPyBwYXJzZUZsb2F0KHZlclsxXS5yZXBsYWNlKCdfJywgJy4nKSkgOiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBfb3N4ID0gZmFsc2U7XG4gICAgfVxuICAgIF93aW5kb3dzID0gISFvc1syXTtcbiAgICBfbGludXggICA9ICEhb3NbM107XG4gIH0gZWxzZSB7XG4gICAgX29zeCA9IF93aW5kb3dzID0gX2xpbnV4ID0gZmFsc2U7XG4gIH1cbn1cblxudmFyIFVzZXJBZ2VudF9ERVBSRUNBVEVEID0ge1xuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIEludGVybmV0IEV4cGxvcmVyLlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBpZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgd2UncmUgaW4gSW50ZXJuZXQgRXhwbG9yZXIgY29tcGF0aWJpbGl0eSBtb2RlLlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgdHJ1ZSBpZiBpbiBjb21wYXRpYmlsaXR5IG1vZGUsIGZhbHNlIGlmXG4gICAqIG5vdCBjb21wYXRpYmlsaXR5IG1vZGUgb3Igbm90IGllXG4gICAqL1xuICBpZUNvbXBhdGliaWxpdHlNb2RlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgKF9pZV9yZWFsX3ZlcnNpb24gPiBfaWUpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgNjQtYml0IElFLiAgUmVhbGx5LCB0aGlzIGlzIGtpbmQgb2Ygd2VhayBzYXVjZTsgIHdlXG4gICAqIG9ubHkgbmVlZCB0aGlzIGJlY2F1c2UgU2t5cGUgY2FuJ3QgaGFuZGxlIDY0LWJpdCBJRSB5ZXQuICBXZSBuZWVkIHRvIHJlbW92ZVxuICAgKiB0aGlzIHdoZW4gd2UgZG9uJ3QgbmVlZCBpdCAtLSB0cmFja2VkIGJ5ICM2MDE5NTcuXG4gICAqL1xuICBpZTY0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSAmJiBfd2luNjQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgRmlyZWZveC5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgZmlyZWZveDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9maXJlZm94O1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgT3BlcmEuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIG9wZXJhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX29wZXJhO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgV2ViS2l0LlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICB3ZWJraXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfd2Via2l0O1xuICB9LFxuXG4gIC8qKlxuICAgKiAgRm9yIFB1c2hcbiAgICogIFdJTEwgQkUgUkVNT1ZFRCBWRVJZIFNPT04uIFVzZSBVc2VyQWdlbnRfREVQUkVDQVRFRC53ZWJraXRcbiAgICovXG4gIHNhZmFyaTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFVzZXJBZ2VudF9ERVBSRUNBVEVELndlYmtpdCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIGEgQ2hyb21lIGJyb3dzZXIuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGNocm9tZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfY2hyb21lO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIFdpbmRvd3MuXG4gICAqXG4gICAqICBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyJ3MgT1MgaXMgV2luZG93cy5cbiAgICovXG4gIHdpbmRvd3M6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfd2luZG93cztcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBNYWMgT1MgWC5cbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8Ym9vbCAgIFJldHVybnMgYSBmbG9hdCBpZiBhIHZlcnNpb24gbnVtYmVyIGlzIGRldGVjdGVkLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIHRydWUvZmFsc2UuXG4gICAqL1xuICBvc3g6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfb3N4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIExpbnV4LlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyJ3MgT1MgaXMgc29tZSBmbGF2b3Igb2YgTGludXguXG4gICAqL1xuICBsaW51eDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9saW51eDtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBvbiBhbiBpUGhvbmUgb3IgaVBvZCBwbGF0Zm9ybS5cbiAgICpcbiAgICogQHJldHVybiBib29sIGB0cnVlJyBpZiB0aGUgdXNlciBpcyBydW5uaW5nIHNvbWUgZmxhdm9yIG9mIHRoZVxuICAgKiAgICBpUGhvbmUgT1MuXG4gICAqL1xuICBpcGhvbmU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaXBob25lO1xuICB9LFxuXG4gIG1vYmlsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IChfaXBob25lIHx8IF9pcGFkIHx8IF9hbmRyb2lkIHx8IF9tb2JpbGUpO1xuICB9LFxuXG4gIG5hdGl2ZUFwcDogZnVuY3Rpb24oKSB7XG4gICAgLy8gd2Vidmlld3MgaW5zaWRlIG9mIHRoZSBuYXRpdmUgYXBwc1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfbmF0aXZlO1xuICB9LFxuXG4gIGFuZHJvaWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfYW5kcm9pZDtcbiAgfSxcblxuICBpcGFkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2lwYWQ7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVXNlckFnZW50X0RFUFJFQ0FURUQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNFdmVudFN1cHBvcnRlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgdXNlSGFzRmVhdHVyZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdXNlSGFzRmVhdHVyZSA9XG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiZcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LlxuICpcbiAqIE5PVEU6IFRoaXMgd2lsbCBub3Qgd29yayBjb3JyZWN0bHkgZm9yIG5vbi1nZW5lcmljIGV2ZW50cyBzdWNoIGFzIGBjaGFuZ2VgLFxuICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuXG4gKlxuICogQm9ycm93cyBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lU3VmZml4IEV2ZW50IG5hbWUsIGUuZy4gXCJjbGlja1wiLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gY2FwdHVyZSBDaGVjayBpZiB0aGUgY2FwdHVyZSBwaGFzZSBpcyBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqIEBsaWNlbnNlIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuICovXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZVN1ZmZpeCwgY2FwdHVyZSkge1xuICBpZiAoIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSB8fFxuICAgICAgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBub3JtYWxpemVXaGVlbFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnRfREVQUkVDQVRFRCA9IHJlcXVpcmUoJy4vVXNlckFnZW50X0RFUFJFQ0FURUQnKTtcblxudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcblxuXG4vLyBSZWFzb25hYmxlIGRlZmF1bHRzXG52YXIgUElYRUxfU1RFUCAgPSAxMDtcbnZhciBMSU5FX0hFSUdIVCA9IDQwO1xudmFyIFBBR0VfSEVJR0hUID0gODAwO1xuXG4vKipcbiAqIE1vdXNlIHdoZWVsIChhbmQgMi1maW5nZXIgdHJhY2twYWQpIHN1cHBvcnQgb24gdGhlIHdlYiBzdWNrcy4gIEl0IGlzXG4gKiBjb21wbGljYXRlZCwgdGh1cyB0aGlzIGRvYyBpcyBsb25nIGFuZCAoaG9wZWZ1bGx5KSBkZXRhaWxlZCBlbm91Z2ggdG8gYW5zd2VyXG4gKiB5b3VyIHF1ZXN0aW9ucy5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byByZWFjdCB0byB0aGUgbW91c2Ugd2hlZWwgaW4gYSBwcmVkaWN0YWJsZSB3YXksIHRoaXMgY29kZSBpc1xuICogbGlrZSB5b3VyIGJlc3Rlc3QgZnJpZW5kLiAqIGh1Z3MgKlxuICpcbiAqIEFzIG9mIHRvZGF5LCB0aGVyZSBhcmUgNCBET00gZXZlbnQgdHlwZXMgeW91IGNhbiBsaXN0ZW4gdG86XG4gKlxuICogICAnd2hlZWwnICAgICAgICAgICAgICAgIC0tIENocm9tZSgzMSspLCBGRigxNyspLCBJRSg5KylcbiAqICAgJ21vdXNld2hlZWwnICAgICAgICAgICAtLSBDaHJvbWUsIElFKDYrKSwgT3BlcmEsIFNhZmFyaVxuICogICAnTW96TW91c2VQaXhlbFNjcm9sbCcgIC0tIEZGKDMuNSBvbmx5ISkgKDIwMTAtMjAxMykgLS0gZG9uJ3QgYm90aGVyIVxuICogICAnRE9NTW91c2VTY3JvbGwnICAgICAgIC0tIEZGKDAuOS43Kykgc2luY2UgMjAwM1xuICpcbiAqIFNvIHdoYXQgdG8gZG8/ICBUaGUgaXMgdGhlIGJlc3Q6XG4gKlxuICogICBub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUoKTtcbiAqXG4gKiBJbiB5b3VyIGV2ZW50IGNhbGxiYWNrLCB1c2UgdGhpcyBjb2RlIHRvIGdldCBzYW5lIGludGVycHJldGF0aW9uIG9mIHRoZVxuICogZGVsdGFzLiAgVGhpcyBjb2RlIHdpbGwgcmV0dXJuIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXM6XG4gKlxuICogICBzcGluWCAgIC0tIG5vcm1hbGl6ZWQgc3BpbiBzcGVlZCAodXNlIGZvciB6b29tKSAtIHggcGxhbmVcbiAqICAgc3BpblkgICAtLSBcIiAtIHkgcGxhbmVcbiAqICAgcGl4ZWxYICAtLSBub3JtYWxpemVkIGRpc3RhbmNlICh0byBwaXhlbHMpIC0geCBwbGFuZVxuICogICBwaXhlbFkgIC0tIFwiIC0geSBwbGFuZVxuICpcbiAqIFdoZWVsIHZhbHVlcyBhcmUgcHJvdmlkZWQgYnkgdGhlIGJyb3dzZXIgYXNzdW1pbmcgeW91IGFyZSB1c2luZyB0aGUgd2hlZWwgdG9cbiAqIHNjcm9sbCBhIHdlYiBwYWdlIGJ5IGEgbnVtYmVyIG9mIGxpbmVzIG9yIHBpeGVscyAob3IgcGFnZXMpLiAgVmFsdWVzIGNhbiB2YXJ5XG4gKiBzaWduaWZpY2FudGx5IG9uIGRpZmZlcmVudCBwbGF0Zm9ybXMgYW5kIGJyb3dzZXJzLCBmb3JnZXR0aW5nIHRoYXQgeW91IGNhblxuICogc2Nyb2xsIGF0IGRpZmZlcmVudCBzcGVlZHMuICBTb21lIGRldmljZXMgKGxpa2UgdHJhY2twYWRzKSBlbWl0IG1vcmUgZXZlbnRzXG4gKiBhdCBzbWFsbGVyIGluY3JlbWVudHMgd2l0aCBmaW5lIGdyYW51bGFyaXR5LCBhbmQgc29tZSBlbWl0IG1hc3NpdmUganVtcHMgd2l0aFxuICogbGluZWFyIHNwZWVkIG9yIGFjY2VsZXJhdGlvbi5cbiAqXG4gKiBUaGlzIGNvZGUgZG9lcyBpdHMgYmVzdCB0byBub3JtYWxpemUgdGhlIGRlbHRhcyBmb3IgeW91OlxuICpcbiAqICAgLSBzcGluIGlzIHRyeWluZyB0byBub3JtYWxpemUgaG93IGZhciB0aGUgd2hlZWwgd2FzIHNwdW4gKG9yIHRyYWNrcGFkXG4gKiAgICAgZHJhZ2dlZCkuICBUaGlzIGlzIHN1cGVyIHVzZWZ1bCBmb3Igem9vbSBzdXBwb3J0IHdoZXJlIHlvdSB3YW50IHRvXG4gKiAgICAgdGhyb3cgYXdheSB0aGUgY2h1bmt5IHNjcm9sbCBzdGVwcyBvbiB0aGUgUEMgYW5kIG1ha2UgdGhvc2UgZXF1YWwgdG9cbiAqICAgICB0aGUgc2xvdyBhbmQgc21vb3RoIHRpbnkgc3RlcHMgb24gdGhlIE1hYy4gS2V5IGRhdGE6IFRoaXMgY29kZSB0cmllcyB0b1xuICogICAgIHJlc29sdmUgYSBzaW5nbGUgc2xvdyBzdGVwIG9uIGEgd2hlZWwgdG8gMS5cbiAqXG4gKiAgIC0gcGl4ZWwgaXMgbm9ybWFsaXppbmcgdGhlIGRlc2lyZWQgc2Nyb2xsIGRlbHRhIGluIHBpeGVsIHVuaXRzLiAgWW91J2xsXG4gKiAgICAgZ2V0IHRoZSBjcmF6eSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGJyb3dzZXJzLCBidXQgYXQgbGVhc3QgaXQnbGwgYmUgaW5cbiAqICAgICBwaXhlbHMhXG4gKlxuICogICAtIHBvc2l0aXZlIHZhbHVlIGluZGljYXRlcyBzY3JvbGxpbmcgRE9XTi9SSUdIVCwgbmVnYXRpdmUgVVAvTEVGVC4gIFRoaXNcbiAqICAgICBzaG91bGQgdHJhbnNsYXRlIHRvIHBvc2l0aXZlIHZhbHVlIHpvb21pbmcgSU4sIG5lZ2F0aXZlIHpvb21pbmcgT1VULlxuICogICAgIFRoaXMgbWF0Y2hlcyB0aGUgbmV3ZXIgJ3doZWVsJyBldmVudC5cbiAqXG4gKiBXaHkgYXJlIHRoZXJlIHNwaW5YLCBzcGluWSAob3IgcGl4ZWxzKT9cbiAqXG4gKiAgIC0gc3BpblggaXMgYSAyLWZpbmdlciBzaWRlIGRyYWcgb24gdGhlIHRyYWNrcGFkLCBhbmQgYSBzaGlmdCArIHdoZWVsIHR1cm5cbiAqICAgICB3aXRoIGEgbW91c2UuICBJdCByZXN1bHRzIGluIHNpZGUtc2Nyb2xsaW5nIGluIHRoZSBicm93c2VyIGJ5IGRlZmF1bHQuXG4gKlxuICogICAtIHNwaW5ZIGlzIHdoYXQgeW91IGV4cGVjdCAtLSBpdCdzIHRoZSBjbGFzc2ljIGF4aXMgb2YgYSBtb3VzZSB3aGVlbC5cbiAqXG4gKiAgIC0gSSBkcm9wcGVkIHNwaW5aL3BpeGVsWi4gIEl0IGlzIHN1cHBvcnRlZCBieSB0aGUgRE9NIDMgJ3doZWVsJyBldmVudCBhbmRcbiAqICAgICBwcm9iYWJseSBpcyBieSBicm93c2VycyBpbiBjb25qdW5jdGlvbiB3aXRoIGZhbmN5IDNEIGNvbnRyb2xsZXJzIC4uIGJ1dFxuICogICAgIHlvdSBrbm93LlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGluZm86XG4gKlxuICogRXhhbXBsZXMgb2YgJ3doZWVsJyBldmVudCBpZiB5b3Ugc2Nyb2xsIHNsb3dseSAoZG93bikgYnkgb25lIHN0ZXAgd2l0aCBhblxuICogYXZlcmFnZSBtb3VzZTpcbiAqXG4gKiAgIE9TIFggKyBDaHJvbWUgIChtb3VzZSkgICAgIC0gICAgNCAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICogICBPUyBYICsgU2FmYXJpICAobW91c2UpICAgICAtICBOL0EgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIC0xMilcbiAqICAgT1MgWCArIEZpcmVmb3ggKG1vdXNlKSAgICAgLSAgICAwLjEgbGluZSAgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gKiAgIFdpbjggKyBDaHJvbWUgIChtb3VzZSkgICAgIC0gIDEwMCAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICogICBXaW44ICsgRmlyZWZveCAobW91c2UpICAgICAtICAgIDMgICBsaW5lICBkZWx0YSAgKHdoZWVsRGVsdGEgLTEyMClcbiAqXG4gKiBPbiB0aGUgdHJhY2twYWQ6XG4gKlxuICogICBPUyBYICsgQ2hyb21lICAodHJhY2twYWQpICAtICAgIDIgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgICAtNilcbiAqICAgT1MgWCArIEZpcmVmb3ggKHRyYWNrcGFkKSAgLSAgICAxICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gKlxuICogT24gb3RoZXIvb2xkZXIgYnJvd3NlcnMuLiBpdCdzIG1vcmUgY29tcGxpY2F0ZWQgYXMgdGhlcmUgY2FuIGJlIG11bHRpcGxlIGFuZFxuICogYWxzbyBtaXNzaW5nIGRlbHRhIHZhbHVlcy5cbiAqXG4gKiBUaGUgJ3doZWVsJyBldmVudCBpcyBtb3JlIHN0YW5kYXJkOlxuICpcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLXdoZWVsZXZlbnRzXG4gKlxuICogVGhlIGJhc2ljcyBpcyB0aGF0IGl0IGluY2x1ZGVzIGEgdW5pdCwgZGVsdGFNb2RlIChwaXhlbHMsIGxpbmVzLCBwYWdlcyksIGFuZFxuICogZGVsdGFYLCBkZWx0YVkgYW5kIGRlbHRhWi4gIFNvbWUgYnJvd3NlcnMgcHJvdmlkZSBvdGhlciB2YWx1ZXMgdG8gbWFpbnRhaW5cbiAqIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBldmVudHMuICBUaG9zZSBvdGhlciB2YWx1ZXMgaGVscCB1c1xuICogYmV0dGVyIG5vcm1hbGl6ZSBzcGluIHNwZWVkLiAgRXhhbXBsZSBvZiB3aGF0IHRoZSBicm93c2VycyBwcm92aWRlOlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB8IGV2ZW50LndoZWVsRGVsdGEgfCBldmVudC5kZXRhaWxcbiAqICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tXG4gKiAgICAgICAgICBTYWZhcmkgdjUvT1MgWCAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICAgU2FmYXJpIHY1L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgQ2hyb21lIHYxNy9PUyBYICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgIENocm9tZSB2MTcvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICAgICAgICAgSUU5L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgdW5kZWZpbmVkXG4gKiAgICAgICAgIEZpcmVmb3ggdjQvT1MgWCAgfCAgICAgdW5kZWZpbmVkICAgIHwgICAgICAgMVxuICogICAgICAgICBGaXJlZm94IHY0L1dpbjcgIHwgICAgIHVuZGVmaW5lZCAgICB8ICAgICAgIDNcbiAqXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdoZWVsKC8qb2JqZWN0Ki8gZXZlbnQpIC8qb2JqZWN0Ki8ge1xuICB2YXIgc1ggPSAwLCBzWSA9IDAsICAgICAgIC8vIHNwaW5YLCBzcGluWVxuICAgICAgcFggPSAwLCBwWSA9IDA7ICAgICAgIC8vIHBpeGVsWCwgcGl4ZWxZXG5cbiAgLy8gTGVnYWN5XG4gIGlmICgnZGV0YWlsJyAgICAgIGluIGV2ZW50KSB7IHNZID0gZXZlbnQuZGV0YWlsOyB9XG4gIGlmICgnd2hlZWxEZWx0YScgIGluIGV2ZW50KSB7IHNZID0gLWV2ZW50LndoZWVsRGVsdGEgLyAxMjA7IH1cbiAgaWYgKCd3aGVlbERlbHRhWScgaW4gZXZlbnQpIHsgc1kgPSAtZXZlbnQud2hlZWxEZWx0YVkgLyAxMjA7IH1cbiAgaWYgKCd3aGVlbERlbHRhWCcgaW4gZXZlbnQpIHsgc1ggPSAtZXZlbnQud2hlZWxEZWx0YVggLyAxMjA7IH1cblxuICAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG4gIGlmICggJ2F4aXMnIGluIGV2ZW50ICYmIGV2ZW50LmF4aXMgPT09IGV2ZW50LkhPUklaT05UQUxfQVhJUyApIHtcbiAgICBzWCA9IHNZO1xuICAgIHNZID0gMDtcbiAgfVxuXG4gIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICBwWSA9IHNZICogUElYRUxfU1RFUDtcblxuICBpZiAoJ2RlbHRhWScgaW4gZXZlbnQpIHsgcFkgPSBldmVudC5kZWx0YVk7IH1cbiAgaWYgKCdkZWx0YVgnIGluIGV2ZW50KSB7IHBYID0gZXZlbnQuZGVsdGFYOyB9XG5cbiAgaWYgKChwWCB8fCBwWSkgJiYgZXZlbnQuZGVsdGFNb2RlKSB7XG4gICAgaWYgKGV2ZW50LmRlbHRhTW9kZSA9PSAxKSB7ICAgICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgcFkgKj0gTElORV9IRUlHSFQ7XG4gICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbHRhIGluIFBBR0UgdW5pdHNcbiAgICAgIHBYICo9IFBBR0VfSEVJR0hUO1xuICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbC1iYWNrIGlmIHNwaW4gY2Fubm90IGJlIGRldGVybWluZWRcbiAgaWYgKHBYICYmICFzWCkgeyBzWCA9IChwWCA8IDEpID8gLTEgOiAxOyB9XG4gIGlmIChwWSAmJiAhc1kpIHsgc1kgPSAocFkgPCAxKSA/IC0xIDogMTsgfVxuXG4gIHJldHVybiB7IHNwaW5YICA6IHNYLFxuICAgICAgICAgICBzcGluWSAgOiBzWSxcbiAgICAgICAgICAgcGl4ZWxYIDogcFgsXG4gICAgICAgICAgIHBpeGVsWSA6IHBZIH07XG59XG5cblxuLyoqXG4gKiBUaGUgYmVzdCBjb21iaW5hdGlvbiBpZiB5b3UgcHJlZmVyIHNwaW5YICsgc3Bpblkgbm9ybWFsaXphdGlvbi4gIEl0IGZhdm9yc1xuICogdGhlIG9sZGVyIERPTU1vdXNlU2Nyb2xsIGZvciBGaXJlZm94LCBhcyBGRiBkb2VzIG5vdCBpbmNsdWRlIHdoZWVsRGVsdGEgd2l0aFxuICogJ3doZWVsJyBldmVudCwgbWFraW5nIHNwaW4gc3BlZWQgZGV0ZXJtaW5hdGlvbiBpbXBvc3NpYmxlLlxuICovXG5ub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUgPSBmdW5jdGlvbigpIC8qc3RyaW5nKi8ge1xuICByZXR1cm4gKFVzZXJBZ2VudF9ERVBSRUNBVEVELmZpcmVmb3goKSlcbiAgICAgICAgICAgPyAnRE9NTW91c2VTY3JvbGwnXG4gICAgICAgICAgIDogKGlzRXZlbnRTdXBwb3J0ZWQoJ3doZWVsJykpXG4gICAgICAgICAgICAgICA/ICd3aGVlbCdcbiAgICAgICAgICAgICAgIDogJ21vdXNld2hlZWwnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemVXaGVlbDtcbiIsIi8vIGNoZWNrIGRvY3VtZW50IGZpcnN0IHNvIGl0IGRvZXNuJ3QgZXJyb3IgaW4gbm9kZS5qc1xudmFyIHN0eWxlID0gdHlwZW9mIGRvY3VtZW50ICE9ICd1bmRlZmluZWQnXG4gID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlXG4gIDoge31cblxudmFyIHByZWZpeGVzID0gWydPJywgJ21zJywgJ01veicsICdXZWJraXQnXVxudmFyIHVwcGVyID0gLyhbQS1aXSkvZ1xudmFyIG1lbW8gPSB7fVxuXG4vKipcbiAqIHByZWZpeCBga2V5YFxuICpcbiAqICAgcHJlZml4KCd0cmFuc2Zvcm0nKSAvLyA9PiBXZWJraXRUcmFuc2Zvcm1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBwcmVmaXgoa2V5KXtcbiAgLy8gQ2FtZWwgY2FzZVxuICBrZXkgPSBrZXkucmVwbGFjZSgvLShbYS16XSkvZywgZnVuY3Rpb24oXywgY2hhcil7XG4gICAgcmV0dXJuIGNoYXIudG9VcHBlckNhc2UoKVxuICB9KVxuXG4gIC8vIFdpdGhvdXQgcHJlZml4XG4gIGlmIChzdHlsZVtrZXldICE9PSB1bmRlZmluZWQpIHJldHVybiBrZXlcblxuICAvLyBXaXRoIHByZWZpeFxuICB2YXIgS2V5ID0ga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpXG4gIHZhciBpID0gcHJlZml4ZXMubGVuZ3RoXG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgbmFtZSA9IHByZWZpeGVzW2ldICsgS2V5XG4gICAgaWYgKHN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHJldHVybiBuYW1lXG4gIH1cblxuICByZXR1cm4ga2V5XG59XG5cbi8qKlxuICogTWVtb2l6ZWQgdmVyc2lvbiBvZiBgcHJlZml4YFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHByZWZpeE1lbW96aWVkKGtleSl7XG4gIHJldHVybiBrZXkgaW4gbWVtb1xuICAgID8gbWVtb1trZXldXG4gICAgOiBtZW1vW2tleV0gPSBwcmVmaXgoa2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRhc2hlZCBwcmVmaXhcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBwcmVmaXhEYXNoZWQoa2V5KXtcbiAga2V5ID0gcHJlZml4KGtleSlcbiAgaWYgKHVwcGVyLnRlc3Qoa2V5KSkge1xuICAgIGtleSA9ICctJyArIGtleS5yZXBsYWNlKHVwcGVyLCAnLSQxJylcbiAgICB1cHBlci5sYXN0SW5kZXggPSAwXG4gIH1cbiAgcmV0dXJuIGtleS50b0xvd2VyQ2FzZSgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJlZml4TWVtb3ppZWRcbm1vZHVsZS5leHBvcnRzLmRhc2ggPSBwcmVmaXhEYXNoZWRcbiIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IHR5cGVvZiBpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgaSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vdXRpbHMvbG9nLmpzXCI7XG52YXIgV2ViU29ja2V0Q2xpZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICovXG4gIGZ1bmN0aW9uIFdlYlNvY2tldENsaWVudCh1cmwpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2ViU29ja2V0Q2xpZW50KTtcbiAgICB0aGlzLmNsaWVudCA9IG5ldyBXZWJTb2NrZXQodXJsKTtcbiAgICB0aGlzLmNsaWVudC5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoV2ViU29ja2V0Q2xpZW50LCBbe1xuICAgIGtleTogXCJvbk9wZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25PcGVuKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9ub3BlbiA9IGY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJvbkNsb3NlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xvc2UoZikge1xuICAgICAgdGhpcy5jbGllbnQub25jbG9zZSA9IGY7XG4gICAgfVxuXG4gICAgLy8gY2FsbCBmIHdpdGggdGhlIG1lc3NhZ2Ugc3RyaW5nIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwib25NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVzc2FnZShmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmKGUuZGF0YSk7XG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xufSgpO1xuZXhwb3J0IHsgV2ViU29ja2V0Q2xpZW50IGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSB0eXBlb2YgaSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIHQgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIGkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyogZ2xvYmFsIF9fcmVzb3VyY2VRdWVyeSwgX193ZWJwYWNrX2hhc2hfXyAqL1xuLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJ3ZWJwYWNrL21vZHVsZVwiIC8+XG5pbXBvcnQgd2VicGFja0hvdExvZyBmcm9tIFwid2VicGFjay9ob3QvbG9nLmpzXCI7XG5pbXBvcnQgc3RyaXBBbnNpIGZyb20gXCIuL3V0aWxzL3N0cmlwQW5zaS5qc1wiO1xuaW1wb3J0IHBhcnNlVVJMIGZyb20gXCIuL3V0aWxzL3BhcnNlVVJMLmpzXCI7XG5pbXBvcnQgc29ja2V0IGZyb20gXCIuL3NvY2tldC5qc1wiO1xuaW1wb3J0IHsgZm9ybWF0UHJvYmxlbSwgY3JlYXRlT3ZlcmxheSB9IGZyb20gXCIuL292ZXJsYXkuanNcIjtcbmltcG9ydCB7IGxvZywgbG9nRW5hYmxlZEZlYXR1cmVzLCBzZXRMb2dMZXZlbCB9IGZyb20gXCIuL3V0aWxzL2xvZy5qc1wiO1xuaW1wb3J0IHNlbmRNZXNzYWdlIGZyb20gXCIuL3V0aWxzL3NlbmRNZXNzYWdlLmpzXCI7XG5pbXBvcnQgcmVsb2FkQXBwIGZyb20gXCIuL3V0aWxzL3JlbG9hZEFwcC5qc1wiO1xuaW1wb3J0IGNyZWF0ZVNvY2tldFVSTCBmcm9tIFwiLi91dGlscy9jcmVhdGVTb2NrZXRVUkwuanNcIjtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPdmVybGF5T3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFuIHwgKGVycm9yOiBFcnJvcikgPT4gYm9vbGVhbn0gW3dhcm5pbmdzXVxuICogQHByb3BlcnR5IHtib29sZWFuIHwgKGVycm9yOiBFcnJvcikgPT4gYm9vbGVhbn0gW2Vycm9yc11cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IChlcnJvcjogRXJyb3IpID0+IGJvb2xlYW59IFtydW50aW1lRXJyb3JzXVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt0cnVzdGVkVHlwZXNQb2xpY3lOYW1lXVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gT3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBob3RcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbGl2ZVJlbG9hZFxuICogQHByb3BlcnR5IHtib29sZWFufSBwcm9ncmVzc1xuICogQHByb3BlcnR5IHtib29sZWFuIHwgT3ZlcmxheU9wdGlvbnN9IG92ZXJsYXlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbG9nZ2luZ11cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbcmVjb25uZWN0XVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3RhdHVzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzVW5sb2FkaW5nXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY3VycmVudEhhc2hcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcHJldmlvdXNIYXNoXVxuICovXG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFuIHwgeyB3YXJuaW5ncz86IGJvb2xlYW4gfCBzdHJpbmc7IGVycm9ycz86IGJvb2xlYW4gfCBzdHJpbmc7IHJ1bnRpbWVFcnJvcnM/OiBib29sZWFuIHwgc3RyaW5nOyB9fSBvdmVybGF5T3B0aW9uc1xuICovXG52YXIgZGVjb2RlT3ZlcmxheU9wdGlvbnMgPSBmdW5jdGlvbiBkZWNvZGVPdmVybGF5T3B0aW9ucyhvdmVybGF5T3B0aW9ucykge1xuICBpZiAodHlwZW9mIG92ZXJsYXlPcHRpb25zID09PSBcIm9iamVjdFwiKSB7XG4gICAgW1wid2FybmluZ3NcIiwgXCJlcnJvcnNcIiwgXCJydW50aW1lRXJyb3JzXCJdLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICBpZiAodHlwZW9mIG92ZXJsYXlPcHRpb25zW3Byb3BlcnR5XSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YXIgb3ZlcmxheUZpbHRlckZ1bmN0aW9uU3RyaW5nID0gZGVjb2RlVVJJQ29tcG9uZW50KG92ZXJsYXlPcHRpb25zW3Byb3BlcnR5XSk7XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAgIHZhciBvdmVybGF5RmlsdGVyRnVuY3Rpb24gPSBuZXcgRnVuY3Rpb24oXCJtZXNzYWdlXCIsIFwidmFyIGNhbGxiYWNrID0gXCIuY29uY2F0KG92ZXJsYXlGaWx0ZXJGdW5jdGlvblN0cmluZywgXCJcXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKVwiKSk7XG4gICAgICAgIG92ZXJsYXlPcHRpb25zW3Byb3BlcnR5XSA9IG92ZXJsYXlGaWx0ZXJGdW5jdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4gKiBAdHlwZSB7U3RhdHVzfVxuICovXG52YXIgc3RhdHVzID0ge1xuICBpc1VubG9hZGluZzogZmFsc2UsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgY3VycmVudEhhc2g6IF9fd2VicGFja19oYXNoX19cbn07XG5cbi8qKiBAdHlwZSB7T3B0aW9uc30gKi9cbnZhciBvcHRpb25zID0ge1xuICBob3Q6IGZhbHNlLFxuICBsaXZlUmVsb2FkOiBmYWxzZSxcbiAgcHJvZ3Jlc3M6IGZhbHNlLFxuICBvdmVybGF5OiBmYWxzZVxufTtcbnZhciBwYXJzZWRSZXNvdXJjZVF1ZXJ5ID0gcGFyc2VVUkwoX19yZXNvdXJjZVF1ZXJ5KTtcbnZhciBlbmFibGVkRmVhdHVyZXMgPSB7XG4gIFwiSG90IE1vZHVsZSBSZXBsYWNlbWVudFwiOiBmYWxzZSxcbiAgXCJMaXZlIFJlbG9hZGluZ1wiOiBmYWxzZSxcbiAgUHJvZ3Jlc3M6IGZhbHNlLFxuICBPdmVybGF5OiBmYWxzZVxufTtcbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmhvdCA9PT0gXCJ0cnVlXCIpIHtcbiAgb3B0aW9ucy5ob3QgPSB0cnVlO1xuICBlbmFibGVkRmVhdHVyZXNbXCJIb3QgTW9kdWxlIFJlcGxhY2VtZW50XCJdID0gdHJ1ZTtcbn1cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5W1wibGl2ZS1yZWxvYWRcIl0gPT09IFwidHJ1ZVwiKSB7XG4gIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gIGVuYWJsZWRGZWF0dXJlc1tcIkxpdmUgUmVsb2FkaW5nXCJdID0gdHJ1ZTtcbn1cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LnByb2dyZXNzID09PSBcInRydWVcIikge1xuICBvcHRpb25zLnByb2dyZXNzID0gdHJ1ZTtcbiAgZW5hYmxlZEZlYXR1cmVzLlByb2dyZXNzID0gdHJ1ZTtcbn1cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5Lm92ZXJsYXkpIHtcbiAgdHJ5IHtcbiAgICBvcHRpb25zLm92ZXJsYXkgPSBKU09OLnBhcnNlKHBhcnNlZFJlc291cmNlUXVlcnkub3ZlcmxheSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3IoXCJFcnJvciBwYXJzaW5nIG92ZXJsYXkgb3B0aW9ucyBmcm9tIHJlc291cmNlIHF1ZXJ5OlwiLCBlKTtcbiAgfVxuXG4gIC8vIEZpbGwgaW4gZGVmYXVsdCBcInRydWVcIiBwYXJhbXMgZm9yIHBhcnRpYWxseS1zcGVjaWZpZWQgb2JqZWN0cy5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLm92ZXJsYXkgPT09IFwib2JqZWN0XCIpIHtcbiAgICBvcHRpb25zLm92ZXJsYXkgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIGVycm9yczogdHJ1ZSxcbiAgICAgIHdhcm5pbmdzOiB0cnVlLFxuICAgICAgcnVudGltZUVycm9yczogdHJ1ZVxuICAgIH0sIG9wdGlvbnMub3ZlcmxheSk7XG4gICAgZGVjb2RlT3ZlcmxheU9wdGlvbnMob3B0aW9ucy5vdmVybGF5KTtcbiAgfVxuICBlbmFibGVkRmVhdHVyZXMuT3ZlcmxheSA9IHRydWU7XG59XG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5sb2dnaW5nKSB7XG4gIG9wdGlvbnMubG9nZ2luZyA9IHBhcnNlZFJlc291cmNlUXVlcnkubG9nZ2luZztcbn1cbmlmICh0eXBlb2YgcGFyc2VkUmVzb3VyY2VRdWVyeS5yZWNvbm5lY3QgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgb3B0aW9ucy5yZWNvbm5lY3QgPSBOdW1iZXIocGFyc2VkUmVzb3VyY2VRdWVyeS5yZWNvbm5lY3QpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbFxuICovXG5mdW5jdGlvbiBzZXRBbGxMb2dMZXZlbChsZXZlbCkge1xuICAvLyBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBITVIgbG9nZ2VyIG9wZXJhdGUgc2VwYXJhdGVseSBmcm9tIGRldiBzZXJ2ZXIgbG9nZ2VyXG4gIHdlYnBhY2tIb3RMb2cuc2V0TG9nTGV2ZWwobGV2ZWwgPT09IFwidmVyYm9zZVwiIHx8IGxldmVsID09PSBcImxvZ1wiID8gXCJpbmZvXCIgOiBsZXZlbCk7XG4gIHNldExvZ0xldmVsKGxldmVsKTtcbn1cbmlmIChvcHRpb25zLmxvZ2dpbmcpIHtcbiAgc2V0QWxsTG9nTGV2ZWwob3B0aW9ucy5sb2dnaW5nKTtcbn1cbmxvZ0VuYWJsZWRGZWF0dXJlcyhlbmFibGVkRmVhdHVyZXMpO1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgc3RhdHVzLmlzVW5sb2FkaW5nID0gdHJ1ZTtcbn0pO1xudmFyIG92ZXJsYXkgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gY3JlYXRlT3ZlcmxheSh0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSBcIm9iamVjdFwiID8ge1xuICB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lOiBvcHRpb25zLm92ZXJsYXkudHJ1c3RlZFR5cGVzUG9saWN5TmFtZSxcbiAgY2F0Y2hSdW50aW1lRXJyb3I6IG9wdGlvbnMub3ZlcmxheS5ydW50aW1lRXJyb3JzXG59IDoge1xuICB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lOiBmYWxzZSxcbiAgY2F0Y2hSdW50aW1lRXJyb3I6IG9wdGlvbnMub3ZlcmxheVxufSkgOiB7XG4gIHNlbmQ6IGZ1bmN0aW9uIHNlbmQoKSB7fVxufTtcbnZhciBvblNvY2tldE1lc3NhZ2UgPSB7XG4gIGhvdDogZnVuY3Rpb24gaG90KCkge1xuICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmhvdCA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgfSxcbiAgbGl2ZVJlbG9hZDogZnVuY3Rpb24gbGl2ZVJlbG9hZCgpIHtcbiAgICBpZiAocGFyc2VkUmVzb3VyY2VRdWVyeVtcImxpdmUtcmVsb2FkXCJdID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9ucy5saXZlUmVsb2FkID0gdHJ1ZTtcbiAgfSxcbiAgaW52YWxpZDogZnVuY3Rpb24gaW52YWxpZCgpIHtcbiAgICBsb2cuaW5mbyhcIkFwcCB1cGRhdGVkLiBSZWNvbXBpbGluZy4uLlwiKTtcblxuICAgIC8vIEZpeGVzICMxMDQyLiBvdmVybGF5IGRvZXNuJ3QgY2xlYXIgaWYgZXJyb3JzIGFyZSBmaXhlZCBidXQgd2FybmluZ3MgcmVtYWluLlxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICB9KTtcbiAgICB9XG4gICAgc2VuZE1lc3NhZ2UoXCJJbnZhbGlkXCIpO1xuICB9LFxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhc2hcbiAgICovXG4gIGhhc2g6IGZ1bmN0aW9uIGhhc2goX2hhc2gpIHtcbiAgICBzdGF0dXMucHJldmlvdXNIYXNoID0gc3RhdHVzLmN1cnJlbnRIYXNoO1xuICAgIHN0YXR1cy5jdXJyZW50SGFzaCA9IF9oYXNoO1xuICB9LFxuICBsb2dnaW5nOiBzZXRBbGxMb2dMZXZlbCxcbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIG92ZXJsYXk6IGZ1bmN0aW9uIG92ZXJsYXkodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9wdGlvbnMub3ZlcmxheSA9IHZhbHVlO1xuICAgIGRlY29kZU92ZXJsYXlPcHRpb25zKG9wdGlvbnMub3ZlcmxheSk7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICovXG4gIHJlY29ubmVjdDogZnVuY3Rpb24gcmVjb25uZWN0KHZhbHVlKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0ID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9ucy5yZWNvbm5lY3QgPSB2YWx1ZTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHByb2dyZXNzOiBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSkge1xuICAgIG9wdGlvbnMucHJvZ3Jlc3MgPSB2YWx1ZTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7eyBwbHVnaW5OYW1lPzogc3RyaW5nLCBwZXJjZW50OiBudW1iZXIsIG1zZzogc3RyaW5nIH19IGRhdGFcbiAgICovXG4gIFwicHJvZ3Jlc3MtdXBkYXRlXCI6IGZ1bmN0aW9uIHByb2dyZXNzVXBkYXRlKGRhdGEpIHtcbiAgICBpZiAob3B0aW9ucy5wcm9ncmVzcykge1xuICAgICAgbG9nLmluZm8oXCJcIi5jb25jYXQoZGF0YS5wbHVnaW5OYW1lID8gXCJbXCIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSwgXCJdIFwiKSA6IFwiXCIpLmNvbmNhdChkYXRhLnBlcmNlbnQsIFwiJSAtIFwiKS5jb25jYXQoZGF0YS5tc2csIFwiLlwiKSk7XG4gICAgfVxuICAgIHNlbmRNZXNzYWdlKFwiUHJvZ3Jlc3NcIiwgZGF0YSk7XG4gIH0sXG4gIFwic3RpbGwtb2tcIjogZnVuY3Rpb24gc3RpbGxPaygpIHtcbiAgICBsb2cuaW5mbyhcIk5vdGhpbmcgY2hhbmdlZC5cIik7XG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJESVNNSVNTXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZW5kTWVzc2FnZShcIlN0aWxsT2tcIik7XG4gIH0sXG4gIG9rOiBmdW5jdGlvbiBvaygpIHtcbiAgICBzZW5kTWVzc2FnZShcIk9rXCIpO1xuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVxuICAgKi9cbiAgXCJzdGF0aWMtY2hhbmdlZFwiOiBmdW5jdGlvbiBzdGF0aWNDaGFuZ2VkKGZpbGUpIHtcbiAgICBsb2cuaW5mbyhcIlwiLmNvbmNhdChmaWxlID8gXCJcXFwiXCIuY29uY2F0KGZpbGUsIFwiXFxcIlwiKSA6IFwiQ29udGVudFwiLCBcIiBmcm9tIHN0YXRpYyBkaXJlY3Rvcnkgd2FzIGNoYW5nZWQuIFJlbG9hZGluZy4uLlwiKSk7XG4gICAgc2VsZi5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3JbXX0gd2FybmluZ3NcbiAgICogQHBhcmFtIHthbnl9IHBhcmFtc1xuICAgKi9cbiAgd2FybmluZ3M6IGZ1bmN0aW9uIHdhcm5pbmdzKF93YXJuaW5ncywgcGFyYW1zKSB7XG4gICAgbG9nLndhcm4oXCJXYXJuaW5ncyB3aGlsZSBjb21waWxpbmcuXCIpO1xuICAgIHZhciBwcmludGFibGVXYXJuaW5ncyA9IF93YXJuaW5ncy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKFwid2FybmluZ1wiLCBlcnJvciksXG4gICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtLmJvZHk7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoaGVhZGVyLCBcIlxcblwiKS5jb25jYXQoc3RyaXBBbnNpKGJvZHkpKTtcbiAgICB9KTtcbiAgICBzZW5kTWVzc2FnZShcIldhcm5pbmdzXCIsIHByaW50YWJsZVdhcm5pbmdzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW50YWJsZVdhcm5pbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cud2FybihwcmludGFibGVXYXJuaW5nc1tpXSk7XG4gICAgfVxuICAgIHZhciBvdmVybGF5V2FybmluZ3NTZXR0aW5nID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJib29sZWFuXCIgPyBvcHRpb25zLm92ZXJsYXkgOiBvcHRpb25zLm92ZXJsYXkgJiYgb3B0aW9ucy5vdmVybGF5Lndhcm5pbmdzO1xuICAgIGlmIChvdmVybGF5V2FybmluZ3NTZXR0aW5nKSB7XG4gICAgICB2YXIgd2FybmluZ3NUb0Rpc3BsYXkgPSB0eXBlb2Ygb3ZlcmxheVdhcm5pbmdzU2V0dGluZyA9PT0gXCJmdW5jdGlvblwiID8gX3dhcm5pbmdzLmZpbHRlcihvdmVybGF5V2FybmluZ3NTZXR0aW5nKSA6IF93YXJuaW5ncztcbiAgICAgIGlmICh3YXJuaW5nc1RvRGlzcGxheS5sZW5ndGgpIHtcbiAgICAgICAgb3ZlcmxheS5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIkJVSUxEX0VSUk9SXCIsXG4gICAgICAgICAgbGV2ZWw6IFwid2FybmluZ1wiLFxuICAgICAgICAgIG1lc3NhZ2VzOiBfd2FybmluZ3NcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLnByZXZlbnRSZWxvYWRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yW119IGVycm9yc1xuICAgKi9cbiAgZXJyb3JzOiBmdW5jdGlvbiBlcnJvcnMoX2Vycm9ycykge1xuICAgIGxvZy5lcnJvcihcIkVycm9ycyB3aGlsZSBjb21waWxpbmcuIFJlbG9hZCBwcmV2ZW50ZWQuXCIpO1xuICAgIHZhciBwcmludGFibGVFcnJvcnMgPSBfZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHZhciBfZm9ybWF0UHJvYmxlbTIgPSBmb3JtYXRQcm9ibGVtKFwiZXJyb3JcIiwgZXJyb3IpLFxuICAgICAgICBoZWFkZXIgPSBfZm9ybWF0UHJvYmxlbTIuaGVhZGVyLFxuICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0yLmJvZHk7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoaGVhZGVyLCBcIlxcblwiKS5jb25jYXQoc3RyaXBBbnNpKGJvZHkpKTtcbiAgICB9KTtcbiAgICBzZW5kTWVzc2FnZShcIkVycm9yc1wiLCBwcmludGFibGVFcnJvcnMpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbnRhYmxlRXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cuZXJyb3IocHJpbnRhYmxlRXJyb3JzW2ldKTtcbiAgICB9XG4gICAgdmFyIG92ZXJsYXlFcnJvcnNTZXR0aW5ncyA9IHR5cGVvZiBvcHRpb25zLm92ZXJsYXkgPT09IFwiYm9vbGVhblwiID8gb3B0aW9ucy5vdmVybGF5IDogb3B0aW9ucy5vdmVybGF5ICYmIG9wdGlvbnMub3ZlcmxheS5lcnJvcnM7XG4gICAgaWYgKG92ZXJsYXlFcnJvcnNTZXR0aW5ncykge1xuICAgICAgdmFyIGVycm9yc1RvRGlzcGxheSA9IHR5cGVvZiBvdmVybGF5RXJyb3JzU2V0dGluZ3MgPT09IFwiZnVuY3Rpb25cIiA/IF9lcnJvcnMuZmlsdGVyKG92ZXJsYXlFcnJvcnNTZXR0aW5ncykgOiBfZXJyb3JzO1xuICAgICAgaWYgKGVycm9yc1RvRGlzcGxheS5sZW5ndGgpIHtcbiAgICAgICAgb3ZlcmxheS5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIkJVSUxEX0VSUk9SXCIsXG4gICAgICAgICAgbGV2ZWw6IFwiZXJyb3JcIixcbiAgICAgICAgICBtZXNzYWdlczogX2Vycm9yc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICAgKi9cbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcikge1xuICAgIGxvZy5lcnJvcihfZXJyb3IpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgbG9nLmluZm8oXCJEaXNjb25uZWN0ZWQhXCIpO1xuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICB9KTtcbiAgICB9XG4gICAgc2VuZE1lc3NhZ2UoXCJDbG9zZVwiKTtcbiAgfVxufTtcbnZhciBzb2NrZXRVUkwgPSBjcmVhdGVTb2NrZXRVUkwocGFyc2VkUmVzb3VyY2VRdWVyeSk7XG5zb2NrZXQoc29ja2V0VVJMLCBvblNvY2tldE1lc3NhZ2UsIG9wdGlvbnMucmVjb25uZWN0KTsiLCIvKioqKioqLyAoZnVuY3Rpb24oKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0XCJ1c2Ugc3RyaWN0XCI7XG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvdGFwYWJsZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvdGFwYWJsZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBTeW5jQmFpbEhvb2s6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogYmluZGluZyAqLyBTeW5jQmFpbEhvb2s7IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuZnVuY3Rpb24gU3luY0JhaWxIb29rKCkge1xuICByZXR1cm4ge1xuICAgIGNhbGw6IGZ1bmN0aW9uIGNhbGwoKSB7fVxuICB9O1xufVxuXG4vKipcbiAqIENsaWVudCBzdHViIGZvciB0YXBhYmxlIFN5bmNCYWlsSG9va1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydFxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkge1xuICB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTtcbiAgcmV0dXJuIFwic3ltYm9sXCIgPT0gdHlwZW9mIGkgPyBpIDogaSArIFwiXCI7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCAhdCkgcmV0dXJuIHQ7XG4gIHZhciBlID0gdFsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgaSkgcmV0dXJuIGk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7XG59XG52YXIgTG9nVHlwZSA9IE9iamVjdC5mcmVlemUoe1xuICBlcnJvcjogKCAvKiogQHR5cGUge1wiZXJyb3JcIn0gKi9cImVycm9yXCIpLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICB3YXJuOiAoIC8qKiBAdHlwZSB7XCJ3YXJuXCJ9ICovXCJ3YXJuXCIpLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBpbmZvOiAoIC8qKiBAdHlwZSB7XCJpbmZvXCJ9ICovXCJpbmZvXCIpLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBsb2c6ICggLyoqIEB0eXBlIHtcImxvZ1wifSAqL1wibG9nXCIpLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBkZWJ1ZzogKCAvKiogQHR5cGUge1wiZGVidWdcIn0gKi9cImRlYnVnXCIpLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuXG4gIHRyYWNlOiAoIC8qKiBAdHlwZSB7XCJ0cmFjZVwifSAqL1widHJhY2VcIiksXG4gIC8vIG5vIGFyZ3VtZW50c1xuXG4gIGdyb3VwOiAoIC8qKiBAdHlwZSB7XCJncm91cFwifSAqL1wiZ3JvdXBcIiksXG4gIC8vIFtsYWJlbF1cbiAgZ3JvdXBDb2xsYXBzZWQ6ICggLyoqIEB0eXBlIHtcImdyb3VwQ29sbGFwc2VkXCJ9ICovXCJncm91cENvbGxhcHNlZFwiKSxcbiAgLy8gW2xhYmVsXVxuICBncm91cEVuZDogKCAvKiogQHR5cGUge1wiZ3JvdXBFbmRcIn0gKi9cImdyb3VwRW5kXCIpLFxuICAvLyBbbGFiZWxdXG5cbiAgcHJvZmlsZTogKCAvKiogQHR5cGUge1wicHJvZmlsZVwifSAqL1wicHJvZmlsZVwiKSxcbiAgLy8gW3Byb2ZpbGVOYW1lXVxuICBwcm9maWxlRW5kOiAoIC8qKiBAdHlwZSB7XCJwcm9maWxlRW5kXCJ9ICovXCJwcm9maWxlRW5kXCIpLFxuICAvLyBbcHJvZmlsZU5hbWVdXG5cbiAgdGltZTogKCAvKiogQHR5cGUge1widGltZVwifSAqL1widGltZVwiKSxcbiAgLy8gbmFtZSwgdGltZSBhcyBbc2Vjb25kcywgbmFub3NlY29uZHNdXG5cbiAgY2xlYXI6ICggLyoqIEB0eXBlIHtcImNsZWFyXCJ9ICovXCJjbGVhclwiKSxcbiAgLy8gbm8gYXJndW1lbnRzXG4gIHN0YXR1czogKCAvKiogQHR5cGUge1wic3RhdHVzXCJ9ICovXCJzdGF0dXNcIikgLy8gbWVzc2FnZSwgYXJndW1lbnRzXG59KTtcbmV4cG9ydHMuTG9nVHlwZSA9IExvZ1R5cGU7XG5cbi8qKiBAdHlwZWRlZiB7dHlwZW9mIExvZ1R5cGVba2V5b2YgdHlwZW9mIExvZ1R5cGVdfSBMb2dUeXBlRW51bSAqL1xuXG52YXIgTE9HX1NZTUJPTCA9ICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pKFwid2VicGFjayBsb2dnZXIgcmF3IGxvZyBtZXRob2RcIik7XG52YXIgVElNRVJTX1NZTUJPTCA9ICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pKFwid2VicGFjayBsb2dnZXIgdGltZXNcIik7XG52YXIgVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciBhZ2dyZWdhdGVkIHRpbWVzXCIpO1xudmFyIFdlYnBhY2tMb2dnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbihMb2dUeXBlRW51bSwgYW55W109KTogdm9pZH0gbG9nIGxvZyBmdW5jdGlvblxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyB8IGZ1bmN0aW9uKCk6IHN0cmluZyk6IFdlYnBhY2tMb2dnZXJ9IGdldENoaWxkTG9nZ2VyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBjaGlsZCBsb2dnZXJcbiAgICovXG4gIGZ1bmN0aW9uIFdlYnBhY2tMb2dnZXIobG9nLCBnZXRDaGlsZExvZ2dlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJwYWNrTG9nZ2VyKTtcbiAgICB0aGlzW0xPR19TWU1CT0xdID0gbG9nO1xuICAgIHRoaXMuZ2V0Q2hpbGRMb2dnZXIgPSBnZXRDaGlsZExvZ2dlcjtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUNsYXNzKFdlYnBhY2tMb2dnZXIsIFt7XG4gICAga2V5OiBcImVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3YXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLndhcm4sIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbmZvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZm8oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmluZm8sIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5sb2csIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWJ1Z1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZGVidWcsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhc3NlcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXNzZXJ0KGFzc2VydGlvbikge1xuICAgICAgaWYgKCFhc3NlcnRpb24pIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42ID4gMSA/IF9sZW42IC0gMSA6IDApLCBfa2V5NiA9IDE7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICAgICAgICBhcmdzW19rZXk2IC0gMV0gPSBhcmd1bWVudHNbX2tleTZdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5lcnJvciwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRyYWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYWNlKCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRyYWNlLCBbXCJUcmFjZVwiXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmNsZWFyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhdHVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXR1cygpIHtcbiAgICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgICAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuc3RhdHVzLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ3JvdXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuOCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjgpLCBfa2V5OCA9IDA7IF9rZXk4IDwgX2xlbjg7IF9rZXk4KyspIHtcbiAgICAgICAgYXJnc1tfa2V5OF0gPSBhcmd1bWVudHNbX2tleThdO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmdyb3VwLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ3JvdXBDb2xsYXBzZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXBDb2xsYXBzZWQoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuOSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjkpLCBfa2V5OSA9IDA7IF9rZXk5IDwgX2xlbjk7IF9rZXk5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5OV0gPSBhcmd1bWVudHNbX2tleTldO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmdyb3VwQ29sbGFwc2VkLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ3JvdXBFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXBFbmQoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMTAgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4xMCksIF9rZXkxMCA9IDA7IF9rZXkxMCA8IF9sZW4xMDsgX2tleTEwKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MTBdID0gYXJndW1lbnRzW19rZXkxMF07XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXBFbmQsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwcm9maWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGUobGFiZWwpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5wcm9maWxlLCBbbGFiZWxdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicHJvZmlsZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9maWxlRW5kKGxhYmVsKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUucHJvZmlsZUVuZCwgW2xhYmVsXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZShsYWJlbCkge1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXSA9IHRoaXNbVElNRVJTX1NZTUJPTF0gfHwgbmV3IE1hcCgpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5zZXQobGFiZWwsIHByb2Nlc3MuaHJ0aW1lKCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lTG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVMb2cobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG4gICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbCAnXCIuY29uY2F0KGxhYmVsLCBcIicgZm9yIFdlYnBhY2tMb2dnZXIudGltZUxvZygpXCIpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUVuZChsYWJlbCkge1xuICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lRW5kKClcIikpO1xuICAgICAgfVxuICAgICAgdmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZShwcmV2KTtcbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUFnZ3JlZ2F0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lQWdncmVnYXRlKGxhYmVsKSB7XG4gICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpO1xuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVBZ2dyZWdhdGUoKVwiKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpO1xuICAgICAgdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdIHx8IG5ldyBNYXAoKTtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmdldChsYWJlbCk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0aW1lWzFdICsgY3VycmVudFsxXSA+IDFlOSkge1xuICAgICAgICAgIHRpbWVbMF0gKz0gY3VycmVudFswXSArIDE7XG4gICAgICAgICAgdGltZVsxXSA9IHRpbWVbMV0gLSAxZTkgKyBjdXJyZW50WzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVbMF0gKz0gY3VycmVudFswXTtcbiAgICAgICAgICB0aW1lWzFdICs9IGN1cnJlbnRbMV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5zZXQobGFiZWwsIHRpbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lQWdncmVnYXRlRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVBZ2dyZWdhdGVFbmQobGFiZWwpIHtcbiAgICAgIGlmICh0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgdmFyIHRpbWUgPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZ2V0KGxhYmVsKTtcbiAgICAgIGlmICh0aW1lID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5kZWxldGUobGFiZWwpO1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpO1xuICAgIH1cbiAgfV0pO1xufSgpO1xuZXhwb3J0cy5Mb2dnZXIgPSBXZWJwYWNrTG9nZ2VyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyWyh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG4gIHJldHVybiBhcnIyO1xufVxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Mb2dnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qc1wiKSxcbiAgTG9nVHlwZSA9IF9yZXF1aXJlLkxvZ1R5cGU7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vLi4vZGVjbGFyYXRpb25zL1dlYnBhY2tPcHRpb25zXCIpLkZpbHRlckl0ZW1UeXBlc30gRmlsdGVySXRlbVR5cGVzICovXG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4uLy4uL2RlY2xhcmF0aW9ucy9XZWJwYWNrT3B0aW9uc1wiKS5GaWx0ZXJUeXBlc30gRmlsdGVyVHlwZXMgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi9Mb2dnZXJcIikuTG9nVHlwZUVudW19IExvZ1R5cGVFbnVtICovXG5cbi8qKiBAdHlwZWRlZiB7ZnVuY3Rpb24oc3RyaW5nKTogYm9vbGVhbn0gRmlsdGVyRnVuY3Rpb24gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2dnZXJDb25zb2xlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IGNsZWFyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IHRyYWNlXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gaW5mb1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGxvZ1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IHdhcm5cbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBlcnJvclxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBkZWJ1Z1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cENvbGxhcHNlZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cEVuZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBzdGF0dXNcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gcHJvZmlsZVxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBwcm9maWxlRW5kXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGxvZ1RpbWVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExvZ2dlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7ZmFsc2V8dHJ1ZXxcIm5vbmVcInxcImVycm9yXCJ8XCJ3YXJuXCJ8XCJpbmZvXCJ8XCJsb2dcInxcInZlcmJvc2VcIn0gbGV2ZWwgbG9nbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7RmlsdGVyVHlwZXN8Ym9vbGVhbn0gZGVidWcgZmlsdGVyIGZvciBkZWJ1ZyBsb2dnaW5nXG4gKiBAcHJvcGVydHkge0xvZ2dlckNvbnNvbGV9IGNvbnNvbGUgdGhlIGNvbnNvbGUgdG8gbG9nIHRvXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0ZpbHRlckl0ZW1UeXBlc30gaXRlbSBhbiBpbnB1dCBpdGVtXG4gKiBAcmV0dXJucyB7RmlsdGVyRnVuY3Rpb259IGZpbHRlciBmdW5jdGlvblxuICovXG52YXIgZmlsdGVyVG9GdW5jdGlvbiA9IGZ1bmN0aW9uIGZpbHRlclRvRnVuY3Rpb24oaXRlbSkge1xuICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICB2YXIgcmVnRXhwID0gbmV3IFJlZ0V4cChcIltcXFxcXFxcXC9dXCIuY29uY2F0KGl0ZW0ucmVwbGFjZSgvWy1bXFxde30oKSorPy5cXFxcXiR8XS9nLCBcIlxcXFwkJlwiKSwgXCIoW1xcXFxcXFxcL118JHwhfFxcXFw/KVwiKSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpZGVudCkge1xuICAgICAgcmV0dXJuIHJlZ0V4cC50ZXN0KGlkZW50KTtcbiAgICB9O1xuICB9XG4gIGlmIChpdGVtICYmIHR5cGVvZiBpdGVtID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBpdGVtLnRlc3QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaWRlbnQpIHtcbiAgICAgIHJldHVybiBpdGVtLnRlc3QoaWRlbnQpO1xuICAgIH07XG4gIH1cbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuICBpZiAodHlwZW9mIGl0ZW0gPT09IFwiYm9vbGVhblwiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH07XG4gIH1cbn07XG5cbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xudmFyIExvZ0xldmVsID0ge1xuICBub25lOiA2LFxuICBmYWxzZTogNixcbiAgZXJyb3I6IDUsXG4gIHdhcm46IDQsXG4gIGluZm86IDMsXG4gIGxvZzogMixcbiAgdHJ1ZTogMixcbiAgdmVyYm9zZTogMVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0xvZ2dlck9wdGlvbnN9IG9wdGlvbnMgb3B0aW9ucyBvYmplY3RcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIExvZ1R5cGVFbnVtLCBhbnlbXSk6IHZvaWR9IGxvZ2dpbmcgZnVuY3Rpb25cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgX3JlZiRsZXZlbCA9IF9yZWYubGV2ZWwsXG4gICAgbGV2ZWwgPSBfcmVmJGxldmVsID09PSB2b2lkIDAgPyBcImluZm9cIiA6IF9yZWYkbGV2ZWwsXG4gICAgX3JlZiRkZWJ1ZyA9IF9yZWYuZGVidWcsXG4gICAgZGVidWcgPSBfcmVmJGRlYnVnID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZGVidWcsXG4gICAgY29uc29sZSA9IF9yZWYuY29uc29sZTtcbiAgdmFyIGRlYnVnRmlsdGVycyA9IHR5cGVvZiBkZWJ1ZyA9PT0gXCJib29sZWFuXCIgPyBbZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWJ1ZztcbiAgfV0gOiAvKiogQHR5cGUge0ZpbHRlckl0ZW1UeXBlc1tdfSAqL1tdLmNvbmNhdChkZWJ1ZykubWFwKGZpbHRlclRvRnVuY3Rpb24pO1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgdmFyIGxvZ2xldmVsID0gTG9nTGV2ZWxbXCJcIi5jb25jYXQobGV2ZWwpXSB8fCAwO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBsb2dnZXJcbiAgICogQHBhcmFtIHtMb2dUeXBlRW51bX0gdHlwZSB0eXBlIG9mIHRoZSBsb2cgZW50cnlcbiAgICogQHBhcmFtIHthbnlbXX0gYXJncyBhcmd1bWVudHMgb2YgdGhlIGxvZyBlbnRyeVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHZhciBsb2dnZXIgPSBmdW5jdGlvbiBsb2dnZXIobmFtZSwgdHlwZSwgYXJncykge1xuICAgIHZhciBsYWJlbGVkQXJncyA9IGZ1bmN0aW9uIGxhYmVsZWRBcmdzKCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiBbXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0pXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3Muc2xpY2UoMSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW1wiW1wiLmNvbmNhdChuYW1lLCBcIl1cIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgZGVidWcgPSBkZWJ1Z0ZpbHRlcnMuc29tZShmdW5jdGlvbiAoZikge1xuICAgICAgcmV0dXJuIGYobmFtZSk7XG4gICAgfSk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIExvZ1R5cGUuZGVidWc6XG4gICAgICAgIGlmICghZGVidWcpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmRlYnVnID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5sb2c6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUuaW5mbzpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjtcbiAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLndhcm46XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC53YXJuKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5lcnJvcjpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmVycm9yKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUuZXJyb3IuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUudHJhY2U6XG4gICAgICAgIGlmICghZGVidWcpIHJldHVybjtcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cENvbGxhcHNlZDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwudmVyYm9zZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5ncm91cENvbGxhcHNlZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlIExvZ1R5cGUuZ3JvdXA6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmdyb3VwLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cEVuZDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXBFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS50aW1lOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICAgIHZhciBtcyA9IGFyZ3NbMV0gKiAxMDAwICsgYXJnc1syXSAvIDEwMDAwMDA7XG4gICAgICAgICAgdmFyIG1zZyA9IFwiW1wiLmNvbmNhdChuYW1lLCBcIl0gXCIpLmNvbmNhdChhcmdzWzBdLCBcIjogXCIpLmNvbmNhdChtcywgXCIgbXNcIik7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmxvZ1RpbWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5sb2dUaW1lKG1zZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIExvZ1R5cGUucHJvZmlsZTpcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnByb2ZpbGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnNvbGUucHJvZmlsZS5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLnByb2ZpbGVFbmQ6XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5wcm9maWxlRW5kID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLnByb2ZpbGVFbmQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5jbGVhcjpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuY2xlYXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnNvbGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS5zdGF0dXM6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5pbmZvKSByZXR1cm47XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5zdGF0dXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIExvZ1R5cGUgXCIuY29uY2F0KHR5cGUpKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsb2dnZXI7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdGFwYWJsZSAqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci90YXBhYmxlLmpzXCIpLFxuICBTeW5jQmFpbEhvb2sgPSBfcmVxdWlyZS5TeW5jQmFpbEhvb2s7XG52YXIgX3JlcXVpcmUyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Mb2dnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qc1wiKSxcbiAgTG9nZ2VyID0gX3JlcXVpcmUyLkxvZ2dlcjtcbnZhciBjcmVhdGVDb25zb2xlTG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jcmVhdGVDb25zb2xlTG9nZ2VyICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9jcmVhdGVDb25zb2xlTG9nZ2VyLmpzXCIpO1xuXG4vKiogQHR5cGUge2NyZWF0ZUNvbnNvbGVMb2dnZXIuTG9nZ2VyT3B0aW9uc30gKi9cbnZhciBjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMgPSB7XG4gIGxldmVsOiBcImluZm9cIixcbiAgZGVidWc6IGZhbHNlLFxuICBjb25zb2xlOiBjb25zb2xlXG59O1xudmFyIGN1cnJlbnREZWZhdWx0TG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGxvZ2dlclxuICogQHJldHVybnMge0xvZ2dlcn0gYSBsb2dnZXJcbiAqL1xuZXhwb3J0cy5nZXRMb2dnZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmV3IExvZ2dlcihmdW5jdGlvbiAodHlwZSwgYXJncykge1xuICAgIGlmIChleHBvcnRzLmhvb2tzLmxvZy5jYWxsKG5hbWUsIHR5cGUsIGFyZ3MpID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnREZWZhdWx0TG9nZ2VyKG5hbWUsIHR5cGUsIGFyZ3MpO1xuICAgIH1cbiAgfSwgZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xuICAgIHJldHVybiBleHBvcnRzLmdldExvZ2dlcihcIlwiLmNvbmNhdChuYW1lLCBcIi9cIikuY29uY2F0KGNoaWxkTmFtZSkpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtjcmVhdGVDb25zb2xlTG9nZ2VyLkxvZ2dlck9wdGlvbnN9IG9wdGlvbnMgbmV3IG9wdGlvbnMsIG1lcmdlIHdpdGggb2xkIG9wdGlvbnNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnRzLmNvbmZpZ3VyZURlZmF1bHRMb2dnZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBfZXh0ZW5kcyhjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMsIG9wdGlvbnMpO1xuICBjdXJyZW50RGVmYXVsdExvZ2dlciA9IGNyZWF0ZUNvbnNvbGVMb2dnZXIoY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zKTtcbn07XG5leHBvcnRzLmhvb2tzID0ge1xuICBsb2c6IG5ldyBTeW5jQmFpbEhvb2soW1wib3JpZ2luXCIsIFwidHlwZVwiLCBcImFyZ3NcIl0pXG59O1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuXG4hZnVuY3Rpb24oKSB7XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogcmVleHBvcnQgZGVmYXVsdCBleHBvcnQgZnJvbSBuYW1lZCBtb2R1bGUgKi8gd2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX187IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzXCIpO1xuXG59KCk7XG52YXIgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyA9IGV4cG9ydHM7XG5mb3IodmFyIGkgaW4gX193ZWJwYWNrX2V4cG9ydHNfXykgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfX1tpXSA9IF9fd2VicGFja19leHBvcnRzX19baV07XG5pZihfX3dlYnBhY2tfZXhwb3J0c19fLl9fZXNNb2R1bGUpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIH0pKClcbjsiLCJmdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSB0eXBlb2YgaSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIHQgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIGkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLy8gVGhlIGVycm9yIG92ZXJsYXkgaXMgaW5zcGlyZWQgKGFuZCBtb3N0bHkgY29waWVkKSBmcm9tIENyZWF0ZSBSZWFjdCBBcHAgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va2luY3ViYXRvci9jcmVhdGUtcmVhY3QtYXBwKVxuLy8gVGhleSwgaW4gdHVybiwgZ290IGluc3BpcmVkIGJ5IHdlYnBhY2staG90LW1pZGRsZXdhcmUgKGh0dHBzOi8vZ2l0aHViLmNvbS9nbGVuamFtaW4vd2VicGFjay1ob3QtbWlkZGxld2FyZSkuXG5cbmltcG9ydCBhbnNpSFRNTCBmcm9tIFwiYW5zaS1odG1sLWNvbW11bml0eVwiO1xuaW1wb3J0IHsgZW5jb2RlIH0gZnJvbSBcImh0bWwtZW50aXRpZXNcIjtcbmltcG9ydCB7IGxpc3RlblRvUnVudGltZUVycm9yLCBsaXN0ZW5Ub1VuaGFuZGxlZFJlamVjdGlvbiwgcGFyc2VFcnJvclRvU3RhY2tzIH0gZnJvbSBcIi4vb3ZlcmxheS9ydW50aW1lLWVycm9yLmpzXCI7XG5pbXBvcnQgY3JlYXRlT3ZlcmxheU1hY2hpbmUgZnJvbSBcIi4vb3ZlcmxheS9zdGF0ZS1tYWNoaW5lLmpzXCI7XG5pbXBvcnQgeyBjb250YWluZXJTdHlsZSwgZGlzbWlzc0J1dHRvblN0eWxlLCBoZWFkZXJTdHlsZSwgaWZyYW1lU3R5bGUsIG1zZ1N0eWxlcywgbXNnVGV4dFN0eWxlLCBtc2dUeXBlU3R5bGUgfSBmcm9tIFwiLi9vdmVybGF5L3N0eWxlcy5qc1wiO1xudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFtcInRyYW5zcGFyZW50XCIsIFwidHJhbnNwYXJlbnRcIl0sXG4gIGJsYWNrOiBcIjE4MTgxOFwiLFxuICByZWQ6IFwiRTM2MDQ5XCIsXG4gIGdyZWVuOiBcIkIzQ0I3NFwiLFxuICB5ZWxsb3c6IFwiRkZEMDgwXCIsXG4gIGJsdWU6IFwiN0NBRkMyXCIsXG4gIG1hZ2VudGE6IFwiN0ZBQ0NBXCIsXG4gIGN5YW46IFwiQzNDMkVGXCIsXG4gIGxpZ2h0Z3JleTogXCJFQkU3RTNcIixcbiAgZGFya2dyZXk6IFwiNkQ3ODkxXCJcbn07XG5hbnNpSFRNTC5zZXRDb2xvcnMoY29sb3JzKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmcgIHwgeyBmaWxlPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmc7IHN0YWNrPzogc3RyaW5nW10gfX0gaXRlbVxuICogQHJldHVybnMge3sgaGVhZGVyOiBzdHJpbmcsIGJvZHk6IHN0cmluZyB9fVxuICovXG5mdW5jdGlvbiBmb3JtYXRQcm9ibGVtKHR5cGUsIGl0ZW0pIHtcbiAgdmFyIGhlYWRlciA9IHR5cGUgPT09IFwid2FybmluZ1wiID8gXCJXQVJOSU5HXCIgOiBcIkVSUk9SXCI7XG4gIHZhciBib2R5ID0gXCJcIjtcbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgYm9keSArPSBpdGVtO1xuICB9IGVsc2Uge1xuICAgIHZhciBmaWxlID0gaXRlbS5maWxlIHx8IFwiXCI7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgdmFyIG1vZHVsZU5hbWUgPSBpdGVtLm1vZHVsZU5hbWUgPyBpdGVtLm1vZHVsZU5hbWUuaW5kZXhPZihcIiFcIikgIT09IC0xID8gXCJcIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lLnJlcGxhY2UoL14oXFxzfFxcUykqIS8sIFwiXCIpLCBcIiAoXCIpLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUsIFwiKVwiKSA6IFwiXCIuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZSkgOiBcIlwiO1xuICAgIHZhciBsb2MgPSBpdGVtLmxvYztcbiAgICBoZWFkZXIgKz0gXCJcIi5jb25jYXQobW9kdWxlTmFtZSB8fCBmaWxlID8gXCIgaW4gXCIuY29uY2F0KG1vZHVsZU5hbWUgPyBcIlwiLmNvbmNhdChtb2R1bGVOYW1lKS5jb25jYXQoZmlsZSA/IFwiIChcIi5jb25jYXQoZmlsZSwgXCIpXCIpIDogXCJcIikgOiBmaWxlKS5jb25jYXQobG9jID8gXCIgXCIuY29uY2F0KGxvYykgOiBcIlwiKSA6IFwiXCIpO1xuICAgIGJvZHkgKz0gaXRlbS5tZXNzYWdlIHx8IFwiXCI7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbS5zdGFjaykpIHtcbiAgICBpdGVtLnN0YWNrLmZvckVhY2goZnVuY3Rpb24gKHN0YWNrKSB7XG4gICAgICBpZiAodHlwZW9mIHN0YWNrID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGJvZHkgKz0gXCJcXHJcXG5cIi5jb25jYXQoc3RhY2spO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgaGVhZGVyOiBoZWFkZXIsXG4gICAgYm9keTogYm9keVxuICB9O1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENyZWF0ZU92ZXJsYXlPcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IChlcnJvcjogRXJyb3IpID0+IHZvaWR9IFtjYXRjaFJ1bnRpbWVFcnJvcl1cbiAqL1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0NyZWF0ZU92ZXJsYXlPcHRpb25zfSBvcHRpb25zXG4gKi9cbnZhciBjcmVhdGVPdmVybGF5ID0gZnVuY3Rpb24gY3JlYXRlT3ZlcmxheShvcHRpb25zKSB7XG4gIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkfSAqL1xuICB2YXIgaWZyYW1lQ29udGFpbmVyRWxlbWVudDtcbiAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWR9ICovXG4gIHZhciBjb250YWluZXJFbGVtZW50O1xuICAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi9cbiAgdmFyIGhlYWRlckVsZW1lbnQ7XG4gIC8qKiBAdHlwZSB7QXJyYXk8KGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkPn0gKi9cbiAgdmFyIG9uTG9hZFF1ZXVlID0gW107XG4gIC8qKiBAdHlwZSB7VHJ1c3RlZFR5cGVQb2xpY3kgfCB1bmRlZmluZWR9ICovXG4gIHZhciBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5O1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVcbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5U3R5bGUoZWxlbWVudCwgc3R5bGUpIHtcbiAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlW3Byb3BdO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZVxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpIHtcbiAgICAvLyBFbmFibGUgVHJ1c3RlZCBUeXBlcyBpZiB0aGV5IGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAgICBpZiAod2luZG93LnRydXN0ZWRUeXBlcykge1xuICAgICAgb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5KHRydXN0ZWRUeXBlc1BvbGljeU5hbWUgfHwgXCJ3ZWJwYWNrLWRldi1zZXJ2ZXIjb3ZlcmxheVwiLCB7XG4gICAgICAgIGNyZWF0ZUhUTUw6IGZ1bmN0aW9uIGNyZWF0ZUhUTUwodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmlkID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItY2xpZW50LW92ZXJsYXlcIjtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LnNyYyA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgICBhcHBseVN0eWxlKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQsIGlmcmFtZVN0eWxlKTtcbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb250ZW50RWxlbWVudCA9IC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG4gICAgICAoIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG4gICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudCkuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNvbnRhaW5lckVsZW1lbnQgPSAvKiogQHR5cGUge0RvY3VtZW50fSAqL1xuICAgICAgKCAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqL1xuICAgICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5jb250ZW50RG9jdW1lbnQpLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjb250ZW50RWxlbWVudC5pZCA9IFwid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5LWRpdlwiO1xuICAgICAgYXBwbHlTdHlsZShjb250ZW50RWxlbWVudCwgY29udGFpbmVyU3R5bGUpO1xuICAgICAgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBoZWFkZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQ29tcGlsZWQgd2l0aCBwcm9ibGVtczpcIjtcbiAgICAgIGFwcGx5U3R5bGUoaGVhZGVyRWxlbWVudCwgaGVhZGVyU3R5bGUpO1xuICAgICAgdmFyIGNsb3NlQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBhcHBseVN0eWxlKGNsb3NlQnV0dG9uRWxlbWVudCwgZGlzbWlzc0J1dHRvblN0eWxlKTtcbiAgICAgIGNsb3NlQnV0dG9uRWxlbWVudC5pbm5lclRleHQgPSBcIsOXXCI7XG4gICAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuYXJpYUxhYmVsID0gXCJEaXNtaXNzXCI7XG4gICAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgIG92ZXJsYXlTZXJ2aWNlLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBjb250ZW50RWxlbWVudC5hcHBlbmRDaGlsZChoZWFkZXJFbGVtZW50KTtcbiAgICAgIGNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uRWxlbWVudCk7XG4gICAgICBjb250ZW50RWxlbWVudC5hcHBlbmRDaGlsZChjb250YWluZXJFbGVtZW50KTtcblxuICAgICAgLyoqIEB0eXBlIHtEb2N1bWVudH0gKi9cbiAgICAgICggLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50KS5ib2R5LmFwcGVuZENoaWxkKGNvbnRlbnRFbGVtZW50KTtcbiAgICAgIG9uTG9hZFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKG9uTG9hZCkge1xuICAgICAgICBvbkxvYWQoIC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9ICovY29udGVudEVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgICBvbkxvYWRRdWV1ZSA9IFtdO1xuXG4gICAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqL1xuICAgICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBudWxsO1xuICAgIH07XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyhlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkgPT4gdm9pZH0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsfSB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lXG4gICAqL1xuICBmdW5jdGlvbiBlbnN1cmVPdmVybGF5RXhpc3RzKGNhbGxiYWNrLCB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKSB7XG4gICAgaWYgKGNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgIGNvbnRhaW5lckVsZW1lbnQuaW5uZXJIVE1MID0gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA/IG92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kuY3JlYXRlSFRNTChcIlwiKSA6IFwiXCI7XG4gICAgICAvLyBFdmVyeXRoaW5nIGlzIHJlYWR5LCBjYWxsIHRoZSBjYWxsYmFjayByaWdodCBhd2F5LlxuICAgICAgY2FsbGJhY2soY29udGFpbmVyRWxlbWVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9uTG9hZFF1ZXVlLnB1c2goY2FsbGJhY2spO1xuICAgIGlmIChpZnJhbWVDb250YWluZXJFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNyZWF0ZUNvbnRhaW5lcih0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKTtcbiAgfVxuXG4gIC8vIFN1Y2Nlc3NmdWwgY29tcGlsYXRpb24uXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgaWYgKCFpZnJhbWVDb250YWluZXJFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2xlYW4gdXAgYW5kIHJlc2V0IGludGVybmFsIHN0YXRlLlxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lQ29udGFpbmVyRWxlbWVudCk7XG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudCA9IG51bGw7XG4gICAgY29udGFpbmVyRWxlbWVudCA9IG51bGw7XG4gIH1cblxuICAvLyBDb21waWxhdGlvbiB3aXRoIGVycm9ycyAoZS5nLiBzeW50YXggZXJyb3Igb3IgbWlzc2luZyBtb2R1bGVzKS5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nICB8IHsgbW9kdWxlSWRlbnRpZmllcj86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nIH0+fSBtZXNzYWdlc1xuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWVcbiAgICogQHBhcmFtIHsnYnVpbGQnIHwgJ3J1bnRpbWUnfSBtZXNzYWdlU291cmNlXG4gICAqL1xuICBmdW5jdGlvbiBzaG93KHR5cGUsIG1lc3NhZ2VzLCB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lLCBtZXNzYWdlU291cmNlKSB7XG4gICAgZW5zdXJlT3ZlcmxheUV4aXN0cyhmdW5jdGlvbiAoKSB7XG4gICAgICBoZWFkZXJFbGVtZW50LmlubmVyVGV4dCA9IG1lc3NhZ2VTb3VyY2UgPT09IFwicnVudGltZVwiID8gXCJVbmNhdWdodCBydW50aW1lIGVycm9yczpcIiA6IFwiQ29tcGlsZWQgd2l0aCBwcm9ibGVtczpcIjtcbiAgICAgIG1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIGVudHJ5RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZhciBtc2dTdHlsZSA9IHR5cGUgPT09IFwid2FybmluZ1wiID8gbXNnU3R5bGVzLndhcm5pbmcgOiBtc2dTdHlsZXMuZXJyb3I7XG4gICAgICAgIGFwcGx5U3R5bGUoZW50cnlFbGVtZW50LCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1zZ1N0eWxlKSwge30sIHtcbiAgICAgICAgICBwYWRkaW5nOiBcIjFyZW0gMXJlbSAxLjVyZW0gMXJlbVwiXG4gICAgICAgIH0pKTtcbiAgICAgICAgdmFyIHR5cGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIF9mb3JtYXRQcm9ibGVtID0gZm9ybWF0UHJvYmxlbSh0eXBlLCBtZXNzYWdlKSxcbiAgICAgICAgICBoZWFkZXIgPSBfZm9ybWF0UHJvYmxlbS5oZWFkZXIsXG4gICAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtLmJvZHk7XG4gICAgICAgIHR5cGVFbGVtZW50LmlubmVyVGV4dCA9IGhlYWRlcjtcbiAgICAgICAgYXBwbHlTdHlsZSh0eXBlRWxlbWVudCwgbXNnVHlwZVN0eWxlKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UubW9kdWxlSWRlbnRpZmllcikge1xuICAgICAgICAgIGFwcGx5U3R5bGUodHlwZUVsZW1lbnQsIHtcbiAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBlbGVtZW50LmRhdGFzZXQgbm90IHN1cHBvcnRlZCBpbiBJRVxuICAgICAgICAgIHR5cGVFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY2FuLW9wZW5cIiwgdHJ1ZSk7XG4gICAgICAgICAgdHlwZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZldGNoKFwiL3dlYnBhY2stZGV2LXNlcnZlci9vcGVuLWVkaXRvcj9maWxlTmFtZT1cIi5jb25jYXQobWVzc2FnZS5tb2R1bGVJZGVudGlmaWVyKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNYWtlIGl0IGxvb2sgc2ltaWxhciB0byBvdXIgdGVybWluYWwuXG4gICAgICAgIHZhciB0ZXh0ID0gYW5zaUhUTUwoZW5jb2RlKGJvZHkpKTtcbiAgICAgICAgdmFyIG1lc3NhZ2VUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGFwcGx5U3R5bGUobWVzc2FnZVRleHROb2RlLCBtc2dUZXh0U3R5bGUpO1xuICAgICAgICBtZXNzYWdlVGV4dE5vZGUuaW5uZXJIVE1MID0gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA/IG92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kuY3JlYXRlSFRNTCh0ZXh0KSA6IHRleHQ7XG4gICAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZCh0eXBlRWxlbWVudCk7XG4gICAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChtZXNzYWdlVGV4dE5vZGUpO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9ICovXG4gICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZW50cnlFbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH0sIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpO1xuICB9XG4gIHZhciBvdmVybGF5U2VydmljZSA9IGNyZWF0ZU92ZXJsYXlNYWNoaW5lKHtcbiAgICBzaG93T3ZlcmxheTogZnVuY3Rpb24gc2hvd092ZXJsYXkoX3JlZikge1xuICAgICAgdmFyIF9yZWYkbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgICAgICBsZXZlbCA9IF9yZWYkbGV2ZWwgPT09IHZvaWQgMCA/IFwiZXJyb3JcIiA6IF9yZWYkbGV2ZWwsXG4gICAgICAgIG1lc3NhZ2VzID0gX3JlZi5tZXNzYWdlcyxcbiAgICAgICAgbWVzc2FnZVNvdXJjZSA9IF9yZWYubWVzc2FnZVNvdXJjZTtcbiAgICAgIHJldHVybiBzaG93KGxldmVsLCBtZXNzYWdlcywgb3B0aW9ucy50cnVzdGVkVHlwZXNQb2xpY3lOYW1lLCBtZXNzYWdlU291cmNlKTtcbiAgICB9LFxuICAgIGhpZGVPdmVybGF5OiBoaWRlXG4gIH0pO1xuICBpZiAob3B0aW9ucy5jYXRjaFJ1bnRpbWVFcnJvcikge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RXJyb3IgfCB1bmRlZmluZWR9IGVycm9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZhbGxiYWNrTWVzc2FnZVxuICAgICAqL1xuICAgIHZhciBoYW5kbGVFcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yLCBmYWxsYmFja01lc3NhZ2UpIHtcbiAgICAgIHZhciBlcnJvck9iamVjdCA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihlcnJvciB8fCBmYWxsYmFja01lc3NhZ2UpO1xuICAgICAgdmFyIHNob3VsZERpc3BsYXkgPSB0eXBlb2Ygb3B0aW9ucy5jYXRjaFJ1bnRpbWVFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5jYXRjaFJ1bnRpbWVFcnJvcihlcnJvck9iamVjdCkgOiB0cnVlO1xuICAgICAgaWYgKHNob3VsZERpc3BsYXkpIHtcbiAgICAgICAgb3ZlcmxheVNlcnZpY2Uuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJSVU5USU1FX0VSUk9SXCIsXG4gICAgICAgICAgbWVzc2FnZXM6IFt7XG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvck9iamVjdC5tZXNzYWdlLFxuICAgICAgICAgICAgc3RhY2s6IHBhcnNlRXJyb3JUb1N0YWNrcyhlcnJvck9iamVjdClcbiAgICAgICAgICB9XVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxpc3RlblRvUnVudGltZUVycm9yKGZ1bmN0aW9uIChlcnJvckV2ZW50KSB7XG4gICAgICAvLyBlcnJvciBwcm9wZXJ0eSBtYXkgYmUgZW1wdHkgaW4gb2xkZXIgYnJvd3NlciBsaWtlIElFXG4gICAgICB2YXIgZXJyb3IgPSBlcnJvckV2ZW50LmVycm9yLFxuICAgICAgICBtZXNzYWdlID0gZXJyb3JFdmVudC5tZXNzYWdlO1xuICAgICAgaWYgKCFlcnJvciAmJiAhbWVzc2FnZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBoYW5kbGVFcnJvcihlcnJvciwgbWVzc2FnZSk7XG4gICAgfSk7XG4gICAgbGlzdGVuVG9VbmhhbmRsZWRSZWplY3Rpb24oZnVuY3Rpb24gKHByb21pc2VSZWplY3Rpb25FdmVudCkge1xuICAgICAgdmFyIHJlYXNvbiA9IHByb21pc2VSZWplY3Rpb25FdmVudC5yZWFzb247XG4gICAgICBoYW5kbGVFcnJvcihyZWFzb24sIFwiVW5rbm93biBwcm9taXNlIHJlamVjdGlvbiByZWFzb25cIik7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG92ZXJsYXlTZXJ2aWNlO1xufTtcbmV4cG9ydCB7IGZvcm1hdFByb2JsZW0sIGNyZWF0ZU92ZXJsYXkgfTsiLCJmdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSB0eXBlb2YgaSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIHQgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIGkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdGF0ZURlZmluaXRpb25zXG4gKiBAcHJvcGVydHkge3tbZXZlbnQ6IHN0cmluZ106IHsgdGFyZ2V0OiBzdHJpbmc7IGFjdGlvbnM/OiBBcnJheTxzdHJpbmc+IH19fSBbb25dXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPcHRpb25zXG4gKiBAcHJvcGVydHkge3tbc3RhdGU6IHN0cmluZ106IFN0YXRlRGVmaW5pdGlvbnN9fSBzdGF0ZXNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb250ZXh0O1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGluaXRpYWxcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEltcGxlbWVudGF0aW9uXG4gKiBAcHJvcGVydHkge3tbYWN0aW9uTmFtZTogc3RyaW5nXTogKGN0eDogb2JqZWN0LCBldmVudDogYW55KSA9PiBvYmplY3R9fSBhY3Rpb25zXG4gKi9cblxuLyoqXG4gKiBBIHNpbXBsaWZpZWQgYGNyZWF0ZU1hY2hpbmVgIGZyb20gYEB4c3RhdGUvZnNtYCB3aXRoIHRoZSBmb2xsb3dpbmcgZGlmZmVyZW5jZXM6XG4gKlxuICogIC0gdGhlIHJldHVybmVkIG1hY2hpbmUgaXMgdGVjaG5pY2FsbHkgYSBcInNlcnZpY2VcIi4gTm8gYGludGVycHJldChtYWNoaW5lKS5zdGFydCgpYCBpcyBuZWVkZWQuXG4gKiAgLSB0aGUgc3RhdGUgZGVmaW5pdGlvbiBvbmx5IHN1cHBvcnQgYG9uYCBhbmQgdGFyZ2V0IG11c3QgYmUgZGVjbGFyZWQgd2l0aCB7IHRhcmdldDogJ25leHRTdGF0ZScsIGFjdGlvbnM6IFtdIH0gZXhwbGljaXRseS5cbiAqICAtIGV2ZW50IHBhc3NlZCB0byBgc2VuZGAgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBgdHlwZWAgcHJvcGVydHkuXG4gKiAgLSBhY3Rpb25zIGltcGxlbWVudGF0aW9uIHdpbGwgYmUgW2Fzc2lnbiBhY3Rpb25dKGh0dHBzOi8veHN0YXRlLmpzLm9yZy9kb2NzL2d1aWRlcy9jb250ZXh0Lmh0bWwjYXNzaWduLWFjdGlvbikgaWYgeW91IHJldHVybiBhbnkgdmFsdWUuXG4gKiAgRG8gbm90IHJldHVybiBhbnl0aGluZyBpZiB5b3UganVzdCB3YW50IHRvIGludm9rZSBzaWRlIGVmZmVjdC5cbiAqXG4gKiBUaGUgZ29hbCBvZiB0aGlzIGN1c3RvbSBmdW5jdGlvbiBpcyB0byBhdm9pZCBpbnN0YWxsaW5nIHRoZSBlbnRpcmUgYCd4c3RhdGUvZnNtJ2AgcGFja2FnZSwgd2hpbGUgZW5hYmxpbmcgbW9kZWxpbmcgdXNpbmdcbiAqIHN0YXRlIG1hY2hpbmUuIFlvdSBjYW4gY29weSB0aGUgZmlyc3QgcGFyYW1ldGVyIGludG8gdGhlIGVkaXRvciBhdCBodHRwczovL3N0YXRlbHkuYWkvdml6IHRvIHZpc3VhbGl6ZSB0aGUgc3RhdGUgbWFjaGluZS5cbiAqXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcbiAqIEBwYXJhbSB7SW1wbGVtZW50YXRpb259IGltcGxlbWVudGF0aW9uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1hY2hpbmUoX3JlZiwgX3JlZjIpIHtcbiAgdmFyIHN0YXRlcyA9IF9yZWYuc3RhdGVzLFxuICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgaW5pdGlhbCA9IF9yZWYuaW5pdGlhbDtcbiAgdmFyIGFjdGlvbnMgPSBfcmVmMi5hY3Rpb25zO1xuICB2YXIgY3VycmVudFN0YXRlID0gaW5pdGlhbDtcbiAgdmFyIGN1cnJlbnRDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIHtcbiAgICBzZW5kOiBmdW5jdGlvbiBzZW5kKGV2ZW50KSB7XG4gICAgICB2YXIgY3VycmVudFN0YXRlT24gPSBzdGF0ZXNbY3VycmVudFN0YXRlXS5vbjtcbiAgICAgIHZhciB0cmFuc2l0aW9uQ29uZmlnID0gY3VycmVudFN0YXRlT24gJiYgY3VycmVudFN0YXRlT25bZXZlbnQudHlwZV07XG4gICAgICBpZiAodHJhbnNpdGlvbkNvbmZpZykge1xuICAgICAgICBjdXJyZW50U3RhdGUgPSB0cmFuc2l0aW9uQ29uZmlnLnRhcmdldDtcbiAgICAgICAgaWYgKHRyYW5zaXRpb25Db25maWcuYWN0aW9ucykge1xuICAgICAgICAgIHRyYW5zaXRpb25Db25maWcuYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3ROYW1lKSB7XG4gICAgICAgICAgICB2YXIgYWN0aW9uSW1wbCA9IGFjdGlvbnNbYWN0TmFtZV07XG4gICAgICAgICAgICB2YXIgbmV4dENvbnRleHRWYWx1ZSA9IGFjdGlvbkltcGwgJiYgYWN0aW9uSW1wbChjdXJyZW50Q29udGV4dCwgZXZlbnQpO1xuICAgICAgICAgICAgaWYgKG5leHRDb250ZXh0VmFsdWUpIHtcbiAgICAgICAgICAgICAgY3VycmVudENvbnRleHQgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1cnJlbnRDb250ZXh0KSwgbmV4dENvbnRleHRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNYWNoaW5lOyIsIi8qKlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRXJyb3JUb1N0YWNrcyhlcnJvcikge1xuICBpZiAoIWVycm9yIHx8ICEoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZUVycm9yVG9TdGFja3MgZXhwZWN0cyBFcnJvciBvYmplY3RcIik7XG4gIH1cbiAgaWYgKHR5cGVvZiBlcnJvci5zdGFjayA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBlcnJvci5zdGFjay5zcGxpdChcIlxcblwiKS5maWx0ZXIoZnVuY3Rpb24gKHN0YWNrKSB7XG4gICAgICByZXR1cm4gc3RhY2sgIT09IFwiRXJyb3I6IFwiLmNvbmNhdChlcnJvci5tZXNzYWdlKTtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEBjYWxsYmFjayBFcnJvckNhbGxiYWNrXG4gKiBAcGFyYW0ge0Vycm9yRXZlbnR9IGVycm9yXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RXJyb3JDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gbGlzdGVuVG9SdW50aW1lRXJyb3IoY2FsbGJhY2spIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBjYWxsYmFjayk7XG4gIHJldHVybiBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgY2FsbGJhY2spO1xuICB9O1xufVxuXG4vKipcbiAqIEBjYWxsYmFjayBVbmhhbmRsZWRSZWplY3Rpb25DYWxsYmFja1xuICogQHBhcmFtIHtQcm9taXNlUmVqZWN0aW9uRXZlbnR9IHJlamVjdGlvbkV2ZW50XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7VW5oYW5kbGVkUmVqZWN0aW9uQ2FsbGJhY2t9IGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGxpc3RlblRvVW5oYW5kbGVkUmVqZWN0aW9uKGNhbGxiYWNrKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidW5oYW5kbGVkcmVqZWN0aW9uXCIsIGNhbGxiYWNrKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1bmhhbmRsZWRyZWplY3Rpb25cIiwgY2FsbGJhY2spO1xuICB9O1xufVxuZXhwb3J0IHsgbGlzdGVuVG9SdW50aW1lRXJyb3IsIGxpc3RlblRvVW5oYW5kbGVkUmVqZWN0aW9uLCBwYXJzZUVycm9yVG9TdGFja3MgfTsiLCJpbXBvcnQgY3JlYXRlTWFjaGluZSBmcm9tIFwiLi9mc20uanNcIjtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaG93T3ZlcmxheURhdGFcbiAqIEBwcm9wZXJ0eSB7J3dhcm5pbmcnIHwgJ2Vycm9yJ30gbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nICB8IHsgbW9kdWxlSWRlbnRpZmllcj86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nIH0+fSBtZXNzYWdlc1xuICogQHByb3BlcnR5IHsnYnVpbGQnIHwgJ3J1bnRpbWUnfSBtZXNzYWdlU291cmNlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDcmVhdGVPdmVybGF5TWFjaGluZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7KGRhdGE6IFNob3dPdmVybGF5RGF0YSkgPT4gdm9pZH0gc2hvd092ZXJsYXlcbiAqIEBwcm9wZXJ0eSB7KCkgPT4gdm9pZH0gaGlkZU92ZXJsYXlcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Q3JlYXRlT3ZlcmxheU1hY2hpbmVPcHRpb25zfSBvcHRpb25zXG4gKi9cbnZhciBjcmVhdGVPdmVybGF5TWFjaGluZSA9IGZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXlNYWNoaW5lKG9wdGlvbnMpIHtcbiAgdmFyIGhpZGVPdmVybGF5ID0gb3B0aW9ucy5oaWRlT3ZlcmxheSxcbiAgICBzaG93T3ZlcmxheSA9IG9wdGlvbnMuc2hvd092ZXJsYXk7XG4gIHZhciBvdmVybGF5TWFjaGluZSA9IGNyZWF0ZU1hY2hpbmUoe1xuICAgIGluaXRpYWw6IFwiaGlkZGVuXCIsXG4gICAgY29udGV4dDoge1xuICAgICAgbGV2ZWw6IFwiZXJyb3JcIixcbiAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgIG1lc3NhZ2VTb3VyY2U6IFwiYnVpbGRcIlxuICAgIH0sXG4gICAgc3RhdGVzOiB7XG4gICAgICBoaWRkZW46IHtcbiAgICAgICAgb246IHtcbiAgICAgICAgICBCVUlMRF9FUlJPUjoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImRpc3BsYXlCdWlsZEVycm9yXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJzZXRNZXNzYWdlc1wiLCBcInNob3dPdmVybGF5XCJdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBSVU5USU1FX0VSUk9SOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwiZGlzcGxheVJ1bnRpbWVFcnJvclwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wic2V0TWVzc2FnZXNcIiwgXCJzaG93T3ZlcmxheVwiXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRpc3BsYXlCdWlsZEVycm9yOiB7XG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgRElTTUlTUzoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImhpZGRlblwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wiZGlzbWlzc01lc3NhZ2VzXCIsIFwiaGlkZU92ZXJsYXlcIl1cbiAgICAgICAgICB9LFxuICAgICAgICAgIEJVSUxEX0VSUk9SOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwiZGlzcGxheUJ1aWxkRXJyb3JcIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcImFwcGVuZE1lc3NhZ2VzXCIsIFwic2hvd092ZXJsYXlcIl1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkaXNwbGF5UnVudGltZUVycm9yOiB7XG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgRElTTUlTUzoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImhpZGRlblwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wiZGlzbWlzc01lc3NhZ2VzXCIsIFwiaGlkZU92ZXJsYXlcIl1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFJVTlRJTUVfRVJST1I6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJkaXNwbGF5UnVudGltZUVycm9yXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJhcHBlbmRNZXNzYWdlc1wiLCBcInNob3dPdmVybGF5XCJdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBCVUlMRF9FUlJPUjoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImRpc3BsYXlCdWlsZEVycm9yXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJzZXRNZXNzYWdlc1wiLCBcInNob3dPdmVybGF5XCJdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgYWN0aW9uczoge1xuICAgICAgZGlzbWlzc01lc3NhZ2VzOiBmdW5jdGlvbiBkaXNtaXNzTWVzc2FnZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgIGxldmVsOiBcImVycm9yXCIsXG4gICAgICAgICAgbWVzc2FnZVNvdXJjZTogXCJidWlsZFwiXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgYXBwZW5kTWVzc2FnZXM6IGZ1bmN0aW9uIGFwcGVuZE1lc3NhZ2VzKGNvbnRleHQsIGV2ZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWVzc2FnZXM6IGNvbnRleHQubWVzc2FnZXMuY29uY2F0KGV2ZW50Lm1lc3NhZ2VzKSxcbiAgICAgICAgICBsZXZlbDogZXZlbnQubGV2ZWwgfHwgY29udGV4dC5sZXZlbCxcbiAgICAgICAgICBtZXNzYWdlU291cmNlOiBldmVudC50eXBlID09PSBcIlJVTlRJTUVfRVJST1JcIiA/IFwicnVudGltZVwiIDogXCJidWlsZFwiXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgc2V0TWVzc2FnZXM6IGZ1bmN0aW9uIHNldE1lc3NhZ2VzKGNvbnRleHQsIGV2ZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWVzc2FnZXM6IGV2ZW50Lm1lc3NhZ2VzLFxuICAgICAgICAgIGxldmVsOiBldmVudC5sZXZlbCB8fCBjb250ZXh0LmxldmVsLFxuICAgICAgICAgIG1lc3NhZ2VTb3VyY2U6IGV2ZW50LnR5cGUgPT09IFwiUlVOVElNRV9FUlJPUlwiID8gXCJydW50aW1lXCIgOiBcImJ1aWxkXCJcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBoaWRlT3ZlcmxheTogaGlkZU92ZXJsYXksXG4gICAgICBzaG93T3ZlcmxheTogc2hvd092ZXJsYXlcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3ZlcmxheU1hY2hpbmU7XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlT3ZlcmxheU1hY2hpbmU7IiwiLy8gc3R5bGVzIGFyZSBpbnNwaXJlZCBieSBgcmVhY3QtZXJyb3Itb3ZlcmxheWBcblxudmFyIG1zZ1N0eWxlcyA9IHtcbiAgZXJyb3I6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgyMDYsIDE3LCAzOCwgMC4xKVwiLFxuICAgIGNvbG9yOiBcIiNmY2NmY2ZcIlxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjUxLCAyNDUsIDE4MCwgMC4xKVwiLFxuICAgIGNvbG9yOiBcIiNmYmY1YjRcIlxuICB9XG59O1xudmFyIGlmcmFtZVN0eWxlID0ge1xuICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIHdpZHRoOiBcIjEwMHZ3XCIsXG4gIGhlaWdodDogXCIxMDB2aFwiLFxuICBib3JkZXI6IFwibm9uZVwiLFxuICBcInotaW5kZXhcIjogOTk5OTk5OTk5OVxufTtcbnZhciBjb250YWluZXJTdHlsZSA9IHtcbiAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgbGVmdDogMCxcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICB3aWR0aDogXCIxMDB2d1wiLFxuICBoZWlnaHQ6IFwiMTAwdmhcIixcbiAgZm9udFNpemU6IFwibGFyZ2VcIixcbiAgcGFkZGluZzogXCIycmVtIDJyZW0gNHJlbSAycmVtXCIsXG4gIGxpbmVIZWlnaHQ6IFwiMS4yXCIsXG4gIHdoaXRlU3BhY2U6IFwicHJlLXdyYXBcIixcbiAgb3ZlcmZsb3c6IFwiYXV0b1wiLFxuICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAwLjkpXCIsXG4gIGNvbG9yOiBcIndoaXRlXCJcbn07XG52YXIgaGVhZGVyU3R5bGUgPSB7XG4gIGNvbG9yOiBcIiNlODNiNDZcIixcbiAgZm9udFNpemU6IFwiMmVtXCIsXG4gIHdoaXRlU3BhY2U6IFwicHJlLXdyYXBcIixcbiAgZm9udEZhbWlseTogXCJzYW5zLXNlcmlmXCIsXG4gIG1hcmdpbjogXCIwIDJyZW0gMnJlbSAwXCIsXG4gIGZsZXg6IFwiMCAwIGF1dG9cIixcbiAgbWF4SGVpZ2h0OiBcIjUwJVwiLFxuICBvdmVyZmxvdzogXCJhdXRvXCJcbn07XG52YXIgZGlzbWlzc0J1dHRvblN0eWxlID0ge1xuICBjb2xvcjogXCIjZmZmZmZmXCIsXG4gIGxpbmVIZWlnaHQ6IFwiMXJlbVwiLFxuICBmb250U2l6ZTogXCIxLjVyZW1cIixcbiAgcGFkZGluZzogXCIxcmVtXCIsXG4gIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gIHJpZ2h0OiAwLFxuICB0b3A6IDAsXG4gIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxuICBib3JkZXI6IFwibm9uZVwiXG59O1xudmFyIG1zZ1R5cGVTdHlsZSA9IHtcbiAgY29sb3I6IFwiI2U4M2I0NlwiLFxuICBmb250U2l6ZTogXCIxLjJlbVwiLFxuICBtYXJnaW5Cb3R0b206IFwiMXJlbVwiLFxuICBmb250RmFtaWx5OiBcInNhbnMtc2VyaWZcIlxufTtcbnZhciBtc2dUZXh0U3R5bGUgPSB7XG4gIGxpbmVIZWlnaHQ6IFwiMS41XCIsXG4gIGZvbnRTaXplOiBcIjFyZW1cIixcbiAgZm9udEZhbWlseTogXCJNZW5sbywgQ29uc29sYXMsIG1vbm9zcGFjZVwiXG59O1xuZXhwb3J0IHsgbXNnU3R5bGVzLCBpZnJhbWVTdHlsZSwgY29udGFpbmVyU3R5bGUsIGhlYWRlclN0eWxlLCBkaXNtaXNzQnV0dG9uU3R5bGUsIG1zZ1R5cGVTdHlsZSwgbXNnVGV4dFN0eWxlIH07IiwiLyogZ2xvYmFsIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICovXG5cbmltcG9ydCBXZWJTb2NrZXRDbGllbnQgZnJvbSBcIi4vY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanNcIjtcbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuL3V0aWxzL2xvZy5qc1wiO1xuXG4vLyB0aGlzIFdlYnNvY2tldENsaWVudCBpcyBoZXJlIGFzIGEgZGVmYXVsdCBmYWxsYmFjaywgaW4gY2FzZSB0aGUgY2xpZW50IGlzIG5vdCBpbmplY3RlZFxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG52YXIgQ2xpZW50ID1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxudHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICE9PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fLmRlZmF1bHQgIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXy5kZWZhdWx0IDogX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gOiBXZWJTb2NrZXRDbGllbnQ7XG4vKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xuXG52YXIgcmV0cmllcyA9IDA7XG52YXIgbWF4UmV0cmllcyA9IDEwO1xuXG4vLyBJbml0aWFsaXplZCBjbGllbnQgaXMgZXhwb3J0ZWQgc28gZXh0ZXJuYWwgY29uc3VtZXJzIGNhbiB1dGlsaXplIHRoZSBzYW1lIGluc3RhbmNlXG4vLyBJdCBpcyBtdXRhYmxlIHRvIGVuZm9yY2Ugc2luZ2xldG9uXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW11dGFibGUtZXhwb3J0c1xuZXhwb3J0IHZhciBjbGllbnQgPSBudWxsO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7eyBbaGFuZGxlcjogc3RyaW5nXTogKGRhdGE/OiBhbnksIHBhcmFtcz86IGFueSkgPT4gYW55IH19IGhhbmRsZXJzXG4gKiBAcGFyYW0ge251bWJlcn0gW3JlY29ubmVjdF1cbiAqL1xudmFyIHNvY2tldCA9IGZ1bmN0aW9uIGluaXRTb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KSB7XG4gIGNsaWVudCA9IG5ldyBDbGllbnQodXJsKTtcbiAgY2xpZW50Lm9uT3BlbihmdW5jdGlvbiAoKSB7XG4gICAgcmV0cmllcyA9IDA7XG4gICAgaWYgKHR5cGVvZiByZWNvbm5lY3QgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIG1heFJldHJpZXMgPSByZWNvbm5lY3Q7XG4gICAgfVxuICB9KTtcbiAgY2xpZW50Lm9uQ2xvc2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZXRyaWVzID09PSAwKSB7XG4gICAgICBoYW5kbGVycy5jbG9zZSgpO1xuICAgIH1cblxuICAgIC8vIFRyeSB0byByZWNvbm5lY3QuXG4gICAgY2xpZW50ID0gbnVsbDtcblxuICAgIC8vIEFmdGVyIDEwIHJldHJpZXMgc3RvcCB0cnlpbmcsIHRvIHByZXZlbnQgbG9nc3BhbS5cbiAgICBpZiAocmV0cmllcyA8IG1heFJldHJpZXMpIHtcbiAgICAgIC8vIEV4cG9uZW50aWFsbHkgaW5jcmVhc2UgdGltZW91dCB0byByZWNvbm5lY3QuXG4gICAgICAvLyBSZXNwZWN0ZnVsbHkgY29waWVkIGZyb20gdGhlIHBhY2thZ2UgYGdvdGAuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG4gICAgICB2YXIgcmV0cnlJbk1zID0gMTAwMCAqIE1hdGgucG93KDIsIHJldHJpZXMpICsgTWF0aC5yYW5kb20oKSAqIDEwMDtcbiAgICAgIHJldHJpZXMgKz0gMTtcbiAgICAgIGxvZy5pbmZvKFwiVHJ5aW5nIHRvIHJlY29ubmVjdC4uLlwiKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KTtcbiAgICAgIH0sIHJldHJ5SW5Ncyk7XG4gICAgfVxuICB9KTtcbiAgY2xpZW50Lm9uTWVzc2FnZShcbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBkYXRhXG4gICAqL1xuICBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICBpZiAoaGFuZGxlcnNbbWVzc2FnZS50eXBlXSkge1xuICAgICAgaGFuZGxlcnNbbWVzc2FnZS50eXBlXShtZXNzYWdlLmRhdGEsIG1lc3NhZ2UucGFyYW1zKTtcbiAgICB9XG4gIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IHNvY2tldDsiLCIvKipcbiAqIEBwYXJhbSB7eyBwcm90b2NvbD86IHN0cmluZywgYXV0aD86IHN0cmluZywgaG9zdG5hbWU/OiBzdHJpbmcsIHBvcnQ/OiBzdHJpbmcsIHBhdGhuYW1lPzogc3RyaW5nLCBzZWFyY2g/OiBzdHJpbmcsIGhhc2g/OiBzdHJpbmcsIHNsYXNoZXM/OiBib29sZWFuIH19IG9ialVSTFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZm9ybWF0KG9ialVSTCkge1xuICB2YXIgcHJvdG9jb2wgPSBvYmpVUkwucHJvdG9jb2wgfHwgXCJcIjtcbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09IFwiOlwiKSB7XG4gICAgcHJvdG9jb2wgKz0gXCI6XCI7XG4gIH1cbiAgdmFyIGF1dGggPSBvYmpVUkwuYXV0aCB8fCBcIlwiO1xuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksIFwiOlwiKTtcbiAgICBhdXRoICs9IFwiQFwiO1xuICB9XG4gIHZhciBob3N0ID0gXCJcIjtcbiAgaWYgKG9ialVSTC5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKG9ialVSTC5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKSA9PT0gLTEgPyBvYmpVUkwuaG9zdG5hbWUgOiBcIltcIi5jb25jYXQob2JqVVJMLmhvc3RuYW1lLCBcIl1cIikpO1xuICAgIGlmIChvYmpVUkwucG9ydCkge1xuICAgICAgaG9zdCArPSBcIjpcIi5jb25jYXQob2JqVVJMLnBvcnQpO1xuICAgIH1cbiAgfVxuICB2YXIgcGF0aG5hbWUgPSBvYmpVUkwucGF0aG5hbWUgfHwgXCJcIjtcbiAgaWYgKG9ialVSTC5zbGFzaGVzKSB7XG4gICAgaG9zdCA9IFwiLy9cIi5jb25jYXQoaG9zdCB8fCBcIlwiKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSBcIi9cIikge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIi5jb25jYXQocGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSBcIlwiO1xuICB9XG4gIHZhciBzZWFyY2ggPSBvYmpVUkwuc2VhcmNoIHx8IFwiXCI7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gXCI/XCIpIHtcbiAgICBzZWFyY2ggPSBcIj9cIi5jb25jYXQoc2VhcmNoKTtcbiAgfVxuICB2YXIgaGFzaCA9IG9ialVSTC5oYXNoIHx8IFwiXCI7XG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSBcIiNcIikge1xuICAgIGhhc2ggPSBcIiNcIi5jb25jYXQoaGFzaCk7XG4gIH1cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2hcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoXCIjXCIsIFwiJTIzXCIpO1xuICByZXR1cm4gXCJcIi5jb25jYXQocHJvdG9jb2wpLmNvbmNhdChob3N0KS5jb25jYXQocGF0aG5hbWUpLmNvbmNhdChzZWFyY2gpLmNvbmNhdChoYXNoKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VSTCAmIHsgZnJvbUN1cnJlbnRTY3JpcHQ/OiBib29sZWFuIH19IHBhcnNlZFVSTFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU29ja2V0VVJMKHBhcnNlZFVSTCkge1xuICB2YXIgaG9zdG5hbWUgPSBwYXJzZWRVUkwuaG9zdG5hbWU7XG5cbiAgLy8gTm9kZS5qcyBtb2R1bGUgcGFyc2VzIGl0IGFzIGA6OmBcbiAgLy8gYG5ldyBVUkwodXJsU3RyaW5nLCBbYmFzZVVSTFN0cmluZ10pYCBwYXJzZXMgaXQgYXMgJ1s6Ol0nXG4gIHZhciBpc0luQWRkckFueSA9IGhvc3RuYW1lID09PSBcIjAuMC4wLjBcIiB8fCBob3N0bmFtZSA9PT0gXCI6OlwiIHx8IGhvc3RuYW1lID09PSBcIls6Ol1cIjtcblxuICAvLyB3aHkgZG8gd2UgbmVlZCB0aGlzIGNoZWNrP1xuICAvLyBob3N0bmFtZSBuL2EgZm9yIGZpbGUgcHJvdG9jb2wgKGV4YW1wbGUsIHdoZW4gdXNpbmcgZWxlY3Ryb24sIGlvbmljKVxuICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2stZGV2LXNlcnZlci9wdWxsLzM4NFxuICBpZiAoaXNJbkFkZHJBbnkgJiYgc2VsZi5sb2NhdGlvbi5ob3N0bmFtZSAmJiBzZWxmLmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoXCJodHRwXCIpID09PSAwKSB7XG4gICAgaG9zdG5hbWUgPSBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lO1xuICB9XG4gIHZhciBzb2NrZXRVUkxQcm90b2NvbCA9IHBhcnNlZFVSTC5wcm90b2NvbCB8fCBzZWxmLmxvY2F0aW9uLnByb3RvY29sO1xuXG4gIC8vIFdoZW4gaHR0cHMgaXMgdXNlZCBpbiB0aGUgYXBwLCBzZWN1cmUgd2ViIHNvY2tldHMgYXJlIGFsd2F5cyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgYnJvd3NlciBkb2Vzbid0IGFjY2VwdCBub24tc2VjdXJlIHdlYiBzb2NrZXRzLlxuICBpZiAoc29ja2V0VVJMUHJvdG9jb2wgPT09IFwiYXV0bzpcIiB8fCBob3N0bmFtZSAmJiBpc0luQWRkckFueSAmJiBzZWxmLmxvY2F0aW9uLnByb3RvY29sID09PSBcImh0dHBzOlwiKSB7XG4gICAgc29ja2V0VVJMUHJvdG9jb2wgPSBzZWxmLmxvY2F0aW9uLnByb3RvY29sO1xuICB9XG4gIHNvY2tldFVSTFByb3RvY29sID0gc29ja2V0VVJMUHJvdG9jb2wucmVwbGFjZSgvXig/Omh0dHB8ListZXh0ZW5zaW9ufGZpbGUpL2ksIFwid3NcIik7XG4gIHZhciBzb2NrZXRVUkxBdXRoID0gXCJcIjtcblxuICAvLyBgbmV3IFVSTCh1cmxTdHJpbmcsIFtiYXNlVVJMc3RyaW5nXSlgIGRvZXNuJ3QgaGF2ZSBgYXV0aGAgcHJvcGVydHlcbiAgLy8gUGFyc2UgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgaW4gY2FzZSB3ZSBuZWVkIHRoZW1cbiAgaWYgKHBhcnNlZFVSTC51c2VybmFtZSkge1xuICAgIHNvY2tldFVSTEF1dGggPSBwYXJzZWRVUkwudXNlcm5hbWU7XG5cbiAgICAvLyBTaW5jZSBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uIGRvZXMgbm90IGFsbG93IGVtcHR5IHVzZXJuYW1lLFxuICAgIC8vIHdlIG9ubHkgaW5jbHVkZSBwYXNzd29yZCBpZiB0aGUgdXNlcm5hbWUgaXMgbm90IGVtcHR5LlxuICAgIGlmIChwYXJzZWRVUkwucGFzc3dvcmQpIHtcbiAgICAgIC8vIFJlc3VsdDogPHVzZXJuYW1lPjo8cGFzc3dvcmQ+XG4gICAgICBzb2NrZXRVUkxBdXRoID0gc29ja2V0VVJMQXV0aC5jb25jYXQoXCI6XCIsIHBhcnNlZFVSTC5wYXNzd29yZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gSW4gY2FzZSB0aGUgaG9zdCBpcyBhIHJhdyBJUHY2IGFkZHJlc3MsIGl0IGNhbiBiZSBlbmNsb3NlZCBpblxuICAvLyB0aGUgYnJhY2tldHMgYXMgdGhlIGJyYWNrZXRzIGFyZSBuZWVkZWQgaW4gdGhlIGZpbmFsIFVSTCBzdHJpbmcuXG4gIC8vIE5lZWQgdG8gcmVtb3ZlIHRob3NlIGFzIHVybC5mb3JtYXQgYmxpbmRseSBhZGRzIGl0cyBvd24gc2V0IG9mIGJyYWNrZXRzXG4gIC8vIGlmIHRoZSBob3N0IHN0cmluZyBjb250YWlucyBjb2xvbnMuIFRoYXQgd291bGQgbGVhZCB0byBub24td29ya2luZ1xuICAvLyBkb3VibGUgYnJhY2tldHMgKGUuZy4gW1s6Ol1dKSBob3N0XG4gIC8vXG4gIC8vIEFsbCBvZiB0aGVzZSB3ZWIgc29ja2V0IHVybCBwYXJhbXMgYXJlIG9wdGlvbmFsbHkgcGFzc2VkIGluIHRocm91Z2ggcmVzb3VyY2VRdWVyeSxcbiAgLy8gc28gd2UgbmVlZCB0byBmYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgaWYgdGhleSBhcmUgbm90IHByb3ZpZGVkXG4gIHZhciBzb2NrZXRVUkxIb3N0bmFtZSA9IChob3N0bmFtZSB8fCBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lIHx8IFwibG9jYWxob3N0XCIpLnJlcGxhY2UoL15cXFsoLiopXFxdJC8sIFwiJDFcIik7XG4gIHZhciBzb2NrZXRVUkxQb3J0ID0gcGFyc2VkVVJMLnBvcnQ7XG4gIGlmICghc29ja2V0VVJMUG9ydCB8fCBzb2NrZXRVUkxQb3J0ID09PSBcIjBcIikge1xuICAgIHNvY2tldFVSTFBvcnQgPSBzZWxmLmxvY2F0aW9uLnBvcnQ7XG4gIH1cblxuICAvLyBJZiBwYXRoIGlzIHByb3ZpZGVkIGl0J2xsIGJlIHBhc3NlZCBpbiB2aWEgdGhlIHJlc291cmNlUXVlcnkgYXMgYVxuICAvLyBxdWVyeSBwYXJhbSBzbyBpdCBoYXMgdG8gYmUgcGFyc2VkIG91dCBvZiB0aGUgcXVlcnlzdHJpbmcgaW4gb3JkZXIgZm9yIHRoZVxuICAvLyBjbGllbnQgdG8gb3BlbiB0aGUgc29ja2V0IHRvIHRoZSBjb3JyZWN0IGxvY2F0aW9uLlxuICB2YXIgc29ja2V0VVJMUGF0aG5hbWUgPSBcIi93c1wiO1xuICBpZiAocGFyc2VkVVJMLnBhdGhuYW1lICYmICFwYXJzZWRVUkwuZnJvbUN1cnJlbnRTY3JpcHQpIHtcbiAgICBzb2NrZXRVUkxQYXRobmFtZSA9IHBhcnNlZFVSTC5wYXRobmFtZTtcbiAgfVxuICByZXR1cm4gZm9ybWF0KHtcbiAgICBwcm90b2NvbDogc29ja2V0VVJMUHJvdG9jb2wsXG4gICAgYXV0aDogc29ja2V0VVJMQXV0aCxcbiAgICBob3N0bmFtZTogc29ja2V0VVJMSG9zdG5hbWUsXG4gICAgcG9ydDogc29ja2V0VVJMUG9ydCxcbiAgICBwYXRobmFtZTogc29ja2V0VVJMUGF0aG5hbWUsXG4gICAgc2xhc2hlczogdHJ1ZVxuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNvY2tldFVSTDsiLCIvKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKSB7XG4gIC8vIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YCBpcyB0aGUgbW9zdCBhY2N1cmF0ZSB3YXkgdG8gZmluZCB0aGUgY3VycmVudCBzY3JpcHQsXG4gIC8vIGJ1dCBpcyBub3Qgc3VwcG9ydGVkIGluIGFsbCBicm93c2Vycy5cbiAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH1cblxuICAvLyBGYWxsYmFjayB0byBnZXR0aW5nIGFsbCBzY3JpcHRzIHJ1bm5pbmcgaW4gdGhlIGRvY3VtZW50LlxuICB2YXIgc2NyaXB0RWxlbWVudHMgPSBkb2N1bWVudC5zY3JpcHRzIHx8IFtdO1xuICB2YXIgc2NyaXB0RWxlbWVudHNXaXRoU3JjID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHNjcmlwdEVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgfSk7XG4gIGlmIChzY3JpcHRFbGVtZW50c1dpdGhTcmMubGVuZ3RoID4gMCkge1xuICAgIHZhciBjdXJyZW50U2NyaXB0ID0gc2NyaXB0RWxlbWVudHNXaXRoU3JjW3NjcmlwdEVsZW1lbnRzV2l0aFNyYy5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH1cblxuICAvLyBGYWlsIGFzIHRoZXJlIHdhcyBubyBzY3JpcHQgdG8gdXNlLlxuICB0aHJvdyBuZXcgRXJyb3IoXCJbd2VicGFjay1kZXYtc2VydmVyXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS5cIik7XG59XG5leHBvcnQgZGVmYXVsdCBnZXRDdXJyZW50U2NyaXB0U291cmNlOyIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uL21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzXCI7XG52YXIgbmFtZSA9IFwid2VicGFjay1kZXYtc2VydmVyXCI7XG4vLyBkZWZhdWx0IGxldmVsIGlzIHNldCBvbiB0aGUgY2xpZW50IHNpZGUsIHNvIGl0IGRvZXMgbm90IG5lZWRcbi8vIHRvIGJlIHNldCBieSB0aGUgQ0xJIG9yIEFQSVxudmFyIGRlZmF1bHRMZXZlbCA9IFwiaW5mb1wiO1xuXG4vLyBvcHRpb25zIG5ldyBvcHRpb25zLCBtZXJnZSB3aXRoIG9sZCBvcHRpb25zXG4vKipcbiAqIEBwYXJhbSB7ZmFsc2UgfCB0cnVlIHwgXCJub25lXCIgfCBcImVycm9yXCIgfCBcIndhcm5cIiB8IFwiaW5mb1wiIHwgXCJsb2dcIiB8IFwidmVyYm9zZVwifSBsZXZlbFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XG4gIGxvZ2dlci5jb25maWd1cmVEZWZhdWx0TG9nZ2VyKHtcbiAgICBsZXZlbDogbGV2ZWxcbiAgfSk7XG59XG5zZXRMb2dMZXZlbChkZWZhdWx0TGV2ZWwpO1xudmFyIGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIobmFtZSk7XG52YXIgbG9nRW5hYmxlZEZlYXR1cmVzID0gZnVuY3Rpb24gbG9nRW5hYmxlZEZlYXR1cmVzKGZlYXR1cmVzKSB7XG4gIHZhciBlbmFibGVkRmVhdHVyZXMgPSBPYmplY3Qua2V5cyhmZWF0dXJlcyk7XG4gIGlmICghZmVhdHVyZXMgfHwgZW5hYmxlZEZlYXR1cmVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbG9nU3RyaW5nID0gXCJTZXJ2ZXIgc3RhcnRlZDpcIjtcblxuICAvLyBTZXJ2ZXIgc3RhcnRlZDogSG90IE1vZHVsZSBSZXBsYWNlbWVudCBlbmFibGVkLCBMaXZlIFJlbG9hZGluZyBlbmFibGVkLCBPdmVybGF5IGRpc2FibGVkLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVuYWJsZWRGZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBlbmFibGVkRmVhdHVyZXNbaV07XG4gICAgbG9nU3RyaW5nICs9IFwiIFwiLmNvbmNhdChrZXksIFwiIFwiKS5jb25jYXQoZmVhdHVyZXNba2V5XSA/IFwiZW5hYmxlZFwiIDogXCJkaXNhYmxlZFwiLCBcIixcIik7XG4gIH1cbiAgLy8gcmVwbGFjZSBsYXN0IGNvbW1hIHdpdGggYSBwZXJpb2RcbiAgbG9nU3RyaW5nID0gbG9nU3RyaW5nLnNsaWNlKDAsIC0xKS5jb25jYXQoXCIuXCIpO1xuICBsb2cuaW5mbyhsb2dTdHJpbmcpO1xufTtcbmV4cG9ydCB7IGxvZywgbG9nRW5hYmxlZEZlYXR1cmVzLCBzZXRMb2dMZXZlbCB9OyIsImltcG9ydCBnZXRDdXJyZW50U2NyaXB0U291cmNlIGZyb20gXCIuL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanNcIjtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VRdWVyeVxuICogQHJldHVybnMge3sgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgYm9vbGVhbiB9fVxuICovXG5mdW5jdGlvbiBwYXJzZVVSTChyZXNvdXJjZVF1ZXJ5KSB7XG4gIC8qKiBAdHlwZSB7eyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfX0gKi9cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgaWYgKHR5cGVvZiByZXNvdXJjZVF1ZXJ5ID09PSBcInN0cmluZ1wiICYmIHJlc291cmNlUXVlcnkgIT09IFwiXCIpIHtcbiAgICB2YXIgc2VhcmNoUGFyYW1zID0gcmVzb3VyY2VRdWVyeS5zbGljZSgxKS5zcGxpdChcIiZcIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWFyY2hQYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYWlyID0gc2VhcmNoUGFyYW1zW2ldLnNwbGl0KFwiPVwiKTtcbiAgICAgIG9wdGlvbnNbcGFpclswXV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEVsc2UsIGdldCB0aGUgdXJsIGZyb20gdGhlIDxzY3JpcHQ+IHRoaXMgZmlsZSB3YXMgY2FsbGVkIHdpdGguXG4gICAgdmFyIHNjcmlwdFNvdXJjZSA9IGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKTtcbiAgICB2YXIgc2NyaXB0U291cmNlVVJMO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgYGJhc2VVUkxgIHdpdGggYHdpbmRvdy5sb2NhdGlvbi5ocmVmYCxcbiAgICAgIC8vIGlzIHRvIGFsbG93IHBhcnNpbmcgb2YgcGF0aC1yZWxhdGl2ZSBvciBwcm90b2NvbC1yZWxhdGl2ZSBVUkxzLFxuICAgICAgLy8gYW5kIHdpbGwgaGF2ZSBubyBlZmZlY3QgaWYgYHNjcmlwdFNvdXJjZWAgaXMgYSBmdWxseSB2YWxpZCBVUkwuXG4gICAgICBzY3JpcHRTb3VyY2VVUkwgPSBuZXcgVVJMKHNjcmlwdFNvdXJjZSwgc2VsZi5sb2NhdGlvbi5ocmVmKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gVVJMIHBhcnNpbmcgZmFpbGVkLCBkbyBub3RoaW5nLlxuICAgICAgLy8gV2Ugd2lsbCBzdGlsbCBwcm9jZWVkIHRvIHNlZSBpZiB3ZSBjYW4gcmVjb3ZlciB1c2luZyBgcmVzb3VyY2VRdWVyeWBcbiAgICB9XG4gICAgaWYgKHNjcmlwdFNvdXJjZVVSTCkge1xuICAgICAgb3B0aW9ucyA9IHNjcmlwdFNvdXJjZVVSTDtcbiAgICAgIG9wdGlvbnMuZnJvbUN1cnJlbnRTY3JpcHQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cbmV4cG9ydCBkZWZhdWx0IHBhcnNlVVJMOyIsImltcG9ydCBob3RFbWl0dGVyIGZyb20gXCJ3ZWJwYWNrL2hvdC9lbWl0dGVyLmpzXCI7XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi9sb2cuanNcIjtcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi9pbmRleFwiKS5PcHRpb25zfSBPcHRpb25zXG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4uL2luZGV4XCIpLlN0YXR1c30gU3RhdHVzXG5cbi8qKlxuICogQHBhcmFtIHtPcHRpb25zfSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0YXR1c30gc3RhdHVzXG4gKi9cbmZ1bmN0aW9uIHJlbG9hZEFwcChfcmVmLCBzdGF0dXMpIHtcbiAgdmFyIGhvdCA9IF9yZWYuaG90LFxuICAgIGxpdmVSZWxvYWQgPSBfcmVmLmxpdmVSZWxvYWQ7XG4gIGlmIChzdGF0dXMuaXNVbmxvYWRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGN1cnJlbnRIYXNoID0gc3RhdHVzLmN1cnJlbnRIYXNoLFxuICAgIHByZXZpb3VzSGFzaCA9IHN0YXR1cy5wcmV2aW91c0hhc2g7XG4gIHZhciBpc0luaXRpYWwgPSBjdXJyZW50SGFzaC5pbmRleE9mKCAvKiogQHR5cGUge3N0cmluZ30gKi9wcmV2aW91c0hhc2gpID49IDA7XG4gIGlmIChpc0luaXRpYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtXaW5kb3d9IHJvb3RXaW5kb3dcbiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsSWRcbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgIGxvZy5pbmZvKFwiQXBwIHVwZGF0ZWQuIFJlbG9hZGluZy4uLlwiKTtcbiAgICByb290V2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG4gIHZhciBzZWFyY2ggPSBzZWxmLmxvY2F0aW9uLnNlYXJjaC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWxsb3dUb0hvdCA9IHNlYXJjaC5pbmRleE9mKFwid2VicGFjay1kZXYtc2VydmVyLWhvdD1mYWxzZVwiKSA9PT0gLTE7XG4gIHZhciBhbGxvd1RvTGl2ZVJlbG9hZCA9IHNlYXJjaC5pbmRleE9mKFwid2VicGFjay1kZXYtc2VydmVyLWxpdmUtcmVsb2FkPWZhbHNlXCIpID09PSAtMTtcbiAgaWYgKGhvdCAmJiBhbGxvd1RvSG90KSB7XG4gICAgbG9nLmluZm8oXCJBcHAgaG90IHVwZGF0ZS4uLlwiKTtcbiAgICBob3RFbWl0dGVyLmVtaXQoXCJ3ZWJwYWNrSG90VXBkYXRlXCIsIHN0YXR1cy5jdXJyZW50SGFzaCk7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYud2luZG93KSB7XG4gICAgICAvLyBicm9hZGNhc3QgdXBkYXRlIHRvIHdpbmRvd1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZShcIndlYnBhY2tIb3RVcGRhdGVcIi5jb25jYXQoc3RhdHVzLmN1cnJlbnRIYXNoKSwgXCIqXCIpO1xuICAgIH1cbiAgfVxuICAvLyBhbGxvdyByZWZyZXNoaW5nIHRoZSBwYWdlIG9ubHkgaWYgbGl2ZVJlbG9hZCBpc24ndCBkaXNhYmxlZFxuICBlbHNlIGlmIChsaXZlUmVsb2FkICYmIGFsbG93VG9MaXZlUmVsb2FkKSB7XG4gICAgdmFyIHJvb3RXaW5kb3cgPSBzZWxmO1xuXG4gICAgLy8gdXNlIHBhcmVudCB3aW5kb3cgZm9yIHJlbG9hZCAoaW4gY2FzZSB3ZSdyZSBpbiBhbiBpZnJhbWUgd2l0aCBubyB2YWxpZCBzcmMpXG4gICAgdmFyIGludGVydmFsSWQgPSBzZWxmLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChyb290V2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9PSBcImFib3V0OlwiKSB7XG4gICAgICAgIC8vIHJlbG9hZCBpbW1lZGlhdGVseSBpZiBwcm90b2NvbCBpcyB2YWxpZFxuICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3RXaW5kb3cgPSByb290V2luZG93LnBhcmVudDtcbiAgICAgICAgaWYgKHJvb3RXaW5kb3cucGFyZW50ID09PSByb290V2luZG93KSB7XG4gICAgICAgICAgLy8gaWYgcGFyZW50IGVxdWFscyBjdXJyZW50IHdpbmRvdyB3ZSd2ZSByZWFjaGVkIHRoZSByb290IHdoaWNoIHdvdWxkIGNvbnRpbnVlIGZvcmV2ZXIsIHNvIHRyaWdnZXIgYSByZWxvYWQgYW55d2F5c1xuICAgICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IHJlbG9hZEFwcDsiLCIvKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5IFdvcmtlckdsb2JhbFNjb3BlICovXG5cbi8vIFNlbmQgbWVzc2FnZXMgdG8gdGhlIG91dHNpZGUsIHNvIHBsdWdpbnMgY2FuIGNvbnN1bWUgaXQuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge2FueX0gW2RhdGFdXG4gKi9cbmZ1bmN0aW9uIHNlbmRNc2codHlwZSwgZGF0YSkge1xuICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgKHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSkpKSB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIndlYnBhY2tcIi5jb25jYXQodHlwZSksXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSwgXCIqXCIpO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBzZW5kTXNnOyIsInZhciBhbnNpUmVnZXggPSBuZXcgUmVnRXhwKFtcIltcXFxcdTAwMUJcXFxcdTAwOUJdW1tcXFxcXSgpIzs/XSooPzooPzooPzooPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10rKSp8W2EtekEtWlxcXFxkXSsoPzo7Wy1hLXpBLVpcXFxcZFxcXFwvIyYuOj0/JUB+X10qKSopP1xcXFx1MDAwNylcIiwgXCIoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUi1UWmNmLW5xLXV5PT48fl0pKVwiXS5qb2luKFwifFwiKSwgXCJnXCIpO1xuXG4vKipcbiAqXG4gKiBTdHJpcCBbQU5TSSBlc2NhcGUgY29kZXNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUpIGZyb20gYSBzdHJpbmcuXG4gKiBBZGFwdGVkIGZyb20gY29kZSBvcmlnaW5hbGx5IHJlbGVhc2VkIGJ5IFNpbmRyZSBTb3JodXNcbiAqIExpY2Vuc2VkIHRoZSBNSVQgTGljZW5zZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gc3RyaXBBbnNpKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBhIGBzdHJpbmdgLCBnb3QgYFwiLmNvbmNhdCh0eXBlb2Ygc3RyaW5nLCBcImBcIikpO1xuICB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShhbnNpUmVnZXgsIFwiXCIpO1xufVxuZXhwb3J0IGRlZmF1bHQgc3RyaXBBbnNpOyIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vKiBnbG9iYWxzIF9fd2VicGFja19oYXNoX18gKi9cbmlmIChtb2R1bGUuaG90KSB7XG5cdC8qKiBAdHlwZSB7dW5kZWZpbmVkfHN0cmluZ30gKi9cblx0dmFyIGxhc3RIYXNoO1xuXHR2YXIgdXBUb0RhdGUgPSBmdW5jdGlvbiB1cFRvRGF0ZSgpIHtcblx0XHRyZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChsYXN0SGFzaCkuaW5kZXhPZihfX3dlYnBhY2tfaGFzaF9fKSA+PSAwO1xuXHR9O1xuXHR2YXIgbG9nID0gcmVxdWlyZShcIi4vbG9nXCIpO1xuXHR2YXIgY2hlY2sgPSBmdW5jdGlvbiBjaGVjaygpIHtcblx0XHRtb2R1bGUuaG90XG5cdFx0XHQuY2hlY2sodHJ1ZSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uICh1cGRhdGVkTW9kdWxlcykge1xuXHRcdFx0XHRpZiAoIXVwZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRcdFx0bG9nKFxuXHRcdFx0XHRcdFx0XCJ3YXJuaW5nXCIsXG5cdFx0XHRcdFx0XHRcIltITVJdIENhbm5vdCBmaW5kIHVwZGF0ZS4gXCIgK1xuXHRcdFx0XHRcdFx0XHQodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuXHRcdFx0XHRcdFx0XHRcdD8gXCJOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhXCJcblx0XHRcdFx0XHRcdFx0XHQ6IFwiUGxlYXNlIHJlbG9hZCBtYW51YWxseSFcIilcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGxvZyhcblx0XHRcdFx0XHRcdFwid2FybmluZ1wiLFxuXHRcdFx0XHRcdFx0XCJbSE1SXSAoUHJvYmFibHkgYmVjYXVzZSBvZiByZXN0YXJ0aW5nIHRoZSB3ZWJwYWNrLWRldi1zZXJ2ZXIpXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghdXBUb0RhdGUoKSkge1xuXHRcdFx0XHRcdGNoZWNrKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXF1aXJlKFwiLi9sb2ctYXBwbHktcmVzdWx0XCIpKHVwZGF0ZWRNb2R1bGVzLCB1cGRhdGVkTW9kdWxlcyk7XG5cblx0XHRcdFx0aWYgKHVwVG9EYXRlKCkpIHtcblx0XHRcdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gQXBwIGlzIHVwIHRvIGRhdGUuXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0dmFyIHN0YXR1cyA9IG1vZHVsZS5ob3Quc3RhdHVzKCk7XG5cdFx0XHRcdGlmIChbXCJhYm9ydFwiLCBcImZhaWxcIl0uaW5kZXhPZihzdGF0dXMpID49IDApIHtcblx0XHRcdFx0XHRsb2coXG5cdFx0XHRcdFx0XHRcIndhcm5pbmdcIixcblx0XHRcdFx0XHRcdFwiW0hNUl0gQ2Fubm90IGFwcGx5IHVwZGF0ZS4gXCIgK1xuXHRcdFx0XHRcdFx0XHQodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuXHRcdFx0XHRcdFx0XHRcdD8gXCJOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhXCJcblx0XHRcdFx0XHRcdFx0XHQ6IFwiUGxlYXNlIHJlbG9hZCBtYW51YWxseSFcIilcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBcIiArIGxvZy5mb3JtYXRFcnJvcihlcnIpKTtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiW0hNUl0gVXBkYXRlIGZhaWxlZDogXCIgKyBsb2cuZm9ybWF0RXJyb3IoZXJyKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9O1xuXHR2YXIgaG90RW1pdHRlciA9IHJlcXVpcmUoXCIuL2VtaXR0ZXJcIik7XG5cdGhvdEVtaXR0ZXIub24oXCJ3ZWJwYWNrSG90VXBkYXRlXCIsIGZ1bmN0aW9uIChjdXJyZW50SGFzaCkge1xuXHRcdGxhc3RIYXNoID0gY3VycmVudEhhc2g7XG5cdFx0aWYgKCF1cFRvRGF0ZSgpICYmIG1vZHVsZS5ob3Quc3RhdHVzKCkgPT09IFwiaWRsZVwiKSB7XG5cdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gQ2hlY2tpbmcgZm9yIHVwZGF0ZXMgb24gdGhlIHNlcnZlci4uLlwiKTtcblx0XHRcdGNoZWNrKCk7XG5cdFx0fVxuXHR9KTtcblx0bG9nKFwiaW5mb1wiLCBcIltITVJdIFdhaXRpbmcgZm9yIHVwZGF0ZSBzaWduYWwgZnJvbSBXRFMuLi5cIik7XG59IGVsc2Uge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJbSE1SXSBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGlzIGRpc2FibGVkLlwiKTtcbn1cbiIsInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG4vKipcbiAqIEBwYXJhbSB7KHN0cmluZyB8IG51bWJlcilbXX0gdXBkYXRlZE1vZHVsZXMgdXBkYXRlZCBtb2R1bGVzXG4gKiBAcGFyYW0geyhzdHJpbmcgfCBudW1iZXIpW10gfCBudWxsfSByZW5ld2VkTW9kdWxlcyByZW5ld2VkIG1vZHVsZXNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXBkYXRlZE1vZHVsZXMsIHJlbmV3ZWRNb2R1bGVzKSB7XG5cdHZhciB1bmFjY2VwdGVkTW9kdWxlcyA9IHVwZGF0ZWRNb2R1bGVzLmZpbHRlcihmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRyZXR1cm4gcmVuZXdlZE1vZHVsZXMgJiYgcmVuZXdlZE1vZHVsZXMuaW5kZXhPZihtb2R1bGVJZCkgPCAwO1xuXHR9KTtcblx0dmFyIGxvZyA9IHJlcXVpcmUoXCIuL2xvZ1wiKTtcblxuXHRpZiAodW5hY2NlcHRlZE1vZHVsZXMubGVuZ3RoID4gMCkge1xuXHRcdGxvZyhcblx0XHRcdFwid2FybmluZ1wiLFxuXHRcdFx0XCJbSE1SXSBUaGUgZm9sbG93aW5nIG1vZHVsZXMgY291bGRuJ3QgYmUgaG90IHVwZGF0ZWQ6IChUaGV5IHdvdWxkIG5lZWQgYSBmdWxsIHJlbG9hZCEpXCJcblx0XHQpO1xuXHRcdHVuYWNjZXB0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiW0hNUl0gIC0gXCIgKyBtb2R1bGVJZCk7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIXJlbmV3ZWRNb2R1bGVzIHx8IHJlbmV3ZWRNb2R1bGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBOb3RoaW5nIGhvdCB1cGRhdGVkLlwiKTtcblx0fSBlbHNlIHtcblx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gVXBkYXRlZCBtb2R1bGVzOlwiKTtcblx0XHRyZW5ld2VkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0aWYgKHR5cGVvZiBtb2R1bGVJZCA9PT0gXCJzdHJpbmdcIiAmJiBtb2R1bGVJZC5pbmRleE9mKFwiIVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0dmFyIHBhcnRzID0gbW9kdWxlSWQuc3BsaXQoXCIhXCIpO1xuXHRcdFx0XHRsb2cuZ3JvdXBDb2xsYXBzZWQoXCJpbmZvXCIsIFwiW0hNUl0gIC0gXCIgKyBwYXJ0cy5wb3AoKSk7XG5cdFx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHRcdFx0bG9nLmdyb3VwRW5kKFwiaW5mb1wiKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR2YXIgbnVtYmVySWRzID0gcmVuZXdlZE1vZHVsZXMuZXZlcnkoZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIG1vZHVsZUlkID09PSBcIm51bWJlclwiO1xuXHRcdH0pO1xuXHRcdGlmIChudW1iZXJJZHMpXG5cdFx0XHRsb2coXG5cdFx0XHRcdFwiaW5mb1wiLFxuXHRcdFx0XHQnW0hNUl0gQ29uc2lkZXIgdXNpbmcgdGhlIG9wdGltaXphdGlvbi5tb2R1bGVJZHM6IFwibmFtZWRcIiBmb3IgbW9kdWxlIG5hbWVzLidcblx0XHRcdCk7XG5cdH1cbn07XG4iLCIvKiogQHR5cGVkZWYge1wiaW5mb1wiIHwgXCJ3YXJuaW5nXCIgfCBcImVycm9yXCJ9IExvZ0xldmVsICovXG5cbi8qKiBAdHlwZSB7TG9nTGV2ZWx9ICovXG52YXIgbG9nTGV2ZWwgPSBcImluZm9cIjtcblxuZnVuY3Rpb24gZHVtbXkoKSB7fVxuXG4vKipcbiAqIEBwYXJhbSB7TG9nTGV2ZWx9IGxldmVsIGxvZyBsZXZlbFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUsIGlmIHNob3VsZCBsb2dcbiAqL1xuZnVuY3Rpb24gc2hvdWxkTG9nKGxldmVsKSB7XG5cdHZhciBzaG91bGRMb2cgPVxuXHRcdChsb2dMZXZlbCA9PT0gXCJpbmZvXCIgJiYgbGV2ZWwgPT09IFwiaW5mb1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcIndhcm5pbmdcIikgfHxcblx0XHQoW1wiaW5mb1wiLCBcIndhcm5pbmdcIiwgXCJlcnJvclwiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcImVycm9yXCIpO1xuXHRyZXR1cm4gc2hvdWxkTG9nO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7KG1zZz86IHN0cmluZykgPT4gdm9pZH0gbG9nRm4gbG9nIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7KGxldmVsOiBMb2dMZXZlbCwgbXNnPzogc3RyaW5nKSA9PiB2b2lkfSBmdW5jdGlvbiB0aGF0IGxvZ3Mgd2hlbiBsb2cgbGV2ZWwgaXMgc3VmZmljaWVudFxuICovXG5mdW5jdGlvbiBsb2dHcm91cChsb2dGbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGxldmVsLCBtc2cpIHtcblx0XHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdFx0bG9nRm4obXNnKTtcblx0XHR9XG5cdH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtMb2dMZXZlbH0gbGV2ZWwgbG9nIGxldmVsXG4gKiBAcGFyYW0ge3N0cmluZ3xFcnJvcn0gbXNnIG1lc3NhZ2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdGlmIChsZXZlbCA9PT0gXCJpbmZvXCIpIHtcblx0XHRcdGNvbnNvbGUubG9nKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHtcblx0XHRcdGNvbnNvbGUud2Fybihtc2cpO1xuXHRcdH0gZWxzZSBpZiAobGV2ZWwgPT09IFwiZXJyb3JcIikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihtc2cpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGdyb3VwID0gY29uc29sZS5ncm91cCB8fCBkdW1teTtcbnZhciBncm91cENvbGxhcHNlZCA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQgfHwgZHVtbXk7XG52YXIgZ3JvdXBFbmQgPSBjb25zb2xlLmdyb3VwRW5kIHx8IGR1bW15O1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cCA9IGxvZ0dyb3VwKGdyb3VwKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBDb2xsYXBzZWQgPSBsb2dHcm91cChncm91cENvbGxhcHNlZCk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwRW5kID0gbG9nR3JvdXAoZ3JvdXBFbmQpO1xuXG4vKipcbiAqIEBwYXJhbSB7TG9nTGV2ZWx9IGxldmVsIGxvZyBsZXZlbFxuICovXG5tb2R1bGUuZXhwb3J0cy5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuXHRsb2dMZXZlbCA9IGxldmVsO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgZXJyb3JcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGZvcm1hdHRlZCBlcnJvclxuICovXG5tb2R1bGUuZXhwb3J0cy5mb3JtYXRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0dmFyIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcblx0dmFyIHN0YWNrID0gZXJyLnN0YWNrO1xuXHRpZiAoIXN0YWNrKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH0gZWxzZSBpZiAoc3RhY2suaW5kZXhPZihtZXNzYWdlKSA8IDApIHtcblx0XHRyZXR1cm4gbWVzc2FnZSArIFwiXFxuXCIgKyBzdGFjaztcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc3RhY2s7XG5cdH1cbn07XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsb2NhbHNKc29uU3RyaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyAxNzIyMjMwMTA4Nzk5XG4gICAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wicHVibGljUGF0aFwiOlwiXCJ9KTtcbiAgICAgICAgLy8gb25seSBpbnZhbGlkYXRlIHdoZW4gbG9jYWxzIGNoYW5nZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgbW9kdWxlLmhvdC5kYXRhICYmXG4gICAgICAgICAgbW9kdWxlLmhvdC5kYXRhLnZhbHVlICYmXG4gICAgICAgICAgbW9kdWxlLmhvdC5kYXRhLnZhbHVlICE9PSBsb2NhbHNKc29uU3RyaW5nXG4gICAgICAgICkge1xuICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KCk7XG4gICAgICAgIH1cbiAgICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICBkYXRhLnZhbHVlID0gbG9jYWxzSnNvblN0cmluZztcbiAgICAgICAgICBjc3NSZWxvYWQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSgpO1xuICAgIH1cbiAgIiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuI2RlZmluZSBHTFNMSUZZIDFcXG5cXG51bmlmb3JtIGZsb2F0IHVBbHBoYTsgXFxudW5pZm9ybSBzYW1wbGVyMkQgdE1hcDsgXFxuXFxudmFyeWluZyB2ZWM0IHZQb3NpdGlvbjtcXG52YXJ5aW5nIHZlYzIgdlV2OyBcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZlYzQgdGV4dHVyZSA9IHRleHR1cmUyRCh0TWFwLCB2VXYpO1xcbiAgICBcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTtcXG4gICAgZ2xfRnJhZ0NvbG9yLmEgPSB1QWxwaGE7XFxufVxcbiBcXG4vLyBDT01QTEVURSBcIjsiLCJleHBvcnQgZGVmYXVsdCBcIiNkZWZpbmUgR0xTTElGWSAxXFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgdXY7XFxuXFxudW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcXG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzQgdlBvc2l0aW9uO1xcbnZhcnlpbmcgdmVjMiB2VXY7IFxcblxcbnZvaWQgbWFpbigpIHtcXG4gICAgdlV2ID0gdXY7IFxcblxcbiAgICB2ZWM0IG5ld1Bvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTtcXG5cXG4gICAgdlBvc2l0aW9uID0gbmV3UG9zaXRpb247XFxuXFxuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG5ld1Bvc2l0aW9uO1xcbn1cXG5cXG4vLyBDT01QTEVURSBcIjsiLCJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4jZGVmaW5lIEdMU0xJRlkgMVxcblxcbnVuaWZvcm0gZmxvYXQgdUFscGhhOyBcXG51bmlmb3JtIHNhbXBsZXIyRCB0TWFwOyBcXG5cXG52YXJ5aW5nIHZlYzIgdlV2OyBcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZlYzQgdGV4dHVyZSA9IHRleHR1cmUyRCh0TWFwLCB2VXYpO1xcbiAgICBcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTtcXG4gICAgZ2xfRnJhZ0NvbG9yLmEgPSB1QWxwaGE7XFxufVxcbiBcXG4vLyBDT01QTEVURSBcIjsiLCJleHBvcnQgZGVmYXVsdCBcIiNkZWZpbmUgR0xTTElGWSAxXFxuI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU4OTc5MzIzODQ2MjY0MzM4MzI3OTUgLy8gUm90YXRpb24gb2YgZWxlbWVudHMgdXN1YWxseSByZXF1aXJlIFBJXFxuXFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgdXY7XFxuXFxudW5pZm9ybSBmbG9hdCB1U3BlZWQ7XFxudW5pZm9ybSB2ZWMyIHVWaWV3cG9ydFNpemVzO1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjsgXFxuXFxudm9pZCBtYWluKCkge1xcbiAgICB2VXYgPSB1djsgXFxuXFxuICAgIHZlYzQgbmV3UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApOyAvLyBDaGVja3MgdG8gc2VlIHdoaWNoIHBhcnQgb2Ygd2hlcmUgeW91ciAzRCBNb2RlbCBpcy5cXG4gICAgLy8gdVNwZWVkIGZvciBtb3VzZSB2ZWxvY2l0eVxcbiAgICBuZXdQb3NpdGlvbi56IC09IChzaW4obmV3UG9zaXRpb24ueSAvIHVWaWV3cG9ydFNpemVzLnkgKiBQSSArIFBJIC8gMi4wKSArIHNpbihuZXdQb3NpdGlvbi54IC8gdVZpZXdwb3J0U2l6ZXMueCAqIFBJICsgUEkgLyAyLjApKSAqIGFicyh1U3BlZWQpOyAvLyA8YWJzID0gbm8gbWF0dGVyIGRpcmVjdGlvbiwgZWZmZWN0IHdpbGwgbG9vayB0aGUgc2FtZTtcXG5cXG4gICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbmV3UG9zaXRpb247XFxufVxcblxcbi8vIFBsYXkgYXJvdW5kIHdpdGggUEkgYW5kIG90aGVyIHZhbHVlcyBhcyB0aGlzIGlzIHRoZSBiYXNlIGZvciBtb3N0IFdlYkdMIHdlYnNpdGVzLlxcblxcbi8vIENPTVBMRVRFIFwiOyIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbiNkZWZpbmUgR0xTTElGWSAxXFxuXFxudW5pZm9ybSBmbG9hdCB1QWxwaGE7IFxcbnVuaWZvcm0gc2FtcGxlcjJEIHRNYXA7IFxcblxcbnZhcnlpbmcgdmVjMiB2VXY7IFxcblxcbnZvaWQgbWFpbigpIHtcXG4gICAgdmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKHRNYXAsIHZVdik7XFxuICAgIFxcbiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcbiAgICBnbF9GcmFnQ29sb3IuYSA9IHVBbHBoYTtcXG59XFxuXFxuLy8gQ09NUExFVEUgXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCIjZGVmaW5lIEdMU0xJRlkgMVxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjsgXFxuXFxudm9pZCBtYWluKCkge1xcbiAgICB2VXYgPSB1djsgXFxuXFxuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxufVxcblxcbi8vIENPTVBMRVRFIFwiOyIsImltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vVHJhbnNmb3JtLmpzJztcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuLi9tYXRoL01hdDQuanMnO1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uL21hdGgvVmVjMy5qcyc7XG5cbmNvbnN0IHRlbXBNYXQ0ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXQ0KCk7XG5jb25zdCB0ZW1wVmVjM2EgPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlYzMoKTtcbmNvbnN0IHRlbXBWZWMzYiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVmVjMygpO1xuXG5leHBvcnQgY2xhc3MgQ2FtZXJhIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgeyBuZWFyID0gMC4xLCBmYXIgPSAxMDAsIGZvdiA9IDQ1LCBhc3BlY3QgPSAxLCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpvb20gPSAxIH0gPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgeyBuZWFyLCBmYXIsIGZvdiwgYXNwZWN0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpvb20gfSk7XG5cbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy52aWV3TWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uVmlld01hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMud29ybGRQb3NpdGlvbiA9IG5ldyBWZWMzKCk7XG5cbiAgICAgICAgLy8gVXNlIG9ydGhvZ3JhcGhpYyBpZiBsZWZ0L3JpZ2h0IHNldCwgZWxzZSBkZWZhdWx0IHRvIHBlcnNwZWN0aXZlIGNhbWVyYVxuICAgICAgICB0aGlzLnR5cGUgPSBsZWZ0IHx8IHJpZ2h0ID8gJ29ydGhvZ3JhcGhpYycgOiAncGVyc3BlY3RpdmUnO1xuXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdvcnRob2dyYXBoaWMnKSB0aGlzLm9ydGhvZ3JhcGhpYygpO1xuICAgICAgICBlbHNlIHRoaXMucGVyc3BlY3RpdmUoKTtcbiAgICB9XG5cbiAgICBwZXJzcGVjdGl2ZSh7IG5lYXIgPSB0aGlzLm5lYXIsIGZhciA9IHRoaXMuZmFyLCBmb3YgPSB0aGlzLmZvdiwgYXNwZWN0ID0gdGhpcy5hc3BlY3QgfSA9IHt9KSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgeyBuZWFyLCBmYXIsIGZvdiwgYXNwZWN0IH0pO1xuICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXguZnJvbVBlcnNwZWN0aXZlKHsgZm92OiBmb3YgKiAoTWF0aC5QSSAvIDE4MCksIGFzcGVjdCwgbmVhciwgZmFyIH0pO1xuICAgICAgICB0aGlzLnR5cGUgPSAncGVyc3BlY3RpdmUnO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvcnRob2dyYXBoaWMoe1xuICAgICAgICBuZWFyID0gdGhpcy5uZWFyLFxuICAgICAgICBmYXIgPSB0aGlzLmZhcixcbiAgICAgICAgbGVmdCA9IHRoaXMubGVmdCB8fCAtMSxcbiAgICAgICAgcmlnaHQgPSB0aGlzLnJpZ2h0IHx8IDEsXG4gICAgICAgIGJvdHRvbSA9IHRoaXMuYm90dG9tIHx8IC0xLFxuICAgICAgICB0b3AgPSB0aGlzLnRvcCB8fCAxLFxuICAgICAgICB6b29tID0gdGhpcy56b29tLFxuICAgIH0gPSB7fSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgbmVhciwgZmFyLCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpvb20gfSk7XG4gICAgICAgIGxlZnQgLz0gem9vbTtcbiAgICAgICAgcmlnaHQgLz0gem9vbTtcbiAgICAgICAgYm90dG9tIC89IHpvb207XG4gICAgICAgIHRvcCAvPSB6b29tO1xuICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXguZnJvbU9ydGhvZ29uYWwoeyBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciB9KTtcbiAgICAgICAgdGhpcy50eXBlID0gJ29ydGhvZ3JhcGhpYyc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeFdvcmxkKCkge1xuICAgICAgICBzdXBlci51cGRhdGVNYXRyaXhXb3JsZCgpO1xuICAgICAgICB0aGlzLnZpZXdNYXRyaXguaW52ZXJzZSh0aGlzLndvcmxkTWF0cml4KTtcbiAgICAgICAgdGhpcy53b3JsZE1hdHJpeC5nZXRUcmFuc2xhdGlvbih0aGlzLndvcmxkUG9zaXRpb24pO1xuXG4gICAgICAgIC8vIHVzZWQgZm9yIHNvcnRpbmdcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uVmlld01hdHJpeC5tdWx0aXBseSh0aGlzLnByb2plY3Rpb25NYXRyaXgsIHRoaXMudmlld01hdHJpeCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdwZXJzcGVjdGl2ZScpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBlcnNwZWN0aXZlKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9ydGhvZ3JhcGhpYygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9va0F0KHRhcmdldCkge1xuICAgICAgICBzdXBlci5sb29rQXQodGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gUHJvamVjdCAzRCBjb29yZGluYXRlIHRvIDJEIHBvaW50XG4gICAgcHJvamVjdCh2KSB7XG4gICAgICAgIHYuYXBwbHlNYXRyaXg0KHRoaXMudmlld01hdHJpeCk7XG4gICAgICAgIHYuYXBwbHlNYXRyaXg0KHRoaXMucHJvamVjdGlvbk1hdHJpeCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIFVucHJvamVjdCAyRCBwb2ludCB0byAzRCBjb29yZGluYXRlXG4gICAgdW5wcm9qZWN0KHYpIHtcbiAgICAgICAgdi5hcHBseU1hdHJpeDQodGVtcE1hdDQuaW52ZXJzZSh0aGlzLnByb2plY3Rpb25NYXRyaXgpKTtcbiAgICAgICAgdi5hcHBseU1hdHJpeDQodGhpcy53b3JsZE1hdHJpeCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVwZGF0ZUZydXN0dW0oKSB7XG4gICAgICAgIGlmICghdGhpcy5mcnVzdHVtKSB7XG4gICAgICAgICAgICB0aGlzLmZydXN0dW0gPSBbbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKV07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtID0gdGhpcy5wcm9qZWN0aW9uVmlld01hdHJpeDtcbiAgICAgICAgdGhpcy5mcnVzdHVtWzBdLnNldChtWzNdIC0gbVswXSwgbVs3XSAtIG1bNF0sIG1bMTFdIC0gbVs4XSkuY29uc3RhbnQgPSBtWzE1XSAtIG1bMTJdOyAvLyAteFxuICAgICAgICB0aGlzLmZydXN0dW1bMV0uc2V0KG1bM10gKyBtWzBdLCBtWzddICsgbVs0XSwgbVsxMV0gKyBtWzhdKS5jb25zdGFudCA9IG1bMTVdICsgbVsxMl07IC8vICt4XG4gICAgICAgIHRoaXMuZnJ1c3R1bVsyXS5zZXQobVszXSArIG1bMV0sIG1bN10gKyBtWzVdLCBtWzExXSArIG1bOV0pLmNvbnN0YW50ID0gbVsxNV0gKyBtWzEzXTsgLy8gK3lcbiAgICAgICAgdGhpcy5mcnVzdHVtWzNdLnNldChtWzNdIC0gbVsxXSwgbVs3XSAtIG1bNV0sIG1bMTFdIC0gbVs5XSkuY29uc3RhbnQgPSBtWzE1XSAtIG1bMTNdOyAvLyAteVxuICAgICAgICB0aGlzLmZydXN0dW1bNF0uc2V0KG1bM10gLSBtWzJdLCBtWzddIC0gbVs2XSwgbVsxMV0gLSBtWzEwXSkuY29uc3RhbnQgPSBtWzE1XSAtIG1bMTRdOyAvLyAreiAoZmFyKVxuICAgICAgICB0aGlzLmZydXN0dW1bNV0uc2V0KG1bM10gKyBtWzJdLCBtWzddICsgbVs2XSwgbVsxMV0gKyBtWzEwXSkuY29uc3RhbnQgPSBtWzE1XSArIG1bMTRdOyAvLyAteiAobmVhcilcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaW52TGVuID0gMS4wIC8gdGhpcy5mcnVzdHVtW2ldLmRpc3RhbmNlKCk7XG4gICAgICAgICAgICB0aGlzLmZydXN0dW1baV0ubXVsdGlwbHkoaW52TGVuKTtcbiAgICAgICAgICAgIHRoaXMuZnJ1c3R1bVtpXS5jb25zdGFudCAqPSBpbnZMZW47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmcnVzdHVtSW50ZXJzZWN0c01lc2gobm9kZSwgd29ybGRNYXRyaXggPSBub2RlLndvcmxkTWF0cml4KSB7XG4gICAgICAgIC8vIElmIG5vIHBvc2l0aW9uIGF0dHJpYnV0ZSwgdHJlYXQgYXMgZnJ1c3R1bUN1bGxlZCBmYWxzZVxuICAgICAgICBpZiAoIW5vZGUuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbikgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgaWYgKCFub2RlLmdlb21ldHJ5LmJvdW5kcyB8fCBub2RlLmdlb21ldHJ5LmJvdW5kcy5yYWRpdXMgPT09IEluZmluaXR5KSBub2RlLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG4gICAgICAgIGlmICghbm9kZS5nZW9tZXRyeS5ib3VuZHMpIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRlbXBWZWMzYTtcbiAgICAgICAgY2VudGVyLmNvcHkobm9kZS5nZW9tZXRyeS5ib3VuZHMuY2VudGVyKTtcbiAgICAgICAgY2VudGVyLmFwcGx5TWF0cml4NCh3b3JsZE1hdHJpeCk7XG5cbiAgICAgICAgY29uc3QgcmFkaXVzID0gbm9kZS5nZW9tZXRyeS5ib3VuZHMucmFkaXVzICogd29ybGRNYXRyaXguZ2V0TWF4U2NhbGVPbkF4aXMoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mcnVzdHVtSW50ZXJzZWN0c1NwaGVyZShjZW50ZXIsIHJhZGl1cyk7XG4gICAgfVxuXG4gICAgZnJ1c3R1bUludGVyc2VjdHNTcGhlcmUoY2VudGVyLCByYWRpdXMpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gdGVtcFZlYzNiO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwbGFuZSA9IHRoaXMuZnJ1c3R1bVtpXTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gbm9ybWFsLmNvcHkocGxhbmUpLmRvdChjZW50ZXIpICsgcGxhbmUuY29uc3RhbnQ7XG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCAtcmFkaXVzKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuIiwiLy8gYXR0cmlidXRlIHBhcmFtc1xuLy8ge1xuLy8gICAgIGRhdGEgLSB0eXBlZCBhcnJheSBlZyBVSW50MTZBcnJheSBmb3IgaW5kaWNlcywgRmxvYXQzMkFycmF5XG4vLyAgICAgc2l6ZSAtIGludCBkZWZhdWx0IDFcbi8vICAgICBpbnN0YW5jZWQgLSBkZWZhdWx0IG51bGwuIFBhc3MgZGl2aXNvciBhbW91bnRcbi8vICAgICB0eXBlIC0gZ2wgZW51bSBkZWZhdWx0IGdsLlVOU0lHTkVEX1NIT1JUIGZvciAnaW5kZXgnLCBnbC5GTE9BVCBmb3Igb3RoZXJzXG4vLyAgICAgbm9ybWFsaXplZCAtIGJvb2xlYW4gZGVmYXVsdCBmYWxzZVxuXG4vLyAgICAgYnVmZmVyIC0gZ2wgYnVmZmVyLCBpZiBidWZmZXIgZXhpc3RzLCBkb24ndCBuZWVkIHRvIHByb3ZpZGUgZGF0YSAtIGFsdGhvdWdoIG5lZWRzIHBvc2l0aW9uIGRhdGEgZm9yIGJvdW5kcyBjYWxjdWxhdGlvblxuLy8gICAgIHN0cmlkZSAtIGRlZmF1bHQgMCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgb2Zmc2V0IC0gZGVmYXVsdCAwIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBjb3VudCAtIGRlZmF1bHQgbnVsbCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgbWluIC0gYXJyYXkgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIG1heCAtIGFycmF5IC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vIH1cblxuLy8gVE9ETzogZml0IGluIHRyYW5zZm9ybSBmZWVkYmFja1xuXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcblxuY29uc3QgdGVtcFZlYzMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlYzMoKTtcblxubGV0IElEID0gMTtcbmxldCBBVFRSX0lEID0gMTtcblxuLy8gVG8gc3RvcCBpbmlmaW5pdGUgd2FybmluZ3NcbmxldCBpc0JvdW5kc1dhcm5lZCA9IGZhbHNlO1xuXG5leHBvcnQgY2xhc3MgR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKGdsLCBhdHRyaWJ1dGVzID0ge30pIHtcbiAgICAgICAgaWYgKCFnbC5jYW52YXMpIGNvbnNvbGUuZXJyb3IoJ2dsIG5vdCBwYXNzZWQgYXMgZmlyc3QgYXJndW1lbnQgdG8gR2VvbWV0cnknKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcblxuICAgICAgICAvLyBTdG9yZSBvbmUgVkFPIHBlciBwcm9ncmFtIGF0dHJpYnV0ZSBsb2NhdGlvbnMgb3JkZXJcbiAgICAgICAgdGhpcy5WQU9zID0ge307XG5cbiAgICAgICAgdGhpcy5kcmF3UmFuZ2UgPSB7IHN0YXJ0OiAwLCBjb3VudDogMCB9O1xuICAgICAgICB0aGlzLmluc3RhbmNlZENvdW50ID0gMDtcblxuICAgICAgICAvLyBVbmJpbmQgY3VycmVudCBWQU8gc28gdGhhdCBuZXcgYnVmZmVycyBkb24ndCBnZXQgYWRkZWQgdG8gYWN0aXZlIG1lc2hcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5iaW5kVmVydGV4QXJyYXkobnVsbCk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuY3VycmVudEdlb21ldHJ5ID0gbnVsbDtcblxuICAgICAgICAvLyBBbGlhcyBmb3Igc3RhdGUgc3RvcmUgdG8gYXZvaWQgcmVkdW5kYW50IGNhbGxzIGZvciBnbG9iYWwgc3RhdGVcbiAgICAgICAgdGhpcy5nbFN0YXRlID0gdGhpcy5nbC5yZW5kZXJlci5zdGF0ZTtcblxuICAgICAgICAvLyBjcmVhdGUgdGhlIGJ1ZmZlcnNcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZEF0dHJpYnV0ZShrZXksIGF0dHIpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzW2tleV0gPSBhdHRyO1xuXG4gICAgICAgIC8vIFNldCBvcHRpb25zXG4gICAgICAgIGF0dHIuaWQgPSBBVFRSX0lEKys7IC8vIFRPRE86IGN1cnJlbnRseSB1bnVzZWQsIHJlbW92ZT9cbiAgICAgICAgYXR0ci5zaXplID0gYXR0ci5zaXplIHx8IDE7XG4gICAgICAgIGF0dHIudHlwZSA9XG4gICAgICAgICAgICBhdHRyLnR5cGUgfHxcbiAgICAgICAgICAgIChhdHRyLmRhdGEuY29uc3RydWN0b3IgPT09IEZsb2F0MzJBcnJheVxuICAgICAgICAgICAgICAgID8gdGhpcy5nbC5GTE9BVFxuICAgICAgICAgICAgICAgIDogYXR0ci5kYXRhLmNvbnN0cnVjdG9yID09PSBVaW50MTZBcnJheVxuICAgICAgICAgICAgICAgID8gdGhpcy5nbC5VTlNJR05FRF9TSE9SVFxuICAgICAgICAgICAgICAgIDogdGhpcy5nbC5VTlNJR05FRF9JTlQpOyAvLyBVaW50MzJBcnJheVxuICAgICAgICBhdHRyLnRhcmdldCA9IGtleSA9PT0gJ2luZGV4JyA/IHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIgOiB0aGlzLmdsLkFSUkFZX0JVRkZFUjtcbiAgICAgICAgYXR0ci5ub3JtYWxpemVkID0gYXR0ci5ub3JtYWxpemVkIHx8IGZhbHNlO1xuICAgICAgICBhdHRyLnN0cmlkZSA9IGF0dHIuc3RyaWRlIHx8IDA7XG4gICAgICAgIGF0dHIub2Zmc2V0ID0gYXR0ci5vZmZzZXQgfHwgMDtcbiAgICAgICAgYXR0ci5jb3VudCA9IGF0dHIuY291bnQgfHwgKGF0dHIuc3RyaWRlID8gYXR0ci5kYXRhLmJ5dGVMZW5ndGggLyBhdHRyLnN0cmlkZSA6IGF0dHIuZGF0YS5sZW5ndGggLyBhdHRyLnNpemUpO1xuICAgICAgICBhdHRyLmRpdmlzb3IgPSBhdHRyLmluc3RhbmNlZCB8fCAwO1xuICAgICAgICBhdHRyLm5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIGF0dHIudXNhZ2UgPSBhdHRyLnVzYWdlIHx8IHRoaXMuZ2wuU1RBVElDX0RSQVc7XG5cbiAgICAgICAgaWYgKCFhdHRyLmJ1ZmZlcikge1xuICAgICAgICAgICAgLy8gUHVzaCBkYXRhIHRvIGJ1ZmZlclxuICAgICAgICAgICAgdGhpcy51cGRhdGVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgZ2VvbWV0cnkgY291bnRzLiBJZiBpbmRleGVkLCBpZ25vcmUgcmVndWxhciBhdHRyaWJ1dGVzXG4gICAgICAgIGlmIChhdHRyLmRpdmlzb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaXNJbnN0YW5jZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2VkQ291bnQgJiYgdGhpcy5pbnN0YW5jZWRDb3VudCAhPT0gYXR0ci5jb3VudCAqIGF0dHIuZGl2aXNvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZ2VvbWV0cnkgaGFzIG11bHRpcGxlIGluc3RhbmNlZCBidWZmZXJzIG9mIGRpZmZlcmVudCBsZW5ndGgnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuaW5zdGFuY2VkQ291bnQgPSBNYXRoLm1pbih0aGlzLmluc3RhbmNlZENvdW50LCBhdHRyLmNvdW50ICogYXR0ci5kaXZpc29yKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlZENvdW50ID0gYXR0ci5jb3VudCAqIGF0dHIuZGl2aXNvcjtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbmRleCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gYXR0ci5jb3VudDtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IE1hdGgubWF4KHRoaXMuZHJhd1JhbmdlLmNvdW50LCBhdHRyLmNvdW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUF0dHJpYnV0ZShhdHRyKSB7XG4gICAgICAgIGNvbnN0IGlzTmV3QnVmZmVyID0gIWF0dHIuYnVmZmVyO1xuICAgICAgICBpZiAoaXNOZXdCdWZmZXIpIGF0dHIuYnVmZmVyID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgaWYgKHRoaXMuZ2xTdGF0ZS5ib3VuZEJ1ZmZlciAhPT0gYXR0ci5idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcihhdHRyLnRhcmdldCwgYXR0ci5idWZmZXIpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLmJvdW5kQnVmZmVyID0gYXR0ci5idWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3QnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoYXR0ci50YXJnZXQsIGF0dHIuZGF0YSwgYXR0ci51c2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdsLmJ1ZmZlclN1YkRhdGEoYXR0ci50YXJnZXQsIDAsIGF0dHIuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgYXR0ci5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNldEluZGV4KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKCdpbmRleCcsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXREcmF3UmFuZ2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gY291bnQ7XG4gICAgfVxuXG4gICAgc2V0SW5zdGFuY2VkQ291bnQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNyZWF0ZVZBTyhwcm9ncmFtKSB7XG4gICAgICAgIHRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSA9IHRoaXMuZ2wucmVuZGVyZXIuY3JlYXRlVmVydGV4QXJyYXkoKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5iaW5kVmVydGV4QXJyYXkodGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdKTtcbiAgICAgICAgdGhpcy5iaW5kQXR0cmlidXRlcyhwcm9ncmFtKTtcbiAgICB9XG5cbiAgICBiaW5kQXR0cmlidXRlcyhwcm9ncmFtKSB7XG4gICAgICAgIC8vIExpbmsgYWxsIGF0dHJpYnV0ZXMgdG8gcHJvZ3JhbSB1c2luZyBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyXG4gICAgICAgIHByb2dyYW0uYXR0cmlidXRlTG9jYXRpb25zLmZvckVhY2goKGxvY2F0aW9uLCB7IG5hbWUsIHR5cGUgfSkgPT4ge1xuICAgICAgICAgICAgLy8gSWYgZ2VvbWV0cnkgbWlzc2luZyBhIHJlcXVpcmVkIHNoYWRlciBhdHRyaWJ1dGVcbiAgICAgICAgICAgIGlmICghdGhpcy5hdHRyaWJ1dGVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBhY3RpdmUgYXR0cmlidXRlICR7bmFtZX0gbm90IGJlaW5nIHN1cHBsaWVkYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIoYXR0ci50YXJnZXQsIGF0dHIuYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS5ib3VuZEJ1ZmZlciA9IGF0dHIuYnVmZmVyO1xuXG4gICAgICAgICAgICAvLyBGb3IgbWF0cml4IGF0dHJpYnV0ZXMsIGJ1ZmZlciBuZWVkcyB0byBiZSBkZWZpbmVkIHBlciBjb2x1bW5cbiAgICAgICAgICAgIGxldCBudW1Mb2MgPSAxO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDM1Njc0KSBudW1Mb2MgPSAyOyAvLyBtYXQyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMzU2NzUpIG51bUxvYyA9IDM7IC8vIG1hdDNcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAzNTY3NikgbnVtTG9jID0gNDsgLy8gbWF0NFxuXG4gICAgICAgICAgICBjb25zdCBzaXplID0gYXR0ci5zaXplIC8gbnVtTG9jO1xuICAgICAgICAgICAgY29uc3Qgc3RyaWRlID0gbnVtTG9jID09PSAxID8gMCA6IG51bUxvYyAqIG51bUxvYyAqIDQ7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBudW1Mb2MgPT09IDEgPyAwIDogbnVtTG9jICogNDtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Mb2M7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbiArIGksIHNpemUsIGF0dHIudHlwZSwgYXR0ci5ub3JtYWxpemVkLCBhdHRyLnN0cmlkZSArIHN0cmlkZSwgYXR0ci5vZmZzZXQgKyBpICogb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGxvY2F0aW9uICsgaSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGb3IgaW5zdGFuY2VkIGF0dHJpYnV0ZXMsIGRpdmlzb3IgbmVlZHMgdG8gYmUgc2V0LlxuICAgICAgICAgICAgICAgIC8vIEZvciBmaXJlZm94LCBuZWVkIHRvIHNldCBiYWNrIHRvIDAgaWYgbm9uLWluc3RhbmNlZCBkcmF3biBhZnRlciBpbnN0YW5jZWQuIEVsc2Ugd29uJ3QgcmVuZGVyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci52ZXJ0ZXhBdHRyaWJEaXZpc29yKGxvY2F0aW9uICsgaSwgYXR0ci5kaXZpc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQmluZCBpbmRpY2VzIGlmIGdlb21ldHJ5IGluZGV4ZWRcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuYXR0cmlidXRlcy5pbmRleC5idWZmZXIpO1xuICAgIH1cblxuICAgIGRyYXcoeyBwcm9ncmFtLCBtb2RlID0gdGhpcy5nbC5UUklBTkdMRVMgfSkge1xuICAgICAgICBpZiAodGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgIT09IGAke3RoaXMuaWR9XyR7cHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcn1gKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSkgdGhpcy5jcmVhdGVWQU8ocHJvZ3JhbSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0pO1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgPSBgJHt0aGlzLmlkfV8ke3Byb2dyYW0uYXR0cmlidXRlT3JkZXJ9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGFueSBhdHRyaWJ1dGVzIG5lZWQgdXBkYXRpbmdcbiAgICAgICAgcHJvZ3JhbS5hdHRyaWJ1dGVMb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIHsgbmFtZSB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICAgICAgaWYgKGF0dHIubmVlZHNVcGRhdGUpIHRoaXMudXBkYXRlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGb3IgZHJhd0VsZW1lbnRzLCBvZmZzZXQgbmVlZHMgdG8gYmUgbXVsdGlwbGUgb2YgdHlwZSBzaXplXG4gICAgICAgIGxldCBpbmRleEJ5dGVzUGVyRWxlbWVudCA9IDI7XG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXg/LnR5cGUgPT09IHRoaXMuZ2wuVU5TSUdORURfSU5UKSBpbmRleEJ5dGVzUGVyRWxlbWVudCA9IDQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNJbnN0YW5jZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmRyYXdFbGVtZW50c0luc3RhbmNlZChcbiAgICAgICAgICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC50eXBlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgub2Zmc2V0ICsgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQgKiBpbmRleEJ5dGVzUGVyRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZHJhd0FycmF5c0luc3RhbmNlZChtb2RlLCB0aGlzLmRyYXdSYW5nZS5zdGFydCwgdGhpcy5kcmF3UmFuZ2UuY291bnQsIHRoaXMuaW5zdGFuY2VkQ291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZHJhd0VsZW1lbnRzKFxuICAgICAgICAgICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC5vZmZzZXQgKyB0aGlzLmRyYXdSYW5nZS5zdGFydCAqIGluZGV4Qnl0ZXNQZXJFbGVtZW50XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5kcmF3QXJyYXlzKG1vZGUsIHRoaXMuZHJhd1JhbmdlLnN0YXJ0LCB0aGlzLmRyYXdSYW5nZS5jb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRQb3NpdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIHBvc2l0aW9uIGJ1ZmZlciwgb3IgbWluL21heCBpZiBhdmFpbGFibGVcbiAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcbiAgICAgICAgLy8gaWYgKGF0dHIubWluKSByZXR1cm4gWy4uLmF0dHIubWluLCAuLi5hdHRyLm1heF07XG4gICAgICAgIGlmIChhdHRyLmRhdGEpIHJldHVybiBhdHRyO1xuICAgICAgICBpZiAoaXNCb3VuZHNXYXJuZWQpIHJldHVybjtcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBwb3NpdGlvbiBidWZmZXIgZGF0YSBmb3VuZCB0byBjb21wdXRlIGJvdW5kcycpO1xuICAgICAgICByZXR1cm4gKGlzQm91bmRzV2FybmVkID0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgY29tcHV0ZUJvdW5kaW5nQm94KGF0dHIpIHtcbiAgICAgICAgaWYgKCFhdHRyKSBhdHRyID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBhcnJheSA9IGF0dHIuZGF0YTtcbiAgICAgICAgLy8gRGF0YSBsb2FkZWQgc2hvdWxkbid0IGhhYXZlIHN0cmlkZSwgb25seSBidWZmZXJzXG4gICAgICAgIC8vIGNvbnN0IHN0cmlkZSA9IGF0dHIuc3RyaWRlID8gYXR0ci5zdHJpZGUgLyBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCA6IGF0dHIuc2l6ZTtcbiAgICAgICAgY29uc3Qgc3RyaWRlID0gYXR0ci5zaXplO1xuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHMpIHtcbiAgICAgICAgICAgIHRoaXMuYm91bmRzID0ge1xuICAgICAgICAgICAgICAgIG1pbjogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICBtYXg6IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIHJhZGl1czogSW5maW5pdHksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5ib3VuZHMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLmJvdW5kcy5tYXg7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMuYm91bmRzLmNlbnRlcjtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLmJvdW5kcy5zY2FsZTtcblxuICAgICAgICBtaW4uc2V0KCtJbmZpbml0eSk7XG4gICAgICAgIG1heC5zZXQoLUluZmluaXR5KTtcblxuICAgICAgICAvLyBUT0RPOiBjaGVjayBzaXplIG9mIHBvc2l0aW9uIChlZyB0cmlhbmdsZSB3aXRoIFZlYzIpXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBhcnJheVtpXTtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBhcnJheVtpICsgMV07XG4gICAgICAgICAgICBjb25zdCB6ID0gYXJyYXlbaSArIDJdO1xuXG4gICAgICAgICAgICBtaW4ueCA9IE1hdGgubWluKHgsIG1pbi54KTtcbiAgICAgICAgICAgIG1pbi55ID0gTWF0aC5taW4oeSwgbWluLnkpO1xuICAgICAgICAgICAgbWluLnogPSBNYXRoLm1pbih6LCBtaW4ueik7XG5cbiAgICAgICAgICAgIG1heC54ID0gTWF0aC5tYXgoeCwgbWF4LngpO1xuICAgICAgICAgICAgbWF4LnkgPSBNYXRoLm1heCh5LCBtYXgueSk7XG4gICAgICAgICAgICBtYXgueiA9IE1hdGgubWF4KHosIG1heC56KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjYWxlLnN1YihtYXgsIG1pbik7XG4gICAgICAgIGNlbnRlci5hZGQobWluLCBtYXgpLmRpdmlkZSgyKTtcbiAgICB9XG5cbiAgICBjb21wdXRlQm91bmRpbmdTcGhlcmUoYXR0cikge1xuICAgICAgICBpZiAoIWF0dHIpIGF0dHIgPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gYXR0ci5kYXRhO1xuICAgICAgICAvLyBEYXRhIGxvYWRlZCBzaG91bGRuJ3QgaGFhdmUgc3RyaWRlLCBvbmx5IGJ1ZmZlcnNcbiAgICAgICAgLy8gY29uc3Qgc3RyaWRlID0gYXR0ci5zdHJpZGUgPyBhdHRyLnN0cmlkZSAvIGFycmF5LkJZVEVTX1BFUl9FTEVNRU5UIDogYXR0ci5zaXplO1xuICAgICAgICBjb25zdCBzdHJpZGUgPSBhdHRyLnNpemU7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvdW5kcykgdGhpcy5jb21wdXRlQm91bmRpbmdCb3goYXR0cik7XG5cbiAgICAgICAgbGV0IG1heFJhZGl1c1NxID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgICAgICAgdGVtcFZlYzMuZnJvbUFycmF5KGFycmF5LCBpKTtcbiAgICAgICAgICAgIG1heFJhZGl1c1NxID0gTWF0aC5tYXgobWF4UmFkaXVzU3EsIHRoaXMuYm91bmRzLmNlbnRlci5zcXVhcmVkRGlzdGFuY2UodGVtcFZlYzMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYm91bmRzLnJhZGl1cyA9IE1hdGguc3FydChtYXhSYWRpdXNTcSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5WQU9zKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmRlbGV0ZVZlcnRleEFycmF5KHRoaXMuVkFPc1trZXldKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLlZBT3Nba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLmF0dHJpYnV0ZXNba2V5XS5idWZmZXIpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9UcmFuc2Zvcm0uanMnO1xuaW1wb3J0IHsgTWF0MyB9IGZyb20gJy4uL21hdGgvTWF0My5qcyc7XG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vbWF0aC9NYXQ0LmpzJztcblxubGV0IElEID0gMDtcblxuZXhwb3J0IGNsYXNzIE1lc2ggZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKGdsLCB7IGdlb21ldHJ5LCBwcm9ncmFtLCBtb2RlID0gZ2wuVFJJQU5HTEVTLCBmcnVzdHVtQ3VsbGVkID0gdHJ1ZSwgcmVuZGVyT3JkZXIgPSAwIH0gPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudCB0byBNZXNoJyk7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5pZCA9IElEKys7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgdGhpcy5tb2RlID0gbW9kZTtcblxuICAgICAgICAvLyBVc2VkIHRvIHNraXAgZnJ1c3R1bSBjdWxsaW5nXG4gICAgICAgIHRoaXMuZnJ1c3R1bUN1bGxlZCA9IGZydXN0dW1DdWxsZWQ7XG5cbiAgICAgICAgLy8gT3ZlcnJpZGUgc29ydGluZyB0byBmb3JjZSBhbiBvcmRlclxuICAgICAgICB0aGlzLnJlbmRlck9yZGVyID0gcmVuZGVyT3JkZXI7XG4gICAgICAgIHRoaXMubW9kZWxWaWV3TWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy5ub3JtYWxNYXRyaXggPSBuZXcgTWF0MygpO1xuICAgICAgICB0aGlzLmJlZm9yZVJlbmRlckNhbGxiYWNrcyA9IFtdO1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzID0gW107XG4gICAgfVxuXG4gICAgb25CZWZvcmVSZW5kZXIoZikge1xuICAgICAgICB0aGlzLmJlZm9yZVJlbmRlckNhbGxiYWNrcy5wdXNoKGYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvbkFmdGVyUmVuZGVyKGYpIHtcbiAgICAgICAgdGhpcy5hZnRlclJlbmRlckNhbGxiYWNrcy5wdXNoKGYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkcmF3KHsgY2FtZXJhIH0gPSB7fSkge1xuICAgICAgICBpZiAoY2FtZXJhKSB7XG4gICAgICAgICAgICAvLyBBZGQgZW1wdHkgbWF0cml4IHVuaWZvcm1zIHRvIHByb2dyYW0gaWYgdW5zZXRcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnByb2dyYW0udW5pZm9ybXMsIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgdmlld01hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsTWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Rpb25NYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhUG9zaXRpb246IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBtYXRyaXggdW5pZm9ybXNcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5wcm9qZWN0aW9uTWF0cml4LnZhbHVlID0gY2FtZXJhLnByb2plY3Rpb25NYXRyaXg7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMuY2FtZXJhUG9zaXRpb24udmFsdWUgPSBjYW1lcmEud29ybGRQb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy52aWV3TWF0cml4LnZhbHVlID0gY2FtZXJhLnZpZXdNYXRyaXg7XG4gICAgICAgICAgICB0aGlzLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseShjYW1lcmEudmlld01hdHJpeCwgdGhpcy53b3JsZE1hdHJpeCk7XG4gICAgICAgICAgICB0aGlzLm5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgodGhpcy5tb2RlbFZpZXdNYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsTWF0cml4LnZhbHVlID0gdGhpcy53b3JsZE1hdHJpeDtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbFZpZXdNYXRyaXgudmFsdWUgPSB0aGlzLm1vZGVsVmlld01hdHJpeDtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5ub3JtYWxNYXRyaXgudmFsdWUgPSB0aGlzLm5vcm1hbE1hdHJpeDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJlZm9yZVJlbmRlckNhbGxiYWNrcy5mb3JFYWNoKChmKSA9PiBmICYmIGYoeyBtZXNoOiB0aGlzLCBjYW1lcmEgfSkpO1xuXG4gICAgICAgIC8vIGRldGVybWluZSBpZiBmYWNlcyBuZWVkIHRvIGJlIGZsaXBwZWQgLSB3aGVuIG1lc2ggc2NhbGVkIG5lZ2F0aXZlbHlcbiAgICAgICAgbGV0IGZsaXBGYWNlcyA9IHRoaXMucHJvZ3JhbS5jdWxsRmFjZSAmJiB0aGlzLndvcmxkTWF0cml4LmRldGVybWluYW50KCkgPCAwO1xuICAgICAgICB0aGlzLnByb2dyYW0udXNlKHsgZmxpcEZhY2VzIH0pO1xuICAgICAgICB0aGlzLmdlb21ldHJ5LmRyYXcoeyBtb2RlOiB0aGlzLm1vZGUsIHByb2dyYW06IHRoaXMucHJvZ3JhbSB9KTtcbiAgICAgICAgdGhpcy5hZnRlclJlbmRlckNhbGxiYWNrcy5mb3JFYWNoKChmKSA9PiBmICYmIGYoeyBtZXNoOiB0aGlzLCBjYW1lcmEgfSkpO1xuICAgIH1cbn1cbiIsIi8vIFRPRE86IHVwbG9hZCBlbXB0eSB0ZXh0dXJlIGlmIG51bGwgPyBtYXliZSBub3Rcbi8vIFRPRE86IHVwbG9hZCBpZGVudGl0eSBtYXRyaXggaWYgbnVsbCA/XG4vLyBUT0RPOiBzYW1wbGVyIEN1YmVcblxubGV0IElEID0gMTtcblxuLy8gY2FjaGUgb2YgdHlwZWQgYXJyYXlzIHVzZWQgdG8gZmxhdHRlbiB1bmlmb3JtIGFycmF5c1xuY29uc3QgYXJyYXlDYWNoZUYzMiA9IHt9O1xuXG5leHBvcnQgY2xhc3MgUHJvZ3JhbSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdsLFxuICAgICAgICB7XG4gICAgICAgICAgICB2ZXJ0ZXgsXG4gICAgICAgICAgICBmcmFnbWVudCxcbiAgICAgICAgICAgIHVuaWZvcm1zID0ge30sXG5cbiAgICAgICAgICAgIHRyYW5zcGFyZW50ID0gZmFsc2UsXG4gICAgICAgICAgICBjdWxsRmFjZSA9IGdsLkJBQ0ssXG4gICAgICAgICAgICBmcm9udEZhY2UgPSBnbC5DQ1csXG4gICAgICAgICAgICBkZXB0aFRlc3QgPSB0cnVlLFxuICAgICAgICAgICAgZGVwdGhXcml0ZSA9IHRydWUsXG4gICAgICAgICAgICBkZXB0aEZ1bmMgPSBnbC5MRVFVQUwsXG4gICAgICAgIH0gPSB7fVxuICAgICkge1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudCB0byBQcm9ncmFtJyk7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IHVuaWZvcm1zO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcblxuICAgICAgICBpZiAoIXZlcnRleCkgY29uc29sZS53YXJuKCd2ZXJ0ZXggc2hhZGVyIG5vdCBzdXBwbGllZCcpO1xuICAgICAgICBpZiAoIWZyYWdtZW50KSBjb25zb2xlLndhcm4oJ2ZyYWdtZW50IHNoYWRlciBub3Qgc3VwcGxpZWQnKTtcblxuICAgICAgICAvLyBTdG9yZSBwcm9ncmFtIHN0YXRlXG4gICAgICAgIHRoaXMudHJhbnNwYXJlbnQgPSB0cmFuc3BhcmVudDtcbiAgICAgICAgdGhpcy5jdWxsRmFjZSA9IGN1bGxGYWNlO1xuICAgICAgICB0aGlzLmZyb250RmFjZSA9IGZyb250RmFjZTtcbiAgICAgICAgdGhpcy5kZXB0aFRlc3QgPSBkZXB0aFRlc3Q7XG4gICAgICAgIHRoaXMuZGVwdGhXcml0ZSA9IGRlcHRoV3JpdGU7XG4gICAgICAgIHRoaXMuZGVwdGhGdW5jID0gZGVwdGhGdW5jO1xuICAgICAgICB0aGlzLmJsZW5kRnVuYyA9IHt9O1xuICAgICAgICB0aGlzLmJsZW5kRXF1YXRpb24gPSB7fTtcblxuICAgICAgICAvLyBzZXQgZGVmYXVsdCBibGVuZEZ1bmMgaWYgdHJhbnNwYXJlbnQgZmxhZ2dlZFxuICAgICAgICBpZiAodGhpcy50cmFuc3BhcmVudCAmJiAhdGhpcy5ibGVuZEZ1bmMuc3JjKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nbC5yZW5kZXJlci5wcmVtdWx0aXBsaWVkQWxwaGEpIHRoaXMuc2V0QmxlbmRGdW5jKHRoaXMuZ2wuT05FLCB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICAgICAgZWxzZSB0aGlzLnNldEJsZW5kRnVuYyh0aGlzLmdsLlNSQ19BTFBIQSwgdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBlbXB0eSBzaGFkZXJzIGFuZCBhdHRhY2ggdG8gcHJvZ3JhbVxuICAgICAgICB0aGlzLnZlcnRleFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcbiAgICAgICAgdGhpcy5mcmFnbWVudFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcih0aGlzLnByb2dyYW0sIHRoaXMudmVydGV4U2hhZGVyKTtcbiAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHRoaXMucHJvZ3JhbSwgdGhpcy5mcmFnbWVudFNoYWRlcik7XG5cbiAgICAgICAgLy8gQ29tcGlsZSBzaGFkZXJzIHdpdGggc291cmNlXG4gICAgICAgIHRoaXMuc2V0U2hhZGVycyh7IHZlcnRleCwgZnJhZ21lbnQgfSk7XG4gICAgfVxuXG4gICAgc2V0U2hhZGVycyh7IHZlcnRleCwgZnJhZ21lbnQgfSkge1xuICAgICAgICBpZiAodmVydGV4KSB7XG4gICAgICAgICAgICAvLyBjb21waWxlIHZlcnRleCBzaGFkZXIgYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgICAgIHRoaXMuZ2wuc2hhZGVyU291cmNlKHRoaXMudmVydGV4U2hhZGVyLCB2ZXJ0ZXgpO1xuICAgICAgICAgICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKHRoaXMudmVydGV4U2hhZGVyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsLmdldFNoYWRlckluZm9Mb2codGhpcy52ZXJ0ZXhTaGFkZXIpICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHt0aGlzLmdsLmdldFNoYWRlckluZm9Mb2codGhpcy52ZXJ0ZXhTaGFkZXIpfVxcblZlcnRleCBTaGFkZXJcXG4ke2FkZExpbmVOdW1iZXJzKHZlcnRleCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhZ21lbnQpIHtcbiAgICAgICAgICAgIC8vIGNvbXBpbGUgZnJhZ21lbnQgc2hhZGVyIGFuZCBsb2cgZXJyb3JzXG4gICAgICAgICAgICB0aGlzLmdsLnNoYWRlclNvdXJjZSh0aGlzLmZyYWdtZW50U2hhZGVyLCBmcmFnbWVudCk7XG4gICAgICAgICAgICB0aGlzLmdsLmNvbXBpbGVTaGFkZXIodGhpcy5mcmFnbWVudFNoYWRlcik7XG4gICAgICAgICAgICBpZiAodGhpcy5nbC5nZXRTaGFkZXJJbmZvTG9nKHRoaXMuZnJhZ21lbnRTaGFkZXIpICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHt0aGlzLmdsLmdldFNoYWRlckluZm9Mb2codGhpcy5mcmFnbWVudFNoYWRlcil9XFxuRnJhZ21lbnQgU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyhmcmFnbWVudCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21waWxlIHByb2dyYW0gYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgdGhpcy5nbC5saW5rUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuICAgICAgICBpZiAoIXRoaXMuZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIHRoaXMuZ2wuTElOS19TVEFUVVMpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKHRoaXMuZ2wuZ2V0UHJvZ3JhbUluZm9Mb2codGhpcy5wcm9ncmFtKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgYWN0aXZlIHVuaWZvcm0gbG9jYXRpb25zXG4gICAgICAgIHRoaXMudW5pZm9ybUxvY2F0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgbGV0IG51bVVuaWZvcm1zID0gdGhpcy5nbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSwgdGhpcy5nbC5BQ1RJVkVfVU5JRk9STVMpO1xuICAgICAgICBmb3IgKGxldCB1SW5kZXggPSAwOyB1SW5kZXggPCBudW1Vbmlmb3JtczsgdUluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCB1bmlmb3JtID0gdGhpcy5nbC5nZXRBY3RpdmVVbmlmb3JtKHRoaXMucHJvZ3JhbSwgdUluZGV4KTtcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybUxvY2F0aW9ucy5zZXQodW5pZm9ybSwgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLCB1bmlmb3JtLm5hbWUpKTtcblxuICAgICAgICAgICAgLy8gc3BsaXQgdW5pZm9ybXMnIG5hbWVzIHRvIHNlcGFyYXRlIGFycmF5IGFuZCBzdHJ1Y3QgZGVjbGFyYXRpb25zXG4gICAgICAgICAgICBjb25zdCBzcGxpdCA9IHVuaWZvcm0ubmFtZS5tYXRjaCgvKFxcdyspL2cpO1xuXG4gICAgICAgICAgICB1bmlmb3JtLnVuaWZvcm1OYW1lID0gc3BsaXRbMF07XG4gICAgICAgICAgICB1bmlmb3JtLm5hbWVDb21wb25lbnRzID0gc3BsaXQuc2xpY2UoMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgYWN0aXZlIGF0dHJpYnV0ZSBsb2NhdGlvbnNcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVMb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCBudW1BdHRyaWJzID0gdGhpcy5nbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSwgdGhpcy5nbC5BQ1RJVkVfQVRUUklCVVRFUyk7XG4gICAgICAgIGZvciAobGV0IGFJbmRleCA9IDA7IGFJbmRleCA8IG51bUF0dHJpYnM7IGFJbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSB0aGlzLmdsLmdldEFjdGl2ZUF0dHJpYih0aGlzLnByb2dyYW0sIGFJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCBhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAvLyBJZ25vcmUgc3BlY2lhbCBidWlsdC1pbiBpbnB1dHMuIGVnIGdsX1ZlcnRleElELCBnbF9JbnN0YW5jZUlEXG4gICAgICAgICAgICBpZiAobG9jYXRpb24gPT09IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgIGxvY2F0aW9uc1tsb2NhdGlvbl0gPSBhdHRyaWJ1dGUubmFtZTtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlTG9jYXRpb25zLnNldChhdHRyaWJ1dGUsIGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJpYnV0ZU9yZGVyID0gbG9jYXRpb25zLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHNldEJsZW5kRnVuYyhzcmMsIGRzdCwgc3JjQWxwaGEsIGRzdEFscGhhKSB7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLnNyYyA9IHNyYztcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMuZHN0ID0gZHN0O1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5zcmNBbHBoYSA9IHNyY0FscGhhO1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5kc3RBbHBoYSA9IGRzdEFscGhhO1xuICAgICAgICBpZiAoc3JjKSB0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzZXRCbGVuZEVxdWF0aW9uKG1vZGVSR0IsIG1vZGVBbHBoYSkge1xuICAgICAgICB0aGlzLmJsZW5kRXF1YXRpb24ubW9kZVJHQiA9IG1vZGVSR0I7XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEgPSBtb2RlQWxwaGE7XG4gICAgfVxuXG4gICAgYXBwbHlTdGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVwdGhUZXN0KSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuXG4gICAgICAgIGlmICh0aGlzLmN1bGxGYWNlKSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5yZW5kZXJlci5kaXNhYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcblxuICAgICAgICBpZiAodGhpcy5ibGVuZEZ1bmMuc3JjKSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkJMRU5EKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLnJlbmRlcmVyLmRpc2FibGUodGhpcy5nbC5CTEVORCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VsbEZhY2UpIHRoaXMuZ2wucmVuZGVyZXIuc2V0Q3VsbEZhY2UodGhpcy5jdWxsRmFjZSk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXREZXB0aE1hc2sodGhpcy5kZXB0aFdyaXRlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXREZXB0aEZ1bmModGhpcy5kZXB0aEZ1bmMpO1xuICAgICAgICBpZiAodGhpcy5ibGVuZEZ1bmMuc3JjKVxuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXRCbGVuZEZ1bmModGhpcy5ibGVuZEZ1bmMuc3JjLCB0aGlzLmJsZW5kRnVuYy5kc3QsIHRoaXMuYmxlbmRGdW5jLnNyY0FscGhhLCB0aGlzLmJsZW5kRnVuYy5kc3RBbHBoYSk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0QmxlbmRFcXVhdGlvbih0aGlzLmJsZW5kRXF1YXRpb24ubW9kZVJHQiwgdGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYSk7XG4gICAgfVxuXG4gICAgdXNlKHsgZmxpcEZhY2VzID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgICAgIGxldCB0ZXh0dXJlVW5pdCA9IC0xO1xuICAgICAgICBjb25zdCBwcm9ncmFtQWN0aXZlID0gdGhpcy5nbC5yZW5kZXJlci5zdGF0ZS5jdXJyZW50UHJvZ3JhbSA9PT0gdGhpcy5pZDtcblxuICAgICAgICAvLyBBdm9pZCBnbCBjYWxsIGlmIHByb2dyYW0gYWxyZWFkeSBpbiB1c2VcbiAgICAgICAgaWYgKCFwcm9ncmFtQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc3RhdGUuY3VycmVudFByb2dyYW0gPSB0aGlzLmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IG9ubHkgdGhlIGFjdGl2ZSB1bmlmb3JtcyBmb3VuZCBpbiB0aGUgc2hhZGVyXG4gICAgICAgIHRoaXMudW5pZm9ybUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgYWN0aXZlVW5pZm9ybSkgPT4ge1xuICAgICAgICAgICAgbGV0IHVuaWZvcm0gPSB0aGlzLnVuaWZvcm1zW2FjdGl2ZVVuaWZvcm0udW5pZm9ybU5hbWVdO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBhY3RpdmVVbmlmb3JtLm5hbWVDb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1bmlmb3JtKSBicmVhaztcblxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQgaW4gdW5pZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3JtID0gdW5pZm9ybVtjb21wb25lbnRdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh1bmlmb3JtLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3JtID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdW5pZm9ybSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKGBBY3RpdmUgdW5pZm9ybSAke2FjdGl2ZVVuaWZvcm0ubmFtZX0gaGFzIG5vdCBiZWVuIHN1cHBsaWVkYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1bmlmb3JtICYmIHVuaWZvcm0udmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKGAke2FjdGl2ZVVuaWZvcm0ubmFtZX0gdW5pZm9ybSBpcyBtaXNzaW5nIGEgdmFsdWUgcGFyYW1ldGVyYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1bmlmb3JtLnZhbHVlLnRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgMTtcblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRleHR1cmUgbmVlZHMgdG8gYmUgdXBkYXRlZFxuICAgICAgICAgICAgICAgIHVuaWZvcm0udmFsdWUudXBkYXRlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0VW5pZm9ybSh0aGlzLmdsLCBhY3RpdmVVbmlmb3JtLnR5cGUsIGxvY2F0aW9uLCB0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZvciB0ZXh0dXJlIGFycmF5cywgc2V0IHVuaWZvcm0gYXMgYW4gYXJyYXkgb2YgdGV4dHVyZSB1bml0cyBpbnN0ZWFkIG9mIGp1c3Qgb25lXG4gICAgICAgICAgICBpZiAodW5pZm9ybS52YWx1ZS5sZW5ndGggJiYgdW5pZm9ybS52YWx1ZVswXS50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dHVyZVVuaXRzID0gW107XG4gICAgICAgICAgICAgICAgdW5pZm9ybS52YWx1ZS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUudXBkYXRlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVVuaXRzLnB1c2godGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdGV4dHVyZVVuaXRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0VW5pZm9ybSh0aGlzLmdsLCBhY3RpdmVVbmlmb3JtLnR5cGUsIGxvY2F0aW9uLCB1bmlmb3JtLnZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHBseVN0YXRlKCk7XG4gICAgICAgIGlmIChmbGlwRmFjZXMpIHRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlID09PSB0aGlzLmdsLkNDVyA/IHRoaXMuZ2wuQ1cgOiB0aGlzLmdsLkNDVyk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB0aGlzLmdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFVuaWZvcm0oZ2wsIHR5cGUsIGxvY2F0aW9uLCB2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUubGVuZ3RoID8gZmxhdHRlbih2YWx1ZSkgOiB2YWx1ZTtcbiAgICBjb25zdCBzZXRWYWx1ZSA9IGdsLnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuZ2V0KGxvY2F0aW9uKTtcblxuICAgIC8vIEF2b2lkIHJlZHVuZGFudCB1bmlmb3JtIGNvbW1hbmRzXG4gICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBpZiAoc2V0VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBzZXRWYWx1ZS5sZW5ndGggIT09IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gY2xvbmUgYXJyYXkgdG8gc3RvcmUgYXMgY2FjaGVcbiAgICAgICAgICAgIGdsLnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KGxvY2F0aW9uLCB2YWx1ZS5zbGljZSgwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYXJyYXlzRXF1YWwoc2V0VmFsdWUsIHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2FjaGVkIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgc2V0VmFsdWUuc2V0ID8gc2V0VmFsdWUuc2V0KHZhbHVlKSA6IHNldEFycmF5KHNldFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgc2V0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNldFZhbHVlID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgdmFsdWUpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIDUxMjY6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID8gZ2wudW5pZm9ybTFmdihsb2NhdGlvbiwgdmFsdWUpIDogZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB2YWx1ZSk7IC8vIEZMT0FUXG4gICAgICAgIGNhc2UgMzU2NjQ6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTJmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUMyXG4gICAgICAgIGNhc2UgMzU2NjU6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTNmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUMzXG4gICAgICAgIGNhc2UgMzU2NjY6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTRmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUM0XG4gICAgICAgIGNhc2UgMzU2NzA6IC8vIEJPT0xcbiAgICAgICAgY2FzZSA1MTI0OiAvLyBJTlRcbiAgICAgICAgY2FzZSAzNTY3ODogLy8gU0FNUExFUl8yRFxuICAgICAgICBjYXNlIDM2MzA2OiAvLyBVX1NBTVBMRVJfMkRcbiAgICAgICAgY2FzZSAzNTY4MDogLy8gU0FNUExFUl9DVUJFXG4gICAgICAgIGNhc2UgMzYyODk6IC8vIFNBTVBMRVJfMkRfQVJSQVlcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPyBnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2YWx1ZSkgOiBnbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlKTsgLy8gU0FNUExFUl9DVUJFXG4gICAgICAgIGNhc2UgMzU2NzE6IC8vIEJPT0xfVkVDMlxuICAgICAgICBjYXNlIDM1NjY3OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0yaXYobG9jYXRpb24sIHZhbHVlKTsgLy8gSU5UX1ZFQzJcbiAgICAgICAgY2FzZSAzNTY3MjogLy8gQk9PTF9WRUMzXG4gICAgICAgIGNhc2UgMzU2Njg6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTNpdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBJTlRfVkVDM1xuICAgICAgICBjYXNlIDM1NjczOiAvLyBCT09MX1ZFQzRcbiAgICAgICAgY2FzZSAzNTY2OTpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2YWx1ZSk7IC8vIElOVF9WRUM0XG4gICAgICAgIGNhc2UgMzU2NzQ6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybU1hdHJpeDJmdihsb2NhdGlvbiwgZmFsc2UsIHZhbHVlKTsgLy8gRkxPQVRfTUFUMlxuICAgICAgICBjYXNlIDM1Njc1OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm1NYXRyaXgzZnYobG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7IC8vIEZMT0FUX01BVDNcbiAgICAgICAgY2FzZSAzNTY3NjpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpOyAvLyBGTE9BVF9NQVQ0XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRMaW5lTnVtYmVycyhzdHJpbmcpIHtcbiAgICBsZXQgbGluZXMgPSBzdHJpbmcuc3BsaXQoJ1xcbicpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGluZXNbaV0gPSBpICsgMSArICc6ICcgKyBsaW5lc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xcbicpO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuKGEpIHtcbiAgICBjb25zdCBhcnJheUxlbiA9IGEubGVuZ3RoO1xuICAgIGNvbnN0IHZhbHVlTGVuID0gYVswXS5sZW5ndGg7XG4gICAgaWYgKHZhbHVlTGVuID09PSB1bmRlZmluZWQpIHJldHVybiBhO1xuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5TGVuICogdmFsdWVMZW47XG4gICAgbGV0IHZhbHVlID0gYXJyYXlDYWNoZUYzMltsZW5ndGhdO1xuICAgIGlmICghdmFsdWUpIGFycmF5Q2FjaGVGMzJbbGVuZ3RoXSA9IHZhbHVlID0gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlMZW47IGkrKykgdmFsdWUuc2V0KGFbaV0sIGkgKiB2YWx1ZUxlbik7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhcnJheXNFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHNldEFycmF5KGEsIGIpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGFbaV0gPSBiW2ldO1xuICAgIH1cbn1cblxubGV0IHdhcm5Db3VudCA9IDA7XG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHtcbiAgICBpZiAod2FybkNvdW50ID4gMTAwKSByZXR1cm47XG4gICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIHdhcm5Db3VudCsrO1xuICAgIGlmICh3YXJuQ291bnQgPiAxMDApIGNvbnNvbGUud2FybignTW9yZSB0aGFuIDEwMCBwcm9ncmFtIHdhcm5pbmdzIC0gc3RvcHBpbmcgbG9ncy4nKTtcbn1cbiIsImltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi9tYXRoL1ZlYzMuanMnO1xuXG4vLyBUT0RPOiBIYW5kbGUgY29udGV4dCBsb3NzIGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3dlYmdsL3dpa2kvSGFuZGxpbmdDb250ZXh0TG9zdFxuXG4vLyBOb3QgYXV0b21hdGljIC0gZGV2cyB0byB1c2UgdGhlc2UgbWV0aG9kcyBtYW51YWxseVxuLy8gZ2wuY29sb3JNYXNrKCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2sgKTtcbi8vIGdsLmNsZWFyQ29sb3IoIHIsIGcsIGIsIGEgKTtcbi8vIGdsLnN0ZW5jaWxNYXNrKCBzdGVuY2lsTWFzayApO1xuLy8gZ2wuc3RlbmNpbEZ1bmMoIHN0ZW5jaWxGdW5jLCBzdGVuY2lsUmVmLCBzdGVuY2lsTWFzayApO1xuLy8gZ2wuc3RlbmNpbE9wKCBzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MgKTtcbi8vIGdsLmNsZWFyU3RlbmNpbCggc3RlbmNpbCApO1xuXG5jb25zdCB0ZW1wVmVjMyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVmVjMygpO1xubGV0IElEID0gMTtcblxuZXhwb3J0IGNsYXNzIFJlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLFxuICAgICAgICB3aWR0aCA9IDMwMCxcbiAgICAgICAgaGVpZ2h0ID0gMTUwLFxuICAgICAgICBkcHIgPSAxLFxuICAgICAgICBhbHBoYSA9IGZhbHNlLFxuICAgICAgICBkZXB0aCA9IHRydWUsXG4gICAgICAgIHN0ZW5jaWwgPSBmYWxzZSxcbiAgICAgICAgYW50aWFsaWFzID0gZmFsc2UsXG4gICAgICAgIHByZW11bHRpcGxpZWRBbHBoYSA9IGZhbHNlLFxuICAgICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXIgPSBmYWxzZSxcbiAgICAgICAgcG93ZXJQcmVmZXJlbmNlID0gJ2RlZmF1bHQnLFxuICAgICAgICBhdXRvQ2xlYXIgPSB0cnVlLFxuICAgICAgICB3ZWJnbCA9IDIsXG4gICAgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7IGFscGhhLCBkZXB0aCwgc3RlbmNpbCwgYW50aWFsaWFzLCBwcmVtdWx0aXBsaWVkQWxwaGEsIHByZXNlcnZlRHJhd2luZ0J1ZmZlciwgcG93ZXJQcmVmZXJlbmNlIH07XG4gICAgICAgIHRoaXMuZHByID0gZHByO1xuICAgICAgICB0aGlzLmFscGhhID0gYWxwaGE7XG4gICAgICAgIHRoaXMuY29sb3IgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlcHRoID0gZGVwdGg7XG4gICAgICAgIHRoaXMuc3RlbmNpbCA9IHN0ZW5jaWw7XG4gICAgICAgIHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gcHJlbXVsdGlwbGllZEFscGhhO1xuICAgICAgICB0aGlzLmF1dG9DbGVhciA9IGF1dG9DbGVhcjtcbiAgICAgICAgdGhpcy5pZCA9IElEKys7XG5cbiAgICAgICAgLy8gQXR0ZW1wdCBXZWJHTDIgdW5sZXNzIGZvcmNlZCB0byAxLCBpZiBub3Qgc3VwcG9ydGVkIGZhbGxiYWNrIHRvIFdlYkdMMVxuICAgICAgICBpZiAod2ViZ2wgPT09IDIpIHRoaXMuZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wyJywgYXR0cmlidXRlcyk7XG4gICAgICAgIHRoaXMuaXNXZWJnbDIgPSAhIXRoaXMuZ2w7XG4gICAgICAgIGlmICghdGhpcy5nbCkgdGhpcy5nbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIGF0dHJpYnV0ZXMpO1xuICAgICAgICBpZiAoIXRoaXMuZ2wpIGNvbnNvbGUuZXJyb3IoJ3VuYWJsZSB0byBjcmVhdGUgd2ViZ2wgY29udGV4dCcpO1xuXG4gICAgICAgIC8vIEF0dGFjaCByZW5kZXJlciB0byBnbCBzbyB0aGF0IGFsbCBjbGFzc2VzIGhhdmUgYWNjZXNzIHRvIGludGVybmFsIHN0YXRlIGZ1bmN0aW9uc1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyID0gdGhpcztcblxuICAgICAgICAvLyBpbml0aWFsaXNlIHNpemUgdmFsdWVzXG4gICAgICAgIHRoaXMuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAvLyBnbCBzdGF0ZSBzdG9yZXMgdG8gYXZvaWQgcmVkdW5kYW50IGNhbGxzIG9uIG1ldGhvZHMgdXNlZCBpbnRlcm5hbGx5XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMgPSB7IHNyYzogdGhpcy5nbC5PTkUsIGRzdDogdGhpcy5nbC5aRVJPIH07XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbiA9IHsgbW9kZVJHQjogdGhpcy5nbC5GVU5DX0FERCB9O1xuICAgICAgICB0aGlzLnN0YXRlLmN1bGxGYWNlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RhdGUuZnJvbnRGYWNlID0gdGhpcy5nbC5DQ1c7XG4gICAgICAgIHRoaXMuc3RhdGUuZGVwdGhNYXNrID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5kZXB0aEZ1bmMgPSB0aGlzLmdsLkxFUVVBTDtcbiAgICAgICAgdGhpcy5zdGF0ZS5wcmVtdWx0aXBseUFscGhhID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RhdGUuZmxpcFkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGF0ZS51bnBhY2tBbGlnbm1lbnQgPSA0O1xuICAgICAgICB0aGlzLnN0YXRlLmZyYW1lYnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZS52aWV3cG9ydCA9IHsgeDogMCwgeTogMCwgd2lkdGg6IG51bGwsIGhlaWdodDogbnVsbCB9O1xuICAgICAgICB0aGlzLnN0YXRlLnRleHR1cmVVbml0cyA9IFtdO1xuICAgICAgICB0aGlzLnN0YXRlLmFjdGl2ZVRleHR1cmVVbml0ID0gMDtcbiAgICAgICAgdGhpcy5zdGF0ZS5ib3VuZEJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUudW5pZm9ybUxvY2F0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5jdXJyZW50UHJvZ3JhbSA9IG51bGw7XG5cbiAgICAgICAgLy8gc3RvcmUgcmVxdWVzdGVkIGV4dGVuc2lvbnNcbiAgICAgICAgdGhpcy5leHRlbnNpb25zID0ge307XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBleHRyYSBmb3JtYXQgdHlwZXNcbiAgICAgICAgaWYgKHRoaXMuaXNXZWJnbDIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0Jyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXQnKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0Jyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXInKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfZWxlbWVudF9pbmRleF91aW50Jyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignRVhUX3NSR0InKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9kZXB0aF90ZXh0dXJlJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfZHJhd19idWZmZXJzJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjJyk7XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9icHRjJyk7XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycpO1xuXG4gICAgICAgIC8vIENyZWF0ZSBtZXRob2QgYWxpYXNlcyB1c2luZyBleHRlbnNpb24gKFdlYkdMMSkgb3IgbmF0aXZlIGlmIGF2YWlsYWJsZSAoV2ViR0wyKVxuICAgICAgICB0aGlzLnZlcnRleEF0dHJpYkRpdmlzb3IgPSB0aGlzLmdldEV4dGVuc2lvbignQU5HTEVfaW5zdGFuY2VkX2FycmF5cycsICd2ZXJ0ZXhBdHRyaWJEaXZpc29yJywgJ3ZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRScpO1xuICAgICAgICB0aGlzLmRyYXdBcnJheXNJbnN0YW5jZWQgPSB0aGlzLmdldEV4dGVuc2lvbignQU5HTEVfaW5zdGFuY2VkX2FycmF5cycsICdkcmF3QXJyYXlzSW5zdGFuY2VkJywgJ2RyYXdBcnJheXNJbnN0YW5jZWRBTkdMRScpO1xuICAgICAgICB0aGlzLmRyYXdFbGVtZW50c0luc3RhbmNlZCA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJywgJ2RyYXdFbGVtZW50c0luc3RhbmNlZCcsICdkcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRScpO1xuICAgICAgICB0aGlzLmNyZWF0ZVZlcnRleEFycmF5ID0gdGhpcy5nZXRFeHRlbnNpb24oJ09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JywgJ2NyZWF0ZVZlcnRleEFycmF5JywgJ2NyZWF0ZVZlcnRleEFycmF5T0VTJyk7XG4gICAgICAgIHRoaXMuYmluZFZlcnRleEFycmF5ID0gdGhpcy5nZXRFeHRlbnNpb24oJ09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JywgJ2JpbmRWZXJ0ZXhBcnJheScsICdiaW5kVmVydGV4QXJyYXlPRVMnKTtcbiAgICAgICAgdGhpcy5kZWxldGVWZXJ0ZXhBcnJheSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcsICdkZWxldGVWZXJ0ZXhBcnJheScsICdkZWxldGVWZXJ0ZXhBcnJheU9FUycpO1xuICAgICAgICB0aGlzLmRyYXdCdWZmZXJzID0gdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycsICdkcmF3QnVmZmVycycsICdkcmF3QnVmZmVyc1dFQkdMJyk7XG5cbiAgICAgICAgLy8gU3RvcmUgZGV2aWNlIHBhcmFtZXRlcnNcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0ge307XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5tYXhUZXh0dXJlVW5pdHMgPSB0aGlzLmdsLmdldFBhcmFtZXRlcih0aGlzLmdsLk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTKTtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLm1heEFuaXNvdHJvcHkgPSB0aGlzLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJylcbiAgICAgICAgICAgID8gdGhpcy5nbC5nZXRQYXJhbWV0ZXIodGhpcy5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpLk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVClcbiAgICAgICAgICAgIDogMDtcbiAgICB9XG5cbiAgICBzZXRTaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICB0aGlzLmdsLmNhbnZhcy53aWR0aCA9IHdpZHRoICogdGhpcy5kcHI7XG4gICAgICAgIHRoaXMuZ2wuY2FudmFzLmhlaWdodCA9IGhlaWdodCAqIHRoaXMuZHByO1xuXG4gICAgICAgIGlmICghdGhpcy5nbC5jYW52YXMuc3R5bGUpIHJldHVybjtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmdsLmNhbnZhcy5zdHlsZSwge1xuICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgJ3B4JyxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0Vmlld3BvcnQod2lkdGgsIGhlaWdodCwgeCA9IDAsIHkgPSAwKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnZpZXdwb3J0LndpZHRoID09PSB3aWR0aCAmJiB0aGlzLnN0YXRlLnZpZXdwb3J0LmhlaWdodCA9PT0gaGVpZ2h0KSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5zdGF0ZS52aWV3cG9ydC5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQueCA9IHg7XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQueSA9IHk7XG4gICAgICAgIHRoaXMuZ2wudmlld3BvcnQoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgc2V0U2Npc3Nvcih3aWR0aCwgaGVpZ2h0LCB4ID0gMCwgeSA9IDApIHtcbiAgICAgICAgdGhpcy5nbC5zY2lzc29yKHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIGVuYWJsZShpZCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZVtpZF0gPT09IHRydWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5lbmFibGUoaWQpO1xuICAgICAgICB0aGlzLnN0YXRlW2lkXSA9IHRydWU7XG4gICAgfVxuXG4gICAgZGlzYWJsZShpZCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZVtpZF0gPT09IGZhbHNlKSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wuZGlzYWJsZShpZCk7XG4gICAgICAgIHRoaXMuc3RhdGVbaWRdID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0QmxlbmRGdW5jKHNyYywgZHN0LCBzcmNBbHBoYSwgZHN0QWxwaGEpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuc3JjID09PSBzcmMgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdCA9PT0gZHN0ICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmNBbHBoYSA9PT0gc3JjQWxwaGEgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdEFscGhhID09PSBkc3RBbHBoYVxuICAgICAgICApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyYyA9IHNyYztcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuZHN0ID0gZHN0O1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmNBbHBoYSA9IHNyY0FscGhhO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3RBbHBoYSA9IGRzdEFscGhhO1xuICAgICAgICBpZiAoc3JjQWxwaGEgIT09IHVuZGVmaW5lZCkgdGhpcy5nbC5ibGVuZEZ1bmNTZXBhcmF0ZShzcmMsIGRzdCwgc3JjQWxwaGEsIGRzdEFscGhhKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLmJsZW5kRnVuYyhzcmMsIGRzdCk7XG4gICAgfVxuXG4gICAgc2V0QmxlbmRFcXVhdGlvbihtb2RlUkdCLCBtb2RlQWxwaGEpIHtcbiAgICAgICAgbW9kZVJHQiA9IG1vZGVSR0IgfHwgdGhpcy5nbC5GVU5DX0FERDtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbi5tb2RlUkdCID09PSBtb2RlUkdCICYmIHRoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEgPT09IG1vZGVBbHBoYSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZVJHQiA9IG1vZGVSR0I7XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEgPSBtb2RlQWxwaGE7XG4gICAgICAgIGlmIChtb2RlQWxwaGEgIT09IHVuZGVmaW5lZCkgdGhpcy5nbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUobW9kZVJHQiwgbW9kZUFscGhhKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLmJsZW5kRXF1YXRpb24obW9kZVJHQik7XG4gICAgfVxuXG4gICAgc2V0Q3VsbEZhY2UodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY3VsbEZhY2UgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuY3VsbEZhY2UgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5jdWxsRmFjZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RnJvbnRGYWNlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmZyb250RmFjZSA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5mcm9udEZhY2UgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5mcm9udEZhY2UodmFsdWUpO1xuICAgIH1cblxuICAgIHNldERlcHRoTWFzayh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5kZXB0aE1hc2sgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuZGVwdGhNYXNrID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuZGVwdGhNYXNrKHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXREZXB0aEZ1bmModmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZGVwdGhGdW5jID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmRlcHRoRnVuYyA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmRlcHRoRnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgYWN0aXZlVGV4dHVyZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdCA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdCA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCArIHZhbHVlKTtcbiAgICB9XG5cbiAgICBiaW5kRnJhbWVidWZmZXIoeyB0YXJnZXQgPSB0aGlzLmdsLkZSQU1FQlVGRkVSLCBidWZmZXIgPSBudWxsIH0gPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5mcmFtZWJ1ZmZlciA9PT0gYnVmZmVyKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuZnJhbWVidWZmZXIgPSBidWZmZXI7XG4gICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcbiAgICB9XG5cbiAgICBnZXRFeHRlbnNpb24oZXh0ZW5zaW9uLCB3ZWJnbDJGdW5jLCBleHRGdW5jKSB7XG4gICAgICAgIC8vIGlmIHdlYmdsMiBmdW5jdGlvbiBzdXBwb3J0ZWQsIHJldHVybiBmdW5jIGJvdW5kIHRvIGdsIGNvbnRleHRcbiAgICAgICAgaWYgKHdlYmdsMkZ1bmMgJiYgdGhpcy5nbFt3ZWJnbDJGdW5jXSkgcmV0dXJuIHRoaXMuZ2xbd2ViZ2wyRnVuY10uYmluZCh0aGlzLmdsKTtcblxuICAgICAgICAvLyBmZXRjaCBleHRlbnNpb24gb25jZSBvbmx5XG4gICAgICAgIGlmICghdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl0pIHtcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dID0gdGhpcy5nbC5nZXRFeHRlbnNpb24oZXh0ZW5zaW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHVybiBleHRlbnNpb24gaWYgbm8gZnVuY3Rpb24gcmVxdWVzdGVkXG4gICAgICAgIGlmICghd2ViZ2wyRnVuYykgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dO1xuXG4gICAgICAgIC8vIFJldHVybiBudWxsIGlmIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkXG4gICAgICAgIGlmICghdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl0pIHJldHVybiBudWxsO1xuXG4gICAgICAgIC8vIHJldHVybiBleHRlbnNpb24gZnVuY3Rpb24sIGJvdW5kIHRvIGV4dGVuc2lvblxuICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl1bZXh0RnVuY10uYmluZCh0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXSk7XG4gICAgfVxuXG4gICAgc29ydE9wYXF1ZShhLCBiKSB7XG4gICAgICAgIGlmIChhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5wcm9ncmFtLmlkICE9PSBiLnByb2dyYW0uaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByb2dyYW0uaWQgLSBiLnByb2dyYW0uaWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoYS56RGVwdGggIT09IGIuekRlcHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gYS56RGVwdGggLSBiLnpEZXB0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiLmlkIC0gYS5pZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNvcnRUcmFuc3BhcmVudChhLCBiKSB7XG4gICAgICAgIGlmIChhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEuekRlcHRoICE9PSBiLnpEZXB0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGIuekRlcHRoIC0gYS56RGVwdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYi5pZCAtIGEuaWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0VUkoYSwgYikge1xuICAgICAgICBpZiAoYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuICAgICAgICB9IGVsc2UgaWYgKGEucHJvZ3JhbS5pZCAhPT0gYi5wcm9ncmFtLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcm9ncmFtLmlkIC0gYi5wcm9ncmFtLmlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGIuaWQgLSBhLmlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UmVuZGVyTGlzdCh7IHNjZW5lLCBjYW1lcmEsIGZydXN0dW1DdWxsLCBzb3J0IH0pIHtcbiAgICAgICAgbGV0IHJlbmRlckxpc3QgPSBbXTtcblxuICAgICAgICBpZiAoY2FtZXJhICYmIGZydXN0dW1DdWxsKSBjYW1lcmEudXBkYXRlRnJ1c3R1bSgpO1xuXG4gICAgICAgIC8vIEdldCB2aXNpYmxlXG4gICAgICAgIHNjZW5lLnRyYXZlcnNlKChub2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW5vZGUudmlzaWJsZSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoIW5vZGUuZHJhdykgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoZnJ1c3R1bUN1bGwgJiYgbm9kZS5mcnVzdHVtQ3VsbGVkICYmIGNhbWVyYSkge1xuICAgICAgICAgICAgICAgIGlmICghY2FtZXJhLmZydXN0dW1JbnRlcnNlY3RzTWVzaChub2RlKSkgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZW5kZXJMaXN0LnB1c2gobm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzb3J0KSB7XG4gICAgICAgICAgICBjb25zdCBvcGFxdWUgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zcGFyZW50ID0gW107IC8vIGRlcHRoVGVzdCB0cnVlXG4gICAgICAgICAgICBjb25zdCB1aSA9IFtdOyAvLyBkZXB0aFRlc3QgZmFsc2VcblxuICAgICAgICAgICAgcmVuZGVyTGlzdC5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgaW50byB0aGUgMyByZW5kZXIgZ3JvdXBzXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlLnByb2dyYW0udHJhbnNwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3BhcXVlLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLnByb2dyYW0uZGVwdGhUZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50LnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdWkucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBub2RlLnpEZXB0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICAvLyBPbmx5IGNhbGN1bGF0ZSB6LWRlcHRoIGlmIHJlbmRlck9yZGVyIHVuc2V0IGFuZCBkZXB0aFRlc3QgaXMgdHJ1ZVxuICAgICAgICAgICAgICAgIGlmIChub2RlLnJlbmRlck9yZGVyICE9PSAwIHx8ICFub2RlLnByb2dyYW0uZGVwdGhUZXN0IHx8ICFjYW1lcmEpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB6LWRlcHRoXG4gICAgICAgICAgICAgICAgbm9kZS53b3JsZE1hdHJpeC5nZXRUcmFuc2xhdGlvbih0ZW1wVmVjMyk7XG4gICAgICAgICAgICAgICAgdGVtcFZlYzMuYXBwbHlNYXRyaXg0KGNhbWVyYS5wcm9qZWN0aW9uVmlld01hdHJpeCk7XG4gICAgICAgICAgICAgICAgbm9kZS56RGVwdGggPSB0ZW1wVmVjMy56O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG9wYXF1ZS5zb3J0KHRoaXMuc29ydE9wYXF1ZSk7XG4gICAgICAgICAgICB0cmFuc3BhcmVudC5zb3J0KHRoaXMuc29ydFRyYW5zcGFyZW50KTtcbiAgICAgICAgICAgIHVpLnNvcnQodGhpcy5zb3J0VUkpO1xuXG4gICAgICAgICAgICByZW5kZXJMaXN0ID0gb3BhcXVlLmNvbmNhdCh0cmFuc3BhcmVudCwgdWkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlckxpc3Q7XG4gICAgfVxuXG4gICAgcmVuZGVyKHsgc2NlbmUsIGNhbWVyYSwgdGFyZ2V0ID0gbnVsbCwgdXBkYXRlID0gdHJ1ZSwgc29ydCA9IHRydWUsIGZydXN0dW1DdWxsID0gdHJ1ZSwgY2xlYXIgfSkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgbm8gcmVuZGVyIHRhcmdldCBib3VuZCBzbyBkcmF3cyB0byBjYW52YXNcbiAgICAgICAgICAgIHRoaXMuYmluZEZyYW1lYnVmZmVyKCk7XG4gICAgICAgICAgICB0aGlzLnNldFZpZXdwb3J0KHRoaXMud2lkdGggKiB0aGlzLmRwciwgdGhpcy5oZWlnaHQgKiB0aGlzLmRwcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBiaW5kIHN1cHBsaWVkIHJlbmRlciB0YXJnZXQgYW5kIHVwZGF0ZSB2aWV3cG9ydFxuICAgICAgICAgICAgdGhpcy5iaW5kRnJhbWVidWZmZXIodGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMuc2V0Vmlld3BvcnQodGFyZ2V0LndpZHRoLCB0YXJnZXQuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGVhciB8fCAodGhpcy5hdXRvQ2xlYXIgJiYgY2xlYXIgIT09IGZhbHNlKSkge1xuICAgICAgICAgICAgLy8gRW5zdXJlIGRlcHRoIGJ1ZmZlciB3cml0aW5nIGlzIGVuYWJsZWQgc28gaXQgY2FuIGJlIGNsZWFyZWRcbiAgICAgICAgICAgIGlmICh0aGlzLmRlcHRoICYmICghdGFyZ2V0IHx8IHRhcmdldC5kZXB0aCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RGVwdGhNYXNrKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nbC5jbGVhcihcbiAgICAgICAgICAgICAgICAodGhpcy5jb2xvciA/IHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGVwdGggPyB0aGlzLmdsLkRFUFRIX0JVRkZFUl9CSVQgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnN0ZW5jaWwgPyB0aGlzLmdsLlNURU5DSUxfQlVGRkVSX0JJVCA6IDApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlcyBhbGwgc2NlbmUgZ3JhcGggbWF0cmljZXNcbiAgICAgICAgaWYgKHVwZGF0ZSkgc2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcblxuICAgICAgICAvLyBVcGRhdGUgY2FtZXJhIHNlcGFyYXRlbHksIGluIGNhc2Ugbm90IGluIHNjZW5lIGdyYXBoXG4gICAgICAgIGlmIChjYW1lcmEpIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG4gICAgICAgIC8vIEdldCByZW5kZXIgbGlzdCAtIGVudGFpbHMgY3VsbGluZyBhbmQgc29ydGluZ1xuICAgICAgICBjb25zdCByZW5kZXJMaXN0ID0gdGhpcy5nZXRSZW5kZXJMaXN0KHsgc2NlbmUsIGNhbWVyYSwgZnJ1c3R1bUN1bGwsIHNvcnQgfSk7XG5cbiAgICAgICAgcmVuZGVyTGlzdC5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICBub2RlLmRyYXcoeyBjYW1lcmEgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIi8vIFRPRE86IGRlbGV0ZSB0ZXh0dXJlXG4vLyBUT0RPOiB1c2UgdGV4U3ViSW1hZ2UyRCBmb3IgdXBkYXRlcyAodmlkZW8gb3Igd2hlbiBsb2FkZWQpXG4vLyBUT0RPOiBuZWVkPyBlbmNvZGluZyA9IGxpbmVhckVuY29kaW5nXG4vLyBUT0RPOiBzdXBwb3J0IG5vbi1jb21wcmVzc2VkIG1pcG1hcHMgdXBsb2Fkc1xuXG5jb25zdCBlbXB0eVBpeGVsID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG5cbmZ1bmN0aW9uIGlzUG93ZXJPZjIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYgKHZhbHVlIC0gMSkpID09PSAwO1xufVxuXG5sZXQgSUQgPSAxO1xuXG5leHBvcnQgY2xhc3MgVGV4dHVyZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdsLFxuICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgIHRhcmdldCA9IGdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgICB0eXBlID0gZ2wuVU5TSUdORURfQllURSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGdsLlJHQkEsXG4gICAgICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IGZvcm1hdCxcbiAgICAgICAgICAgIHdyYXBTID0gZ2wuQ0xBTVBfVE9fRURHRSxcbiAgICAgICAgICAgIHdyYXBUID0gZ2wuQ0xBTVBfVE9fRURHRSxcbiAgICAgICAgICAgIGdlbmVyYXRlTWlwbWFwcyA9IHRhcmdldCA9PT0gKGdsLlRFWFRVUkVfMkQgfHwgZ2wuVEVYVFVSRV9DVUJFX01BUCksXG4gICAgICAgICAgICBtaW5GaWx0ZXIgPSBnZW5lcmF0ZU1pcG1hcHMgPyBnbC5ORUFSRVNUX01JUE1BUF9MSU5FQVIgOiBnbC5MSU5FQVIsXG4gICAgICAgICAgICBtYWdGaWx0ZXIgPSBnbC5MSU5FQVIsXG4gICAgICAgICAgICBwcmVtdWx0aXBseUFscGhhID0gZmFsc2UsXG4gICAgICAgICAgICB1bnBhY2tBbGlnbm1lbnQgPSA0LFxuICAgICAgICAgICAgZmxpcFkgPSB0YXJnZXQgPT0gZ2wuVEVYVFVSRV8yRCA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaXNvdHJvcHkgPSAwLFxuICAgICAgICAgICAgbGV2ZWwgPSAwLFxuICAgICAgICAgICAgd2lkdGgsIC8vIHVzZWQgZm9yIFJlbmRlclRhcmdldHMgb3IgRGF0YSBUZXh0dXJlc1xuICAgICAgICAgICAgaGVpZ2h0ID0gd2lkdGgsXG4gICAgICAgICAgICBsZW5ndGggPSAxLFxuICAgICAgICB9ID0ge31cbiAgICApIHtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcblxuICAgICAgICB0aGlzLmltYWdlID0gaW1hZ2U7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdDtcbiAgICAgICAgdGhpcy5pbnRlcm5hbEZvcm1hdCA9IGludGVybmFsRm9ybWF0O1xuICAgICAgICB0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlcjtcbiAgICAgICAgdGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXI7XG4gICAgICAgIHRoaXMud3JhcFMgPSB3cmFwUztcbiAgICAgICAgdGhpcy53cmFwVCA9IHdyYXBUO1xuICAgICAgICB0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGdlbmVyYXRlTWlwbWFwcztcbiAgICAgICAgdGhpcy5wcmVtdWx0aXBseUFscGhhID0gcHJlbXVsdGlwbHlBbHBoYTtcbiAgICAgICAgdGhpcy51bnBhY2tBbGlnbm1lbnQgPSB1bnBhY2tBbGlnbm1lbnQ7XG4gICAgICAgIHRoaXMuZmxpcFkgPSBmbGlwWTtcbiAgICAgICAgdGhpcy5hbmlzb3Ryb3B5ID0gTWF0aC5taW4oYW5pc290cm9weSwgdGhpcy5nbC5yZW5kZXJlci5wYXJhbWV0ZXJzLm1heEFuaXNvdHJvcHkpO1xuICAgICAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLnRleHR1cmUgPSB0aGlzLmdsLmNyZWF0ZVRleHR1cmUoKTtcblxuICAgICAgICB0aGlzLnN0b3JlID0ge1xuICAgICAgICAgICAgaW1hZ2U6IG51bGwsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQWxpYXMgZm9yIHN0YXRlIHN0b3JlIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBmb3IgZ2xvYmFsIHN0YXRlXG4gICAgICAgIHRoaXMuZ2xTdGF0ZSA9IHRoaXMuZ2wucmVuZGVyZXIuc3RhdGU7XG5cbiAgICAgICAgLy8gU3RhdGUgc3RvcmUgdG8gYXZvaWQgcmVkdW5kYW50IGNhbGxzIGZvciBwZXItdGV4dHVyZSBzdGF0ZVxuICAgICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgICAgIHRoaXMuc3RhdGUubWluRmlsdGVyID0gdGhpcy5nbC5ORUFSRVNUX01JUE1BUF9MSU5FQVI7XG4gICAgICAgIHRoaXMuc3RhdGUubWFnRmlsdGVyID0gdGhpcy5nbC5MSU5FQVI7XG4gICAgICAgIHRoaXMuc3RhdGUud3JhcFMgPSB0aGlzLmdsLlJFUEVBVDtcbiAgICAgICAgdGhpcy5zdGF0ZS53cmFwVCA9IHRoaXMuZ2wuUkVQRUFUO1xuICAgICAgICB0aGlzLnN0YXRlLmFuaXNvdHJvcHkgPSAwO1xuICAgIH1cblxuICAgIGJpbmQoKSB7XG4gICAgICAgIC8vIEFscmVhZHkgYm91bmQgdG8gYWN0aXZlIHRleHR1cmUgdW5pdFxuICAgICAgICBpZiAodGhpcy5nbFN0YXRlLnRleHR1cmVVbml0c1t0aGlzLmdsU3RhdGUuYWN0aXZlVGV4dHVyZVVuaXRdID09PSB0aGlzLmlkKSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy50YXJnZXQsIHRoaXMudGV4dHVyZSk7XG4gICAgICAgIHRoaXMuZ2xTdGF0ZS50ZXh0dXJlVW5pdHNbdGhpcy5nbFN0YXRlLmFjdGl2ZVRleHR1cmVVbml0XSA9IHRoaXMuaWQ7XG4gICAgfVxuXG4gICAgdXBkYXRlKHRleHR1cmVVbml0ID0gMCkge1xuICAgICAgICBjb25zdCBuZWVkc1VwZGF0ZSA9ICEodGhpcy5pbWFnZSA9PT0gdGhpcy5zdG9yZS5pbWFnZSAmJiAhdGhpcy5uZWVkc1VwZGF0ZSk7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGV4dHVyZSBpcyBib3VuZCB0byBpdHMgdGV4dHVyZSB1bml0XG4gICAgICAgIGlmIChuZWVkc1VwZGF0ZSB8fCB0aGlzLmdsU3RhdGUudGV4dHVyZVVuaXRzW3RleHR1cmVVbml0XSAhPT0gdGhpcy5pZCkge1xuICAgICAgICAgICAgLy8gc2V0IGFjdGl2ZSB0ZXh0dXJlIHVuaXQgdG8gcGVyZm9ybSB0ZXh0dXJlIGZ1bmN0aW9uc1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5hY3RpdmVUZXh0dXJlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFuZWVkc1VwZGF0ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMuZmxpcFkgIT09IHRoaXMuZ2xTdGF0ZS5mbGlwWSkge1xuICAgICAgICAgICAgdGhpcy5nbC5waXhlbFN0b3JlaSh0aGlzLmdsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRoaXMuZmxpcFkpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLmZsaXBZID0gdGhpcy5mbGlwWTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByZW11bHRpcGx5QWxwaGEgIT09IHRoaXMuZ2xTdGF0ZS5wcmVtdWx0aXBseUFscGhhKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnBpeGVsU3RvcmVpKHRoaXMuZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0aGlzLnByZW11bHRpcGx5QWxwaGEpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLnByZW11bHRpcGx5QWxwaGEgPSB0aGlzLnByZW11bHRpcGx5QWxwaGE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy51bnBhY2tBbGlnbm1lbnQgIT09IHRoaXMuZ2xTdGF0ZS51bnBhY2tBbGlnbm1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wucGl4ZWxTdG9yZWkodGhpcy5nbC5VTlBBQ0tfQUxJR05NRU5ULCB0aGlzLnVucGFja0FsaWdubWVudCk7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUudW5wYWNrQWxpZ25tZW50ID0gdGhpcy51bnBhY2tBbGlnbm1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5taW5GaWx0ZXIgIT09IHRoaXMuc3RhdGUubWluRmlsdGVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIHRoaXMuZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCB0aGlzLm1pbkZpbHRlcik7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLm1pbkZpbHRlciA9IHRoaXMubWluRmlsdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWFnRmlsdGVyICE9PSB0aGlzLnN0YXRlLm1hZ0ZpbHRlcikge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgdGhpcy5tYWdGaWx0ZXIpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5tYWdGaWx0ZXIgPSB0aGlzLm1hZ0ZpbHRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLndyYXBTICE9PSB0aGlzLnN0YXRlLndyYXBTKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1MsIHRoaXMud3JhcFMpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS53cmFwUyA9IHRoaXMud3JhcFM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy53cmFwVCAhPT0gdGhpcy5zdGF0ZS53cmFwVCkge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfV1JBUF9ULCB0aGlzLndyYXBUKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUud3JhcFQgPSB0aGlzLndyYXBUO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYW5pc290cm9weSAmJiB0aGlzLmFuaXNvdHJvcHkgIT09IHRoaXMuc3RhdGUuYW5pc290cm9weSkge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJmKFxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LFxuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKS5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCxcbiAgICAgICAgICAgICAgICB0aGlzLmFuaXNvdHJvcHlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLmFuaXNvdHJvcHkgPSB0aGlzLmFuaXNvdHJvcHk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pbWFnZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW1hZ2Uud2lkdGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5pbWFnZS53aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXQgPT09IHRoaXMuZ2wuVEVYVFVSRV9DVUJFX01BUCkge1xuICAgICAgICAgICAgICAgIC8vIEZvciBjdWJlIG1hcHNcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxldmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZVtpXVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaXMuaW1hZ2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gRGF0YSB0ZXh0dXJlXG4gICAgICAgICAgICAgICAgaWYodGhpcy50YXJnZXQgPT09IHRoaXMuZ2wuVEVYVFVSRV8yRCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy50YXJnZXQsIHRoaXMubGV2ZWwsIHRoaXMuaW50ZXJuYWxGb3JtYXQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCAwLCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCB0aGlzLmltYWdlKTsgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLnRhcmdldCA9PT0gdGhpcy5nbC5URVhUVVJFXzJEX0FSUkFZKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UzRCh0aGlzLnRhcmdldCwgdGhpcy5sZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMubGVuZ3RoLCAwLCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCB0aGlzLmltYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW1hZ2UuaXNDb21wcmVzc2VkVGV4dHVyZSkge1xuICAgICAgICAgICAgICAgIC8vIENvbXByZXNzZWQgdGV4dHVyZVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGxldmVsID0gMDsgbGV2ZWwgPCB0aGlzLmltYWdlLmxlbmd0aDsgbGV2ZWwrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLmNvbXByZXNzZWRUZXhJbWFnZTJEKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltYWdlW2xldmVsXS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VbbGV2ZWxdLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltYWdlW2xldmVsXS5kYXRhXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZWd1bGFyIHRleHR1cmVcbiAgICAgICAgICAgICAgICBpZih0aGlzLnRhcmdldCA9PT0gdGhpcy5nbC5URVhUVVJFXzJEKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLnRhcmdldCwgdGhpcy5sZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy5mb3JtYXQsIHRoaXMudHlwZSwgdGhpcy5pbWFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UzRCh0aGlzLnRhcmdldCwgdGhpcy5sZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMubGVuZ3RoLCAwLCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCB0aGlzLmltYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmdlbmVyYXRlTWlwbWFwcykge1xuICAgICAgICAgICAgICAgIC8vIEZvciBXZWJHTDEsIGlmIG5vdCBhIHBvd2VyIG9mIDIsIHR1cm4gb2ZmIG1pcHMsIHNldCB3cmFwcGluZyB0byBjbGFtcCB0byBlZGdlIGFuZCBtaW5GaWx0ZXIgdG8gbGluZWFyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmdsLnJlbmRlcmVyLmlzV2ViZ2wyICYmICghaXNQb3dlck9mMih0aGlzLmltYWdlLndpZHRoKSB8fCAhaXNQb3dlck9mMih0aGlzLmltYWdlLmhlaWdodCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud3JhcFMgPSB0aGlzLndyYXBUID0gdGhpcy5nbC5DTEFNUF9UT19FREdFO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbkZpbHRlciA9IHRoaXMuZ2wuTElORUFSO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wuZ2VuZXJhdGVNaXBtYXAodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FsbGJhY2sgZm9yIHdoZW4gZGF0YSBpcyBwdXNoZWQgdG8gR1BVXG4gICAgICAgICAgICB0aGlzLm9uVXBkYXRlICYmIHRoaXMub25VcGRhdGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gdGhpcy5nbC5URVhUVVJFX0NVQkVfTUFQKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBsb2FkIGVtcHR5IHBpeGVsIGZvciBlYWNoIHNpZGUgd2hpbGUgbm8gaW1hZ2UgdG8gYXZvaWQgZXJyb3JzIHdoaWxlIGltYWdlIG9yIHZpZGVvIGxvYWRpbmdcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5SR0JBLFxuICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5SR0JBLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHlQaXhlbFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy53aWR0aCkge1xuICAgICAgICAgICAgICAgIC8vIGltYWdlIGludGVudGlvbmFsbHkgbGVmdCBudWxsIGZvciBSZW5kZXJUYXJnZXRcbiAgICAgICAgICAgICAgICBpZih0aGlzLnRhcmdldCA9PT0gdGhpcy5nbC5URVhUVVJFXzJEKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLnRhcmdldCwgdGhpcy5sZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMudGFyZ2V0ID09PSB0aGlzLmdsLlRFWFRVUkVfMkRfQVJSQVkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTNEKHRoaXMudGFyZ2V0LCB0aGlzLmxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5sZW5ndGgsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVXBsb2FkIGVtcHR5IHBpeGVsIGlmIG5vIGltYWdlIHRvIGF2b2lkIGVycm9ycyB3aGlsZSBpbWFnZSBvciB2aWRlbyBsb2FkaW5nXG4gICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMudGFyZ2V0LCAwLCB0aGlzLmdsLlJHQkEsIDEsIDEsIDAsIHRoaXMuZ2wuUkdCQSwgdGhpcy5nbC5VTlNJR05FRF9CWVRFLCBlbXB0eVBpeGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0b3JlLmltYWdlID0gdGhpcy5pbWFnZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcbmltcG9ydCB7IFF1YXQgfSBmcm9tICcuLi9tYXRoL1F1YXQuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4uL21hdGgvTWF0NC5qcyc7XG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uL21hdGgvRXVsZXIuanMnO1xuXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWMzKCk7XG4gICAgICAgIHRoaXMucXVhdGVybmlvbiA9IG5ldyBRdWF0KCk7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXcgVmVjMygxKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuICAgICAgICB0aGlzLnVwID0gbmV3IFZlYzMoMCwgMSwgMCk7XG5cbiAgICAgICAgdGhpcy5yb3RhdGlvbi5fdGFyZ2V0Lm9uQ2hhbmdlID0gKCkgPT4gdGhpcy5xdWF0ZXJuaW9uLmZyb21FdWxlcih0aGlzLnJvdGF0aW9uLCB0cnVlKTtcbiAgICAgICAgdGhpcy5xdWF0ZXJuaW9uLl90YXJnZXQub25DaGFuZ2UgPSAoKSA9PiB0aGlzLnJvdGF0aW9uLmZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbiwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICB9XG5cbiAgICBzZXRQYXJlbnQocGFyZW50LCBub3RpZnlQYXJlbnQgPSB0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiBwYXJlbnQgIT09IHRoaXMucGFyZW50KSB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBpZiAobm90aWZ5UGFyZW50ICYmIHBhcmVudCkgcGFyZW50LmFkZENoaWxkKHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBhZGRDaGlsZChjaGlsZCwgbm90aWZ5Q2hpbGQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghfnRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCkpIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIGlmIChub3RpZnlDaGlsZCkgY2hpbGQuc2V0UGFyZW50KHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZW1vdmVDaGlsZChjaGlsZCwgbm90aWZ5Q2hpbGQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghIX50aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpKSB0aGlzLmNoaWxkcmVuLnNwbGljZSh0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpLCAxKTtcbiAgICAgICAgaWYgKG5vdGlmeUNoaWxkKSBjaGlsZC5zZXRQYXJlbnQobnVsbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKSB7XG4gICAgICAgIGlmICh0aGlzLm1hdHJpeEF1dG9VcGRhdGUpIHRoaXMudXBkYXRlTWF0cml4KCk7XG4gICAgICAgIGlmICh0aGlzLndvcmxkTWF0cml4TmVlZHNVcGRhdGUgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCkgdGhpcy53b3JsZE1hdHJpeC5jb3B5KHRoaXMubWF0cml4KTtcbiAgICAgICAgICAgIGVsc2UgdGhpcy53b3JsZE1hdHJpeC5tdWx0aXBseSh0aGlzLnBhcmVudC53b3JsZE1hdHJpeCwgdGhpcy5tYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBmb3JjZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLnVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeCgpIHtcbiAgICAgICAgdGhpcy5tYXRyaXguY29tcG9zZSh0aGlzLnF1YXRlcm5pb24sIHRoaXMucG9zaXRpb24sIHRoaXMuc2NhbGUpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4TmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHRyYXZlcnNlKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIFJldHVybiB0cnVlIGluIGNhbGxiYWNrIHRvIHN0b3AgdHJhdmVyc2luZyBjaGlsZHJlblxuICAgICAgICBpZiAoY2FsbGJhY2sodGhpcykpIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpXS50cmF2ZXJzZShjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWNvbXBvc2UoKSB7XG4gICAgICAgIHRoaXMubWF0cml4LmRlY29tcG9zZSh0aGlzLnF1YXRlcm5pb24uX3RhcmdldCwgdGhpcy5wb3NpdGlvbiwgdGhpcy5zY2FsZSk7XG4gICAgICAgIHRoaXMucm90YXRpb24uZnJvbVF1YXRlcm5pb24odGhpcy5xdWF0ZXJuaW9uKTtcbiAgICB9XG5cbiAgICBsb29rQXQodGFyZ2V0LCBpbnZlcnQgPSBmYWxzZSkge1xuICAgICAgICBpZiAoaW52ZXJ0KSB0aGlzLm1hdHJpeC5sb29rQXQodGhpcy5wb3NpdGlvbiwgdGFyZ2V0LCB0aGlzLnVwKTtcbiAgICAgICAgZWxzZSB0aGlzLm1hdHJpeC5sb29rQXQodGFyZ2V0LCB0aGlzLnBvc2l0aW9uLCB0aGlzLnVwKTtcbiAgICAgICAgdGhpcy5tYXRyaXguZ2V0Um90YXRpb24odGhpcy5xdWF0ZXJuaW9uLl90YXJnZXQpO1xuICAgICAgICB0aGlzLnJvdGF0aW9uLmZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0dlb21ldHJ5LmpzJztcblxuZXhwb3J0IGNsYXNzIFBsYW5lIGV4dGVuZHMgR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKGdsLCB7IHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgd2lkdGhTZWdtZW50cyA9IDEsIGhlaWdodFNlZ21lbnRzID0gMSwgYXR0cmlidXRlcyA9IHt9IH0gPSB7fSkge1xuICAgICAgICBjb25zdCB3U2VncyA9IHdpZHRoU2VnbWVudHM7XG4gICAgICAgIGNvbnN0IGhTZWdzID0gaGVpZ2h0U2VnbWVudHM7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGxlbmd0aCBvZiBhcnJheXNcbiAgICAgICAgY29uc3QgbnVtID0gKHdTZWdzICsgMSkgKiAoaFNlZ3MgKyAxKTtcbiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IHdTZWdzICogaFNlZ3MgKiA2O1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIGVtcHR5IGFycmF5cyBvbmNlXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAzKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAzKTtcbiAgICAgICAgY29uc3QgdXYgPSBuZXcgRmxvYXQzMkFycmF5KG51bSAqIDIpO1xuICAgICAgICBjb25zdCBpbmRleCA9IG51bUluZGljZXMgPiA2NTUzNiA/IG5ldyBVaW50MzJBcnJheShudW1JbmRpY2VzKSA6IG5ldyBVaW50MTZBcnJheShudW1JbmRpY2VzKTtcblxuICAgICAgICBQbGFuZS5idWlsZFBsYW5lKHBvc2l0aW9uLCBub3JtYWwsIHV2LCBpbmRleCwgd2lkdGgsIGhlaWdodCwgMCwgd1NlZ3MsIGhTZWdzKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHNpemU6IDMsIGRhdGE6IHBvc2l0aW9uIH0sXG4gICAgICAgICAgICBub3JtYWw6IHsgc2l6ZTogMywgZGF0YTogbm9ybWFsIH0sXG4gICAgICAgICAgICB1djogeyBzaXplOiAyLCBkYXRhOiB1diB9LFxuICAgICAgICAgICAgaW5kZXg6IHsgZGF0YTogaW5kZXggfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VwZXIoZ2wsIGF0dHJpYnV0ZXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBidWlsZFBsYW5lKHBvc2l0aW9uLCBub3JtYWwsIHV2LCBpbmRleCwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIHdTZWdzLCBoU2VncywgdSA9IDAsIHYgPSAxLCB3ID0gMiwgdURpciA9IDEsIHZEaXIgPSAtMSwgaSA9IDAsIGlpID0gMCkge1xuICAgICAgICBjb25zdCBpbyA9IGk7XG4gICAgICAgIGNvbnN0IHNlZ1cgPSB3aWR0aCAvIHdTZWdzO1xuICAgICAgICBjb25zdCBzZWdIID0gaGVpZ2h0IC8gaFNlZ3M7XG5cbiAgICAgICAgZm9yIChsZXQgaXkgPSAwOyBpeSA8PSBoU2VnczsgaXkrKykge1xuICAgICAgICAgICAgbGV0IHkgPSBpeSAqIHNlZ0ggLSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgZm9yIChsZXQgaXggPSAwOyBpeCA8PSB3U2VnczsgaXgrKywgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSBpeCAqIHNlZ1cgLSB3aWR0aCAvIDI7XG5cbiAgICAgICAgICAgICAgICBwb3NpdGlvbltpICogMyArIHVdID0geCAqIHVEaXI7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25baSAqIDMgKyB2XSA9IHkgKiB2RGlyO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2kgKiAzICsgd10gPSBkZXB0aCAvIDI7XG5cbiAgICAgICAgICAgICAgICBub3JtYWxbaSAqIDMgKyB1XSA9IDA7XG4gICAgICAgICAgICAgICAgbm9ybWFsW2kgKiAzICsgdl0gPSAwO1xuICAgICAgICAgICAgICAgIG5vcm1hbFtpICogMyArIHddID0gZGVwdGggPj0gMCA/IDEgOiAtMTtcblxuICAgICAgICAgICAgICAgIHV2W2kgKiAyXSA9IGl4IC8gd1NlZ3M7XG4gICAgICAgICAgICAgICAgdXZbaSAqIDIgKyAxXSA9IDEgLSBpeSAvIGhTZWdzO1xuXG4gICAgICAgICAgICAgICAgaWYgKGl5ID09PSBoU2VncyB8fCBpeCA9PT0gd1NlZ3MpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGxldCBhID0gaW8gKyBpeCArIGl5ICogKHdTZWdzICsgMSk7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSBpbyArIGl4ICsgKGl5ICsgMSkgKiAod1NlZ3MgKyAxKTtcbiAgICAgICAgICAgICAgICBsZXQgYyA9IGlvICsgaXggKyAoaXkgKyAxKSAqICh3U2VncyArIDEpICsgMTtcbiAgICAgICAgICAgICAgICBsZXQgZCA9IGlvICsgaXggKyBpeSAqICh3U2VncyArIDEpICsgMTtcblxuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNl0gPSBhO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDFdID0gYjtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyAyXSA9IGQ7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgM10gPSBiO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDRdID0gYztcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyA1XSA9IGQ7XG4gICAgICAgICAgICAgICAgaWkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIEV1bGVyRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9FdWxlckZ1bmMuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4vTWF0NC5qcyc7XG5cbmNvbnN0IHRtcE1hdDQgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hdDQoKTtcblxuZXhwb3J0IGNsYXNzIEV1bGVyIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0geCwgeiA9IHgsIG9yZGVyID0gJ1lYWicpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgeik7XG4gICAgICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9ICgpID0+IHt9O1xuXG4gICAgICAgIC8vIEtlZXAgcmVmZXJlbmNlIHRvIHByb3h5IHRhcmdldCB0byBhdm9pZCB0cmlnZ2VyaW5nIG9uQ2hhbmdlIGludGVybmFsbHlcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGhpcztcblxuICAgICAgICAvLyBSZXR1cm4gYSBwcm94eSB0byB0cmlnZ2VyIG9uQ2hhbmdlIHdoZW4gYXJyYXkgZWxlbWVudHMgYXJlIGVkaXRlZCBkaXJlY3RseVxuICAgICAgICBjb25zdCB0cmlnZ2VyUHJvcHMgPSBbJzAnLCAnMScsICcyJ107XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGhpcywge1xuICAgICAgICAgICAgc2V0KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gUmVmbGVjdC5zZXQoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2VzcyAmJiB0cmlnZ2VyUHJvcHMuaW5jbHVkZXMocHJvcGVydHkpKSB0YXJnZXQub25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB6KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzJdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCh4LCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB4O1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB5O1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB6O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB2WzBdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB2WzFdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB2WzJdO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlb3JkZXIob3JkZXIpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0Lm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVJvdGF0aW9uTWF0cml4KG0sIG9yZGVyID0gdGhpcy5vcmRlcikge1xuICAgICAgICBFdWxlckZ1bmMuZnJvbVJvdGF0aW9uTWF0cml4KHRoaXMuX3RhcmdldCwgbSwgb3JkZXIpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21RdWF0ZXJuaW9uKHEsIG9yZGVyID0gdGhpcy5vcmRlciwgaXNJbnRlcm5hbCkge1xuICAgICAgICB0bXBNYXQ0LmZyb21RdWF0ZXJuaW9uKHEpO1xuICAgICAgICB0aGlzLl90YXJnZXQuZnJvbVJvdGF0aW9uTWF0cml4KHRtcE1hdDQsIG9yZGVyKTtcbiAgICAgICAgLy8gQXZvaWQgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICAgIGlmICghaXNJbnRlcm5hbCkgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQXJyYXkoYSwgbyA9IDApIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0gYVtvXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0gYVtvICsgMV07XG4gICAgICAgIHRoaXMuX3RhcmdldFsyXSA9IGFbbyArIDJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0b0FycmF5KGEgPSBbXSwgbyA9IDApIHtcbiAgICAgICAgYVtvXSA9IHRoaXNbMF07XG4gICAgICAgIGFbbyArIDFdID0gdGhpc1sxXTtcbiAgICAgICAgYVtvICsgMl0gPSB0aGlzWzJdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBNYXQzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9NYXQzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNYXQzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKG0wMCA9IDEsIG0wMSA9IDAsIG0wMiA9IDAsIG0xMCA9IDAsIG0xMSA9IDEsIG0xMiA9IDAsIG0yMCA9IDAsIG0yMSA9IDAsIG0yMiA9IDEpIHtcbiAgICAgICAgc3VwZXIobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNldChtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gICAgICAgIGlmIChtMDAubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KG0wMCk7XG4gICAgICAgIE1hdDNGdW5jLnNldCh0aGlzLCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnRyYW5zbGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnJvdGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2NhbGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuc2NhbGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG11bHRpcGx5KG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIHtcbiAgICAgICAgICAgIE1hdDNGdW5jLm11bHRpcGx5KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBNYXQzRnVuYy5tdWx0aXBseSh0aGlzLCB0aGlzLCBtYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWRlbnRpdHkoKSB7XG4gICAgICAgIE1hdDNGdW5jLmlkZW50aXR5KHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KG0pIHtcbiAgICAgICAgTWF0M0Z1bmMuY29weSh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU1hdHJpeDQobSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUJhc2lzKHZlYzNhLCB2ZWMzYiwgdmVjM2MpIHtcbiAgICAgICAgdGhpcy5zZXQodmVjM2FbMF0sIHZlYzNhWzFdLCB2ZWMzYVsyXSwgdmVjM2JbMF0sIHZlYzNiWzFdLCB2ZWMzYlsyXSwgdmVjM2NbMF0sIHZlYzNjWzFdLCB2ZWMzY1syXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGludmVyc2UobSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuaW52ZXJ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXROb3JtYWxNYXRyaXgobSkge1xuICAgICAgICBNYXQzRnVuYy5ub3JtYWxGcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgTWF0NEZ1bmMgZnJvbSAnLi9mdW5jdGlvbnMvTWF0NEZ1bmMuanMnO1xuXG5leHBvcnQgY2xhc3MgTWF0NCBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgbTAwID0gMSxcbiAgICAgICAgbTAxID0gMCxcbiAgICAgICAgbTAyID0gMCxcbiAgICAgICAgbTAzID0gMCxcbiAgICAgICAgbTEwID0gMCxcbiAgICAgICAgbTExID0gMSxcbiAgICAgICAgbTEyID0gMCxcbiAgICAgICAgbTEzID0gMCxcbiAgICAgICAgbTIwID0gMCxcbiAgICAgICAgbTIxID0gMCxcbiAgICAgICAgbTIyID0gMSxcbiAgICAgICAgbTIzID0gMCxcbiAgICAgICAgbTMwID0gMCxcbiAgICAgICAgbTMxID0gMCxcbiAgICAgICAgbTMyID0gMCxcbiAgICAgICAgbTMzID0gMVxuICAgICkge1xuICAgICAgICBzdXBlcihtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMTJdO1xuICAgIH1cblxuICAgIGdldCB5KCkge1xuICAgICAgICByZXR1cm4gdGhpc1sxM107XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzE0XTtcbiAgICB9XG5cbiAgICBnZXQgdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMTVdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1sxMl0gPSB2O1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpc1sxM10gPSB2O1xuICAgIH1cblxuICAgIHNldCB6KHYpIHtcbiAgICAgICAgdGhpc1sxNF0gPSB2O1xuICAgIH1cblxuICAgIHNldCB3KHYpIHtcbiAgICAgICAgdGhpc1sxNV0gPSB2O1xuICAgIH1cblxuICAgIHNldChtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcbiAgICAgICAgaWYgKG0wMC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkobTAwKTtcbiAgICAgICAgTWF0NEZ1bmMuc2V0KHRoaXMsIG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZSh2LCBtID0gdGhpcykge1xuICAgICAgICBNYXQ0RnVuYy50cmFuc2xhdGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJvdGF0ZSh2LCBheGlzLCBtID0gdGhpcykge1xuICAgICAgICBNYXQ0RnVuYy5yb3RhdGUodGhpcywgbSwgdiwgYXhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLnNjYWxlKHRoaXMsIG0sIHR5cGVvZiB2ID09PSAnbnVtYmVyJyA/IFt2LCB2LCB2XSA6IHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGQobWEsIG1iKSB7XG4gICAgICAgIGlmIChtYikgTWF0NEZ1bmMuYWRkKHRoaXMsIG1hLCBtYik7XG4gICAgICAgIGVsc2UgTWF0NEZ1bmMuYWRkKHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3ViKG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIE1hdDRGdW5jLnN1YnRyYWN0KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIGVsc2UgTWF0NEZ1bmMuc3VidHJhY3QodGhpcywgdGhpcywgbWEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseShtYSwgbWIpIHtcbiAgICAgICAgaWYgKCFtYS5sZW5ndGgpIHtcbiAgICAgICAgICAgIE1hdDRGdW5jLm11bHRpcGx5U2NhbGFyKHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYikge1xuICAgICAgICAgICAgTWF0NEZ1bmMubXVsdGlwbHkodGhpcywgbWEsIG1iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE1hdDRGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZGVudGl0eSgpIHtcbiAgICAgICAgTWF0NEZ1bmMuaWRlbnRpdHkodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkobSkge1xuICAgICAgICBNYXQ0RnVuYy5jb3B5KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUGVyc3BlY3RpdmUoeyBmb3YsIGFzcGVjdCwgbmVhciwgZmFyIH0gPSB7fSkge1xuICAgICAgICBNYXQ0RnVuYy5wZXJzcGVjdGl2ZSh0aGlzLCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU9ydGhvZ29uYWwoeyBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciB9KSB7XG4gICAgICAgIE1hdDRGdW5jLm9ydGhvKHRoaXMsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQ0RnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb24odikge1xuICAgICAgICB0aGlzLnggPSB2WzBdO1xuICAgICAgICB0aGlzLnkgPSB2WzFdO1xuICAgICAgICB0aGlzLnogPSB2WzJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLmludmVydCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29tcG9zZShxLCBwb3MsIHNjYWxlKSB7XG4gICAgICAgIE1hdDRGdW5jLmNvbXBvc2UodGhpcywgcSwgcG9zLCBzY2FsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRlY29tcG9zZShxLCBwb3MsIHNjYWxlKSB7XG4gICAgICAgIE1hdDRGdW5jLmRlY29tcG9zZSh0aGlzLCBxLCBwb3MsIHNjYWxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0Um90YXRpb24ocSkge1xuICAgICAgICBNYXQ0RnVuYy5nZXRSb3RhdGlvbihxLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0VHJhbnNsYXRpb24ocG9zKSB7XG4gICAgICAgIE1hdDRGdW5jLmdldFRyYW5zbGF0aW9uKHBvcywgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFNjYWxpbmcoc2NhbGUpIHtcbiAgICAgICAgTWF0NEZ1bmMuZ2V0U2NhbGluZyhzY2FsZSwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldE1heFNjYWxlT25BeGlzKCkge1xuICAgICAgICByZXR1cm4gTWF0NEZ1bmMuZ2V0TWF4U2NhbGVPbkF4aXModGhpcyk7XG4gICAgfVxuXG4gICAgbG9va0F0KGV5ZSwgdGFyZ2V0LCB1cCkge1xuICAgICAgICBNYXQ0RnVuYy50YXJnZXRUbyh0aGlzLCBleWUsIHRhcmdldCwgdXApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkZXRlcm1pbmFudCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdDRGdW5jLmRldGVybWluYW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZyb21BcnJheShhLCBvID0gMCkge1xuICAgICAgICB0aGlzWzBdID0gYVtvXTtcbiAgICAgICAgdGhpc1sxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzWzJdID0gYVtvICsgMl07XG4gICAgICAgIHRoaXNbM10gPSBhW28gKyAzXTtcbiAgICAgICAgdGhpc1s0XSA9IGFbbyArIDRdO1xuICAgICAgICB0aGlzWzVdID0gYVtvICsgNV07XG4gICAgICAgIHRoaXNbNl0gPSBhW28gKyA2XTtcbiAgICAgICAgdGhpc1s3XSA9IGFbbyArIDddO1xuICAgICAgICB0aGlzWzhdID0gYVtvICsgOF07XG4gICAgICAgIHRoaXNbOV0gPSBhW28gKyA5XTtcbiAgICAgICAgdGhpc1sxMF0gPSBhW28gKyAxMF07XG4gICAgICAgIHRoaXNbMTFdID0gYVtvICsgMTFdO1xuICAgICAgICB0aGlzWzEyXSA9IGFbbyArIDEyXTtcbiAgICAgICAgdGhpc1sxM10gPSBhW28gKyAxM107XG4gICAgICAgIHRoaXNbMTRdID0gYVtvICsgMTRdO1xuICAgICAgICB0aGlzWzE1XSA9IGFbbyArIDE1XTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgYVtvICsgM10gPSB0aGlzWzNdO1xuICAgICAgICBhW28gKyA0XSA9IHRoaXNbNF07XG4gICAgICAgIGFbbyArIDVdID0gdGhpc1s1XTtcbiAgICAgICAgYVtvICsgNl0gPSB0aGlzWzZdO1xuICAgICAgICBhW28gKyA3XSA9IHRoaXNbN107XG4gICAgICAgIGFbbyArIDhdID0gdGhpc1s4XTtcbiAgICAgICAgYVtvICsgOV0gPSB0aGlzWzldO1xuICAgICAgICBhW28gKyAxMF0gPSB0aGlzWzEwXTtcbiAgICAgICAgYVtvICsgMTFdID0gdGhpc1sxMV07XG4gICAgICAgIGFbbyArIDEyXSA9IHRoaXNbMTJdO1xuICAgICAgICBhW28gKyAxM10gPSB0aGlzWzEzXTtcbiAgICAgICAgYVtvICsgMTRdID0gdGhpc1sxNF07XG4gICAgICAgIGFbbyArIDE1XSA9IHRoaXNbMTVdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBRdWF0RnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9RdWF0RnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBRdWF0IGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgeiA9IDAsIHcgPSAxKSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHosIHcpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gKCkgPT4ge307XG5cbiAgICAgICAgLy8gS2VlcCByZWZlcmVuY2UgdG8gcHJveHkgdGFyZ2V0IHRvIGF2b2lkIHRyaWdnZXJpbmcgb25DaGFuZ2UgaW50ZXJuYWxseVxuICAgICAgICB0aGlzLl90YXJnZXQgPSB0aGlzO1xuXG4gICAgICAgIC8vIFJldHVybiBhIHByb3h5IHRvIHRyaWdnZXIgb25DaGFuZ2Ugd2hlbiBhcnJheSBlbGVtZW50cyBhcmUgZWRpdGVkIGRpcmVjdGx5XG4gICAgICAgIGNvbnN0IHRyaWdnZXJQcm9wcyA9IFsnMCcsICcxJywgJzInLCAnMyddO1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcbiAgICAgICAgICAgIHNldCh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IFJlZmxlY3Quc2V0KC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MgJiYgdHJpZ2dlclByb3BzLmluY2x1ZGVzKHByb3BlcnR5KSkgdGFyZ2V0Lm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF07XG4gICAgfVxuXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgIH1cblxuICAgIGdldCB6KCkge1xuICAgICAgICByZXR1cm4gdGhpc1syXTtcbiAgICB9XG5cbiAgICBnZXQgdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbM107XG4gICAgfVxuXG4gICAgc2V0IHgodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHkodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHoodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHcodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbM10gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgaWRlbnRpdHkoKSB7XG4gICAgICAgIFF1YXRGdW5jLmlkZW50aXR5KHRoaXMuX3RhcmdldCk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0KHgsIHksIHosIHcpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICBRdWF0RnVuYy5zZXQodGhpcy5fdGFyZ2V0LCB4LCB5LCB6LCB3KTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGVYKGEpIHtcbiAgICAgICAgUXVhdEZ1bmMucm90YXRlWCh0aGlzLl90YXJnZXQsIHRoaXMuX3RhcmdldCwgYSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlWShhKSB7XG4gICAgICAgIFF1YXRGdW5jLnJvdGF0ZVkodGhpcy5fdGFyZ2V0LCB0aGlzLl90YXJnZXQsIGEpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJvdGF0ZVooYSkge1xuICAgICAgICBRdWF0RnVuYy5yb3RhdGVaKHRoaXMuX3RhcmdldCwgdGhpcy5fdGFyZ2V0LCBhKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKHEgPSB0aGlzLl90YXJnZXQpIHtcbiAgICAgICAgUXVhdEZ1bmMuaW52ZXJ0KHRoaXMuX3RhcmdldCwgcSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29uanVnYXRlKHEgPSB0aGlzLl90YXJnZXQpIHtcbiAgICAgICAgUXVhdEZ1bmMuY29uanVnYXRlKHRoaXMuX3RhcmdldCwgcSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29weShxKSB7XG4gICAgICAgIFF1YXRGdW5jLmNvcHkodGhpcy5fdGFyZ2V0LCBxKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBub3JtYWxpemUocSA9IHRoaXMuX3RhcmdldCkge1xuICAgICAgICBRdWF0RnVuYy5ub3JtYWxpemUodGhpcy5fdGFyZ2V0LCBxKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseShxQSwgcUIpIHtcbiAgICAgICAgaWYgKHFCKSB7XG4gICAgICAgICAgICBRdWF0RnVuYy5tdWx0aXBseSh0aGlzLl90YXJnZXQsIHFBLCBxQik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBRdWF0RnVuYy5tdWx0aXBseSh0aGlzLl90YXJnZXQsIHRoaXMuX3RhcmdldCwgcUEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZG90KHYpIHtcbiAgICAgICAgcmV0dXJuIFF1YXRGdW5jLmRvdCh0aGlzLl90YXJnZXQsIHYpO1xuICAgIH1cblxuICAgIGZyb21NYXRyaXgzKG1hdHJpeDMpIHtcbiAgICAgICAgUXVhdEZ1bmMuZnJvbU1hdDModGhpcy5fdGFyZ2V0LCBtYXRyaXgzKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tRXVsZXIoZXVsZXIsIGlzSW50ZXJuYWwpIHtcbiAgICAgICAgUXVhdEZ1bmMuZnJvbUV1bGVyKHRoaXMuX3RhcmdldCwgZXVsZXIsIGV1bGVyLm9yZGVyKTtcbiAgICAgICAgLy8gQXZvaWQgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICAgIGlmICghaXNJbnRlcm5hbCkgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQXhpc0FuZ2xlKGF4aXMsIGEpIHtcbiAgICAgICAgUXVhdEZ1bmMuc2V0QXhpc0FuZ2xlKHRoaXMuX3RhcmdldCwgYXhpcywgYSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2xlcnAocSwgdCkge1xuICAgICAgICBRdWF0RnVuYy5zbGVycCh0aGlzLl90YXJnZXQsIHRoaXMuX3RhcmdldCwgcSwgdCk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUFycmF5KGEsIG8gPSAwKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFswXSA9IGFbb107XG4gICAgICAgIHRoaXMuX3RhcmdldFsxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSBhW28gKyAyXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzNdID0gYVtvICsgM107XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgYVtvICsgM10gPSB0aGlzWzNdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBWZWMzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9WZWMzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBWZWMzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1swXSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IHkodikge1xuICAgICAgICB0aGlzWzFdID0gdjtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXNbMl0gPSB2O1xuICAgIH1cblxuICAgIHNldCh4LCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICBWZWMzRnVuYy5zZXQodGhpcywgeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICBWZWMzRnVuYy5jb3B5KHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGQodmEsIHZiKSB7XG4gICAgICAgIGlmICh2YikgVmVjM0Z1bmMuYWRkKHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuYWRkKHRoaXMsIHRoaXMsIHZhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3ViKHZhLCB2Yikge1xuICAgICAgICBpZiAodmIpIFZlYzNGdW5jLnN1YnRyYWN0KHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuc3VidHJhY3QodGhpcywgdGhpcywgdmEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseSh2KSB7XG4gICAgICAgIGlmICh2Lmxlbmd0aCkgVmVjM0Z1bmMubXVsdGlwbHkodGhpcywgdGhpcywgdik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuc2NhbGUodGhpcywgdGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRpdmlkZSh2KSB7XG4gICAgICAgIGlmICh2Lmxlbmd0aCkgVmVjM0Z1bmMuZGl2aWRlKHRoaXMsIHRoaXMsIHYpO1xuICAgICAgICBlbHNlIFZlYzNGdW5jLnNjYWxlKHRoaXMsIHRoaXMsIDEgLyB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW52ZXJzZSh2ID0gdGhpcykge1xuICAgICAgICBWZWMzRnVuYy5pbnZlcnNlKHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBDYW4ndCB1c2UgJ2xlbmd0aCcgYXMgQXJyYXkucHJvdG90eXBlIHVzZXMgaXRcbiAgICBsZW4oKSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5sZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgZGlzdGFuY2Uodikge1xuICAgICAgICBpZiAodikgcmV0dXJuIFZlYzNGdW5jLmRpc3RhbmNlKHRoaXMsIHYpO1xuICAgICAgICBlbHNlIHJldHVybiBWZWMzRnVuYy5sZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgc3F1YXJlZExlbigpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLnNxdWFyZWRMZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgc3F1YXJlZERpc3RhbmNlKHYpIHtcbiAgICAgICAgaWYgKHYpIHJldHVybiBWZWMzRnVuYy5zcXVhcmVkRGlzdGFuY2UodGhpcywgdik7XG4gICAgICAgIGVsc2UgcmV0dXJuIFZlYzNGdW5jLnNxdWFyZWRMZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgbmVnYXRlKHYgPSB0aGlzKSB7XG4gICAgICAgIFZlYzNGdW5jLm5lZ2F0ZSh0aGlzLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY3Jvc3ModmEsIHZiKSB7XG4gICAgICAgIGlmICh2YikgVmVjM0Z1bmMuY3Jvc3ModGhpcywgdmEsIHZiKTtcbiAgICAgICAgZWxzZSBWZWMzRnVuYy5jcm9zcyh0aGlzLCB0aGlzLCB2YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHYpIHtcbiAgICAgICAgVmVjM0Z1bmMuc2NhbGUodGhpcywgdGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgVmVjM0Z1bmMubm9ybWFsaXplKHRoaXMsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkb3Qodikge1xuICAgICAgICByZXR1cm4gVmVjM0Z1bmMuZG90KHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGVxdWFscyh2KSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5leGFjdEVxdWFscyh0aGlzLCB2KTtcbiAgICB9XG5cbiAgICBhcHBseU1hdHJpeDMobWF0Mykge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1NYXQzKHRoaXMsIHRoaXMsIG1hdDMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhcHBseU1hdHJpeDQobWF0NCkge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1NYXQ0KHRoaXMsIHRoaXMsIG1hdDQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZVJvdGF0ZU1hdHJpeDQobWF0NCkge1xuICAgICAgICBWZWMzRnVuYy5zY2FsZVJvdGF0ZU1hdDQodGhpcywgdGhpcywgbWF0NCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFwcGx5UXVhdGVybmlvbihxKSB7XG4gICAgICAgIFZlYzNGdW5jLnRyYW5zZm9ybVF1YXQodGhpcywgdGhpcywgcSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFuZ2xlKHYpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLmFuZ2xlKHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGxlcnAodiwgdCkge1xuICAgICAgICBWZWMzRnVuYy5sZXJwKHRoaXMsIHRoaXMsIHYsIHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWMzKHRoaXNbMF0sIHRoaXNbMV0sIHRoaXNbMl0pO1xuICAgIH1cblxuICAgIGZyb21BcnJheShhLCBvID0gMCkge1xuICAgICAgICB0aGlzWzBdID0gYVtvXTtcbiAgICAgICAgdGhpc1sxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzWzJdID0gYVtvICsgMl07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvQXJyYXkoYSA9IFtdLCBvID0gMCkge1xuICAgICAgICBhW29dID0gdGhpc1swXTtcbiAgICAgICAgYVtvICsgMV0gPSB0aGlzWzFdO1xuICAgICAgICBhW28gKyAyXSA9IHRoaXNbMl07XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybURpcmVjdGlvbihtYXQ0KSB7XG4gICAgICAgIGNvbnN0IHggPSB0aGlzWzBdO1xuICAgICAgICBjb25zdCB5ID0gdGhpc1sxXTtcbiAgICAgICAgY29uc3QgeiA9IHRoaXNbMl07XG5cbiAgICAgICAgdGhpc1swXSA9IG1hdDRbMF0gKiB4ICsgbWF0NFs0XSAqIHkgKyBtYXQ0WzhdICogejtcbiAgICAgICAgdGhpc1sxXSA9IG1hdDRbMV0gKiB4ICsgbWF0NFs1XSAqIHkgKyBtYXQ0WzldICogejtcbiAgICAgICAgdGhpc1syXSA9IG1hdDRbMl0gKiB4ICsgbWF0NFs2XSAqIHkgKyBtYXQ0WzEwXSAqIHo7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG4gICAgfVxufVxuIiwiLy8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25NYXRyaXgob3V0LCBtLCBvcmRlciA9ICdZWFonKSB7XG4gICAgaWYgKG9yZGVyID09PSAnWFlaJykge1xuICAgICAgICBvdXRbMV0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVs4XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzhdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMihtWzZdLCBtWzVdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuICAgICAgICBvdXRbMF0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bOV0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs5XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKG1bOF0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVs1XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKC1tWzJdLCBtWzBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWlhZJykge1xuICAgICAgICBvdXRbMF0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVs2XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzZdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIoLW1bMl0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bNV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzFdID0gMDtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVswXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWllYJykge1xuICAgICAgICBvdXRbMV0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bMl0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVsyXSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMigtbVs0XSwgbVs1XSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuICAgICAgICBvdXRbMl0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVsxXSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzFdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMigtbVsyXSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzEwXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWFpZJykge1xuICAgICAgICBvdXRbMl0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bNF0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs0XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuIiwiY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xuXG4vKipcbiAqIENvcGllcyB0aGUgdXBwZXItbGVmdCAzeDMgdmFsdWVzIGludG8gdGhlIGdpdmVuIG1hdDMuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyAzeDMgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgICB0aGUgc291cmNlIDR4NCBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQ0KG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbNF07XG4gICAgb3V0WzRdID0gYVs1XTtcbiAgICBvdXRbNV0gPSBhWzZdO1xuICAgIG91dFs2XSA9IGFbOF07XG4gICAgb3V0WzddID0gYVs5XTtcbiAgICBvdXRbOF0gPSBhWzEwXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IHEgUXVhdGVybmlvbiB0byBjcmVhdGUgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgICBsZXQgeCA9IHFbMF0sXG4gICAgICAgIHkgPSBxWzFdLFxuICAgICAgICB6ID0gcVsyXSxcbiAgICAgICAgdyA9IHFbM107XG4gICAgbGV0IHgyID0geCArIHg7XG4gICAgbGV0IHkyID0geSArIHk7XG4gICAgbGV0IHoyID0geiArIHo7XG5cbiAgICBsZXQgeHggPSB4ICogeDI7XG4gICAgbGV0IHl4ID0geSAqIHgyO1xuICAgIGxldCB5eSA9IHkgKiB5MjtcbiAgICBsZXQgenggPSB6ICogeDI7XG4gICAgbGV0IHp5ID0geiAqIHkyO1xuICAgIGxldCB6eiA9IHogKiB6MjtcbiAgICBsZXQgd3ggPSB3ICogeDI7XG4gICAgbGV0IHd5ID0gdyAqIHkyO1xuICAgIGxldCB3eiA9IHcgKiB6MjtcblxuICAgIG91dFswXSA9IDEgLSB5eSAtIHp6O1xuICAgIG91dFszXSA9IHl4IC0gd3o7XG4gICAgb3V0WzZdID0genggKyB3eTtcblxuICAgIG91dFsxXSA9IHl4ICsgd3o7XG4gICAgb3V0WzRdID0gMSAtIHh4IC0geno7XG4gICAgb3V0WzddID0genkgLSB3eDtcblxuICAgIG91dFsyXSA9IHp4IC0gd3k7XG4gICAgb3V0WzVdID0genkgKyB3eDtcbiAgICBvdXRbOF0gPSAxIC0geHggLSB5eTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbNF0gPSBhWzRdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs2XTtcbiAgICBvdXRbN10gPSBhWzddO1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICAgIG91dFswXSA9IG0wMDtcbiAgICBvdXRbMV0gPSBtMDE7XG4gICAgb3V0WzJdID0gbTAyO1xuICAgIG91dFszXSA9IG0xMDtcbiAgICBvdXRbNF0gPSBtMTE7XG4gICAgb3V0WzVdID0gbTEyO1xuICAgIG91dFs2XSA9IG0yMDtcbiAgICBvdXRbN10gPSBtMjE7XG4gICAgb3V0WzhdID0gbTIyO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IGEgbWF0MyB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMTtcbiAgICBvdXRbNV0gPSAwO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAgIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgICBpZiAob3V0ID09PSBhKSB7XG4gICAgICAgIGxldCBhMDEgPSBhWzFdLFxuICAgICAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgICAgIGExMiA9IGFbNV07XG4gICAgICAgIG91dFsxXSA9IGFbM107XG4gICAgICAgIG91dFsyXSA9IGFbNl07XG4gICAgICAgIG91dFszXSA9IGEwMTtcbiAgICAgICAgb3V0WzVdID0gYVs3XTtcbiAgICAgICAgb3V0WzZdID0gYTAyO1xuICAgICAgICBvdXRbN10gPSBhMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3V0WzBdID0gYVswXTtcbiAgICAgICAgb3V0WzFdID0gYVszXTtcbiAgICAgICAgb3V0WzJdID0gYVs2XTtcbiAgICAgICAgb3V0WzNdID0gYVsxXTtcbiAgICAgICAgb3V0WzRdID0gYVs0XTtcbiAgICAgICAgb3V0WzVdID0gYVs3XTtcbiAgICAgICAgb3V0WzZdID0gYVsyXTtcbiAgICAgICAgb3V0WzddID0gYVs1XTtcbiAgICAgICAgb3V0WzhdID0gYVs4XTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEludmVydHMgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdO1xuICAgIGxldCBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIGxldCBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdO1xuXG4gICAgbGV0IGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMTtcbiAgICBsZXQgYjExID0gLWEyMiAqIGExMCArIGExMiAqIGEyMDtcbiAgICBsZXQgYjIxID0gYTIxICogYTEwIC0gYTExICogYTIwO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIGxldCBkZXQgPSBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjE7XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgb3V0WzBdID0gYjAxICogZGV0O1xuICAgIG91dFsxXSA9ICgtYTIyICogYTAxICsgYTAyICogYTIxKSAqIGRldDtcbiAgICBvdXRbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldDtcbiAgICBvdXRbM10gPSBiMTEgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGEyMiAqIGEwMCAtIGEwMiAqIGEyMCkgKiBkZXQ7XG4gICAgb3V0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0O1xuICAgIG91dFs2XSA9IGIyMSAqIGRldDtcbiAgICBvdXRbN10gPSAoLWEyMSAqIGEwMCArIGEwMSAqIGEyMCkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXQ7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXTtcbiAgICBsZXQgYTEwID0gYVszXSxcbiAgICAgICAgYTExID0gYVs0XSxcbiAgICAgICAgYTEyID0gYVs1XTtcbiAgICBsZXQgYTIwID0gYVs2XSxcbiAgICAgICAgYTIxID0gYVs3XSxcbiAgICAgICAgYTIyID0gYVs4XTtcblxuICAgIHJldHVybiBhMDAgKiAoYTIyICogYTExIC0gYTEyICogYTIxKSArIGEwMSAqICgtYTIyICogYTEwICsgYTEyICogYTIwKSArIGEwMiAqIChhMjEgKiBhMTAgLSBhMTEgKiBhMjApO1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDMnc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdO1xuICAgIGxldCBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIGxldCBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdO1xuXG4gICAgbGV0IGIwMCA9IGJbMF0sXG4gICAgICAgIGIwMSA9IGJbMV0sXG4gICAgICAgIGIwMiA9IGJbMl07XG4gICAgbGV0IGIxMCA9IGJbM10sXG4gICAgICAgIGIxMSA9IGJbNF0sXG4gICAgICAgIGIxMiA9IGJbNV07XG4gICAgbGV0IGIyMCA9IGJbNl0sXG4gICAgICAgIGIyMSA9IGJbN10sXG4gICAgICAgIGIyMiA9IGJbOF07XG5cbiAgICBvdXRbMF0gPSBiMDAgKiBhMDAgKyBiMDEgKiBhMTAgKyBiMDIgKiBhMjA7XG4gICAgb3V0WzFdID0gYjAwICogYTAxICsgYjAxICogYTExICsgYjAyICogYTIxO1xuICAgIG91dFsyXSA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMjtcblxuICAgIG91dFszXSA9IGIxMCAqIGEwMCArIGIxMSAqIGExMCArIGIxMiAqIGEyMDtcbiAgICBvdXRbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XG4gICAgb3V0WzVdID0gYjEwICogYTAyICsgYjExICogYTEyICsgYjEyICogYTIyO1xuXG4gICAgb3V0WzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xuICAgIG91dFs3XSA9IGIyMCAqIGEwMSArIGIyMSAqIGExMSArIGIyMiAqIGEyMTtcbiAgICBvdXRbOF0gPSBiMjAgKiBhMDIgKyBiMjEgKiBhMTIgKyBiMjIgKiBhMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdGUgYSBtYXQzIGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdLFxuICAgICAgICBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdLFxuICAgICAgICB4ID0gdlswXSxcbiAgICAgICAgeSA9IHZbMV07XG5cbiAgICBvdXRbMF0gPSBhMDA7XG4gICAgb3V0WzFdID0gYTAxO1xuICAgIG91dFsyXSA9IGEwMjtcblxuICAgIG91dFszXSA9IGExMDtcbiAgICBvdXRbNF0gPSBhMTE7XG4gICAgb3V0WzVdID0gYTEyO1xuXG4gICAgb3V0WzZdID0geCAqIGEwMCArIHkgKiBhMTAgKyBhMjA7XG4gICAgb3V0WzddID0geCAqIGEwMSArIHkgKiBhMTEgKyBhMjE7XG4gICAgb3V0WzhdID0geCAqIGEwMiArIHkgKiBhMTIgKyBhMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0MyBieSB0aGUgZ2l2ZW4gYW5nbGVcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV0sXG4gICAgICAgIGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF0sXG4gICAgICAgIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGMgKiBhMDAgKyBzICogYTEwO1xuICAgIG91dFsxXSA9IGMgKiBhMDEgKyBzICogYTExO1xuICAgIG91dFsyXSA9IGMgKiBhMDIgKyBzICogYTEyO1xuXG4gICAgb3V0WzNdID0gYyAqIGExMCAtIHMgKiBhMDA7XG4gICAgb3V0WzRdID0gYyAqIGExMSAtIHMgKiBhMDE7XG4gICAgb3V0WzVdID0gYyAqIGExMiAtIHMgKiBhMDI7XG5cbiAgICBvdXRbNl0gPSBhMjA7XG4gICAgb3V0WzddID0gYTIxO1xuICAgIG91dFs4XSA9IGEyMjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0MyBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7dmVjMn0gdiB0aGUgdmVjMiB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKiovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXTtcblxuICAgIG91dFswXSA9IHggKiBhWzBdO1xuICAgIG91dFsxXSA9IHggKiBhWzFdO1xuICAgIG91dFsyXSA9IHggKiBhWzJdO1xuXG4gICAgb3V0WzNdID0geSAqIGFbM107XG4gICAgb3V0WzRdID0geSAqIGFbNF07XG4gICAgb3V0WzVdID0geSAqIGFbNV07XG5cbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbm9ybWFsIG1hdHJpeCAodHJhbnNwb3NlIGludmVyc2UpIGZyb20gdGhlIDR4NCBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge21hdDR9IGEgTWF0NCB0byBkZXJpdmUgdGhlIG5vcm1hbCBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbEZyb21NYXQ0KG91dCwgYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgIGxldCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gICAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgIGxldCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gICAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgIGxldCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gICAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgIGxldCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgbGV0IGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICAgIGlmICghZGV0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvdXRbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldDtcbiAgICBvdXRbMV0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgICBvdXRbMl0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcblxuICAgIG91dFszXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xuICAgIG91dFs0XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xuICAgIG91dFs1XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuXG4gICAgb3V0WzZdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzddID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIDJEIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB5b3VyIGdsIGNvbnRleHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSGVpZ2h0IG9mIGdsIGNvbnRleHRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb24ob3V0LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgb3V0WzBdID0gMiAvIHdpZHRoO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IC0yIC8gaGVpZ2h0O1xuICAgIG91dFs1XSA9IDA7XG4gICAgb3V0WzZdID0gLTE7XG4gICAgb3V0WzddID0gMTtcbiAgICBvdXRbOF0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0MydzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gKyBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgb3V0WzRdID0gYVs0XSAqIGI7XG4gICAgb3V0WzVdID0gYVs1XSAqIGI7XG4gICAgb3V0WzZdID0gYVs2XSAqIGI7XG4gICAgb3V0WzddID0gYVs3XSAqIGI7XG4gICAgb3V0WzhdID0gYVs4XSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsImltcG9ydCAqIGFzIHZlYzMgZnJvbSAnLi9WZWMzRnVuYy5qcyc7XG5cbmNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0NCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs1XTtcbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICBvdXRbOV0gPSBhWzldO1xuICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxMV07XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0NCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMykge1xuICAgIG91dFswXSA9IG0wMDtcbiAgICBvdXRbMV0gPSBtMDE7XG4gICAgb3V0WzJdID0gbTAyO1xuICAgIG91dFszXSA9IG0wMztcbiAgICBvdXRbNF0gPSBtMTA7XG4gICAgb3V0WzVdID0gbTExO1xuICAgIG91dFs2XSA9IG0xMjtcbiAgICBvdXRbN10gPSBtMTM7XG4gICAgb3V0WzhdID0gbTIwO1xuICAgIG91dFs5XSA9IG0yMTtcbiAgICBvdXRbMTBdID0gbTIyO1xuICAgIG91dFsxMV0gPSBtMjM7XG4gICAgb3V0WzEyXSA9IG0zMDtcbiAgICBvdXRbMTNdID0gbTMxO1xuICAgIG91dFsxNF0gPSBtMzI7XG4gICAgb3V0WzE1XSA9IG0zMztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCBhIG1hdDQgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgICBvdXRbMF0gPSAxO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzVdID0gMTtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMDtcbiAgICBvdXRbOV0gPSAwO1xuICAgIG91dFsxMF0gPSAxO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSAwO1xuICAgIG91dFsxM10gPSAwO1xuICAgIG91dFsxNF0gPSAwO1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAgIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgICBpZiAob3V0ID09PSBhKSB7XG4gICAgICAgIGxldCBhMDEgPSBhWzFdLFxuICAgICAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgICAgIGEwMyA9IGFbM107XG4gICAgICAgIGxldCBhMTIgPSBhWzZdLFxuICAgICAgICAgICAgYTEzID0gYVs3XTtcbiAgICAgICAgbGV0IGEyMyA9IGFbMTFdO1xuXG4gICAgICAgIG91dFsxXSA9IGFbNF07XG4gICAgICAgIG91dFsyXSA9IGFbOF07XG4gICAgICAgIG91dFszXSA9IGFbMTJdO1xuICAgICAgICBvdXRbNF0gPSBhMDE7XG4gICAgICAgIG91dFs2XSA9IGFbOV07XG4gICAgICAgIG91dFs3XSA9IGFbMTNdO1xuICAgICAgICBvdXRbOF0gPSBhMDI7XG4gICAgICAgIG91dFs5XSA9IGExMjtcbiAgICAgICAgb3V0WzExXSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTJdID0gYTAzO1xuICAgICAgICBvdXRbMTNdID0gYTEzO1xuICAgICAgICBvdXRbMTRdID0gYTIzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG91dFswXSA9IGFbMF07XG4gICAgICAgIG91dFsxXSA9IGFbNF07XG4gICAgICAgIG91dFsyXSA9IGFbOF07XG4gICAgICAgIG91dFszXSA9IGFbMTJdO1xuICAgICAgICBvdXRbNF0gPSBhWzFdO1xuICAgICAgICBvdXRbNV0gPSBhWzVdO1xuICAgICAgICBvdXRbNl0gPSBhWzldO1xuICAgICAgICBvdXRbN10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzhdID0gYVsyXTtcbiAgICAgICAgb3V0WzldID0gYVs2XTtcbiAgICAgICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgICAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgICAgIG91dFsxMl0gPSBhWzNdO1xuICAgICAgICBvdXRbMTNdID0gYVs3XTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMTFdO1xuICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBJbnZlcnRzIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTAzID0gYVszXTtcbiAgICBsZXQgYTEwID0gYVs0XSxcbiAgICAgICAgYTExID0gYVs1XSxcbiAgICAgICAgYTEyID0gYVs2XSxcbiAgICAgICAgYTEzID0gYVs3XTtcbiAgICBsZXQgYTIwID0gYVs4XSxcbiAgICAgICAgYTIxID0gYVs5XSxcbiAgICAgICAgYTIyID0gYVsxMF0sXG4gICAgICAgIGEyMyA9IGFbMTFdO1xuICAgIGxldCBhMzAgPSBhWzEyXSxcbiAgICAgICAgYTMxID0gYVsxM10sXG4gICAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgICBhMzMgPSBhWzE1XTtcblxuICAgIGxldCBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gICAgbGV0IGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgICBsZXQgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xuICAgIGxldCBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gICAgbGV0IGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgICBsZXQgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xuICAgIGxldCBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gICAgbGV0IGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgICBsZXQgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xuICAgIGxldCBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gICAgbGV0IGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgICBsZXQgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzFdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xuICAgIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0O1xuICAgIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgIGxldCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gICAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgIGxldCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gICAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgIGxldCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gICAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgIGxldCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgcmV0dXJuIGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQ0c1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgLy8gQ2FjaGUgb25seSB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBzZWNvbmQgbWF0cml4XG4gICAgbGV0IGIwID0gYlswXSxcbiAgICAgICAgYjEgPSBiWzFdLFxuICAgICAgICBiMiA9IGJbMl0sXG4gICAgICAgIGIzID0gYlszXTtcbiAgICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgICBvdXRbMl0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcblxuICAgIGIwID0gYls0XTtcbiAgICBiMSA9IGJbNV07XG4gICAgYjIgPSBiWzZdO1xuICAgIGIzID0gYls3XTtcbiAgICBvdXRbNF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgICBvdXRbNV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgICBvdXRbNl0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgICBvdXRbN10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcblxuICAgIGIwID0gYls4XTtcbiAgICBiMSA9IGJbOV07XG4gICAgYjIgPSBiWzEwXTtcbiAgICBiMyA9IGJbMTFdO1xuICAgIG91dFs4XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICAgIG91dFs5XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICAgIG91dFsxMF0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgICBvdXRbMTFdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XG5cbiAgICBiMCA9IGJbMTJdO1xuICAgIGIxID0gYlsxM107XG4gICAgYjIgPSBiWzE0XTtcbiAgICBiMyA9IGJbMTVdO1xuICAgIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gICAgb3V0WzE0XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICAgIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBhIG1hdDQgYnkgdGhlIGdpdmVuIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7dmVjM30gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXSxcbiAgICAgICAgeiA9IHZbMl07XG4gICAgbGV0IGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgICBsZXQgYTEwLCBhMTEsIGExMiwgYTEzO1xuICAgIGxldCBhMjAsIGEyMSwgYTIyLCBhMjM7XG5cbiAgICBpZiAoYSA9PT0gb3V0KSB7XG4gICAgICAgIG91dFsxMl0gPSBhWzBdICogeCArIGFbNF0gKiB5ICsgYVs4XSAqIHogKyBhWzEyXTtcbiAgICAgICAgb3V0WzEzXSA9IGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiArIGFbMTNdO1xuICAgICAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVszXSAqIHggKyBhWzddICogeSArIGFbMTFdICogeiArIGFbMTVdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGEwMCA9IGFbMF07XG4gICAgICAgIGEwMSA9IGFbMV07XG4gICAgICAgIGEwMiA9IGFbMl07XG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgICAgIGExMCA9IGFbNF07XG4gICAgICAgIGExMSA9IGFbNV07XG4gICAgICAgIGExMiA9IGFbNl07XG4gICAgICAgIGExMyA9IGFbN107XG4gICAgICAgIGEyMCA9IGFbOF07XG4gICAgICAgIGEyMSA9IGFbOV07XG4gICAgICAgIGEyMiA9IGFbMTBdO1xuICAgICAgICBhMjMgPSBhWzExXTtcblxuICAgICAgICBvdXRbMF0gPSBhMDA7XG4gICAgICAgIG91dFsxXSA9IGEwMTtcbiAgICAgICAgb3V0WzJdID0gYTAyO1xuICAgICAgICBvdXRbM10gPSBhMDM7XG4gICAgICAgIG91dFs0XSA9IGExMDtcbiAgICAgICAgb3V0WzVdID0gYTExO1xuICAgICAgICBvdXRbNl0gPSBhMTI7XG4gICAgICAgIG91dFs3XSA9IGExMztcbiAgICAgICAgb3V0WzhdID0gYTIwO1xuICAgICAgICBvdXRbOV0gPSBhMjE7XG4gICAgICAgIG91dFsxMF0gPSBhMjI7XG4gICAgICAgIG91dFsxMV0gPSBhMjM7XG5cbiAgICAgICAgb3V0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIGFbMTJdO1xuICAgICAgICBvdXRbMTNdID0gYTAxICogeCArIGExMSAqIHkgKyBhMjEgKiB6ICsgYVsxM107XG4gICAgICAgIG91dFsxNF0gPSBhMDIgKiB4ICsgYTEyICogeSArIGEyMiAqIHogKyBhWzE0XTtcbiAgICAgICAgb3V0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIGFbMTVdO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIHRoZSBtYXQ0IGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMzIG5vdCB1c2luZyB2ZWN0b3JpemF0aW9uXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge3ZlYzN9IHYgdGhlIHZlYzMgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICAgIGxldCB4ID0gdlswXSxcbiAgICAgICAgeSA9IHZbMV0sXG4gICAgICAgIHogPSB2WzJdO1xuXG4gICAgb3V0WzBdID0gYVswXSAqIHg7XG4gICAgb3V0WzFdID0gYVsxXSAqIHg7XG4gICAgb3V0WzJdID0gYVsyXSAqIHg7XG4gICAgb3V0WzNdID0gYVszXSAqIHg7XG4gICAgb3V0WzRdID0gYVs0XSAqIHk7XG4gICAgb3V0WzVdID0gYVs1XSAqIHk7XG4gICAgb3V0WzZdID0gYVs2XSAqIHk7XG4gICAgb3V0WzddID0gYVs3XSAqIHk7XG4gICAgb3V0WzhdID0gYVs4XSAqIHo7XG4gICAgb3V0WzldID0gYVs5XSAqIHo7XG4gICAgb3V0WzEwXSA9IGFbMTBdICogejtcbiAgICBvdXRbMTFdID0gYVsxMV0gKiB6O1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXQ0IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIGdpdmVuIGF4aXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCwgYXhpcykge1xuICAgIGxldCB4ID0gYXhpc1swXSxcbiAgICAgICAgeSA9IGF4aXNbMV0sXG4gICAgICAgIHogPSBheGlzWzJdO1xuICAgIGxldCBsZW4gPSBNYXRoLmh5cG90KHgsIHksIHopO1xuICAgIGxldCBzLCBjLCB0O1xuICAgIGxldCBhMDAsIGEwMSwgYTAyLCBhMDM7XG4gICAgbGV0IGExMCwgYTExLCBhMTIsIGExMztcbiAgICBsZXQgYTIwLCBhMjEsIGEyMiwgYTIzO1xuICAgIGxldCBiMDAsIGIwMSwgYjAyO1xuICAgIGxldCBiMTAsIGIxMSwgYjEyO1xuICAgIGxldCBiMjAsIGIyMSwgYjIyO1xuXG4gICAgaWYgKE1hdGguYWJzKGxlbikgPCBFUFNJTE9OKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxlbiA9IDEgLyBsZW47XG4gICAgeCAqPSBsZW47XG4gICAgeSAqPSBsZW47XG4gICAgeiAqPSBsZW47XG5cbiAgICBzID0gTWF0aC5zaW4ocmFkKTtcbiAgICBjID0gTWF0aC5jb3MocmFkKTtcbiAgICB0ID0gMSAtIGM7XG5cbiAgICBhMDAgPSBhWzBdO1xuICAgIGEwMSA9IGFbMV07XG4gICAgYTAyID0gYVsyXTtcbiAgICBhMDMgPSBhWzNdO1xuICAgIGExMCA9IGFbNF07XG4gICAgYTExID0gYVs1XTtcbiAgICBhMTIgPSBhWzZdO1xuICAgIGExMyA9IGFbN107XG4gICAgYTIwID0gYVs4XTtcbiAgICBhMjEgPSBhWzldO1xuICAgIGEyMiA9IGFbMTBdO1xuICAgIGEyMyA9IGFbMTFdO1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBlbGVtZW50cyBvZiB0aGUgcm90YXRpb24gbWF0cml4XG4gICAgYjAwID0geCAqIHggKiB0ICsgYztcbiAgICBiMDEgPSB5ICogeCAqIHQgKyB6ICogcztcbiAgICBiMDIgPSB6ICogeCAqIHQgLSB5ICogcztcbiAgICBiMTAgPSB4ICogeSAqIHQgLSB6ICogcztcbiAgICBiMTEgPSB5ICogeSAqIHQgKyBjO1xuICAgIGIxMiA9IHogKiB5ICogdCArIHggKiBzO1xuICAgIGIyMCA9IHggKiB6ICogdCArIHkgKiBzO1xuICAgIGIyMSA9IHkgKiB6ICogdCAtIHggKiBzO1xuICAgIGIyMiA9IHogKiB6ICogdCArIGM7XG5cbiAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIG91dFswXSA9IGEwMCAqIGIwMCArIGExMCAqIGIwMSArIGEyMCAqIGIwMjtcbiAgICBvdXRbMV0gPSBhMDEgKiBiMDAgKyBhMTEgKiBiMDEgKyBhMjEgKiBiMDI7XG4gICAgb3V0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xuICAgIG91dFszXSA9IGEwMyAqIGIwMCArIGExMyAqIGIwMSArIGEyMyAqIGIwMjtcbiAgICBvdXRbNF0gPSBhMDAgKiBiMTAgKyBhMTAgKiBiMTEgKyBhMjAgKiBiMTI7XG4gICAgb3V0WzVdID0gYTAxICogYjEwICsgYTExICogYjExICsgYTIxICogYjEyO1xuICAgIG91dFs2XSA9IGEwMiAqIGIxMCArIGExMiAqIGIxMSArIGEyMiAqIGIxMjtcbiAgICBvdXRbN10gPSBhMDMgKiBiMTAgKyBhMTMgKiBiMTEgKyBhMjMgKiBiMTI7XG4gICAgb3V0WzhdID0gYTAwICogYjIwICsgYTEwICogYjIxICsgYTIwICogYjIyO1xuICAgIG91dFs5XSA9IGEwMSAqIGIyMCArIGExMSAqIGIyMSArIGEyMSAqIGIyMjtcbiAgICBvdXRbMTBdID0gYTAyICogYjIwICsgYTEyICogYjIxICsgYTIyICogYjIyO1xuICAgIG91dFsxMV0gPSBhMDMgKiBiMjAgKyBhMTMgKiBiMjEgKyBhMjMgKiBiMjI7XG5cbiAgICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICAgICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgICAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sXG4gKiAgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHRyYW5zbGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtICB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24ob3V0LCBtYXQpIHtcbiAgICBvdXRbMF0gPSBtYXRbMTJdO1xuICAgIG91dFsxXSA9IG1hdFsxM107XG4gICAgb3V0WzJdID0gbWF0WzE0XTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2NhbGluZyBmYWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZVxuICogIHdpdGggYSBub3JtYWxpemVkIFF1YXRlcm5pb24gcGFyYW10ZXIsIHRoZSByZXR1cm5lZCB2ZWN0b3Igd2lsbCBiZVxuICogIHRoZSBzYW1lIGFzIHRoZSBzY2FsaW5nIHZlY3RvclxuICogIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0gIHt2ZWMzfSBvdXQgVmVjdG9yIHRvIHJlY2VpdmUgc2NhbGluZyBmYWN0b3IgY29tcG9uZW50XG4gKiBAcGFyYW0gIHttYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxuICogQHJldHVybiB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2FsaW5nKG91dCwgbWF0KSB7XG4gICAgbGV0IG0xMSA9IG1hdFswXTtcbiAgICBsZXQgbTEyID0gbWF0WzFdO1xuICAgIGxldCBtMTMgPSBtYXRbMl07XG4gICAgbGV0IG0yMSA9IG1hdFs0XTtcbiAgICBsZXQgbTIyID0gbWF0WzVdO1xuICAgIGxldCBtMjMgPSBtYXRbNl07XG4gICAgbGV0IG0zMSA9IG1hdFs4XTtcbiAgICBsZXQgbTMyID0gbWF0WzldO1xuICAgIGxldCBtMzMgPSBtYXRbMTBdO1xuXG4gICAgb3V0WzBdID0gTWF0aC5oeXBvdChtMTEsIG0xMiwgbTEzKTtcbiAgICBvdXRbMV0gPSBNYXRoLmh5cG90KG0yMSwgbTIyLCBtMjMpO1xuICAgIG91dFsyXSA9IE1hdGguaHlwb3QobTMxLCBtMzIsIG0zMyk7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWF4U2NhbGVPbkF4aXMobWF0KSB7XG4gICAgbGV0IG0xMSA9IG1hdFswXTtcbiAgICBsZXQgbTEyID0gbWF0WzFdO1xuICAgIGxldCBtMTMgPSBtYXRbMl07XG4gICAgbGV0IG0yMSA9IG1hdFs0XTtcbiAgICBsZXQgbTIyID0gbWF0WzVdO1xuICAgIGxldCBtMjMgPSBtYXRbNl07XG4gICAgbGV0IG0zMSA9IG1hdFs4XTtcbiAgICBsZXQgbTMyID0gbWF0WzldO1xuICAgIGxldCBtMzMgPSBtYXRbMTBdO1xuXG4gICAgY29uc3QgeCA9IG0xMSAqIG0xMSArIG0xMiAqIG0xMiArIG0xMyAqIG0xMztcbiAgICBjb25zdCB5ID0gbTIxICogbTIxICsgbTIyICogbTIyICsgbTIzICogbTIzO1xuICAgIGNvbnN0IHogPSBtMzEgKiBtMzEgKyBtMzIgKiBtMzIgKyBtMzMgKiBtMzM7XG5cbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgubWF4KHgsIHksIHopKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uYWwgY29tcG9uZW50XG4gKiAgb2YgYSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGhcbiAqICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbiwgdGhlIHJldHVybmVkIHF1YXRlcm5pb24gd2lsbCBiZSB0aGVcbiAqICBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBRdWF0ZXJuaW9uIHRvIHJlY2VpdmUgdGhlIHJvdGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtIHttYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxuICogQHJldHVybiB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRSb3RhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdGVtcCA9IFsxLCAxLCAxXTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAob3V0LCBtYXQpIHtcbiAgICAgICAgbGV0IHNjYWxpbmcgPSB0ZW1wO1xuICAgICAgICBnZXRTY2FsaW5nKHNjYWxpbmcsIG1hdCk7XG5cbiAgICAgICAgbGV0IGlzMSA9IDEgLyBzY2FsaW5nWzBdO1xuICAgICAgICBsZXQgaXMyID0gMSAvIHNjYWxpbmdbMV07XG4gICAgICAgIGxldCBpczMgPSAxIC8gc2NhbGluZ1syXTtcblxuICAgICAgICBsZXQgc20xMSA9IG1hdFswXSAqIGlzMTtcbiAgICAgICAgbGV0IHNtMTIgPSBtYXRbMV0gKiBpczI7XG4gICAgICAgIGxldCBzbTEzID0gbWF0WzJdICogaXMzO1xuICAgICAgICBsZXQgc20yMSA9IG1hdFs0XSAqIGlzMTtcbiAgICAgICAgbGV0IHNtMjIgPSBtYXRbNV0gKiBpczI7XG4gICAgICAgIGxldCBzbTIzID0gbWF0WzZdICogaXMzO1xuICAgICAgICBsZXQgc20zMSA9IG1hdFs4XSAqIGlzMTtcbiAgICAgICAgbGV0IHNtMzIgPSBtYXRbOV0gKiBpczI7XG4gICAgICAgIGxldCBzbTMzID0gbWF0WzEwXSAqIGlzMztcblxuICAgICAgICBsZXQgdHJhY2UgPSBzbTExICsgc20yMiArIHNtMzM7XG4gICAgICAgIGxldCBTID0gMDtcblxuICAgICAgICBpZiAodHJhY2UgPiAwKSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKSAqIDI7XG4gICAgICAgICAgICBvdXRbM10gPSAwLjI1ICogUztcbiAgICAgICAgICAgIG91dFswXSA9IChzbTIzIC0gc20zMikgLyBTO1xuICAgICAgICAgICAgb3V0WzFdID0gKHNtMzEgLSBzbTEzKSAvIFM7XG4gICAgICAgICAgICBvdXRbMl0gPSAoc20xMiAtIHNtMjEpIC8gUztcbiAgICAgICAgfSBlbHNlIGlmIChzbTExID4gc20yMiAmJiBzbTExID4gc20zMykge1xuICAgICAgICAgICAgUyA9IE1hdGguc3FydCgxLjAgKyBzbTExIC0gc20yMiAtIHNtMzMpICogMjtcbiAgICAgICAgICAgIG91dFszXSA9IChzbTIzIC0gc20zMikgLyBTO1xuICAgICAgICAgICAgb3V0WzBdID0gMC4yNSAqIFM7XG4gICAgICAgICAgICBvdXRbMV0gPSAoc20xMiArIHNtMjEpIC8gUztcbiAgICAgICAgICAgIG91dFsyXSA9IChzbTMxICsgc20xMykgLyBTO1xuICAgICAgICB9IGVsc2UgaWYgKHNtMjIgPiBzbTMzKSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMjIgLSBzbTExIC0gc20zMykgKiAyO1xuICAgICAgICAgICAgb3V0WzNdID0gKHNtMzEgLSBzbTEzKSAvIFM7XG4gICAgICAgICAgICBvdXRbMF0gPSAoc20xMiArIHNtMjEpIC8gUztcbiAgICAgICAgICAgIG91dFsxXSA9IDAuMjUgKiBTO1xuICAgICAgICAgICAgb3V0WzJdID0gKHNtMjMgKyBzbTMyKSAvIFM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMzMgLSBzbTExIC0gc20yMikgKiAyO1xuICAgICAgICAgICAgb3V0WzNdID0gKHNtMTIgLSBzbTIxKSAvIFM7XG4gICAgICAgICAgICBvdXRbMF0gPSAoc20zMSArIHNtMTMpIC8gUztcbiAgICAgICAgICAgIG91dFsxXSA9IChzbTIzICsgc20zMikgLyBTO1xuICAgICAgICAgICAgb3V0WzJdID0gMC4yNSAqIFM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIEZyb20gZ2xURi1UcmFuc2Zvcm1cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kb25tY2N1cmR5L2dsVEYtVHJhbnNmb3JtL2Jsb2IvbWFpbi9wYWNrYWdlcy9jb3JlL3NyYy91dGlscy9tYXRoLXV0aWxzLnRzXG4gKlxuICogRGVjb21wb3NlIGEgbWF0NCB0byBUUlMgcHJvcGVydGllcy5cbiAqXG4gKiBFcXVpdmFsZW50IHRvIHRoZSBNYXRyaXg0IGRlY29tcG9zZSgpIG1ldGhvZCBpbiB0aHJlZS5qcywgYW5kIGludGVudGlvbmFsbHkgbm90IHVzaW5nIHRoZVxuICogZ2wtbWF0cml4IHZlcnNpb24uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3RvamkvZ2wtbWF0cml4L2lzc3Vlcy80MDhcbiAqXG4gKiBAcGFyYW0ge21hdDR9IHNyY01hdCBNYXRyaXggZWxlbWVudCwgdG8gYmUgZGVjb21wb3NlZCB0byBUUlMgcHJvcGVydGllcy5cbiAqIEBwYXJhbSB7cXVhdDR9IGRzdFJvdGF0aW9uIFJvdGF0aW9uIGVsZW1lbnQsIHRvIGJlIG92ZXJ3cml0dGVuLlxuICogQHBhcmFtIHt2ZWMzfSBkc3RUcmFuc2xhdGlvbiBUcmFuc2xhdGlvbiBlbGVtZW50LCB0byBiZSBvdmVyd3JpdHRlbi5cbiAqIEBwYXJhbSB7dmVjM30gZHN0U2NhbGUgU2NhbGUgZWxlbWVudCwgdG8gYmUgb3ZlcndyaXR0ZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZShzcmNNYXQsIGRzdFJvdGF0aW9uLCBkc3RUcmFuc2xhdGlvbiwgZHN0U2NhbGUpIHtcbiAgICBsZXQgc3ggPSB2ZWMzLmxlbmd0aChbc3JjTWF0WzBdLCBzcmNNYXRbMV0sIHNyY01hdFsyXV0pO1xuICAgIGNvbnN0IHN5ID0gdmVjMy5sZW5ndGgoW3NyY01hdFs0XSwgc3JjTWF0WzVdLCBzcmNNYXRbNl1dKTtcbiAgICBjb25zdCBzeiA9IHZlYzMubGVuZ3RoKFtzcmNNYXRbOF0sIHNyY01hdFs5XSwgc3JjTWF0WzEwXV0pO1xuXG4gICAgLy8gaWYgZGV0ZXJtaW5lIGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGVcbiAgICBjb25zdCBkZXQgPSBkZXRlcm1pbmFudChzcmNNYXQpO1xuICAgIGlmIChkZXQgPCAwKSBzeCA9IC1zeDtcblxuICAgIGRzdFRyYW5zbGF0aW9uWzBdID0gc3JjTWF0WzEyXTtcbiAgICBkc3RUcmFuc2xhdGlvblsxXSA9IHNyY01hdFsxM107XG4gICAgZHN0VHJhbnNsYXRpb25bMl0gPSBzcmNNYXRbMTRdO1xuXG4gICAgLy8gc2NhbGUgdGhlIHJvdGF0aW9uIHBhcnRcbiAgICBjb25zdCBfbTEgPSBzcmNNYXQuc2xpY2UoKTtcblxuICAgIGNvbnN0IGludlNYID0gMSAvIHN4O1xuICAgIGNvbnN0IGludlNZID0gMSAvIHN5O1xuICAgIGNvbnN0IGludlNaID0gMSAvIHN6O1xuXG4gICAgX20xWzBdICo9IGludlNYO1xuICAgIF9tMVsxXSAqPSBpbnZTWDtcbiAgICBfbTFbMl0gKj0gaW52U1g7XG5cbiAgICBfbTFbNF0gKj0gaW52U1k7XG4gICAgX20xWzVdICo9IGludlNZO1xuICAgIF9tMVs2XSAqPSBpbnZTWTtcblxuICAgIF9tMVs4XSAqPSBpbnZTWjtcbiAgICBfbTFbOV0gKj0gaW52U1o7XG4gICAgX20xWzEwXSAqPSBpbnZTWjtcblxuICAgIGdldFJvdGF0aW9uKGRzdFJvdGF0aW9uLCBfbTEpO1xuXG4gICAgZHN0U2NhbGVbMF0gPSBzeDtcbiAgICBkc3RTY2FsZVsxXSA9IHN5O1xuICAgIGRzdFNjYWxlWzJdID0gc3o7XG59XG5cbi8qKlxuICogRnJvbSBnbFRGLVRyYW5zZm9ybVxuICogaHR0cHM6Ly9naXRodWIuY29tL2Rvbm1jY3VyZHkvZ2xURi1UcmFuc2Zvcm0vYmxvYi9tYWluL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWxzL21hdGgtdXRpbHMudHNcbiAqXG4gKiBDb21wb3NlIFRSUyBwcm9wZXJ0aWVzIHRvIGEgbWF0NC5cbiAqXG4gKiBFcXVpdmFsZW50IHRvIHRoZSBNYXRyaXg0IGNvbXBvc2UoKSBtZXRob2QgaW4gdGhyZWUuanMsIGFuZCBpbnRlbnRpb25hbGx5IG5vdCB1c2luZyB0aGVcbiAqIGdsLW1hdHJpeCB2ZXJzaW9uLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS90b2ppL2dsLW1hdHJpeC9pc3N1ZXMvNDA4XG4gKlxuICogQHBhcmFtIHttYXQ0fSBkc3RNYXQgTWF0cml4IGVsZW1lbnQsIHRvIGJlIG1vZGlmaWVkIGFuZCByZXR1cm5lZC5cbiAqIEBwYXJhbSB7cXVhdDR9IHNyY1JvdGF0aW9uIFJvdGF0aW9uIGVsZW1lbnQgb2YgbWF0cml4LlxuICogQHBhcmFtIHt2ZWMzfSBzcmNUcmFuc2xhdGlvbiBUcmFuc2xhdGlvbiBlbGVtZW50IG9mIG1hdHJpeC5cbiAqIEBwYXJhbSB7dmVjM30gc3JjU2NhbGUgU2NhbGUgZWxlbWVudCBvZiBtYXRyaXguXG4gKiBAcmV0dXJucyB7bWF0NH0gZHN0TWF0LCBvdmVyd3JpdHRlbiB0byBtYXQ0IGVxdWl2YWxlbnQgb2YgZ2l2ZW4gVFJTIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlKGRzdE1hdCwgc3JjUm90YXRpb24sIHNyY1RyYW5zbGF0aW9uLCBzcmNTY2FsZSkge1xuICAgIGNvbnN0IHRlID0gZHN0TWF0O1xuXG4gICAgY29uc3QgeCA9IHNyY1JvdGF0aW9uWzBdLFxuICAgICAgICB5ID0gc3JjUm90YXRpb25bMV0sXG4gICAgICAgIHogPSBzcmNSb3RhdGlvblsyXSxcbiAgICAgICAgdyA9IHNyY1JvdGF0aW9uWzNdO1xuICAgIGNvbnN0IHgyID0geCArIHgsXG4gICAgICAgIHkyID0geSArIHksXG4gICAgICAgIHoyID0geiArIHo7XG4gICAgY29uc3QgeHggPSB4ICogeDIsXG4gICAgICAgIHh5ID0geCAqIHkyLFxuICAgICAgICB4eiA9IHggKiB6MjtcbiAgICBjb25zdCB5eSA9IHkgKiB5MixcbiAgICAgICAgeXogPSB5ICogejIsXG4gICAgICAgIHp6ID0geiAqIHoyO1xuICAgIGNvbnN0IHd4ID0gdyAqIHgyLFxuICAgICAgICB3eSA9IHcgKiB5MixcbiAgICAgICAgd3ogPSB3ICogejI7XG5cbiAgICBjb25zdCBzeCA9IHNyY1NjYWxlWzBdLFxuICAgICAgICBzeSA9IHNyY1NjYWxlWzFdLFxuICAgICAgICBzeiA9IHNyY1NjYWxlWzJdO1xuXG4gICAgdGVbMF0gPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgICB0ZVsxXSA9ICh4eSArIHd6KSAqIHN4O1xuICAgIHRlWzJdID0gKHh6IC0gd3kpICogc3g7XG4gICAgdGVbM10gPSAwO1xuXG4gICAgdGVbNF0gPSAoeHkgLSB3eikgKiBzeTtcbiAgICB0ZVs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICAgIHRlWzZdID0gKHl6ICsgd3gpICogc3k7XG4gICAgdGVbN10gPSAwO1xuXG4gICAgdGVbOF0gPSAoeHogKyB3eSkgKiBzejtcbiAgICB0ZVs5XSA9ICh5eiAtIHd4KSAqIHN6O1xuICAgIHRlWzEwXSA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xuICAgIHRlWzExXSA9IDA7XG5cbiAgICB0ZVsxMl0gPSBzcmNUcmFuc2xhdGlvblswXTtcbiAgICB0ZVsxM10gPSBzcmNUcmFuc2xhdGlvblsxXTtcbiAgICB0ZVsxNF0gPSBzcmNUcmFuc2xhdGlvblsyXTtcbiAgICB0ZVsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIHRlO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24sIHZlY3RvciB0cmFuc2xhdGlvbiBhbmQgdmVjdG9yIHNjYWxlXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xuICogICAgIGxldCBxdWF0TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcbiAqICAgICBtYXQ0LnNjYWxlKGRlc3QsIHNjYWxlKVxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxuICogQHBhcmFtIHt2ZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBzIFNjYWxpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlKG91dCwgcSwgdiwgcykge1xuICAgIC8vIFF1YXRlcm5pb24gbWF0aFxuICAgIGxldCB4ID0gcVswXSxcbiAgICAgICAgeSA9IHFbMV0sXG4gICAgICAgIHogPSBxWzJdLFxuICAgICAgICB3ID0gcVszXTtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeHkgPSB4ICogeTI7XG4gICAgbGV0IHh6ID0geCAqIHoyO1xuICAgIGxldCB5eSA9IHkgKiB5MjtcbiAgICBsZXQgeXogPSB5ICogejI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuICAgIGxldCBzeCA9IHNbMF07XG4gICAgbGV0IHN5ID0gc1sxXTtcbiAgICBsZXQgc3ogPSBzWzJdO1xuXG4gICAgb3V0WzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gICAgb3V0WzFdID0gKHh5ICsgd3opICogc3g7XG4gICAgb3V0WzJdID0gKHh6IC0gd3kpICogc3g7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAoeHkgLSB3eikgKiBzeTtcbiAgICBvdXRbNV0gPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcbiAgICBvdXRbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9ICh4eiArIHd5KSAqIHN6O1xuICAgIG91dFs5XSA9ICh5eiAtIHd4KSAqIHN6O1xuICAgIG91dFsxMF0gPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gdlswXTtcbiAgICBvdXRbMTNdID0gdlsxXTtcbiAgICBvdXRbMTRdID0gdlsyXTtcbiAgICBvdXRbMTVdID0gMTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDR4NCBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21RdWF0KG91dCwgcSkge1xuICAgIGxldCB4ID0gcVswXSxcbiAgICAgICAgeSA9IHFbMV0sXG4gICAgICAgIHogPSBxWzJdLFxuICAgICAgICB3ID0gcVszXTtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeXggPSB5ICogeDI7XG4gICAgbGV0IHl5ID0geSAqIHkyO1xuICAgIGxldCB6eCA9IHogKiB4MjtcbiAgICBsZXQgenkgPSB6ICogeTI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gICAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gICAgb3V0WzFdID0geXggKyB3ejtcbiAgICBvdXRbMl0gPSB6eCAtIHd5O1xuICAgIG91dFszXSA9IDA7XG5cbiAgICBvdXRbNF0gPSB5eCAtIHd6O1xuICAgIG91dFs1XSA9IDEgLSB4eCAtIHp6O1xuICAgIG91dFs2XSA9IHp5ICsgd3g7XG4gICAgb3V0WzddID0gMDtcblxuICAgIG91dFs4XSA9IHp4ICsgd3k7XG4gICAgb3V0WzldID0genkgLSB3eDtcbiAgICBvdXRbMTBdID0gMSAtIHh4IC0geXk7XG4gICAgb3V0WzExXSA9IDA7XG5cbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gMDtcbiAgICBvdXRbMTVdID0gMTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlKG91dCwgZm92eSwgYXNwZWN0LCBuZWFyLCBmYXIpIHtcbiAgICBsZXQgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKTtcbiAgICBsZXQgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICAgIG91dFswXSA9IGYgLyBhc3BlY3Q7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSBmO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG91dFsxMV0gPSAtMTtcbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gMiAqIGZhciAqIG5lYXIgKiBuZjtcbiAgICBvdXRbMTVdID0gMDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcnRobyhvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gICAgbGV0IGxyID0gMSAvIChsZWZ0IC0gcmlnaHQpO1xuICAgIGxldCBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgICBsZXQgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICAgIG91dFswXSA9IC0yICogbHI7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSAtMiAqIGJ0O1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IDIgKiBuZjtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gKGxlZnQgKyByaWdodCkgKiBscjtcbiAgICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgICBvdXRbMTRdID0gKGZhciArIG5lYXIpICogbmY7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBtYXRyaXggdGhhdCBtYWtlcyBzb21ldGhpbmcgbG9vayBhdCBzb21ldGhpbmcgZWxzZS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge3ZlYzN9IGV5ZSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyXG4gKiBAcGFyYW0ge3ZlYzN9IHRhcmdldCBQb2ludCB0aGUgdmlld2VyIGlzIGxvb2tpbmcgYXRcbiAqIEBwYXJhbSB7dmVjM30gdXAgdmVjMyBwb2ludGluZyB1cFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFyZ2V0VG8ob3V0LCBleWUsIHRhcmdldCwgdXApIHtcbiAgICBsZXQgZXlleCA9IGV5ZVswXSxcbiAgICAgICAgZXlleSA9IGV5ZVsxXSxcbiAgICAgICAgZXlleiA9IGV5ZVsyXSxcbiAgICAgICAgdXB4ID0gdXBbMF0sXG4gICAgICAgIHVweSA9IHVwWzFdLFxuICAgICAgICB1cHogPSB1cFsyXTtcblxuICAgIGxldCB6MCA9IGV5ZXggLSB0YXJnZXRbMF0sXG4gICAgICAgIHoxID0gZXlleSAtIHRhcmdldFsxXSxcbiAgICAgICAgejIgPSBleWV6IC0gdGFyZ2V0WzJdO1xuXG4gICAgbGV0IGxlbiA9IHowICogejAgKyB6MSAqIHoxICsgejIgKiB6MjtcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgIC8vIGV5ZSBhbmQgdGFyZ2V0IGFyZSBpbiB0aGUgc2FtZSBwb3NpdGlvblxuICAgICAgICB6MiA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgICAgICB6MCAqPSBsZW47XG4gICAgICAgIHoxICo9IGxlbjtcbiAgICAgICAgejIgKj0gbGVuO1xuICAgIH1cblxuICAgIGxldCB4MCA9IHVweSAqIHoyIC0gdXB6ICogejEsXG4gICAgICAgIHgxID0gdXB6ICogejAgLSB1cHggKiB6MixcbiAgICAgICAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xuXG4gICAgbGVuID0geDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgLy8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXG4gICAgICAgIGlmICh1cHopIHtcbiAgICAgICAgICAgIHVweCArPSAxZS02O1xuICAgICAgICB9IGVsc2UgaWYgKHVweSkge1xuICAgICAgICAgICAgdXB6ICs9IDFlLTY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cHkgKz0gMWUtNjtcbiAgICAgICAgfVxuICAgICAgICAoeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxKSwgKHgxID0gdXB6ICogejAgLSB1cHggKiB6MiksICh4MiA9IHVweCAqIHoxIC0gdXB5ICogejApO1xuXG4gICAgICAgIGxlbiA9IHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4MjtcbiAgICB9XG5cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgeDAgKj0gbGVuO1xuICAgIHgxICo9IGxlbjtcbiAgICB4MiAqPSBsZW47XG5cbiAgICBvdXRbMF0gPSB4MDtcbiAgICBvdXRbMV0gPSB4MTtcbiAgICBvdXRbMl0gPSB4MjtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IHoxICogeDIgLSB6MiAqIHgxO1xuICAgIG91dFs1XSA9IHoyICogeDAgLSB6MCAqIHgyO1xuICAgIG91dFs2XSA9IHowICogeDEgLSB6MSAqIHgwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gejA7XG4gICAgb3V0WzldID0gejE7XG4gICAgb3V0WzEwXSA9IHoyO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSBleWV4O1xuICAgIG91dFsxM10gPSBleWV5O1xuICAgIG91dFsxNF0gPSBleWV6O1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0NCdzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gKyBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICAgIG91dFs5XSA9IGFbOV0gKyBiWzldO1xuICAgIG91dFsxMF0gPSBhWzEwXSArIGJbMTBdO1xuICAgIG91dFsxMV0gPSBhWzExXSArIGJbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXSArIGJbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XSArIGJbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgICBvdXRbOV0gPSBhWzldIC0gYls5XTtcbiAgICBvdXRbMTBdID0gYVsxMF0gLSBiWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxMV0gLSBiWzExXTtcbiAgICBvdXRbMTJdID0gYVsxMl0gLSBiWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM10gLSBiWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF0gLSBiWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV0gLSBiWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgb3V0WzRdID0gYVs0XSAqIGI7XG4gICAgb3V0WzVdID0gYVs1XSAqIGI7XG4gICAgb3V0WzZdID0gYVs2XSAqIGI7XG4gICAgb3V0WzddID0gYVs3XSAqIGI7XG4gICAgb3V0WzhdID0gYVs4XSAqIGI7XG4gICAgb3V0WzldID0gYVs5XSAqIGI7XG4gICAgb3V0WzEwXSA9IGFbMTBdICogYjtcbiAgICBvdXRbMTFdID0gYVsxMV0gKiBiO1xuICAgIG91dFsxMl0gPSBhWzEyXSAqIGI7XG4gICAgb3V0WzEzXSA9IGFbMTNdICogYjtcbiAgICBvdXRbMTRdID0gYVsxNF0gKiBiO1xuICAgIG91dFsxNV0gPSBhWzE1XSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsImltcG9ydCAqIGFzIHZlYzQgZnJvbSAnLi9WZWM0RnVuYy5qcyc7XG5cbi8qKlxuICogU2V0IGEgcXVhdCB0byB0aGUgaWRlbnRpdHkgcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldHMgYSBxdWF0IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFuZCByb3RhdGlvbiBheGlzLFxuICogdGhlbiByZXR1cm5zIGl0LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIGFyb3VuZCB3aGljaCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRBeGlzQW5nbGUob3V0LCBheGlzLCByYWQpIHtcbiAgICByYWQgPSByYWQgKiAwLjU7XG4gICAgbGV0IHMgPSBNYXRoLnNpbihyYWQpO1xuICAgIG91dFswXSA9IHMgKiBheGlzWzBdO1xuICAgIG91dFsxXSA9IHMgKiBheGlzWzFdO1xuICAgIG91dFsyXSA9IHMgKiBheGlzWzJdO1xuICAgIG91dFszXSA9IE1hdGguY29zKHJhZCk7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBxdWF0c1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieCA9IGJbMF0sXG4gICAgICAgIGJ5ID0gYlsxXSxcbiAgICAgICAgYnogPSBiWzJdLFxuICAgICAgICBidyA9IGJbM107XG5cbiAgICBvdXRbMF0gPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xuICAgIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieDtcbiAgICBvdXRbM10gPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBYIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWChvdXQsIGEsIHJhZCkge1xuICAgIHJhZCAqPSAwLjU7XG5cbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieCA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4O1xuICAgIG91dFsxXSA9IGF5ICogYncgKyBheiAqIGJ4O1xuICAgIG91dFsyXSA9IGF6ICogYncgLSBheSAqIGJ4O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBZIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIHJhZCkge1xuICAgIHJhZCAqPSAwLjU7XG5cbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieSA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGF4ICogYncgLSBheiAqIGJ5O1xuICAgIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5O1xuICAgIG91dFsyXSA9IGF6ICogYncgKyBheCAqIGJ5O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheSAqIGJ5O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBaIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIHJhZCkge1xuICAgIHJhZCAqPSAwLjU7XG5cbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieiA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGF4ICogYncgKyBheSAqIGJ6O1xuICAgIG91dFsxXSA9IGF5ICogYncgLSBheCAqIGJ6O1xuICAgIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheiAqIGJ6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICAvLyBiZW5jaG1hcmtzOlxuICAgIC8vICAgIGh0dHA6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tc2xlcnAtaW1wbGVtZW50YXRpb25zXG4gICAgbGV0IGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl0sXG4gICAgICAgIGF3ID0gYVszXTtcbiAgICBsZXQgYnggPSBiWzBdLFxuICAgICAgICBieSA9IGJbMV0sXG4gICAgICAgIGJ6ID0gYlsyXSxcbiAgICAgICAgYncgPSBiWzNdO1xuXG4gICAgbGV0IG9tZWdhLCBjb3NvbSwgc2lub20sIHNjYWxlMCwgc2NhbGUxO1xuXG4gICAgLy8gY2FsYyBjb3NpbmVcbiAgICBjb3NvbSA9IGF4ICogYnggKyBheSAqIGJ5ICsgYXogKiBieiArIGF3ICogYnc7XG4gICAgLy8gYWRqdXN0IHNpZ25zIChpZiBuZWNlc3NhcnkpXG4gICAgaWYgKGNvc29tIDwgMC4wKSB7XG4gICAgICAgIGNvc29tID0gLWNvc29tO1xuICAgICAgICBieCA9IC1ieDtcbiAgICAgICAgYnkgPSAtYnk7XG4gICAgICAgIGJ6ID0gLWJ6O1xuICAgICAgICBidyA9IC1idztcbiAgICB9XG4gICAgLy8gY2FsY3VsYXRlIGNvZWZmaWNpZW50c1xuICAgIGlmICgxLjAgLSBjb3NvbSA+IDAuMDAwMDAxKSB7XG4gICAgICAgIC8vIHN0YW5kYXJkIGNhc2UgKHNsZXJwKVxuICAgICAgICBvbWVnYSA9IE1hdGguYWNvcyhjb3NvbSk7XG4gICAgICAgIHNpbm9tID0gTWF0aC5zaW4ob21lZ2EpO1xuICAgICAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICAgICAgc2NhbGUxID0gTWF0aC5zaW4odCAqIG9tZWdhKSAvIHNpbm9tO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFwiZnJvbVwiIGFuZCBcInRvXCIgcXVhdGVybmlvbnMgYXJlIHZlcnkgY2xvc2VcbiAgICAgICAgLy8gIC4uLiBzbyB3ZSBjYW4gZG8gYSBsaW5lYXIgaW50ZXJwb2xhdGlvblxuICAgICAgICBzY2FsZTAgPSAxLjAgLSB0O1xuICAgICAgICBzY2FsZTEgPSB0O1xuICAgIH1cbiAgICAvLyBjYWxjdWxhdGUgZmluYWwgdmFsdWVzXG4gICAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgICBvdXRbMV0gPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICAgIG91dFsyXSA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XG4gICAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBvZiBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBpbnZlcnNlIG9mXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gICAgbGV0IGEwID0gYVswXSxcbiAgICAgICAgYTEgPSBhWzFdLFxuICAgICAgICBhMiA9IGFbMl0sXG4gICAgICAgIGEzID0gYVszXTtcbiAgICBsZXQgZG90ID0gYTAgKiBhMCArIGExICogYTEgKyBhMiAqIGEyICsgYTMgKiBhMztcbiAgICBsZXQgaW52RG90ID0gZG90ID8gMS4wIC8gZG90IDogMDtcblxuICAgIC8vIFRPRE86IFdvdWxkIGJlIGZhc3RlciB0byByZXR1cm4gWzAsMCwwLDBdIGltbWVkaWF0ZWx5IGlmIGRvdCA9PSAwXG5cbiAgICBvdXRbMF0gPSAtYTAgKiBpbnZEb3Q7XG4gICAgb3V0WzFdID0gLWExICogaW52RG90O1xuICAgIG91dFsyXSA9IC1hMiAqIGludkRvdDtcbiAgICBvdXRbM10gPSBhMyAqIGludkRvdDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIHF1YXRcbiAqIElmIHRoZSBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdC5pbnZlcnNlIGFuZCBwcm9kdWNlcyB0aGUgc2FtZSByZXN1bHQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgY29uanVnYXRlIG9mXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25qdWdhdGUob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gLWFbMF07XG4gICAgb3V0WzFdID0gLWFbMV07XG4gICAgb3V0WzJdID0gLWFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIDN4MyByb3RhdGlvbiBtYXRyaXguXG4gKlxuICogTk9URTogVGhlIHJlc3VsdGFudCBxdWF0ZXJuaW9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyB5b3Ugc2hvdWxkIGJlIHN1cmVcbiAqIHRvIHJlbm9ybWFsaXplIHRoZSBxdWF0ZXJuaW9uIHlvdXJzZWxmIHdoZXJlIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7bWF0M30gbSByb3RhdGlvbiBtYXRyaXhcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDMob3V0LCBtKSB7XG4gICAgLy8gQWxnb3JpdGhtIGluIEtlbiBTaG9lbWFrZSdzIGFydGljbGUgaW4gMTk4NyBTSUdHUkFQSCBjb3Vyc2Ugbm90ZXNcbiAgICAvLyBhcnRpY2xlIFwiUXVhdGVybmlvbiBDYWxjdWx1cyBhbmQgRmFzdCBBbmltYXRpb25cIi5cbiAgICBsZXQgZlRyYWNlID0gbVswXSArIG1bNF0gKyBtWzhdO1xuICAgIGxldCBmUm9vdDtcblxuICAgIGlmIChmVHJhY2UgPiAwLjApIHtcbiAgICAgICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxuICAgICAgICBmUm9vdCA9IE1hdGguc3FydChmVHJhY2UgKyAxLjApOyAvLyAyd1xuICAgICAgICBvdXRbM10gPSAwLjUgKiBmUm9vdDtcbiAgICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdDsgLy8gMS8oNHcpXG4gICAgICAgIG91dFswXSA9IChtWzVdIC0gbVs3XSkgKiBmUm9vdDtcbiAgICAgICAgb3V0WzFdID0gKG1bNl0gLSBtWzJdKSAqIGZSb290O1xuICAgICAgICBvdXRbMl0gPSAobVsxXSAtIG1bM10pICogZlJvb3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gfHd8IDw9IDEvMlxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGlmIChtWzRdID4gbVswXSkgaSA9IDE7XG4gICAgICAgIGlmIChtWzhdID4gbVtpICogMyArIGldKSBpID0gMjtcbiAgICAgICAgbGV0IGogPSAoaSArIDEpICUgMztcbiAgICAgICAgbGV0IGsgPSAoaSArIDIpICUgMztcblxuICAgICAgICBmUm9vdCA9IE1hdGguc3FydChtW2kgKiAzICsgaV0gLSBtW2ogKiAzICsgal0gLSBtW2sgKiAzICsga10gKyAxLjApO1xuICAgICAgICBvdXRbaV0gPSAwLjUgKiBmUm9vdDtcbiAgICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdDtcbiAgICAgICAgb3V0WzNdID0gKG1baiAqIDMgKyBrXSAtIG1bayAqIDMgKyBqXSkgKiBmUm9vdDtcbiAgICAgICAgb3V0W2pdID0gKG1baiAqIDMgKyBpXSArIG1baSAqIDMgKyBqXSkgKiBmUm9vdDtcbiAgICAgICAgb3V0W2tdID0gKG1bayAqIDMgKyBpXSArIG1baSAqIDMgKyBrXSkgKiBmUm9vdDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGV1bGVyIGFuZ2xlIHgsIHksIHouXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IGV1bGVyIEFuZ2xlcyB0byByb3RhdGUgYXJvdW5kIGVhY2ggYXhpcyBpbiBkZWdyZWVzLlxuICogQHBhcmFtIHtTdHJpbmd9IG9yZGVyIGRldGFpbGluZyBvcmRlciBvZiBvcGVyYXRpb25zLiBEZWZhdWx0ICdYWVonLlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXVsZXIob3V0LCBldWxlciwgb3JkZXIgPSAnWVhaJykge1xuICAgIGxldCBzeCA9IE1hdGguc2luKGV1bGVyWzBdICogMC41KTtcbiAgICBsZXQgY3ggPSBNYXRoLmNvcyhldWxlclswXSAqIDAuNSk7XG4gICAgbGV0IHN5ID0gTWF0aC5zaW4oZXVsZXJbMV0gKiAwLjUpO1xuICAgIGxldCBjeSA9IE1hdGguY29zKGV1bGVyWzFdICogMC41KTtcbiAgICBsZXQgc3ogPSBNYXRoLnNpbihldWxlclsyXSAqIDAuNSk7XG4gICAgbGV0IGN6ID0gTWF0aC5jb3MoZXVsZXJbMl0gKiAwLjUpO1xuXG4gICAgaWYgKG9yZGVyID09PSAnWFlaJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogKyBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiAtIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6ICsgc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogLSBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1lYWicpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6ICsgY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogLSBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiAtIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6ICsgc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWFknKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6ICsgc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogKyBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiAtIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWllYJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogLSBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiArIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogKyBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1laWCcpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6ICsgY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiAtIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6IC0gc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdYWlknKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6IC0gc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogKyBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBxdWF0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgc291cmNlIHF1YXRlcm5pb25cbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgY29weSA9IHZlYzQuY29weTtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBxdWF0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNldCA9IHZlYzQuc2V0O1xuXG4vKipcbiAqIEFkZHMgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGFkZCA9IHZlYzQuYWRkO1xuXG4vKipcbiAqIFNjYWxlcyBhIHF1YXQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzY2FsZSA9IHZlYzQuc2NhbGU7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBkb3QgPSB2ZWM0LmRvdDtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGxlcnAgPSB2ZWM0LmxlcnA7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGNvbnN0IGxlbmd0aCA9IHZlYzQubGVuZ3RoO1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0ZXJuaW9uIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemUgPSB2ZWM0Lm5vcm1hbGl6ZTtcbiIsImNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeikge1xuICAgIG91dFswXSA9IHg7XG4gICAgb3V0WzFdID0geTtcbiAgICBvdXRbMl0gPSB6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogRGl2aWRlcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLyBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIGEgdmVjMyBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICBvdXRbMl0gPSBhWzJdICogYjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICAgIGxldCB4ID0gYlswXSAtIGFbMF07XG4gICAgbGV0IHkgPSBiWzFdIC0gYVsxXTtcbiAgICBsZXQgeiA9IGJbMl0gLSBhWzJdO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICAgIGxldCB4ID0gYlswXSAtIGFbMF07XG4gICAgbGV0IHkgPSBiWzFdIC0gYVsxXTtcbiAgICBsZXQgeiA9IGJbMl0gLSBhWzJdO1xuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG59XG5cbi8qKlxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBuZWdhdGVcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSAtYVswXTtcbiAgICBvdXRbMV0gPSAtYVsxXTtcbiAgICBvdXRbMl0gPSAtYVsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gaW52ZXJ0XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICAgIG91dFswXSA9IDEuMCAvIGFbMF07XG4gICAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgICBvdXRbMl0gPSAxLjAgLyBhWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIGxldCBsZW4gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgLy9UT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIH1cbiAgICBvdXRbMF0gPSBhWzBdICogbGVuO1xuICAgIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gICAgb3V0WzJdID0gYVsyXSAqIGxlbjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XG4gICAgbGV0IGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl07XG4gICAgbGV0IGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICBieiA9IGJbMl07XG5cbiAgICBvdXRbMF0gPSBheSAqIGJ6IC0gYXogKiBieTtcbiAgICBvdXRbMV0gPSBheiAqIGJ4IC0gYXggKiBiejtcbiAgICBvdXRbMl0gPSBheCAqIGJ5IC0gYXkgKiBieDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICBsZXQgYXggPSBhWzBdO1xuICAgIGxldCBheSA9IGFbMV07XG4gICAgbGV0IGF6ID0gYVsyXTtcbiAgICBvdXRbMF0gPSBheCArIHQgKiAoYlswXSAtIGF4KTtcbiAgICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDQuXG4gKiA0dGggdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7bWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gICAgbGV0IHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gICAgdyA9IHcgfHwgMS4wO1xuICAgIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSkgLyB3O1xuICAgIG91dFsxXSA9IChtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSkgLyB3O1xuICAgIG91dFsyXSA9IChtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6ICsgbVsxNF0pIC8gdztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNhbWUgYXMgYWJvdmUgYnV0IGRvZXNuJ3QgYXBwbHkgdHJhbnNsYXRpb24uXG4gKiBVc2VmdWwgZm9yIHJheXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZVJvdGF0ZU1hdDQob3V0LCBhLCBtKSB7XG4gICAgbGV0IHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gICAgdyA9IHcgfHwgMS4wO1xuICAgIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHopIC8gdztcbiAgICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6KSAvIHc7XG4gICAgb3V0WzJdID0gKG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHopIC8gdztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDMuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHttYXQzfSBtIHRoZSAzeDMgbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzKG91dCwgYSwgbSkge1xuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIG91dFswXSA9IHggKiBtWzBdICsgeSAqIG1bM10gKyB6ICogbVs2XTtcbiAgICBvdXRbMV0gPSB4ICogbVsxXSArIHkgKiBtWzRdICsgeiAqIG1bN107XG4gICAgb3V0WzJdID0geCAqIG1bMl0gKyB5ICogbVs1XSArIHogKiBtWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7cXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1RdWF0KG91dCwgYSwgcSkge1xuICAgIC8vIGJlbmNobWFya3M6IGh0dHBzOi8vanNwZXJmLmNvbS9xdWF0ZXJuaW9uLXRyYW5zZm9ybS12ZWMzLWltcGxlbWVudGF0aW9ucy1maXhlZFxuXG4gICAgbGV0IHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgbGV0IHF4ID0gcVswXSxcbiAgICAgICAgcXkgPSBxWzFdLFxuICAgICAgICBxeiA9IHFbMl0sXG4gICAgICAgIHF3ID0gcVszXTtcblxuICAgIGxldCB1dnggPSBxeSAqIHogLSBxeiAqIHk7XG4gICAgbGV0IHV2eSA9IHF6ICogeCAtIHF4ICogejtcbiAgICBsZXQgdXZ6ID0gcXggKiB5IC0gcXkgKiB4O1xuXG4gICAgbGV0IHV1dnggPSBxeSAqIHV2eiAtIHF6ICogdXZ5O1xuICAgIGxldCB1dXZ5ID0gcXogKiB1dnggLSBxeCAqIHV2ejtcbiAgICBsZXQgdXV2eiA9IHF4ICogdXZ5IC0gcXkgKiB1dng7XG5cbiAgICBsZXQgdzIgPSBxdyAqIDI7XG4gICAgdXZ4ICo9IHcyO1xuICAgIHV2eSAqPSB3MjtcbiAgICB1dnogKj0gdzI7XG5cbiAgICB1dXZ4ICo9IDI7XG4gICAgdXV2eSAqPSAyO1xuICAgIHV1dnogKj0gMjtcblxuICAgIG91dFswXSA9IHggKyB1dnggKyB1dXZ4O1xuICAgIG91dFsxXSA9IHkgKyB1dnkgKyB1dXZ5O1xuICAgIG91dFsyXSA9IHogKyB1dnogKyB1dXZ6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBhbmdsZSBiZXR3ZWVuIHR3byAzRCB2ZWN0b3JzXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXG4gKi9cbmV4cG9ydCBjb25zdCBhbmdsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdGVtcEEgPSBbMCwgMCwgMF07XG4gICAgY29uc3QgdGVtcEIgPSBbMCwgMCwgMF07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgY29weSh0ZW1wQSwgYSk7XG4gICAgICAgIGNvcHkodGVtcEIsIGIpO1xuXG4gICAgICAgIG5vcm1hbGl6ZSh0ZW1wQSwgdGVtcEEpO1xuICAgICAgICBub3JtYWxpemUodGVtcEIsIHRlbXBCKTtcblxuICAgICAgICBsZXQgY29zaW5lID0gZG90KHRlbXBBLCB0ZW1wQik7XG5cbiAgICAgICAgaWYgKGNvc2luZSA+IDEuMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSBpZiAoY29zaW5lIDwgLTEuMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguUEk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hY29zKGNvc2luZSk7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICAgIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXTtcbn1cbiIsImNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjNCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6LCB3KSB7XG4gICAgb3V0WzBdID0geDtcbiAgICBvdXRbMV0gPSB5O1xuICAgIG91dFsyXSA9IHo7XG4gICAgb3V0WzNdID0gdztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyBhIHZlYzQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICBsZXQgdyA9IGFbM107XG4gICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdyk7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIGxldCB3ID0gYVszXTtcbiAgICBsZXQgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIH1cbiAgICBvdXRbMF0gPSB4ICogbGVuO1xuICAgIG91dFsxXSA9IHkgKiBsZW47XG4gICAgb3V0WzJdID0geiAqIGxlbjtcbiAgICBvdXRbM10gPSB3ICogbGVuO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xuICAgIGxldCBheCA9IGFbMF07XG4gICAgbGV0IGF5ID0gYVsxXTtcbiAgICBsZXQgYXogPSBhWzJdO1xuICAgIGxldCBhdyA9IGFbM107XG4gICAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gICAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XG4gICAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gICAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dmFyIGV4ZWNPcHRpb25zID0geyBpZDogbW9kdWxlSWQsIG1vZHVsZTogbW9kdWxlLCBmYWN0b3J5OiBfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXSwgcmVxdWlyZTogX193ZWJwYWNrX3JlcXVpcmVfXyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7IGhhbmRsZXIoZXhlY09wdGlvbnMpOyB9KTtcblx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRleGVjT3B0aW9ucy5mYWN0b3J5LmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGV4ZWNPcHRpb25zLnJlcXVpcmUpO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTtcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYgPSAoKSA9PiAoXCJtYWluLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzb25cIik7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiYzY1YmNjYzRkZDI2YWIyMDliY2JcIikiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwidmFyIGN1cnJlbnRNb2R1bGVEYXRhID0ge307XG52YXIgaW5zdGFsbGVkTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18uYztcblxuLy8gbW9kdWxlIGFuZCByZXF1aXJlIGNyZWF0aW9uXG52YXIgY3VycmVudENoaWxkTW9kdWxlO1xudmFyIGN1cnJlbnRQYXJlbnRzID0gW107XG5cbi8vIHN0YXR1c1xudmFyIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyA9IFtdO1xudmFyIGN1cnJlbnRTdGF0dXMgPSBcImlkbGVcIjtcblxuLy8gd2hpbGUgZG93bmxvYWRpbmdcbnZhciBibG9ja2luZ1Byb21pc2VzID0gMDtcbnZhciBibG9ja2luZ1Byb21pc2VzV2FpdGluZyA9IFtdO1xuXG4vLyBUaGUgdXBkYXRlIGluZm9cbnZhciBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycztcbnZhciBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXM7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yRCA9IGN1cnJlbnRNb2R1bGVEYXRhO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkucHVzaChmdW5jdGlvbiAob3B0aW9ucykge1xuXHR2YXIgbW9kdWxlID0gb3B0aW9ucy5tb2R1bGU7XG5cdHZhciByZXF1aXJlID0gY3JlYXRlUmVxdWlyZShvcHRpb25zLnJlcXVpcmUsIG9wdGlvbnMuaWQpO1xuXHRtb2R1bGUuaG90ID0gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG9wdGlvbnMuaWQsIG1vZHVsZSk7XG5cdG1vZHVsZS5wYXJlbnRzID0gY3VycmVudFBhcmVudHM7XG5cdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRvcHRpb25zLnJlcXVpcmUgPSByZXF1aXJlO1xufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmUocmVxdWlyZSwgbW9kdWxlSWQpIHtcblx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cdGlmICghbWUpIHJldHVybiByZXF1aXJlO1xuXHR2YXIgZm4gPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuXHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG5cdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuXHRcdFx0XHR2YXIgcGFyZW50cyA9IGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cztcblx0XHRcdFx0aWYgKHBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG5cdFx0XHRcdFx0cGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuXHRcdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG5cdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuXHRcdFx0XHRcdHJlcXVlc3QgK1xuXHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG5cdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdCk7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVxdWlyZShyZXF1ZXN0KTtcblx0fTtcblx0dmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIHJlcXVpcmVbbmFtZV07XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmVxdWlyZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cdGZvciAodmFyIG5hbWUgaW4gcmVxdWlyZSkge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVxdWlyZSwgbmFtZSkgJiYgbmFtZSAhPT0gXCJlXCIpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKG5hbWUpKTtcblx0XHR9XG5cdH1cblx0Zm4uZSA9IGZ1bmN0aW9uIChjaHVua0lkLCBmZXRjaFByaW9yaXR5KSB7XG5cdFx0cmV0dXJuIHRyYWNrQmxvY2tpbmdQcm9taXNlKHJlcXVpcmUuZShjaHVua0lkLCBmZXRjaFByaW9yaXR5KSk7XG5cdH07XG5cdHJldHVybiBmbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG1vZHVsZUlkLCBtZSkge1xuXHR2YXIgX21haW4gPSBjdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkO1xuXHR2YXIgaG90ID0ge1xuXHRcdC8vIHByaXZhdGUgc3R1ZmZcblx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9hY2NlcHRlZEVycm9ySGFuZGxlcnM6IHt9LFxuXHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG5cdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG5cdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG5cdFx0X3NlbGZJbnZhbGlkYXRlZDogZmFsc2UsXG5cdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG5cdFx0X21haW46IF9tYWluLFxuXHRcdF9yZXF1aXJlU2VsZjogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBtZS5wYXJlbnRzLnNsaWNlKCk7XG5cdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSBfbWFpbiA/IHVuZGVmaW5lZCA6IG1vZHVsZUlkO1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG5cdFx0fSxcblxuXHRcdC8vIE1vZHVsZSBBUElcblx0XHRhY3RpdmU6IHRydWUsXG5cdFx0YWNjZXB0OiBmdW5jdGlvbiAoZGVwLCBjYWxsYmFjaywgZXJyb3JIYW5kbGVyKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbCkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcFtpXV0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBdID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZGVjbGluZTogZnVuY3Rpb24gKGRlcCkge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbClcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcblx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcblx0XHR9LFxuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcblx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblx0XHRpbnZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLl9zZWxmSW52YWxpZGF0ZWQgPSB0cnVlO1xuXHRcdFx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0XHRcdGNhc2UgXCJpZGxlXCI6XG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRcdGNhc2UgXCJjaGVja1wiOlxuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZVwiOlxuXHRcdFx0XHRjYXNlIFwiYXBwbHlcIjpcblx0XHRcdFx0XHQocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIHx8IFtdKS5wdXNoKFxuXHRcdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdC8vIGlnbm9yZSByZXF1ZXN0cyBpbiBlcnJvciBzdGF0ZXNcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTWFuYWdlbWVudCBBUElcblx0XHRjaGVjazogaG90Q2hlY2ssXG5cdFx0YXBwbHk6IGhvdEFwcGx5LFxuXHRcdHN0YXR1czogZnVuY3Rpb24gKGwpIHtcblx0XHRcdGlmICghbCkgcmV0dXJuIGN1cnJlbnRTdGF0dXM7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHR2YXIgaWR4ID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG5cdFx0XHRpZiAoaWR4ID49IDApIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXG5cdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG5cdFx0ZGF0YTogY3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG5cdH07XG5cdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcblx0cmV0dXJuIGhvdDtcbn1cblxuZnVuY3Rpb24gc2V0U3RhdHVzKG5ld1N0YXR1cykge1xuXHRjdXJyZW50U3RhdHVzID0gbmV3U3RhdHVzO1xuXHR2YXIgcmVzdWx0cyA9IFtdO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuXHRcdHJlc3VsdHNbaV0gPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChyZXN1bHRzKS50aGVuKGZ1bmN0aW9uICgpIHt9KTtcbn1cblxuZnVuY3Rpb24gdW5ibG9jaygpIHtcblx0aWYgKC0tYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkge1xuXHRcdHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKGJsb2NraW5nUHJvbWlzZXMgPT09IDApIHtcblx0XHRcdFx0dmFyIGxpc3QgPSBibG9ja2luZ1Byb21pc2VzV2FpdGluZztcblx0XHRcdFx0YmxvY2tpbmdQcm9taXNlc1dhaXRpbmcgPSBbXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0bGlzdFtpXSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdHJhY2tCbG9ja2luZ1Byb21pc2UocHJvbWlzZSkge1xuXHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdHNldFN0YXR1cyhcInByZXBhcmVcIik7XG5cdFx0LyogZmFsbHRocm91Z2ggKi9cblx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0YmxvY2tpbmdQcm9taXNlcysrO1xuXHRcdFx0cHJvbWlzZS50aGVuKHVuYmxvY2ssIHVuYmxvY2spO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKSB7XG5cdGlmIChibG9ja2luZ1Byb21pc2VzID09PSAwKSByZXR1cm4gZm4oKTtcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cdFx0YmxvY2tpbmdQcm9taXNlc1dhaXRpbmcucHVzaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXNvbHZlKGZuKCkpO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90Q2hlY2soYXBwbHlPblVwZGF0ZSkge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcblx0fVxuXHRyZXR1cm4gc2V0U3RhdHVzKFwiY2hlY2tcIilcblx0XHQudGhlbihfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0pXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHVwZGF0ZSkge1xuXHRcdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpLnRoZW4oXG5cdFx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicHJlcGFyZVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHVwZGF0ZWRNb2R1bGVzID0gW107XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cblx0XHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1yQykucmVkdWNlKGZ1bmN0aW9uIChcblx0XHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdFx0a2V5XG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckNba2V5XShcblx0XHRcdFx0XHRcdFx0dXBkYXRlLmMsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5yLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUubSxcblx0XHRcdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGVkTW9kdWxlc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiBwcm9taXNlcztcblx0XHRcdFx0XHR9LCBbXSlcblx0XHRcdFx0KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0aWYgKGFwcGx5T25VcGRhdGUpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGludGVybmFsQXBwbHkoYXBwbHlPblVwZGF0ZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicmVhZHlcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHVwZGF0ZWRNb2R1bGVzO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcbn1cblxuZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJyZWFkeVwiKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1cyAoc3RhdGU6IFwiICtcblx0XHRcdFx0XHRjdXJyZW50U3RhdHVzICtcblx0XHRcdFx0XHRcIilcIlxuXHRcdFx0KTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHJldHVybiBzZXRTdGF0dXMoXCJhYm9ydFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHR2YXIgZGlzcG9zZVByb21pc2UgPSBzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHZhciBhcHBseVByb21pc2UgPSBzZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuXHR2YXIgZXJyb3I7XG5cdHZhciByZXBvcnRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcblx0fTtcblxuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5hcHBseSkge1xuXHRcdFx0dmFyIG1vZHVsZXMgPSByZXN1bHQuYXBwbHkocmVwb3J0RXJyb3IpO1xuXHRcdFx0aWYgKG1vZHVsZXMpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gobW9kdWxlc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChbZGlzcG9zZVByb21pc2UsIGFwcGx5UHJvbWlzZV0pLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG5cdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiZmFpbFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRcdGlmIChsaXN0LmluZGV4T2YobW9kdWxlSWQpIDwgMCkgbGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBsaXN0O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNldFN0YXR1cyhcImlkbGVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuO1xudmFyIGNyZWF0ZVN0eWxlc2hlZXQgPSAoY2h1bmtJZCwgZnVsbGhyZWYsIG9sZFRhZywgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdGxpbmtUYWcubm9uY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jO1xuXHR9XG5cdHZhciBvbkxpbmtDb21wbGV0ZSA9IChldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcy5cblx0XHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG51bGw7XG5cdFx0aWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJykge1xuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgZXZlbnQudHlwZTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgZXJyb3JUeXBlICsgXCI6IFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIubmFtZSA9IFwiQ2h1bmtMb2FkRXJyb3JcIjtcblx0XHRcdGVyci5jb2RlID0gXCJDU1NfQ0hVTktfTE9BRF9GQUlMRURcIjtcblx0XHRcdGVyci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0ZXJyLnJlcXVlc3QgPSByZWFsSHJlZjtcblx0XHRcdGlmIChsaW5rVGFnLnBhcmVudE5vZGUpIGxpbmtUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rVGFnKVxuXHRcdFx0cmVqZWN0KGVycik7XG5cdFx0fVxuXHR9XG5cdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gb25MaW5rQ29tcGxldGU7XG5cdGxpbmtUYWcuaHJlZiA9IGZ1bGxocmVmO1xuXG5cblx0aWYgKG9sZFRhZykge1xuXHRcdG9sZFRhZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShsaW5rVGFnLCBvbGRUYWcubmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG5cdH1cblx0cmV0dXJuIGxpbmtUYWc7XG59O1xudmFyIGZpbmRTdHlsZXNoZWV0ID0gKGhyZWYsIGZ1bGxocmVmKSA9PiB7XG5cdHZhciBleGlzdGluZ0xpbmtUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdMaW5rVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ0xpbmtUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIikgfHwgdGFnLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG5cdFx0aWYodGFnLnJlbCA9PT0gXCJzdHlsZXNoZWV0XCIgJiYgKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikpIHJldHVybiB0YWc7XG5cdH1cblx0dmFyIGV4aXN0aW5nU3R5bGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdHlsZVwiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nU3R5bGVUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nU3R5bGVUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIik7XG5cdFx0aWYoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSByZXR1cm4gdGFnO1xuXHR9XG59O1xudmFyIGxvYWRTdHlsZXNoZWV0ID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHRpZihmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZikpIHJldHVybiByZXNvbHZlKCk7XG5cdFx0Y3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgbnVsbCwgcmVzb2x2ZSwgcmVqZWN0KTtcblx0fSk7XG59XG4vLyBubyBjaHVuayBsb2FkaW5nXG5cbnZhciBvbGRUYWdzID0gW107XG52YXIgbmV3VGFncyA9IFtdO1xudmFyIGFwcGx5SGFuZGxlciA9IChvcHRpb25zKSA9PiB7XG5cdHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgb2xkVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIG9sZFRhZyA9IG9sZFRhZ3NbaV07XG5cdFx0XHRpZihvbGRUYWcucGFyZW50Tm9kZSkgb2xkVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkVGFnKTtcblx0XHR9XG5cdFx0b2xkVGFncy5sZW5ndGggPSAwO1xuXHR9LCBhcHBseTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBuZXdUYWdzLmxlbmd0aDsgaSsrKSBuZXdUYWdzW2ldLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXHRcdG5ld1RhZ3MubGVuZ3RoID0gMDtcblx0fSB9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLm1pbmlDc3MgPSAoY2h1bmtJZHMsIHJlbW92ZWRDaHVua3MsIHJlbW92ZWRNb2R1bGVzLCBwcm9taXNlcywgYXBwbHlIYW5kbGVycywgdXBkYXRlZE1vZHVsZXNMaXN0KSA9PiB7XG5cdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHRjaHVua0lkcy5mb3JFYWNoKChjaHVua0lkKSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0dmFyIG9sZFRhZyA9IGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKTtcblx0XHRpZighb2xkVGFnKSByZXR1cm47XG5cdFx0cHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR2YXIgdGFnID0gY3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgb2xkVGFnLCAoKSA9PiB7XG5cdFx0XHRcdHRhZy5hcyA9IFwic3R5bGVcIjtcblx0XHRcdFx0dGFnLnJlbCA9IFwicHJlbG9hZFwiO1xuXHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHR9LCByZWplY3QpO1xuXHRcdFx0b2xkVGFncy5wdXNoKG9sZFRhZyk7XG5cdFx0XHRuZXdUYWdzLnB1c2godGFnKTtcblx0XHR9KSk7XG5cdH0pO1xufVxuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWQiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IF9fd2VicGFja19yZXF1aXJlX18uaG1yU19qc29ucCA9IF9fd2VicGFja19yZXF1aXJlX18uaG1yU19qc29ucCB8fCB7XG5cdFwibWFpblwiOiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxudmFyIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3Q7XG52YXIgd2FpdGluZ1VwZGF0ZVJlc29sdmVzID0ge307XG5mdW5jdGlvbiBsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSB7XG5cdGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QgPSB1cGRhdGVkTW9kdWxlc0xpc3Q7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gcmVzb2x2ZTtcblx0XHQvLyBzdGFydCB1cGRhdGUgY2h1bmsgbG9hZGluZ1xuXHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmh1KGNodW5rSWQpO1xuXHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHRcdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkXG5cdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBob3QgdXBkYXRlIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkKTtcblx0fSk7XG59XG5cbnNlbGZbXCJ3ZWJwYWNrSG90VXBkYXRlZmxvZW1hXCJdID0gKGNodW5rSWQsIG1vcmVNb2R1bGVzLCBydW50aW1lKSA9PiB7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHRpZihjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0KSBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBjdXJyZW50VXBkYXRlUnVudGltZS5wdXNoKHJ1bnRpbWUpO1xuXHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0oKTtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdH1cbn07XG5cbnZhciBjdXJyZW50VXBkYXRlQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGU7XG52YXIgY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZVJ1bnRpbWU7XG5mdW5jdGlvbiBhcHBseUhhbmRsZXIob3B0aW9ucykge1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSBkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0gdW5kZWZpbmVkO1xuXHRmdW5jdGlvbiBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHModXBkYXRlTW9kdWxlSWQpIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRjaGFpbjogW2lkXSxcblx0XHRcdFx0aWQ6IGlkXG5cdFx0XHR9O1xuXHRcdH0pO1xuXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG5cdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG5cdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG5cdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdGlmIChcblx0XHRcdFx0IW1vZHVsZSB8fFxuXHRcdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkICYmICFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWQpXG5cdFx0XHQpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcblx0XHRcdFx0dmFyIHBhcmVudCA9IF9fd2VicGFja19yZXF1aXJlX18uY1twYXJlbnRJZF07XG5cdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcblx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcblx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuXHRcdFx0XHRxdWV1ZS5wdXNoKHtcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuXHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuXHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG5cdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuXHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblxuXHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuXHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG5cdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cblx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZShtb2R1bGUpIHtcblx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIG1vZHVsZS5pZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuXHRcdCk7XG5cdH07XG5cblx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gY3VycmVudFVwZGF0ZSkge1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0XHR2YXIgbmV3TW9kdWxlRmFjdG9yeSA9IGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdO1xuXHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuXHRcdFx0dmFyIHJlc3VsdDtcblx0XHRcdGlmIChuZXdNb2R1bGVGYWN0b3J5KSB7XG5cdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyhtb2R1bGVJZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQgPSB7XG5cdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cblx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG5cdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG5cdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcblx0XHRcdH1cblx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZXJyb3I6IGFib3J0RXJyb3Jcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChkb0FwcGx5KSB7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gbmV3TW9kdWxlRmFjdG9yeTtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcblx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG5cdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuXHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGN1cnJlbnRVcGRhdGUgPSB1bmRlZmluZWQ7XG5cblx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuXHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG5cdGZvciAodmFyIGogPSAwOyBqIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbal07XG5cdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRpZiAoXG5cdFx0XHRtb2R1bGUgJiZcblx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgfHwgbW9kdWxlLmhvdC5fbWFpbikgJiZcblx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcblx0XHRcdGFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJlxuXHRcdFx0Ly8gd2hlbiBjYWxsZWQgaW52YWxpZGF0ZSBzZWxmLWFjY2VwdGluZyBpcyBub3QgcG9zc2libGVcblx0XHRcdCFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWRcblx0XHQpIHtcblx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcblx0XHRcdFx0bW9kdWxlOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRyZXF1aXJlOiBtb2R1bGUuaG90Ll9yZXF1aXJlU2VsZixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdH0pO1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHZhciBpZHg7XG5cdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcblx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdHZhciBkYXRhID0ge307XG5cblx0XHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG5cdFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRkaXNwb3NlSGFuZGxlcnNbal0uY2FsbChudWxsLCBkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckRbbW9kdWxlSWRdID0gZGF0YTtcblxuXHRcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuXHRcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuXHRcdFx0XHRkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuXHRcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG5cdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuXHRcdFx0dmFyIGRlcGVuZGVuY3k7XG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0bW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcHBseTogZnVuY3Rpb24gKHJlcG9ydEVycm9yKSB7XG5cdFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcblx0XHRcdGZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bdXBkYXRlTW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVt1cGRhdGVNb2R1bGVJZF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcnVuIG5ldyBydW50aW1lIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0dmFyIGFjY2VwdENhbGxiYWNrID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlciA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHRpZiAoYWNjZXB0Q2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoYWNjZXB0Q2FsbGJhY2spICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnMucHVzaChlcnJvckhhbmRsZXIpO1xuXHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcy5wdXNoKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrc1trXS5jYWxsKG51bGwsIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBlcnJvckhhbmRsZXJzW2tdID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnNba10oZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba11cblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgbyA9IDA7IG8gPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBvKyspIHtcblx0XHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbb107XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGl0ZW0ucmVxdWlyZShtb2R1bGVJZCk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZTogX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH1cblx0fTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1ySS5qc29ucCA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgYXBwbHlIYW5kbGVycykge1xuXHRpZiAoIWN1cnJlbnRVcGRhdGUpIHtcblx0XHRjdXJyZW50VXBkYXRlID0ge307XG5cdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IFtdO1xuXHRcdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHR9XG5cdGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gX193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXTtcblx0fVxufTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5qc29ucCA9IGZ1bmN0aW9uIChcblx0Y2h1bmtJZHMsXG5cdHJlbW92ZWRDaHVua3MsXG5cdHJlbW92ZWRNb2R1bGVzLFxuXHRwcm9taXNlcyxcblx0YXBwbHlIYW5kbGVycyxcblx0dXBkYXRlZE1vZHVsZXNMaXN0XG4pIHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB7fTtcblx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSByZW1vdmVkQ2h1bmtzO1xuXHRjdXJyZW50VXBkYXRlID0gcmVtb3ZlZE1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuXHRcdG9ialtrZXldID0gZmFsc2U7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwge30pO1xuXHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRjaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0KSB7XG5cdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpKTtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gZmFsc2U7XG5cdFx0fVxuXHR9KTtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzICYmXG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHQhY3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXVxuXHRcdFx0KSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpKTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNID0gKCkgPT4ge1xuXHRpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnQ6IG5lZWQgZmV0Y2ggQVBJXCIpO1xuXHRyZXR1cm4gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGKCkpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0aWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuXHRcdGlmKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHVwZGF0ZSBtYW5pZmVzdCBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdH0pO1xufTtcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9pbmRleC5qcz9wcm90b2NvbD13cyUzQSZob3N0bmFtZT0wLjAuMC4wJnBvcnQ9ODA4MCZwYXRobmFtZT0lMkZ3cyZsb2dnaW5nPWluZm8mb3ZlcmxheT10cnVlJnJlY29ubmVjdD0xMCZob3Q9dHJ1ZSZsaXZlLXJlbG9hZD10cnVlXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanNcIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9hcHAvaW5kZXguanNcIik7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3N0eWxlcy9pbmRleC5zY3NzXCIpO1xuIl0sIm5hbWVzIjpbImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsIkhpZ2hsaWdodCIsIkFuaW1hdGlvbiIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsImVsZW1lbnRzIiwic3VwZXIiLCJhbmltYXRlSW4iLCJHU0FQIiwiZnJvbVRvIiwidGhpcyIsImF1dG9BbHBoYSIsImRlbGF5IiwiZHVyYXRpb24iLCJhbmltYXRlT3V0Iiwic2V0IiwiTGFiZWwiLCJQYXJhZ3JhcGgiLCJUaXRsZSIsIkNvbXBvbmVudCIsImNyZWF0ZU9ic2VydmVyIiwib2JzZXJ2ZXIiLCJ3aW5kb3ciLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJmb3JFYWNoIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsIm9ic2VydmUiLCJvblJlc2l6ZSIsIkFzeW5jTG9hZCIsInNyYyIsImdldEF0dHJpYnV0ZSIsIm9ubG9hZCIsIl8iLCJjbGFzc0xpc3QiLCJhZGQiLCJCdXR0b24iLCJwYXRoIiwicXVlcnlTZWxlY3RvciIsInBhdGhMZW5ndGgiLCJnZXRUb3RhbExlbmd0aCIsInRpbWVsaW5lIiwicGF1c2VkIiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZURhc2hhcnJheSIsIm9uTW91c2VFbnRlciIsInBsYXkiLCJvbk1vdXNlTGVhdmUiLCJyZXZlcnNlIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbk1vdXNlRW50ZXJFdmVudCIsImJpbmQiLCJvbk1vdXNlTGVhdmVFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJDb2xvcnNNYW5hZ2VyIiwiY2hhbmdlIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJ0byIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiYmFja2dyb3VuZCIsIkV2ZW50RW1pdHRlciIsInNlbGVjdG9yIiwic2VsZWN0b3JDaGlsZHJlbiIsImNyZWF0ZSIsIkhUTUxFbGVtZW50IiwiZWFjaCIsImtleSIsIk5vZGVMaXN0IiwiQXJyYXkiLCJpc0FycmF5IiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImlzUGhvbmUiLCJpc1Bob25lQ2hlY2tlZCIsIlBob25lQ2hlY2siLCJjb250YWlucyIsImlzRGVza3RvcCIsImlzRGVza3RvcENoZWNrZWQiLCJEZXNrdG9wQ2hlY2siLCJpc1RhYmxldCIsImlzVGFibGV0Q2hlY2tlZCIsIlRhYmxldENoZWNrIiwiUGFnZSIsImlkIiwiYW5pbWF0aW9uc0hpZ2hsaWdodHMiLCJhbmltYXRpb25zVGl0bGVzIiwiYW5pbWF0aW9uc0xhYmVscyIsImFuaW1hdGlvbnNQYXJhZ3JhcGhzIiwicHJlbG9hZGVycyIsInRyYW5zZm9ybVByZWZpeCIsIlByZWZpeCIsInNjcm9sbCIsImN1cnJlbnQiLCJ0YXJnZXQiLCJsYXN0IiwibGltaXQiLCJjcmVhdGVBbmltYXRpb25zIiwiY3JlYXRlUHJlbG9hZGVyIiwibWFwIiwiYW5pbWF0aW9ucyIsInB1c2giLCJzaG93IiwiYW5pbWF0aW9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJhbmltYXRpb25JbiIsImNhbGwiLCJoaWRlIiwiZGVzdHJveSIsImFuaW1hdGlvbk91dCIsIm9uQ29tcGxldGUiLCJ3cmFwcGVyIiwiY2xpZW50SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJvbldoZWVsIiwicGl4ZWxZIiwib25Ub3VjaFN0YXJ0IiwiZXZlbnQiLCJzdGFydFkiLCJ0b3VjaGVzIiwiY2xpZW50WSIsInRvdWNoRGVsdGEiLCJvblRvdWNoTW92ZSIsInkiLCJvblRvdWNoRW5kIiwidXBkYXRlIiwidXRpbHMiLCJjbGFtcCIsImludGVycG9sYXRlIiwic3R5bGUiLCJHYWxsZXJ5IiwiZ2VvbWV0cnkiLCJpbmRleCIsImdsIiwic2NlbmUiLCJzaXplcyIsImVsZW1lbnRfd3JhcHBlciIsImdyb3VwIiwiVHJhbnNmb3JtIiwic3RhcnQiLCJsZXJwIiwidmVsb2N0aXkiLCJjcmVhdGVNZWRpYXMiLCJzZXRQYXJlbnQiLCJtZWRpYXNFbGVtZW50cyIsIm1lZGlhcyIsIk1lZGlhIiwibWVkaWEiLCJib3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsImlubmVyV2lkdGgiLCJvblRvdWNoRG93biIsIngiLCJkaXN0YW5jZSIsImVuZCIsIm9uVG91Y2hVcCIsImRpcmVjdGlvbiIsInNjYWxlWCIsIm1lc2giLCJzY2FsZSIsInBvc2l0aW9uIiwiZXh0cmEiLCJoZWlnaHQiLCJyZW1vdmVDaGlsZCIsImNyZWF0ZVRleHR1cmUiLCJjcmVhdGVQcm9ncmFtIiwiY3JlYXRlTWVzaCIsImNyZWF0ZUJvdW5kcyIsImltYWdlIiwidGV4dHVyZSIsIlRFWFRVUkVTIiwicHJvZ3JhbSIsIlByb2dyYW0iLCJmcmFnbWVudCIsInZlcnRleCIsInVuaWZvcm1zIiwidUFscGhhIiwidmFsdWUiLCJ0TWFwIiwiTWVzaCIsInVwZGF0ZVNjYWxlIiwidXBkYXRlWCIsInVwZGF0ZVkiLCJ1cGRhdGVSb3RhdGlvbiIsInJvdGF0aW9uIiwieiIsIm1hcFJhbmdlIiwiTWF0aCIsIlBJIiwibGVmdCIsInRvcCIsIkRldGVjdGlvbiIsImNvcyIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlR2FsbGVyaWVzIiwiUGxhbmUiLCJnYWxsZXJpZXNFbGVtZW50cyIsImdhbGxlcmllcyIsImdhbGxlcnkiLCJwaXhlbFgiLCJvcGFjaXR5IiwibXVsdGlwbGllciIsInNpbiIsInRyYW5zaXRpb24iLCJnYWxsZXJ5RWxlbWVudCIsImdhbGxlcnlFbGVtZW50V3JhcHBlciIsInRpdGxlc0VsZW1lbnQiLCJjb2xsZWN0aW9uc0VsZW1lbnRzIiwiY29sbGVjdGlvbnNFbGVtZW50c0FjdGl2ZSIsImNyZWF0ZUdhbGxlcnkiLCJmaW5kIiwiYW5pbWF0ZSIsIml0ZW0iLCJjbGllbnRXaWR0aCIsIm9uQ2hhbmdlIiwic2VsZWN0ZWRDb2xsZWN0aW9uIiwicGFyc2VJbnQiLCJlbGVtZW50SW5kZXgiLCJyZW1vdmUiLCJmbG9vciIsImFicyIsInVTcGVlZCIsInVWaWV3cG9ydFNpemVzIiwicmFuZG9tIiwic3BlZWQiLCJzY3JvbGxDdXJyZW50IiwiaGVpZ2h0U2VnbWVudHMiLCJ3aWR0aFNlZ21lbnRzIiwiZ2FsbGVyeUJvdW5kcyIsImdhbGxlcnlTaXplcyIsInhEaXN0YW5jZSIsInlEaXN0YW5jZSIsIm9mZnNldFgiLCJvZmZzZXRZIiwic2NhbGVZIiwiY29sbGVjdGlvbnMiLCJ1cmwiLCJzZXRFbGVtZW50IiwiZWFzZSIsIkNhbnZhcyIsInRlbXBsYXRlIiwiY3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVDYW1lcmEiLCJjcmVhdGVTY2VuZSIsInJlbmRlcmVyIiwiUmVuZGVyZXIiLCJhbHBoYSIsImFudGlhbGlhcyIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNhbnZhcyIsImNhbWVyYSIsIkNhbWVyYSIsImNyZWF0ZUhvbWUiLCJob21lIiwiSG9tZSIsImRlc3Ryb3lIb21lIiwiY3JlYXRlQWJvdXQiLCJhYm91dCIsIkFib3V0IiwiZGVzdHJveUFib3V0IiwiY3JlYXRlQ29sbGVjdGlvbnMiLCJDb2xsZWN0aW9ucyIsImRlc3Ryb3lDb2xsZWN0aW9ucyIsImNyZWF0ZURldGFpbCIsImRldGFpbCIsIkRldGFpbCIsImRlc3Ryb3lEZXRhaWwiLCJvblByZWxvYWRlZCIsIm9uQ2hhbmdlRW5kIiwib25DaGFuZ2VTdGFydCIsImlzRnJvbUNvbGxlY3Rpb25zVG9EZXRhaWwiLCJpbmRleE9mIiwiaXNGcm9tRGV0YWlsVG9Db2xsZWN0aW9ucyIsIlRyYW5zaXRpb24iLCJzZXRTaXplIiwicGVyc3BlY3RpdmUiLCJhc3BlY3QiLCJmb3YiLCJ0YW4iLCJ2YWx1ZXMiLCJpc0Rvd24iLCJjbGllbnRYIiwiY2hhbmdlZFRvdWNoZXMiLCJyZW5kZXIiLCJOYXZpZ2F0aW9uIiwiaXRlbXMiLCJsaW5rcyIsIkNPTE9SX0JSSUdIVF9HUkFZIiwiQ09MT1JfUVVBUlRFUl9TUEFOSVNIX1dISVRFIiwiUHJlbG9hZGVyIiwidGl0bGUiLCJudW1iZXIiLCJudW1iZXJUZXh0Iiwic3BsaXQiLCJleHByZXNzaW9uIiwidGl0bGVTcGFucyIsImNyZWF0ZUxvYWRlciIsIkFTU0VUUyIsIlRleHR1cmUiLCJnZW5lcmF0ZU1pcG1hcHMiLCJJbWFnZSIsImNyb3NzT3JpZ2luIiwib25Bc3NldExvYWRlZCIsInBlcmNlbnQiLCJpbm5lckhUTUwiLCJyb3VuZCIsIm9uTG9hZGVkIiwiZW1pdCIsInN0YWdnZXIiLCJwYXJlbnROb2RlIiwiY3JlYXRlQ29udGVudCIsImNyZWF0ZUNhbnZhcyIsImNyZWF0ZU5hdmlnYXRpb24iLCJjcmVhdGVQYWdlcyIsImFkZExpbmtMaXN0ZW5lcnMiLCJuYXZpZ2F0aW9uIiwicHJlbG9hZGVyIiwib25jZSIsImNvbnRlbnQiLCJwYWdlcyIsInBhZ2UiLCJvblBvcFN0YXRlIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInJlcXVlc3QiLCJmZXRjaCIsInN0YXR1cyIsImh0bWwiLCJ0ZXh0IiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJkaXZDb250ZW50Iiwic2V0QXR0cmlidXRlIiwiY29uc29sZSIsImVycm9yIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibm9ybWFsaXplZFdoZWVsIiwiTm9ybWFsaXplV2hlZWwiLCJmcmFtZSIsImxpbmsiLCJvbmNsaWNrIiwicHJldmVudERlZmF1bHQiLCJocmVmIiwiY3VycmVudFVybCIsImxvZyIsImZpbmFsbHkiLCJzZXRUaW1lb3V0IiwicmVtb3ZlQXR0cmlidXRlIiwiYnV0dG9uIiwiYXBwZW5kIiwid29yZHMiLCJzcGxpdHMiLCJjb25jYXQiLCJpc0xpbmsiLCJ3b3JkIiwiaW5jbHVkZXMiLCJzcGxpdFRleHQiLCJ0b1N0cmluZyIsInRyaW0iLCJsaW5lIiwibGluZXMiLCJwYXJzZUxpbmUiLCJzcGFucyIsInNwYW4iLCJpc1NpbmdsZUxldHRlciIsInRleHRDb250ZW50IiwiaXNOb3RFbXB0eSIsImlzTm90QW5kQ2hhcmFjdGVyIiwiaXNOb3REYXNoQ2hhcmFjdGVyIiwiY2FsY3VsYXRlIiwib2Zmc2V0VG9wIiwibW9kdWxlIiwiZXhwb3J0cyIsImFuc2lIVE1MIiwiX3JlZ0FOU0kiLCJfZGVmQ29sb3JzIiwicmVzZXQiLCJibGFjayIsInJlZCIsImdyZWVuIiwieWVsbG93IiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwibGlnaHRncmV5IiwiZGFya2dyZXkiLCJfc3R5bGVzIiwiX29wZW5UYWdzIiwiX2Nsb3NlVGFncyIsInRlc3QiLCJhbnNpQ29kZXMiLCJyZXQiLCJyZXBsYWNlIiwibWF0Y2giLCJzZXEiLCJvdCIsInBvcCIsImN0IiwibCIsImpvaW4iLCJfc2V0VGFncyIsImNvbG9ycyIsImNvZGUiLCJvcmlDb2xvciIsIm4iLCJzZXRDb2xvcnMiLCJFcnJvciIsIl9maW5hbENvbG9ycyIsImhleCIsImhhc093blByb3BlcnR5Iiwic29tZSIsImgiLCJkZWZIZXhDb2xvciIsInNsaWNlIiwidGFncyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwib3BlbiIsImNsb3NlIiwiUmVmbGVjdE93bktleXMiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsImFwcGx5IiwicmVjZWl2ZXIiLCJhcmdzIiwiRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk51bWJlcklzTmFOIiwiTnVtYmVyIiwiaXNOYU4iLCJpbml0IiwiZW1pdHRlciIsIm5hbWUiLCJyZWplY3QiLCJlcnJvckxpc3RlbmVyIiwiZXJyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZXNvbHZlciIsImFyZ3VtZW50cyIsImV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lciIsImhhbmRsZXIiLCJmbGFncyIsIm9uIiwiYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwidW5kZWZpbmVkIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwibGlzdGVuZXIiLCJUeXBlRXJyb3IiLCJfZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsIl9hZGRMaXN0ZW5lciIsInR5cGUiLCJwcmVwZW5kIiwibSIsImV2ZW50cyIsImV4aXN0aW5nIiwid2FybmluZyIsIm5ld0xpc3RlbmVyIiwidW5zaGlmdCIsIndhcm5lZCIsInciLCJTdHJpbmciLCJjb3VudCIsIndhcm4iLCJvbmNlV3JhcHBlciIsImZpcmVkIiwid3JhcEZuIiwiX29uY2VXcmFwIiwic3RhdGUiLCJ3cmFwcGVkIiwiX2xpc3RlbmVycyIsInVud3JhcCIsImV2bGlzdGVuZXIiLCJhcnIiLCJpIiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJjb3B5Iiwid3JhcExpc3RlbmVyIiwiYXJnIiwiZW51bWVyYWJsZSIsIlJhbmdlRXJyb3IiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwibGVuIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdCIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiX3dpbiIsIl9kb2MiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfcmVjZW50U2V0dGVyUGx1Z2luIiwiX3JldmVydGluZyIsIl9zdXBwb3J0czNEIiwiX3RyYW5zZm9ybVByb3BzIiwiX1JBRDJERUciLCJfREVHMlJBRCIsIl9hdGFuMiIsImF0YW4yIiwiX2NhcHNFeHAiLCJfaG9yaXpvbnRhbEV4cCIsIl9jb21wbGV4RXhwIiwiX3Byb3BlcnR5QWxpYXNlcyIsIl9yZW5kZXJDU1NQcm9wIiwicmF0aW8iLCJkYXRhIiwidCIsInAiLCJzIiwiYyIsInUiLCJfcmVuZGVyUHJvcFdpdGhFbmQiLCJlIiwiX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nIiwiYiIsIl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQiLCJfc2V0dGVyQ1NTU3R5bGUiLCJwcm9wZXJ0eSIsIl9zZXR0ZXJDU1NQcm9wIiwic2V0UHJvcGVydHkiLCJfc2V0dGVyVHJhbnNmb3JtIiwiX2dzYXAiLCJfc2V0dGVyU2NhbGUiLCJfc2V0dGVyU2NhbGVXaXRoUmVuZGVyIiwiY2FjaGUiLCJyZW5kZXJUcmFuc2Zvcm0iLCJfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciIsIl90cmFuc2Zvcm1Qcm9wIiwiX3RyYW5zZm9ybU9yaWdpblByb3AiLCJfc2F2ZVN0eWxlIiwiaXNOb3RDU1MiLCJfdGhpcyIsInRmbSIsInRyYW5zZm9ybSIsImEiLCJfZ2V0Iiwiek9yaWdpbiIsInByb3BzIiwic3ZnIiwic3ZnbyIsIl9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMiLCJ0cmFuc2xhdGUiLCJyZW1vdmVQcm9wZXJ0eSIsIl9yZXZlcnRTdHlsZSIsInN1YnN0ciIsInRvTG93ZXJDYXNlIiwiaXNTdGFydCIsInVuY2FjaGUiLCJfZ2V0U3R5bGVTYXZlciIsInByb3BlcnRpZXMiLCJzYXZlciIsInJldmVydCIsInNhdmUiLCJnc2FwIiwiY29yZSIsImdldENhY2hlIiwiX2NyZWF0ZUVsZW1lbnQiLCJucyIsImNyZWF0ZUVsZW1lbnROUyIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9jaGVja1Byb3BQcmVmaXgiLCJfcHJlZml4ZXMiLCJwcmVmZXJQcmVmaXgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsIl9pbml0Q29yZSIsImNzc1RleHQiLCJyZXZlcnRpbmciLCJfZ2V0QkJveEhhY2siLCJzd2FwSWZQb3NzaWJsZSIsImJib3giLCJvd25lclNWR0VsZW1lbnQiLCJvbGRQYXJlbnQiLCJvbGRTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJvbGRDU1MiLCJkaXNwbGF5IiwiZ2V0QkJveCIsIl9nc2FwQkJveCIsImluc2VydEJlZm9yZSIsIl9nZXRBdHRyaWJ1dGVGYWxsYmFja3MiLCJhdHRyaWJ1dGVzQXJyYXkiLCJoYXNBdHRyaWJ1dGUiLCJfZ2V0QkJveCIsIl9pc1NWRyIsImdldENUTSIsIl9yZW1vdmVQcm9wZXJ0eSIsImZpcnN0MkNoYXJzIiwiX2FkZE5vblR3ZWVuaW5nUFQiLCJwbHVnaW4iLCJiZWdpbm5pbmciLCJvbmx5U2V0QXRFbmQiLCJwdCIsIlByb3BUd2VlbiIsIl9wdCIsIl9wcm9wcyIsIl9ub25Db252ZXJ0aWJsZVVuaXRzIiwiZGVnIiwicmFkIiwidHVybiIsIl9ub25TdGFuZGFyZExheW91dHMiLCJncmlkIiwiZmxleCIsIl9jb252ZXJ0VG9Vbml0IiwidW5pdCIsInB4IiwicGFyZW50IiwiaXNTVkciLCJjdXJWYWx1ZSIsInBhcnNlRmxvYXQiLCJjdXJVbml0IiwiaG9yaXpvbnRhbCIsImlzUm9vdFNWRyIsInRhZ05hbWUiLCJtZWFzdXJlUHJvcGVydHkiLCJhbW91bnQiLCJ0b1BpeGVscyIsInRvUGVyY2VudCIsIl9yb3VuZCIsInRpbWUiLCJfdGlja2VyIiwidiIsIl9nZXRDYWNoZSIsIl9wYXJzZVRyYW5zZm9ybSIsIm9yaWdpbiIsIl9maXJzdFR3b09ubHkiLCJfc3BlY2lhbFByb3BzIiwiX2dldFByb3BlcnR5IiwiX3R3ZWVuQ29tcGxleENTU1N0cmluZyIsInByb3AiLCJyZXN1bHQiLCJzdGFydFZhbHVlcyIsInN0YXJ0TnVtIiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiZW5kTnVtIiwiY2h1bmsiLCJlbmRVbml0Iiwic3RhcnRVbml0IiwiX3JlbmRlckNvbXBsZXhTdHJpbmciLCJtYXRjaEluZGV4IiwiX2NvbG9yU3RyaW5nRmlsdGVyIiwiX251bVdpdGhVbml0RXhwIiwiZXhlYyIsInN1YnN0cmluZyIsIl9wYXJzZVJlbGF0aXZlIiwibGFzdEluZGV4IiwiX2NvbmZpZyIsInVuaXRzIiwiX25leHQiLCJyIiwiX3JlbEV4cCIsIl9rZXl3b3JkVG9QZXJjZW50IiwiYm90dG9tIiwicmlnaHQiLCJjZW50ZXIiLCJfcmVuZGVyQ2xlYXJQcm9wcyIsInR3ZWVuIiwiX3RpbWUiLCJfZHVyIiwiY2xlYXJUcmFuc2Zvcm1zIiwiY2xlYXJQcm9wcyIsInByIiwiX2lkZW50aXR5MkRNYXRyaXgiLCJfcm90YXRpb25hbFByb3BlcnRpZXMiLCJfaXNOdWxsVHJhbnNmb3JtIiwiX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSIsIm1hdHJpeFN0cmluZyIsIl9udW1FeHAiLCJfZ2V0TWF0cml4IiwiZm9yY2UyRCIsInRlbXAiLCJhZGRlZFRvRE9NIiwibWF0cml4IiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwiZCIsImYiLCJvZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJfYXBwbHlTVkdPcmlnaW4iLCJvcmlnaW5Jc0Fic29sdXRlIiwic21vb3RoIiwibWF0cml4QXJyYXkiLCJwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbyIsImRldGVybWluYW50IiwieE9yaWdpbk9sZCIsInhPcmlnaW4iLCJ5T3JpZ2luT2xkIiwieU9yaWdpbiIsInhPZmZzZXRPbGQiLCJ4T2Zmc2V0IiwieU9mZnNldE9sZCIsInlPZmZzZXQiLCJ0eCIsInR5Iiwib3JpZ2luU3BsaXQiLCJHU0NhY2hlIiwicm90YXRpb25YIiwicm90YXRpb25ZIiwic2tld1giLCJza2V3WSIsImFuZ2xlIiwiYTEyIiwiYTIyIiwidDEiLCJ0MiIsInQzIiwiYTEzIiwiYTIzIiwiYTMzIiwiYTQyIiwiYTQzIiwiYTMyIiwiaW52ZXJ0ZWRTY2FsZVgiLCJyb3RhdGUiLCJzcXJ0IiwiZm9yY2VDU1MiLCJ4UGVyY2VudCIsIm9mZnNldFdpZHRoIiwieVBlcmNlbnQiLCJvZmZzZXRIZWlnaHQiLCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZSIsImZvcmNlM0QiLCJfcmVuZGVyU1ZHVHJhbnNmb3JtcyIsIl9yZW5kZXJDU1NUcmFuc2Zvcm1zIiwiX3JlbmRlck5vbjNEVHJhbnNmb3JtcyIsIl9hZGRQeFRyYW5zbGF0ZSIsImdldFVuaXQiLCJfemVyb0RlZyIsIl96ZXJvUHgiLCJfZW5kUGFyZW50aGVzaXMiLCJfcmVmIiwidHJhbnNmb3JtcyIsInVzZTNEIiwiYTExIiwiYTIxIiwiX3JlZjIiLCJfYWRkUm90YXRpb25hbFByb3BUd2VlbiIsImNhcCIsImlzU3RyaW5nIiwiX2lzU3RyaW5nIiwiZmluYWxWYWx1ZSIsIl9hc3NpZ24iLCJzb3VyY2UiLCJfYWRkUmF3VHJhbnNmb3JtUFRzIiwiZW5kQ2FjaGUiLCJzdGFydENhY2hlIiwiX2ZvckVhY2hOYW1lIiwic2lkZSIsInZhcnMiLCJwb3NpdGlvbkFuZFNjYWxlIiwiYWxsIiwiQ1NTUGx1Z2luIiwicmVnaXN0ZXIiLCJ0YXJnZXRUZXN0Iiwibm9kZVR5cGUiLCJ0YXJnZXRzIiwic3BlY2lhbFByb3AiLCJyZWxhdGl2ZSIsImlzVHJhbnNmb3JtUmVsYXRlZCIsInRyYW5zZm9ybVByb3BUd2VlbiIsImhhc1ByaW9yaXR5IiwiaW5saW5lUHJvcHMiLCJzdGFydEF0Iiwic3R5bGVzIiwiX3BsdWdpbnMiLCJfY2hlY2tQbHVnaW4iLCJfcmVwbGFjZVJhbmRvbSIsIl9jb2xvckV4cCIsInZpc2liaWxpdHkiLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImRlcCIsImF1dG9Sb3VuZCIsIl9taXNzaW5nUGx1Z2luIiwiX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSIsImFsaWFzZXMiLCJnZXRTZXR0ZXIiLCJfaXNVbmRlZmluZWQiLCJfZ2V0U2V0dGVyIiwiY2hlY2tQcmVmaXgiLCJnZXRTdHlsZVNhdmVyIiwicmVnaXN0ZXJQbHVnaW4iLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfX3Byb3RvX18iLCJfc3VwcHJlc3NPdmVyd3JpdGVzIiwiX2NvbnRleHQiLCJfZ2xvYmFsVGltZWxpbmUiLCJfY29yZUluaXR0ZWQiLCJfY29yZVJlYWR5IiwiX2xhc3RSZW5kZXJlZEZyYW1lIiwiX3F1aWNrVHdlZW4iLCJfdGlja2VyQWN0aXZlIiwibjEiLCJuMiIsIm4zIiwiZWFzZU91dCIsImF1dG9TbGVlcCIsIm51bGxUYXJnZXRXYXJuIiwibGluZUhlaWdodCIsIl9kZWZhdWx0cyIsIm92ZXJ3cml0ZSIsIl9iaWdOdW0iLCJfdGlueU51bSIsIl8yUEkiLCJfSEFMRl9QSSIsIl9nc0lEIiwiX3NxcnQiLCJfY29zIiwiX3NpbiIsIl9pc0Z1bmN0aW9uIiwiX2lzTnVtYmVyIiwiX2lzT2JqZWN0IiwiX2lzTm90RmFsc2UiLCJfd2luZG93RXhpc3RzIiwiX2lzRnVuY09yU3RyaW5nIiwiX2lzVHlwZWRBcnJheSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiX2lzQXJyYXkiLCJfc3RyaWN0TnVtRXhwIiwiX2NvbXBsZXhTdHJpbmdOdW1FeHAiLCJfZGVsaW1pdGVkVmFsdWVFeHAiLCJfdW5pdEV4cCIsIl9nbG9iYWxzIiwiX2luc3RhbGxTY29wZSIsIl9pbnN0YWxsIiwic2NvcGUiLCJfbWVyZ2UiLCJfd2FybiIsInN1cHByZXNzIiwiX2FkZEdsb2JhbCIsIm9iaiIsIl9lbXB0eUZ1bmMiLCJfc3RhcnRBdFJldmVydENvbmZpZyIsInN1cHByZXNzRXZlbnRzIiwia2lsbCIsIl9yZXZlcnRDb25maWdOb0tpbGwiLCJfcmV2ZXJ0Q29uZmlnIiwiX3Jlc2VydmVkUHJvcHMiLCJfbGF6eVR3ZWVucyIsIl9sYXp5TG9va3VwIiwiX2VmZmVjdHMiLCJfbmV4dEdDRnJhbWUiLCJfaGFybmVzc1BsdWdpbnMiLCJfY2FsbGJhY2tOYW1lcyIsIl9oYXJuZXNzIiwiaGFybmVzc1BsdWdpbiIsImhhcm5lc3MiLCJzcGxpY2UiLCJ0b0FycmF5IiwibmFtZXMiLCJmdW5jIiwiX3JvdW5kUHJlY2lzZSIsIm9wZXJhdG9yIiwiX2FycmF5Q29udGFpbnNBbnkiLCJ0b1NlYXJjaCIsInRvRmluZCIsIl9sYXp5UmVuZGVyIiwiX2xhenkiLCJfbGF6eVNhZmVSZW5kZXIiLCJmb3JjZSIsIl9pbml0dGVkIiwiX3N0YXJ0QXQiLCJfbnVtZXJpY0lmUG9zc2libGUiLCJfcGFzc1Rocm91Z2giLCJfc2V0RGVmYXVsdHMiLCJkZWZhdWx0cyIsImJhc2UiLCJ0b01lcmdlIiwiX21lcmdlRGVlcCIsIl9jb3B5RXhjbHVkaW5nIiwiZXhjbHVkaW5nIiwiX2luaGVyaXREZWZhdWx0cyIsImV4Y2x1ZGVEdXJhdGlvbiIsImtleWZyYW1lcyIsImluaGVyaXQiLCJfZHAiLCJfYWRkTGlua2VkTGlzdEl0ZW0iLCJjaGlsZCIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwicHJldiIsIl9wcmV2IiwiX3JlbW92ZUxpbmtlZExpc3RJdGVtIiwibmV4dCIsIl9yZW1vdmVGcm9tUGFyZW50Iiwib25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSIsImF1dG9SZW1vdmVDaGlsZHJlbiIsIl9hY3QiLCJfdW5jYWNoZSIsIl9lbmQiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmV3aW5kU3RhcnRBdCIsInRvdGFsVGltZSIsImltbWVkaWF0ZVJlbmRlciIsImF1dG9SZXZlcnQiLCJfaGFzTm9QYXVzZWRBbmNlc3RvcnMiLCJfdHMiLCJfZWxhcHNlZEN5Y2xlRHVyYXRpb24iLCJfcmVwZWF0IiwiX2FuaW1hdGlvbkN5Y2xlIiwiX3RUaW1lIiwiX3JEZWxheSIsInRUaW1lIiwiY3ljbGVEdXJhdGlvbiIsIndob2xlIiwiX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUiLCJwYXJlbnRUaW1lIiwidG90YWxEdXJhdGlvbiIsIl90RHVyIiwiX3NldEVuZCIsIl9ydHMiLCJfYWxpZ25QbGF5aGVhZCIsInNtb290aENoaWxkVGltaW5nIiwiX3Bvc3RBZGRDaGVja3MiLCJyYXdUaW1lIiwiX2NsYW1wIiwiX3pUaW1lIiwiX2FkZFRvVGltZWxpbmUiLCJza2lwQ2hlY2tzIiwiX3BhcnNlUG9zaXRpb24iLCJfZGVsYXkiLCJ0aW1lU2NhbGUiLCJfc29ydCIsIl9pc0Zyb21PckZyb21TdGFydCIsIl9yZWNlbnQiLCJfc2Nyb2xsVHJpZ2dlciIsInRyaWdnZXIiLCJTY3JvbGxUcmlnZ2VyIiwiX2F0dGVtcHRJbml0VHdlZW4iLCJfaW5pdFR3ZWVuIiwibGF6eSIsIl9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQiLCJfbG9jayIsIl9zZXREdXJhdGlvbiIsInNraXBVbmNhY2hlIiwibGVhdmVQbGF5aGVhZCIsInJlcGVhdCIsImR1ciIsInRvdGFsUHJvZ3Jlc3MiLCJfb25VcGRhdGVUb3RhbER1cmF0aW9uIiwiVGltZWxpbmUiLCJfemVyb1Bvc2l0aW9uIiwiZW5kVGltZSIsInBlcmNlbnRBbmltYXRpb24iLCJvZmZzZXQiLCJpc1BlcmNlbnQiLCJsYWJlbHMiLCJyZWNlbnQiLCJjbGlwcGVkRHVyYXRpb24iLCJfY3JlYXRlVHdlZW5UeXBlIiwicGFyYW1zIiwiaXJWYXJzIiwiaXNMZWdhY3kiLCJ2YXJzSW5kZXgiLCJydW5CYWNrd2FyZHMiLCJUd2VlbiIsIl9jb25kaXRpb25hbFJldHVybiIsIm1pbiIsIm1heCIsIl9zbGljZSIsIl9pc0FycmF5TGlrZSIsIm5vbkVtcHR5IiwiX2ZsYXR0ZW4iLCJhciIsImxlYXZlU3RyaW5ncyIsImFjY3VtdWxhdG9yIiwiX2FjY3VtdWxhdG9yIiwiX3dha2UiLCJlbCIsIm5hdGl2ZUVsZW1lbnQiLCJzaHVmZmxlIiwic29ydCIsImRpc3RyaWJ1dGUiLCJfcGFyc2VFYXNlIiwiZnJvbSIsImlzRGVjaW1hbCIsInJhdGlvcyIsImF4aXMiLCJyYXRpb1giLCJyYXRpb1kiLCJlZGdlcyIsIm9yaWdpblgiLCJvcmlnaW5ZIiwiaiIsIndyYXBBdCIsImRpc3RhbmNlcyIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJwb3ciLCJyYXciLCJzbmFwIiwic25hcFRvIiwicmFkaXVzIiwiaXMyRCIsImluY3JlbWVudCIsImR4IiwiZHkiLCJjbG9zZXN0Iiwicm91bmRpbmdJbmNyZW1lbnQiLCJyZXR1cm5GdW5jdGlvbiIsInBpcGUiLCJfbGVuIiwiZnVuY3Rpb25zIiwiX2tleSIsInJlZHVjZSIsInVuaXRpemUiLCJub3JtYWxpemUiLCJfd3JhcEFycmF5Iiwid3JhcCIsInJhbmdlIiwid3JhcFlveW8iLCJ0b3RhbCIsIm51bXMiLCJpbk1pbiIsImluTWF4Iiwib3V0TWluIiwib3V0TWF4IiwiaW5SYW5nZSIsIm91dFJhbmdlIiwicHJvZ3Jlc3MiLCJtdXRhdGUiLCJpbnRlcnBvbGF0b3JzIiwiaWwiLCJtYXN0ZXIiLCJfYWRkUHJvcFR3ZWVuIiwiX3JlbmRlclByb3BUd2VlbnMiLCJfZ2V0TGFiZWxJbkRpcmVjdGlvbiIsImZyb21UaW1lIiwiYmFja3dhcmQiLCJsYWJlbCIsIl9jYWxsYmFjayIsImV4ZWN1dGVMYXp5Rmlyc3QiLCJjYWxsYmFjayIsInByZXZDb250ZXh0IiwiX2N0eCIsImNhbGxiYWNrU2NvcGUiLCJfaW50ZXJydXB0Iiwic2Nyb2xsVHJpZ2dlciIsIl9yZWdpc3RlclBsdWdpblF1ZXVlIiwiX2NyZWF0ZVBsdWdpbiIsImNvbmZpZyIsImhlYWRsZXNzIiwiaXNGdW5jIiwiUGx1Z2luIiwiaW5zdGFuY2VEZWZhdWx0cyIsIl9raWxsUHJvcFR3ZWVuc09mIiwibW9kaWZpZXIiLCJfYWRkUGx1Z2luTW9kaWZpZXIiLCJyYXdWYXJzIiwic3RhdGljcyIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsIm1hcm9vbiIsInRlYWwiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJwaW5rIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwibTEiLCJtMiIsInNwbGl0Q29sb3IiLCJ0b0hTTCIsImZvcmNlQWxwaGEiLCJnIiwid2FzSFNMIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJSZWdFeHAiLCJfaHNsRXhwIiwiY29tYmluZWQiLCJfaWQiLCJfcmVxIiwiX3JhZiIsIl9zZWxmIiwiX2RlbHRhIiwiX2kiLCJfZ2V0VGltZSIsIkRhdGUiLCJub3ciLCJfbGFnVGhyZXNob2xkIiwiX2FkanVzdGVkTGFnIiwiX3N0YXJ0VGltZSIsIl9sYXN0VXBkYXRlIiwiX2dhcCIsIl9uZXh0VGltZSIsIl90aWNrIiwib3ZlcmxhcCIsImRpc3BhdGNoIiwiZWxhcHNlZCIsIm1hbnVhbCIsInRpY2siLCJkZWx0YVJhdGlvIiwiZnBzIiwid2FrZSIsImdzYXBWZXJzaW9ucyIsInZlcnNpb24iLCJHcmVlblNvY2tHbG9iYWxzIiwic2xlZXAiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsImxhZ1Ntb290aGluZyIsInRocmVzaG9sZCIsImFkanVzdGVkTGFnIiwiSW5maW5pdHkiLCJfZnBzIiwicHJpb3JpdGl6ZSIsIl9lYXNlTWFwIiwiX2N1c3RvbUVhc2VFeHAiLCJfcXVvdGVzRXhwIiwiX3BhcnNlT2JqZWN0SW5TdHJpbmciLCJ2YWwiLCJwYXJzZWRWYWwiLCJsYXN0SW5kZXhPZiIsIl9wcm9wYWdhdGVZb3lvRWFzZSIsImlzWW95byIsIl9maXJzdCIsInlveW9FYXNlIiwiX3lveW8iLCJfZWFzZSIsIl95RWFzZSIsImRlZmF1bHRFYXNlIiwibmVzdGVkIiwiX0NFIiwiX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nIiwiX2luc2VydEVhc2UiLCJlYXNlSW4iLCJlYXNlSW5PdXQiLCJsb3dlcmNhc2VOYW1lIiwiX2Vhc2VJbk91dEZyb21PdXQiLCJfY29uZmlnRWxhc3RpYyIsImFtcGxpdHVkZSIsInBlcmlvZCIsInAxIiwicDIiLCJwMyIsImFzaW4iLCJfY29uZmlnQmFjayIsIm92ZXJzaG9vdCIsInBvd2VyIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwiU3RlcHBlZEVhc2UiLCJzdGVwcyIsImltbWVkaWF0ZVN0YXJ0IiwicmVwZWF0RGVsYXkiLCJ5b3lvIiwiX3Byb3RvIiwic3RhcnRUaW1lIiwiX3RvdGFsVGltZSIsIl9wdExvb2t1cCIsIl9wVGltZSIsIml0ZXJhdGlvbiIsIl9wcyIsIl9yZWNhY2hlQW5jZXN0b3JzIiwiaW5jbHVkZVJlcGVhdHMiLCJ3cmFwUmVwZWF0cyIsInByZXZJc1JldmVydGluZyIsImdsb2JhbFRpbWUiLCJfc2F0Iiwic2VlayIsInJlc3RhcnQiLCJpbmNsdWRlRGVsYXkiLCJyZXZlcnNlZCIsInBhdXNlIiwiYXRUaW1lIiwicmVzdW1lIiwiaW52YWxpZGF0ZSIsImlzQWN0aXZlIiwiZXZlbnRDYWxsYmFjayIsIl9vblVwZGF0ZSIsInRoZW4iLCJvbkZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwiX3RoZW4iLCJfcHJvbSIsIl9BbmltYXRpb24iLCJzb3J0Q2hpbGRyZW4iLCJfcHJvdG8yIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsIm9uQ29tcGxldGVBbGwiLCJvbkNvbXBsZXRlQWxsUGFyYW1zIiwib25Db21wbGV0ZVBhcmFtcyIsInN0YWdnZXJGcm9tIiwic3RhZ2dlckZyb21UbyIsInByZXZQYXVzZWQiLCJwYXVzZVR3ZWVuIiwicHJldlN0YXJ0IiwicHJldkl0ZXJhdGlvbiIsInByZXZUaW1lIiwidER1ciIsImNyb3NzaW5nU3RhcnQiLCJyZXdpbmRpbmciLCJkb2VzV3JhcCIsInJlcGVhdFJlZnJlc2giLCJvblJlcGVhdCIsIl9oYXNQYXVzZSIsIl9mb3JjaW5nIiwiX2xhc3QiLCJfZmluZE5leHRQYXVzZVR3ZWVuIiwib25VcGRhdGUiLCJhZGp1c3RlZFRpbWUiLCJfdGhpczIiLCJhZGRMYWJlbCIsImdldENoaWxkcmVuIiwidHdlZW5zIiwidGltZWxpbmVzIiwiaWdub3JlQmVmb3JlVGltZSIsImdldEJ5SWQiLCJyZW1vdmVMYWJlbCIsImtpbGxUd2VlbnNPZiIsIl90b3RhbFRpbWUyIiwiYWRkUGF1c2UiLCJyZW1vdmVQYXVzZSIsIm9ubHlBY3RpdmUiLCJnZXRUd2VlbnNPZiIsIl9vdmVyd3JpdGluZ1R3ZWVuIiwiY2hpbGRyZW4iLCJwYXJzZWRUYXJnZXRzIiwiaXNHbG9iYWxUaW1lIiwiX3RhcmdldHMiLCJ0d2VlblRvIiwiaW5pdHRlZCIsInRsIiwiX3ZhcnMiLCJfb25TdGFydCIsIm9uU3RhcnQiLCJvblN0YXJ0UGFyYW1zIiwidHdlZW5Gcm9tVG8iLCJmcm9tUG9zaXRpb24iLCJ0b1Bvc2l0aW9uIiwibmV4dExhYmVsIiwiYWZ0ZXJUaW1lIiwicHJldmlvdXNMYWJlbCIsImJlZm9yZVRpbWUiLCJjdXJyZW50TGFiZWwiLCJzaGlmdENoaWxkcmVuIiwiYWRqdXN0TGFiZWxzIiwic29mdCIsImNsZWFyIiwiaW5jbHVkZUxhYmVscyIsInVwZGF0ZVJvb3QiLCJfZm9yY2VBbGxQcm9wVHdlZW5zIiwiX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4iLCJzZXR0ZXIiLCJzdHJpbmdGaWx0ZXIiLCJmdW5jUGFyYW0iLCJzdGFydE51bXMiLCJoYXNSYW5kb20iLCJmcCIsIm9wdGlvbmFsIiwiY3VycmVudFZhbHVlIiwicGFyc2VkU3RhcnQiLCJfc2V0dGVyRnVuY1dpdGhQYXJhbSIsIl9zZXR0ZXJGdW5jIiwiX3NldHRlclBsYWluIiwiX3JlbmRlckJvb2xlYW4iLCJfcmVuZGVyUGxhaW4iLCJwdExvb2t1cCIsIl9wYXJzZUZ1bmNPclN0cmluZyIsIl9wcm9jZXNzVmFycyIsInByaW9yaXR5IiwiY2xlYW5WYXJzIiwiZ3NEYXRhIiwiaGFybmVzc1ZhcnMiLCJvdmVyd3JpdHRlbiIsInByZXZTdGFydEF0IiwiZnVsbFRhcmdldHMiLCJhdXRvT3ZlcndyaXRlIiwiX292ZXJ3cml0ZSIsIl9mcm9tIiwiX3B0Q2FjaGUiLCJfb3AiLCJfb25Jbml0IiwiX3BhcnNlS2V5ZnJhbWUiLCJhbGxQcm9wcyIsImVhc2VFYWNoIiwiX3N0YWdnZXJUd2VlblByb3BzIiwiX3N0YWdnZXJQcm9wc1RvU2tpcCIsIl9BbmltYXRpb24yIiwic2tpcEluaGVyaXQiLCJfdGhpczMiLCJjdXJUYXJnZXQiLCJzdGFnZ2VyRnVuYyIsInN0YWdnZXJWYXJzVG9NZXJnZSIsIl90aGlzMyR2YXJzIiwia2YiLCJfcHJvdG8zIiwiaXNOZWdhdGl2ZSIsInByZXZSYXRpbyIsIl9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiIsInJlc2V0VG8iLCJzdGFydElzUmVsYXRpdmUiLCJza2lwUmVjdXJzaW9uIiwicm9vdFBUIiwibG9va3VwIiwicHRDYWNoZSIsIl91cGRhdGVQcm9wVHdlZW5zIiwib3ZlcndyaXR0ZW5Qcm9wcyIsImN1ckxvb2t1cCIsImN1ck92ZXJ3cml0ZVByb3BzIiwia2lsbGluZ1RhcmdldHMiLCJwcm9wVHdlZW5Mb29rdXAiLCJmaXJzdFBUIiwiYTEiLCJhMiIsIl9hcnJheXNNYXRjaCIsInByb3BlcnR5QWxpYXNlcyIsIl9hZGRBbGlhc2VzVG9WYXJzIiwib25SZXZlcnNlQ29tcGxldGUiLCJvblJldmVyc2VDb21wbGV0ZVBhcmFtcyIsIl9zZXR0ZXJBdHRyaWJ1dGUiLCJoYXNOb25EZXBlbmRlbnRSZW1haW5pbmciLCJvcCIsIl9zZXR0ZXJXaXRoTW9kaWZpZXIiLCJtU2V0IiwibXQiLCJwdDIiLCJmaXJzdCIsIlR3ZWVuTWF4IiwiVHdlZW5MaXRlIiwiVGltZWxpbmVMaXRlIiwiVGltZWxpbmVNYXgiLCJfbWVkaWEiLCJfZW1wdHlBcnJheSIsIl9sYXN0TWVkaWFUaW1lIiwiX2NvbnRleHRJRCIsIl9kaXNwYXRjaCIsIl9vbk1lZGlhQ2hhbmdlIiwibWF0Y2hlcyIsImFueU1hdGNoIiwidG9nZ2xlZCIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwibWF0Y2hNZWRpYSIsIm9uTWF0Y2giLCJDb250ZXh0IiwiX3IiLCJpc1JldmVydGVkIiwiX3Byb3RvNSIsInByZXZTZWxlY3RvciIsImlnbm9yZSIsImdldFR3ZWVucyIsIl90aGlzNCIsIm8iLCJNYXRjaE1lZGlhIiwiY29udGV4dHMiLCJfcHJvdG82IiwibXEiLCJhY3RpdmUiLCJjb25kIiwiX2xlbjIiLCJfa2V5MiIsImdldFByb3BlcnR5IiwiZ2V0dGVyIiwiZm9ybWF0IiwicXVpY2tTZXR0ZXIiLCJzZXR0ZXJzIiwicXVpY2tUbyIsIl9tZXJnZTIiLCJpc1R3ZWVuaW5nIiwicmVnaXN0ZXJFZmZlY3QiLCJfcmVmMyIsImVmZmVjdCIsInBsdWdpbnMiLCJleHRlbmRUaW1lbGluZSIsInBsdWdpbk5hbWUiLCJyZWdpc3RlckVhc2UiLCJwYXJzZUVhc2UiLCJleHBvcnRSb290IiwiaW5jbHVkZURlbGF5ZWRDYWxscyIsIm1hdGNoTWVkaWFSZWZyZXNoIiwiZm91bmQiLCJpbnN0YWxsIiwiZWZmZWN0cyIsInRpY2tlciIsImdsb2JhbFRpbWVsaW5lIiwiZ2xvYmFscyIsInRvQWRkIiwic3VwcHJlc3NPdmVyd3JpdGVzIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwibW9kaWZpZXJzIiwiX2FkZE1vZGlmaWVycyIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIkJvdW5jZSIsIlNpbmUiLCJFeHBvIiwiQ2lyYyIsImdzYXBXaXRoQ1NTIiwiVHdlZW5NYXhXaXRoQ1NTIiwibmFtZWRfcmVmZXJlbmNlc18xIiwicmVxdWlyZSIsIm51bWVyaWNfdW5pY29kZV9tYXBfMSIsInN1cnJvZ2F0ZV9wYWlyc18xIiwiYWxsTmFtZWRSZWZlcmVuY2VzIiwiX19hc3NpZ24iLCJuYW1lZFJlZmVyZW5jZXMiLCJodG1sNSIsInJlcGxhY2VVc2luZ1JlZ0V4cCIsIm1hY3JvVGV4dCIsIm1hY3JvUmVnRXhwIiwibWFjcm9SZXBsYWNlciIsInJlcGxhY2VSZXN1bHQiLCJyZXBsYWNlTWF0Y2giLCJyZXBsYWNlTGFzdEluZGV4IiwicmVwbGFjZUlucHV0IiwiZW5jb2RlUmVnRXhwcyIsInNwZWNpYWxDaGFycyIsIm5vbkFzY2lpIiwibm9uQXNjaWlQcmludGFibGUiLCJub25Bc2NpaVByaW50YWJsZU9ubHkiLCJleHRlbnNpdmUiLCJkZWZhdWx0RW5jb2RlT3B0aW9ucyIsIm1vZGUiLCJsZXZlbCIsIm51bWVyaWMiLCJfYSIsIl9iIiwiX2MiLCJfZCIsIl9lIiwiZW5jb2RlUmVnRXhwIiwicmVmZXJlbmNlcyIsImNoYXJhY3RlcnMiLCJpc0hleCIsImlucHV0IiwiZ2V0Q29kZVBvaW50IiwiY2hhckNvZGVBdCIsImRlZmF1bHREZWNvZGVPcHRpb25zIiwic3RyaWN0IiwiYXR0cmlidXRlIiwiYmFzZURlY29kZVJlZ0V4cHMiLCJ4bWwiLCJib2R5UmVnRXhwcyIsImh0bWw0IiwiZGVjb2RlUmVnRXhwcyIsImZyb21DaGFyQ29kZSIsIm91dE9mQm91bmRzQ2hhciIsImRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zIiwiZ2V0RGVjb2RlZEVudGl0eSIsImVudGl0eSIsImlzQXR0cmlidXRlIiwiaXNTdHJpY3QiLCJkZWNvZGVSZXN1bHQiLCJkZWNvZGVFbnRpdHlMYXN0Q2hhciIsImRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlIiwiZGVjb2RlU2Vjb25kQ2hhciIsImRlY29kZUNvZGUiLCJmcm9tQ29kZVBvaW50IiwibnVtZXJpY1VuaWNvZGVNYXAiLCJlbnRpdGllcyIsImRlY29kZVJlZ0V4cCIsIiQiLCJmaiIsImFzdHJhbENvZGVQb2ludCIsImNvZGVQb2ludEF0IiwiRGF0YVZpZXciLCJnZXROYXRpdmUiLCJoYXNoQ2xlYXIiLCJoYXNoRGVsZXRlIiwiaGFzaEdldCIsImhhc2hIYXMiLCJoYXNoU2V0IiwiSGFzaCIsImhhcyIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiTGlzdENhY2hlIiwiTWFwIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJTZXQiLCJzZXRDYWNoZUFkZCIsInNldENhY2hlSGFzIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsIlN0YWNrIiwic2l6ZSIsIlN5bWJvbCIsIlVpbnQ4QXJyYXkiLCJXZWFrTWFwIiwiYXJyYXkiLCJpdGVyYXRlZSIsInByZWRpY2F0ZSIsInJlc0luZGV4IiwiYmFzZVRpbWVzIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmZlciIsImlzSW5kZXgiLCJpc1R5cGVkQXJyYXkiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJlcSIsImJhc2VGb3JPd24iLCJiYXNlRWFjaCIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJvYmplY3QiLCJjYXN0UGF0aCIsInRvS2V5IiwiYXJyYXlQdXNoIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsImJhc2VHZXRUYWciLCJpc09iamVjdExpa2UiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNFcXVhbCIsIm90aGVyIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImVxdWFsQXJyYXlzIiwiZXF1YWxCeVRhZyIsImVxdWFsT2JqZWN0cyIsImdldFRhZyIsImFyZ3NUYWciLCJhcnJheVRhZyIsIm9iamVjdFRhZyIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwib2JqVmFsdWUiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiaXNGdW5jdGlvbiIsImlzTWFza2VkIiwiaXNPYmplY3QiLCJ0b1NvdXJjZSIsInJlSXNIb3N0Q3RvciIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwicmVJc05hdGl2ZSIsImlzTGVuZ3RoIiwidHlwZWRBcnJheVRhZ3MiLCJiYXNlTWF0Y2hlcyIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJpZGVudGl0eSIsImlzUHJvdG90eXBlIiwibmF0aXZlS2V5cyIsImlzQXJyYXlMaWtlIiwiY29sbGVjdGlvbiIsImJhc2VJc01hdGNoIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiYmFzZUdldCIsImFycmF5TWFwIiwiaXNTeW1ib2wiLCJzeW1ib2xQcm90byIsInN5bWJvbFRvU3RyaW5nIiwiYmFzZVRvU3RyaW5nIiwic3RyaW5nVG9QYXRoIiwiY29yZUpzRGF0YSIsImVhY2hGdW5jIiwiZnJvbVJpZ2h0IiwiaXRlcmFibGUiLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsImlzUGFydGlhbCIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsImFyclN0YWNrZWQiLCJvdGhTdGFja2VkIiwic2VlbiIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4IiwibWFwVG9BcnJheSIsInNldFRvQXJyYXkiLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInRhZyIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwiYnVmZmVyIiwiY29udmVydCIsInN0YWNrZWQiLCJnZXRBbGxLZXlzIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJvYmpTdGFja2VkIiwic2tpcEN0b3IiLCJvYmpDdG9yIiwib3RoQ3RvciIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJiYXNlR2V0QWxsS2V5cyIsImdldFN5bWJvbHMiLCJpc0tleWFibGUiLCJiYXNlSXNOYXRpdmUiLCJnZXRWYWx1ZSIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwiaXNPd24iLCJ1bm1hc2tlZCIsImFycmF5RmlsdGVyIiwic3R1YkFycmF5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJuYXRpdmVHZXRTeW1ib2xzIiwic3ltYm9sIiwibWFwVGFnIiwicHJvbWlzZVRhZyIsInNldFRhZyIsIndlYWtNYXBUYWciLCJkYXRhVmlld1RhZyIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsIkN0b3IiLCJjdG9yU3RyaW5nIiwiaGFzRnVuYyIsIm5hdGl2ZUNyZWF0ZSIsInJlSXNVaW50IiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInVpZCIsIm1hc2tTcmNLZXkiLCJJRV9QUk9UTyIsImFzc29jSW5kZXhPZiIsImdldE1hcERhdGEiLCJtZW1vaXplIiwib3ZlckFyZyIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwidHlwZXMiLCJiaW5kaW5nIiwiZnJlZVNlbGYiLCJyb290IiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwibWVtb2l6ZUNhcHBlZCIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJzdHJpbmciLCJxdW90ZSIsInN1YlN0cmluZyIsImFycmF5RWFjaCIsImNhc3RGdW5jdGlvbiIsImRlZmF1bHRWYWx1ZSIsImJhc2VIYXNJbiIsImhhc1BhdGgiLCJiYXNlSXNBcmd1bWVudHMiLCJzdHViRmFsc2UiLCJCdWZmZXIiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZUlzVHlwZWRBcnJheSIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsImJhc2VJdGVyYXRlZSIsImJhc2VNYXAiLCJtZW1vaXplZCIsIkNhY2hlIiwiYmFzZVByb3BlcnR5IiwiYmFzZVByb3BlcnR5RGVlcCIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJub0RvY3VtZW50Iiwibm9vcCIsInVwZGF0ZUNzcyIsImlzVXJsUmVxdWVzdCIsImlzTG9hZGVkIiwidmlzaXRlZCIsIm5ld0VsIiwiY2xvbmVOb2RlIiwicmVsb2FkU3R5bGUiLCJsb2FkZWQiLCJnZXRSZWxvYWRVcmwiLCJyZWxvYWRBbGwiLCJtb2R1bGVJZCIsIm9wdGlvbnMiLCJmbiIsInRpbWVvdXQiLCJnZXRTY3JpcHRTcmMiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGFzdFNjcmlwdFRhZyIsImZpbGVNYXAiLCJzcGxpdFJlc3VsdCIsImZpbGVuYW1lIiwibWFwUnVsZSIsInJlZyIsImdldEN1cnJlbnRTY3JpcHRVcmwiLCJyZWxvYWRlZCIsImxvY2FscyIsInVybFN0cmluZyIsInByb3RvY29sIiwiY29tcG9uZW50cyIsImhvc3QiLCJjYW5Vc2VET00iLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImF0dGFjaEV2ZW50IiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiX2llIiwiX2ZpcmVmb3giLCJfb3BlcmEiLCJfd2Via2l0IiwiX2Nocm9tZSIsIl9pZV9yZWFsX3ZlcnNpb24iLCJfb3N4IiwiX3dpbmRvd3MiLCJfbGludXgiLCJfYW5kcm9pZCIsIl93aW42NCIsIl9pcGhvbmUiLCJfaXBhZCIsIl9uYXRpdmUiLCJfbW9iaWxlIiwiX3BvcHVsYXRlZCIsIl9wb3B1bGF0ZSIsInVhcyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImFnZW50Iiwib3MiLCJOYU4iLCJkb2N1bWVudE1vZGUiLCJ0cmlkZW50IiwidmVyIiwiVXNlckFnZW50X0RFUFJFQ0FURUQiLCJpZSIsImllQ29tcGF0aWJpbGl0eU1vZGUiLCJpZTY0IiwiZmlyZWZveCIsIm9wZXJhIiwid2Via2l0Iiwic2FmYXJpIiwiY2hyb21lIiwid2luZG93cyIsIm9zeCIsImxpbnV4IiwiaXBob25lIiwibW9iaWxlIiwibmF0aXZlQXBwIiwiYW5kcm9pZCIsImlwYWQiLCJ1c2VIYXNGZWF0dXJlIiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiZXZlbnROYW1lU3VmZml4IiwiY2FwdHVyZSIsImV2ZW50TmFtZSIsImlzU3VwcG9ydGVkIiwiaXNFdmVudFN1cHBvcnRlZCIsIm5vcm1hbGl6ZVdoZWVsIiwic1giLCJzWSIsInBYIiwicFkiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJnZXRFdmVudFR5cGUiLCJwcmVmaXhlcyIsInVwcGVyIiwibWVtbyIsInByZWZpeCIsImNoYXIiLCJLZXkiLCJkYXNoIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfdG9Qcm9wZXJ0eUtleSIsInRvUHJpbWl0aXZlIiwiX3RvUHJpbWl0aXZlIiwiV2ViU29ja2V0Q2xpZW50IiwiQ29uc3RydWN0b3IiLCJpbnN0YW5jZSIsIl9jbGFzc0NhbGxDaGVjayIsImNsaWVudCIsIldlYlNvY2tldCIsIm9uZXJyb3IiLCJwcm90b1Byb3BzIiwib25vcGVuIiwib25jbG9zZSIsIm9ubWVzc2FnZSIsInN0YXRpY1Byb3BzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2RlZmluZVByb3BlcnR5IiwiZGVjb2RlT3ZlcmxheU9wdGlvbnMiLCJvdmVybGF5T3B0aW9ucyIsIm92ZXJsYXlGaWx0ZXJGdW5jdGlvblN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsIm92ZXJsYXlGaWx0ZXJGdW5jdGlvbiIsImlzVW5sb2FkaW5nIiwiY3VycmVudEhhc2giLCJfX3dlYnBhY2tfaGFzaF9fIiwiaG90IiwibGl2ZVJlbG9hZCIsIm92ZXJsYXkiLCJwYXJzZWRSZXNvdXJjZVF1ZXJ5IiwicGFyc2VVUkwiLCJlbmFibGVkRmVhdHVyZXMiLCJQcm9ncmVzcyIsIk92ZXJsYXkiLCJKU09OIiwicGFyc2UiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9vYmplY3RTcHJlYWQiLCJlcnJvcnMiLCJ3YXJuaW5ncyIsInJ1bnRpbWVFcnJvcnMiLCJzZXRBbGxMb2dMZXZlbCIsIndlYnBhY2tIb3RMb2ciLCJzZXRMb2dMZXZlbCIsImxvZ2dpbmciLCJyZWNvbm5lY3QiLCJsb2dFbmFibGVkRmVhdHVyZXMiLCJjcmVhdGVPdmVybGF5IiwidHJ1c3RlZFR5cGVzUG9saWN5TmFtZSIsImNhdGNoUnVudGltZUVycm9yIiwic2VuZCIsIm9uU29ja2V0TWVzc2FnZSIsImludmFsaWQiLCJpbmZvIiwic2VuZE1lc3NhZ2UiLCJoYXNoIiwiX2hhc2giLCJwcmV2aW91c0hhc2giLCJtc2ciLCJvayIsInJlbG9hZEFwcCIsImZpbGUiLCJyZWxvYWQiLCJfd2FybmluZ3MiLCJwcmludGFibGVXYXJuaW5ncyIsIl9mb3JtYXRQcm9ibGVtIiwiZm9ybWF0UHJvYmxlbSIsImhlYWRlciIsInN0cmlwQW5zaSIsIm92ZXJsYXlXYXJuaW5nc1NldHRpbmciLCJtZXNzYWdlcyIsInByZXZlbnRSZWxvYWRpbmciLCJfZXJyb3JzIiwicHJpbnRhYmxlRXJyb3JzIiwiX2Zvcm1hdFByb2JsZW0yIiwib3ZlcmxheUVycm9yc1NldHRpbmdzIiwiX2Vycm9yIiwic29ja2V0VVJMIiwiY3JlYXRlU29ja2V0VVJMIiwic29ja2V0IiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fdW51c2VkX3dlYnBhY2tfbW9kdWxlIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJTeW5jQmFpbEhvb2siLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfYXJyYXlMaWtlVG9BcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJpdGVyYXRvciIsIl9pdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJhcnIyIiwiTG9nVHlwZSIsImZyZWV6ZSIsImRlYnVnIiwidHJhY2UiLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwicHJvZmlsZSIsInByb2ZpbGVFbmQiLCJMT0dfU1lNQk9MIiwiVElNRVJTX1NZTUJPTCIsIlRJTUVSU19BR0dSRUdBVEVTX1NZTUJPTCIsIldlYnBhY2tMb2dnZXIiLCJnZXRDaGlsZExvZ2dlciIsIl9sZW4zIiwiX2tleTMiLCJfbGVuNCIsIl9rZXk0IiwiX2xlbjUiLCJfa2V5NSIsImFzc2VydGlvbiIsIl9sZW42IiwiX2tleTYiLCJfbGVuNyIsIl9rZXk3IiwiX2xlbjgiLCJfa2V5OCIsIl9sZW45IiwiX2tleTkiLCJfbGVuMTAiLCJfa2V5MTAiLCJocnRpbWUiLCJkZWxldGUiLCJMb2dnZXIiLCJfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMiLCJmaWx0ZXJUb0Z1bmN0aW9uIiwicmVnRXhwIiwiaWRlbnQiLCJMb2dMZXZlbCIsImZhbHNlIiwidHJ1ZSIsInZlcmJvc2UiLCJfcmVmJGxldmVsIiwiX3JlZiRkZWJ1ZyIsImRlYnVnRmlsdGVycyIsImxvZ2xldmVsIiwibGFiZWxlZEFyZ3MiLCJtcyIsImxvZ1RpbWUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImNyZWF0ZUNvbnNvbGVMb2dnZXIiLCJjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMiLCJjdXJyZW50RGVmYXVsdExvZ2dlciIsImdldExvZ2dlciIsImhvb2tzIiwiY2hpbGROYW1lIiwiY29uZmlndXJlRGVmYXVsdExvZ2dlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsImNhY2hlZE1vZHVsZSIsImRlZmluaXRpb24iLCJ3ZWJwYWNrX2xpYl9sb2dnaW5nX3J1bnRpbWVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9fd2VicGFja19leHBvcnRfdGFyZ2V0X18iLCJfX2VzTW9kdWxlIiwibW9kdWxlTmFtZSIsImxvYyIsImlmcmFtZUNvbnRhaW5lckVsZW1lbnQiLCJjb250YWluZXJFbGVtZW50IiwiaGVhZGVyRWxlbWVudCIsIm92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kiLCJvbkxvYWRRdWV1ZSIsImFwcGx5U3R5bGUiLCJlbnN1cmVPdmVybGF5RXhpc3RzIiwiY3JlYXRlSFRNTCIsInRydXN0ZWRUeXBlcyIsImNyZWF0ZVBvbGljeSIsImlmcmFtZVN0eWxlIiwiY29udGVudEVsZW1lbnQiLCJjb250YWluZXJTdHlsZSIsImlubmVyVGV4dCIsImhlYWRlclN0eWxlIiwiY2xvc2VCdXR0b25FbGVtZW50IiwiZGlzbWlzc0J1dHRvblN0eWxlIiwiYXJpYUxhYmVsIiwib3ZlcmxheVNlcnZpY2UiLCJvbkxvYWQiLCJjcmVhdGVDb250YWluZXIiLCJjcmVhdGVPdmVybGF5TWFjaGluZSIsInNob3dPdmVybGF5IiwibWVzc2FnZVNvdXJjZSIsImVudHJ5RWxlbWVudCIsIm1zZ1N0eWxlcyIsInBhZGRpbmciLCJ0eXBlRWxlbWVudCIsIm1zZ1R5cGVTdHlsZSIsIm1vZHVsZUlkZW50aWZpZXIiLCJjdXJzb3IiLCJlbmNvZGUiLCJtZXNzYWdlVGV4dE5vZGUiLCJtc2dUZXh0U3R5bGUiLCJoaWRlT3ZlcmxheSIsImhhbmRsZUVycm9yIiwiZmFsbGJhY2tNZXNzYWdlIiwiZXJyb3JPYmplY3QiLCJwYXJzZUVycm9yVG9TdGFja3MiLCJsaXN0ZW5Ub1J1bnRpbWVFcnJvciIsImVycm9yRXZlbnQiLCJsaXN0ZW5Ub1VuaGFuZGxlZFJlamVjdGlvbiIsInByb21pc2VSZWplY3Rpb25FdmVudCIsInJlYXNvbiIsInN0YXRlcyIsImluaXRpYWwiLCJhY3Rpb25zIiwiY3VycmVudFN0YXRlIiwiY3VycmVudENvbnRleHQiLCJjdXJyZW50U3RhdGVPbiIsInRyYW5zaXRpb25Db25maWciLCJhY3ROYW1lIiwiYWN0aW9uSW1wbCIsIm5leHRDb250ZXh0VmFsdWUiLCJjcmVhdGVNYWNoaW5lIiwiaGlkZGVuIiwiQlVJTERfRVJST1IiLCJSVU5USU1FX0VSUk9SIiwiZGlzcGxheUJ1aWxkRXJyb3IiLCJESVNNSVNTIiwiZGlzcGxheVJ1bnRpbWVFcnJvciIsImRpc21pc3NNZXNzYWdlcyIsImFwcGVuZE1lc3NhZ2VzIiwic2V0TWVzc2FnZXMiLCJib3JkZXIiLCJib3hTaXppbmciLCJmb250U2l6ZSIsIndoaXRlU3BhY2UiLCJvdmVyZmxvdyIsImZvbnRGYW1pbHkiLCJtYXJnaW4iLCJtYXhIZWlnaHQiLCJtYXJnaW5Cb3R0b20iLCJDbGllbnQiLCJfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyIsImRlZmF1bHQiLCJyZXRyaWVzIiwibWF4UmV0cmllcyIsImhhbmRsZXJzIiwib25PcGVuIiwib25DbG9zZSIsInJldHJ5SW5NcyIsIm9uTWVzc2FnZSIsInBhcnNlZFVSTCIsImhvc3RuYW1lIiwiaXNJbkFkZHJBbnkiLCJzb2NrZXRVUkxQcm90b2NvbCIsInNvY2tldFVSTEF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwic29ja2V0VVJMSG9zdG5hbWUiLCJzb2NrZXRVUkxQb3J0IiwicG9ydCIsInNvY2tldFVSTFBhdGhuYW1lIiwiZnJvbUN1cnJlbnRTY3JpcHQiLCJvYmpVUkwiLCJhdXRoIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2xhc2hlcyIsInNlYXJjaCIsInNjcmlwdEVsZW1lbnRzIiwic2NyaXB0RWxlbWVudHNXaXRoU3JjIiwibG9nZ2VyIiwiZmVhdHVyZXMiLCJsb2dTdHJpbmciLCJyZXNvdXJjZVF1ZXJ5Iiwic2VhcmNoUGFyYW1zIiwicGFpciIsInNjcmlwdFNvdXJjZVVSTCIsInNjcmlwdFNvdXJjZSIsImdldEN1cnJlbnRTY3JpcHRTb3VyY2UiLCJVUkwiLCJhbGxvd1RvSG90IiwiYWxsb3dUb0xpdmVSZWxvYWQiLCJob3RFbWl0dGVyIiwicG9zdE1lc3NhZ2UiLCJyb290V2luZG93IiwiaW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwiYXBwbHlSZWxvYWQiLCJjbGVhckludGVydmFsIiwiV29ya2VyR2xvYmFsU2NvcGUiLCJhbnNpUmVnZXgiLCJsYXN0SGFzaCIsInVwVG9EYXRlIiwiY2hlY2siLCJ1cGRhdGVkTW9kdWxlcyIsImNhdGNoIiwiZm9ybWF0RXJyb3IiLCJyZW5ld2VkTW9kdWxlcyIsInVuYWNjZXB0ZWRNb2R1bGVzIiwicGFydHMiLCJldmVyeSIsImxvZ0xldmVsIiwiZHVtbXkiLCJzaG91bGRMb2ciLCJsb2dHcm91cCIsImxvZ0ZuIiwibG9jYWxzSnNvblN0cmluZyIsImNzc1JlbG9hZCIsImFjY2VwdCIsImRpc3Bvc2UiLCJ0ZW1wTWF0NCIsIk1hdDQiLCJ0ZW1wVmVjM2EiLCJWZWMzIiwidGVtcFZlYzNiIiwibmVhciIsImZhciIsInpvb20iLCJwcm9qZWN0aW9uTWF0cml4Iiwidmlld01hdHJpeCIsInByb2plY3Rpb25WaWV3TWF0cml4Iiwid29ybGRQb3NpdGlvbiIsIm9ydGhvZ3JhcGhpYyIsImZyb21QZXJzcGVjdGl2ZSIsImZyb21PcnRob2dvbmFsIiwidXBkYXRlTWF0cml4V29ybGQiLCJpbnZlcnNlIiwid29ybGRNYXRyaXgiLCJnZXRUcmFuc2xhdGlvbiIsIm11bHRpcGx5IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImxvb2tBdCIsInByb2plY3QiLCJhcHBseU1hdHJpeDQiLCJ1bnByb2plY3QiLCJ1cGRhdGVGcnVzdHVtIiwiZnJ1c3R1bSIsImNvbnN0YW50IiwiaW52TGVuIiwiZnJ1c3R1bUludGVyc2VjdHNNZXNoIiwibm9kZSIsImF0dHJpYnV0ZXMiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJnZXRNYXhTY2FsZU9uQXhpcyIsImZydXN0dW1JbnRlcnNlY3RzU3BoZXJlIiwibm9ybWFsIiwicGxhbmUiLCJkb3QiLCJ0ZW1wVmVjMyIsIklEIiwiQVRUUl9JRCIsImlzQm91bmRzV2FybmVkIiwiR2VvbWV0cnkiLCJWQU9zIiwiZHJhd1JhbmdlIiwiaW5zdGFuY2VkQ291bnQiLCJiaW5kVmVydGV4QXJyYXkiLCJjdXJyZW50R2VvbWV0cnkiLCJnbFN0YXRlIiwiYWRkQXR0cmlidXRlIiwiYXR0ciIsIkZsb2F0MzJBcnJheSIsIkZMT0FUIiwiVWludDE2QXJyYXkiLCJVTlNJR05FRF9TSE9SVCIsIlVOU0lHTkVEX0lOVCIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiQVJSQVlfQlVGRkVSIiwibm9ybWFsaXplZCIsInN0cmlkZSIsImRpdmlzb3IiLCJpbnN0YW5jZWQiLCJuZWVkc1VwZGF0ZSIsInVzYWdlIiwiU1RBVElDX0RSQVciLCJ1cGRhdGVBdHRyaWJ1dGUiLCJpc0luc3RhbmNlZCIsImlzTmV3QnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYm91bmRCdWZmZXIiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsImJ1ZmZlclN1YkRhdGEiLCJzZXRJbmRleCIsInNldERyYXdSYW5nZSIsInNldEluc3RhbmNlZENvdW50IiwiY3JlYXRlVkFPIiwiYXR0cmlidXRlT3JkZXIiLCJjcmVhdGVWZXJ0ZXhBcnJheSIsImJpbmRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlTG9jYXRpb25zIiwibnVtTG9jIiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliRGl2aXNvciIsImRyYXciLCJUUklBTkdMRVMiLCJpbmRleEJ5dGVzUGVyRWxlbWVudCIsImRyYXdFbGVtZW50c0luc3RhbmNlZCIsImRyYXdBcnJheXNJbnN0YW5jZWQiLCJkcmF3RWxlbWVudHMiLCJkcmF3QXJyYXlzIiwiZ2V0UG9zaXRpb24iLCJjb21wdXRlQm91bmRpbmdCb3giLCJzdWIiLCJkaXZpZGUiLCJtYXhSYWRpdXNTcSIsImZyb21BcnJheSIsInNxdWFyZWREaXN0YW5jZSIsImRlbGV0ZVZlcnRleEFycmF5IiwiZGVsZXRlQnVmZmVyIiwiZnJ1c3R1bUN1bGxlZCIsInJlbmRlck9yZGVyIiwibW9kZWxWaWV3TWF0cml4Iiwibm9ybWFsTWF0cml4IiwiTWF0MyIsImJlZm9yZVJlbmRlckNhbGxiYWNrcyIsImFmdGVyUmVuZGVyQ2FsbGJhY2tzIiwib25CZWZvcmVSZW5kZXIiLCJvbkFmdGVyUmVuZGVyIiwibW9kZWxNYXRyaXgiLCJjYW1lcmFQb3NpdGlvbiIsImdldE5vcm1hbE1hdHJpeCIsImZsaXBGYWNlcyIsImN1bGxGYWNlIiwidXNlIiwiYXJyYXlDYWNoZUYzMiIsIkJBQ0siLCJmcm9udEZhY2UiLCJDQ1ciLCJkZXB0aFRlc3QiLCJkZXB0aFdyaXRlIiwiZGVwdGhGdW5jIiwiTEVRVUFMIiwiYmxlbmRGdW5jIiwiYmxlbmRFcXVhdGlvbiIsInByZW11bHRpcGxpZWRBbHBoYSIsInNldEJsZW5kRnVuYyIsIk9ORSIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJTUkNfQUxQSEEiLCJ2ZXJ0ZXhTaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiZnJhZ21lbnRTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJhdHRhY2hTaGFkZXIiLCJzZXRTaGFkZXJzIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlckluZm9Mb2ciLCJhZGRMaW5lTnVtYmVycyIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJ1bmlmb3JtTG9jYXRpb25zIiwibnVtVW5pZm9ybXMiLCJBQ1RJVkVfVU5JRk9STVMiLCJ1SW5kZXgiLCJ1bmlmb3JtIiwiZ2V0QWN0aXZlVW5pZm9ybSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInVuaWZvcm1OYW1lIiwibmFtZUNvbXBvbmVudHMiLCJsb2NhdGlvbnMiLCJudW1BdHRyaWJzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJhSW5kZXgiLCJnZXRBY3RpdmVBdHRyaWIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImRzdCIsInNyY0FscGhhIiwiZHN0QWxwaGEiLCJzZXRCbGVuZEVxdWF0aW9uIiwibW9kZVJHQiIsIm1vZGVBbHBoYSIsImFwcGx5U3RhdGUiLCJlbmFibGUiLCJERVBUSF9URVNUIiwiZGlzYWJsZSIsIkNVTExfRkFDRSIsIkJMRU5EIiwic2V0Q3VsbEZhY2UiLCJzZXRGcm9udEZhY2UiLCJzZXREZXB0aE1hc2siLCJzZXREZXB0aEZ1bmMiLCJ0ZXh0dXJlVW5pdCIsImN1cnJlbnRQcm9ncmFtIiwidXNlUHJvZ3JhbSIsImFjdGl2ZVVuaWZvcm0iLCJjb21wb25lbnQiLCJzZXRVbmlmb3JtIiwidGV4dHVyZVVuaXRzIiwiQ1ciLCJkZWxldGVQcm9ncmFtIiwiYXJyYXlMZW4iLCJ2YWx1ZUxlbiIsImZsYXR0ZW4iLCJzZXRWYWx1ZSIsImFycmF5c0VxdWFsIiwic2V0QXJyYXkiLCJ1bmlmb3JtMWZ2IiwidW5pZm9ybTFmIiwidW5pZm9ybTJmdiIsInVuaWZvcm0zZnYiLCJ1bmlmb3JtNGZ2IiwidW5pZm9ybTFpdiIsInVuaWZvcm0xaSIsInVuaWZvcm0yaXYiLCJ1bmlmb3JtM2l2IiwidW5pZm9ybTRpdiIsInVuaWZvcm1NYXRyaXgyZnYiLCJ1bmlmb3JtTWF0cml4M2Z2IiwidW5pZm9ybU1hdHJpeDRmdiIsIndhcm5Db3VudCIsImRwciIsImRlcHRoIiwic3RlbmNpbCIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsInBvd2VyUHJlZmVyZW5jZSIsImF1dG9DbGVhciIsIndlYmdsIiwiZ2V0Q29udGV4dCIsImlzV2ViZ2wyIiwiWkVSTyIsIkZVTkNfQUREIiwiZGVwdGhNYXNrIiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwidW5wYWNrQWxpZ25tZW50IiwiZnJhbWVidWZmZXIiLCJ2aWV3cG9ydCIsImFjdGl2ZVRleHR1cmVVbml0IiwiZXh0ZW5zaW9ucyIsImdldEV4dGVuc2lvbiIsImRyYXdCdWZmZXJzIiwicGFyYW1ldGVycyIsIm1heFRleHR1cmVVbml0cyIsImdldFBhcmFtZXRlciIsIk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTIiwibWF4QW5pc290cm9weSIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsInNldFZpZXdwb3J0Iiwic2V0U2Npc3NvciIsInNjaXNzb3IiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiZXh0ZW5zaW9uIiwid2ViZ2wyRnVuYyIsImV4dEZ1bmMiLCJzb3J0T3BhcXVlIiwiekRlcHRoIiwic29ydFRyYW5zcGFyZW50Iiwic29ydFVJIiwiZ2V0UmVuZGVyTGlzdCIsImZydXN0dW1DdWxsIiwicmVuZGVyTGlzdCIsInRyYXZlcnNlIiwidmlzaWJsZSIsIm9wYXF1ZSIsInVpIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJTVEVOQ0lMX0JVRkZFUl9CSVQiLCJlbXB0eVBpeGVsIiwiaXNQb3dlck9mMiIsIlRFWFRVUkVfMkQiLCJVTlNJR05FRF9CWVRFIiwiUkdCQSIsImludGVybmFsRm9ybWF0Iiwid3JhcFMiLCJDTEFNUF9UT19FREdFIiwid3JhcFQiLCJURVhUVVJFX0NVQkVfTUFQIiwibWluRmlsdGVyIiwiTkVBUkVTVF9NSVBNQVBfTElORUFSIiwiTElORUFSIiwibWFnRmlsdGVyIiwiYW5pc290cm9weSIsInN0b3JlIiwiUkVQRUFUIiwiYmluZFRleHR1cmUiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wiLCJVTlBBQ0tfQUxJR05NRU5UIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIlRFWFRVUkVfV1JBUF9TIiwiVEVYVFVSRV9XUkFQX1QiLCJ0ZXhQYXJhbWV0ZXJmIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJ0ZXhJbWFnZTJEIiwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YIiwiVEVYVFVSRV8yRF9BUlJBWSIsInRleEltYWdlM0QiLCJpc0NvbXByZXNzZWRUZXh0dXJlIiwiY29tcHJlc3NlZFRleEltYWdlMkQiLCJnZW5lcmF0ZU1pcG1hcCIsIm1hdHJpeEF1dG9VcGRhdGUiLCJ3b3JsZE1hdHJpeE5lZWRzVXBkYXRlIiwicXVhdGVybmlvbiIsIlF1YXQiLCJFdWxlciIsInVwIiwiX3RhcmdldCIsImZyb21FdWxlciIsImZyb21RdWF0ZXJuaW9uIiwibm90aWZ5UGFyZW50IiwiYWRkQ2hpbGQiLCJub3RpZnlDaGlsZCIsInVwZGF0ZU1hdHJpeCIsImNvbXBvc2UiLCJkZWNvbXBvc2UiLCJpbnZlcnQiLCJnZXRSb3RhdGlvbiIsIndTZWdzIiwiaFNlZ3MiLCJudW0iLCJudW1JbmRpY2VzIiwidXYiLCJVaW50MzJBcnJheSIsImJ1aWxkUGxhbmUiLCJ1RGlyIiwidkRpciIsImlpIiwiaW8iLCJzZWdXIiwic2VnSCIsIml5IiwiaXgiLCJ0bXBNYXQ0Iiwib3JkZXIiLCJ0cmlnZ2VyUHJvcHMiLCJQcm94eSIsInN1Y2Nlc3MiLCJyZW9yZGVyIiwiZnJvbVJvdGF0aW9uTWF0cml4IiwiRXVsZXJGdW5jIiwicSIsImlzSW50ZXJuYWwiLCJtMDAiLCJtMDEiLCJtMDIiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJNYXQzRnVuYyIsIm1hIiwibWIiLCJmcm9tTWF0cml4NCIsImZyb21CYXNpcyIsInZlYzNhIiwidmVjM2IiLCJ2ZWMzYyIsIm0wMyIsIm0xMyIsIm0yMyIsIm0zMCIsIm0zMSIsIm0zMiIsIm0zMyIsIk1hdDRGdW5jIiwic2V0UG9zaXRpb24iLCJwb3MiLCJnZXRTY2FsaW5nIiwiZXllIiwiUXVhdEZ1bmMiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJjb25qdWdhdGUiLCJxQSIsInFCIiwiZnJvbU1hdHJpeDMiLCJtYXRyaXgzIiwiZXVsZXIiLCJmcm9tQXhpc0FuZ2xlIiwic2xlcnAiLCJWZWMzRnVuYyIsInZhIiwidmIiLCJzcXVhcmVkTGVuIiwibmVnYXRlIiwiY3Jvc3MiLCJlcXVhbHMiLCJhcHBseU1hdHJpeDMiLCJtYXQzIiwibWF0NCIsInNjYWxlUm90YXRlTWF0cml4NCIsImFwcGx5UXVhdGVybmlvbiIsImNsb25lIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwib3V0IiwiZnJvbU1hdDQiLCJmcm9tUXVhdCIsIngyIiwieTIiLCJ6MiIsInh4IiwieXgiLCJ5eSIsInp4IiwienkiLCJ6eiIsInd4Iiwid3kiLCJ3eiIsInRyYW5zcG9zZSIsImEwMSIsImEwMiIsImEwMCIsImExMCIsImEyMCIsImIwMSIsImIxMSIsImIyMSIsImRldCIsImIwMCIsImIwMiIsImIxMCIsImIxMiIsImIyMCIsImIyMiIsIm5vcm1hbEZyb21NYXQ0IiwiYTAzIiwiYTMwIiwiYTMxIiwiYjAzIiwiYjA0IiwiYjA1IiwiYjA2IiwiYjA3IiwiYjA4IiwiYjA5IiwicHJvamVjdGlvbiIsInN1YnRyYWN0IiwibXVsdGlwbHlTY2FsYXIiLCJFUFNJTE9OIiwiYjAiLCJiMSIsImIyIiwiYjMiLCJoeXBvdCIsIm1hdCIsInNjYWxpbmciLCJpczEiLCJpczIiLCJpczMiLCJzbTExIiwic20xMiIsInNtMTMiLCJzbTIxIiwic20yMiIsInNtMjMiLCJzbTMxIiwic20zMiIsInNtMzMiLCJTIiwic3JjTWF0IiwiZHN0Um90YXRpb24iLCJkc3RUcmFuc2xhdGlvbiIsImRzdFNjYWxlIiwic3giLCJ2ZWMzIiwic3kiLCJzeiIsIl9tMSIsImludlNYIiwiaW52U1kiLCJpbnZTWiIsImRzdE1hdCIsInNyY1JvdGF0aW9uIiwic3JjVHJhbnNsYXRpb24iLCJzcmNTY2FsZSIsInRlIiwieHkiLCJ4eiIsInl6IiwiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZSIsImZvdnkiLCJuZiIsIm9ydGhvIiwibHIiLCJidCIsInRhcmdldFRvIiwiZXlleCIsImV5ZXkiLCJleWV6IiwidXB4IiwidXB5IiwidXB6IiwiejAiLCJ6MSIsIngwIiwieDEiLCJzZXRBeGlzQW5nbGUiLCJheCIsImF5IiwiYXoiLCJhdyIsImJ4IiwiYnkiLCJieiIsImJ3Iiwib21lZ2EiLCJjb3NvbSIsInNpbm9tIiwic2NhbGUwIiwic2NhbGUxIiwiYWNvcyIsImEwIiwiYTMiLCJpbnZEb3QiLCJmcm9tTWF0MyIsImZSb290IiwiZlRyYWNlIiwiayIsImN4IiwiY3kiLCJjeiIsInZlYzQiLCJzcXVhcmVkTGVuZ3RoIiwidHJhbnNmb3JtTWF0NCIsInNjYWxlUm90YXRlTWF0NCIsInRyYW5zZm9ybU1hdDMiLCJ0cmFuc2Zvcm1RdWF0IiwicXgiLCJxeSIsInF6IiwidXZ4IiwidXZ5IiwidXZ6IiwidXV2eCIsInV1dnkiLCJ1dXZ6IiwidzIiLCJ0ZW1wQSIsInRlbXBCIiwiY29zaW5lIiwiZXhhY3RFcXVhbHMiLCJleGVjT3B0aW9ucyIsImZhY3RvcnkiLCJodSIsImNodW5rSWQiLCJtaW5pQ3NzRiIsImhtckYiLCJnbG9iYWxUaGlzIiwiZG9uZSIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJjaGFyc2V0IiwibmMiLCJvblNjcmlwdENvbXBsZXRlIiwiZG9uZUZucyIsImhlYWQiLCJubWQiLCJwYXRocyIsImN1cnJlbnRDaGlsZE1vZHVsZSIsImN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzIiwicXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIiwiY3VycmVudE1vZHVsZURhdGEiLCJpbnN0YWxsZWRNb2R1bGVzIiwiY3VycmVudFBhcmVudHMiLCJyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMiLCJjdXJyZW50U3RhdHVzIiwiYmxvY2tpbmdQcm9taXNlcyIsImJsb2NraW5nUHJvbWlzZXNXYWl0aW5nIiwic2V0U3RhdHVzIiwibmV3U3RhdHVzIiwicmVzdWx0cyIsInVuYmxvY2siLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJobXJNIiwiaG1yQyIsInByb21pc2VzIiwiaW50ZXJuYWxBcHBseSIsImFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzIiwiaG90QXBwbHkiLCJCb29sZWFuIiwiZGlzcG9zZVByb21pc2UiLCJhcHBseVByb21pc2UiLCJyZXBvcnRFcnJvciIsIm91dGRhdGVkTW9kdWxlcyIsIm1vZHVsZXMiLCJobXJJIiwiaG1yRCIsIm1lIiwiX21haW4iLCJwYXJlbnRzIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiZmV0Y2hQcmlvcml0eSIsInByb21pc2UiLCJ0cmFja0Jsb2NraW5nUHJvbWlzZSIsImNyZWF0ZVJlcXVpcmUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfYWNjZXB0ZWRFcnJvckhhbmRsZXJzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9yZXF1aXJlU2VsZiIsImVycm9ySGFuZGxlciIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4IiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3JlYXRlU3R5bGVzaGVldCIsImZ1bGxocmVmIiwib2xkVGFnIiwibGlua1RhZyIsInJlbCIsIm5vbmNlIiwiZXJyb3JUeXBlIiwicmVhbEhyZWYiLCJmaW5kU3R5bGVzaGVldCIsImV4aXN0aW5nTGlua1RhZ3MiLCJkYXRhSHJlZiIsImV4aXN0aW5nU3R5bGVUYWdzIiwib2xkVGFncyIsIm5ld1RhZ3MiLCJhcHBseUhhbmRsZXIiLCJtaW5pQ3NzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJhcHBseUhhbmRsZXJzIiwidXBkYXRlZE1vZHVsZXNMaXN0IiwiYXMiLCJjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0IiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG1yU19qc29ucCIsIndhaXRpbmdVcGRhdGVSZXNvbHZlcyIsImxvYWRVcGRhdGVDaHVuayIsInJlYWxTcmMiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwiYWRkQWxsVG9TZXQiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsIm91dGRhdGVkTW9kdWxlSWQiLCJkZXBlbmRlbmN5IiwiZGlzcG9zZUhhbmRsZXJzIiwiY2FsbGJhY2tzIiwiZXJyb3JIYW5kbGVycyIsImRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyIsImFjY2VwdENhbGxiYWNrIiwiZGVwZW5kZW5jeUlkIiwiZXJyMiIsIm9uRXJyb3JlZCIsIm9yaWdpbmFsRXJyb3IiLCJpZ25vcmVFcnJvcmVkIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwianNvbnAiLCJyZXNwb25zZSIsInN0YXR1c1RleHQiLCJqc29uIl0sInNvdXJjZVJvb3QiOiIifQ==